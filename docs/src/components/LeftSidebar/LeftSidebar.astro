---
type Props = {
  currentPage: string;
};

const { currentPage } = Astro.props;

const base = Astro.site?.pathname ?? "/";

const pathname = currentPage.endsWith("/")
  ? currentPage.slice(0, -1)
  : currentPage;

function isCurrentPage(url: string) {
  return `/${url}` === pathname ? "page" : undefined;
}

const v = pathname.includes("/v6") ? 6 : 7;

const url = {
  introduction: `${v === 6 ? "v6/" : ""}introduction`,
  cli: `${v === 6 ? "v6/" : ""}cli`,
  node: `${v === 6 ? "v6/" : ""}node`,
  advanced: `${v === 6 ? "v6/" : ""}advanced`,
  about: `${v === 6 ? "v6/" : ""}about`,
};
---

<nav aria-labelledby="grid-left">
  <ul class="nav-groups">
    <li class="nav-group">
      <h2 class="nav-group-title">openapi-typescript</h2>
      <fieldset class="version-switcher">
        <label
          class="version"
          for="v6"
        >
          <input
            id="v6"
            checked={v === 6 || undefined}
            name="version"
            type="radio"
          />
           v6
        </label>
        <label
          class="version"
          for="v7"
        >
          <input
            id="v7"
            checked={v === 7 || undefined}
            name="version"
            type="radio"
          />
           v7 (beta)</label
        >
      </fieldset>
      <ul class="nav-group-subnav">
        <li class="nav-link">
          <a
            class="link"
            href={`${base}${url.introduction}`}
            aria-current={isCurrentPage(url.introduction)}
          >
            Introduction
          </a>
        </li>
        <li class="nav-link">
          <a
            class="link"
            href={`${base}${url.cli}`}
            aria-current={isCurrentPage(url.cli)}
          >
            CLI
          </a>
        </li>
        <li class="nav-link">
          <a
            class="link"
            href={`${base}${url.node}`}
            aria-current={isCurrentPage(url.node)}
          >
            Node.js API
          </a>
        </li>
        <li class="nav-link">
          <a
            class="link"
            href={`${base}${url.advanced}`}
            aria-current={isCurrentPage(url.advanced)}
          >
            Advanced
          </a>
        </li>
        <li class="nav-link">
          <a
            class="link"
            href={`${base}migration-guide`}
            aria-current={isCurrentPage("migration-guide")}
          >
            Migrating
          </a>
        </li>
        <li class="nav-link">
          <a
            class="link"
            href={`${base}${url.about}`}
            aria-current={isCurrentPage(url.about)}
          >
            About
          </a>
        </li>
      </ul>
    </li>
    <li class="nav-group">
      <h2 class="nav-group-title">openapi-fetch</h2>
      <ul class="nav-group-subnav">
        <li class="nav-link">
          <a
            class="link"
            href={`${base}openapi-fetch`}
            aria-current={isCurrentPage("openapi-fetch")}
          >
            Introduction
          </a>
        </li>
        <li class="nav-link">
          <a
            class="link"
            href={`${base}openapi-fetch/api`}
            aria-current={isCurrentPage("openapi-fetch/api")}
          >
            API
          </a>
        </li>
        <li class="nav-link">
          <a
            class="link"
            href={`${base}openapi-fetch/examples`}
            aria-current={isCurrentPage("openapi-fetch/examples")}
          >
            Examples
          </a>
        </li>
        <li class="nav-link">
          <a
            class="link"
            href={`${base}openapi-fetch/about`}
            aria-current={isCurrentPage("openapi-fetch/about")}
          >
            About
          </a>
        </li>
      </ul>
    </li>
  </ul>

  <script is:inline>
    window.addEventListener("DOMContentLoaded", () => {
      var target = document.querySelector('[aria-current="page"]');
      if (target && target.offsetTop > window.innerHeight - 100) {
        document.querySelector(".nav-groups").scrollTop = target.offsetTop;
      }
    });

    document.getElementById("v6").addEventListener("change", (evt) => {
      if (
        window.location.pathname === "/migration-guide" ||
        window.location.pathname.includes("/openapi-fetch")
      ) {
        return; // no /v6 version
      }
      if (evt.target.checked) {
        window.location.href = "/v6" + window.location.pathname;
      }
    });

    document.getElementById("v7").addEventListener("change", (evt) => {
      if (evt.target.checked) {
        window.location.href = window.location.pathname.replace("/v6/", "/");
      }
    });
  </script>

  <style lang="scss">
    @use "../../tokens" as *;
    @use "../../styles/util" as *;

    nav {
      padding-top: 1rem;
      width: 100%;
    }

    .nav-groups {
      display: flex;
      flex-direction: column;
      gap: 1rem;
      height: 100%;
      margin: 0;
      max-height: 100vh;
      overflow-y: auto;
      padding: 0;

      @media (min-width: 50em) {
        padding: 0;
      }
    }

    .nav-link {
      margin: 0;
    }

    .nav-group {
      margin-top: 1rem;

      &:first-of-type {
        margin-top: 0;
      }
    }

    .nav-group-subnav {
      margin-top: 0.5rem;
    }

    .nav-group-title {
      align-items: center;
      display: flex;
      gap: 0.5rem;
      white-space: nowrap;
    }

    .version {
      align-items: center;
      cursor: pointer;
      display: flex;
      font-size: 0.875rem;
      gap: 0.25rem;

      input,
      label {
        cursor: pointer;
      }

      &:hover,
      &:focus-within {
        background-color: token("color.blue.95");

        @include darkMode {
          background-color: token("color.blue.25");
        }
      }
    }

    .version-switcher {
      align-items: center;
      border: none;
      display: flex;
      gap: 0.5rem;
      margin: 0;
      padding: 0;
    }
  </style>
</nav>
