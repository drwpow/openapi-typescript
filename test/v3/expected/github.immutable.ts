/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  readonly '/': {
    /** Get Hypermedia links to resources accessible in GitHub's REST API */
    readonly get: operations['meta/root']
  }
  readonly '/admin/hooks': {
    readonly get: operations['enterprise-admin/list-global-webhooks']
    readonly post: operations['enterprise-admin/create-global-webhook']
  }
  readonly '/admin/hooks/{hook_id}': {
    readonly get: operations['enterprise-admin/get-global-webhook']
    readonly delete: operations['enterprise-admin/delete-global-webhook']
    /** Parameters that are not provided will be overwritten with the default value or removed if no default exists. */
    readonly patch: operations['enterprise-admin/update-global-webhook']
  }
  readonly '/admin/hooks/{hook_id}/pings': {
    /** This will trigger a [ping event](https://docs.github.com/enterprise-server@3.6/webhooks/#ping-event) to be sent to the webhook. */
    readonly post: operations['enterprise-admin/ping-global-webhook']
  }
  readonly '/admin/keys': {
    readonly get: operations['enterprise-admin/list-public-keys']
  }
  readonly '/admin/keys/{key_ids}': {
    readonly delete: operations['enterprise-admin/delete-public-key']
  }
  readonly '/admin/ldap/teams/{team_id}/mapping': {
    /** Updates the [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team. [LDAP synchronization](https://docs.github.com/enterprise-server@3.6/admin/identity-and-access-management/using-ldap-for-enterprise-iam/using-ldap#enabling-ldap-sync) must be enabled to map LDAP entries to a team. Use the [Create a team](https://docs.github.com/enterprise-server@3.6/rest/reference/teams/#create-a-team) endpoint to create a team with LDAP mapping. */
    readonly patch: operations['enterprise-admin/update-ldap-mapping-for-team']
  }
  readonly '/admin/ldap/teams/{team_id}/sync': {
    /** Note that this API call does not automatically initiate an LDAP sync. Rather, if a `201` is returned, the sync job is queued successfully, and is performed when the instance is ready. */
    readonly post: operations['enterprise-admin/sync-ldap-mapping-for-team']
  }
  readonly '/admin/ldap/users/{username}/mapping': {
    readonly patch: operations['enterprise-admin/update-ldap-mapping-for-user']
  }
  readonly '/admin/ldap/users/{username}/sync': {
    /** Note that this API call does not automatically initiate an LDAP sync. Rather, if a `201` is returned, the sync job is queued successfully, and is performed when the instance is ready. */
    readonly post: operations['enterprise-admin/sync-ldap-mapping-for-user']
  }
  readonly '/admin/organizations': {
    readonly post: operations['enterprise-admin/create-org']
  }
  readonly '/admin/organizations/{org}': {
    readonly patch: operations['enterprise-admin/update-org-name']
  }
  readonly '/admin/pre-receive-environments': {
    readonly get: operations['enterprise-admin/list-pre-receive-environments']
    readonly post: operations['enterprise-admin/create-pre-receive-environment']
  }
  readonly '/admin/pre-receive-environments/{pre_receive_environment_id}': {
    readonly get: operations['enterprise-admin/get-pre-receive-environment']
    /**
     * If you attempt to delete an environment that cannot be deleted, you will receive a `422 Unprocessable Entity` response.
     *
     * The possible error messages are:
     *
     * *   _Cannot modify or delete the default environment_
     * *   _Cannot delete environment that has hooks_
     * *   _Cannot delete environment when download is in progress_
     */
    readonly delete: operations['enterprise-admin/delete-pre-receive-environment']
    /** You cannot modify the default environment. If you attempt to modify the default environment, you will receive a `422 Unprocessable Entity` response. */
    readonly patch: operations['enterprise-admin/update-pre-receive-environment']
  }
  readonly '/admin/pre-receive-environments/{pre_receive_environment_id}/downloads': {
    /**
     * Triggers a new download of the environment tarball from the environment's `image_url`. When the download is finished, the newly downloaded tarball will overwrite the existing environment.
     *
     * If a download cannot be triggered, you will receive a `422 Unprocessable Entity` response.
     *
     * The possible error messages are:
     *
     * * _Cannot modify or delete the default environment_
     * * _Can not start a new download when a download is in progress_
     */
    readonly post: operations['enterprise-admin/start-pre-receive-environment-download']
  }
  readonly '/admin/pre-receive-environments/{pre_receive_environment_id}/downloads/latest': {
    /** In addition to seeing the download status at the "[Get a pre-receive environment](#get-a-pre-receive-environment)" endpoint, there is also this separate endpoint for just the download status. */
    readonly get: operations['enterprise-admin/get-download-status-for-pre-receive-environment']
  }
  readonly '/admin/pre-receive-hooks': {
    readonly get: operations['enterprise-admin/list-pre-receive-hooks']
    readonly post: operations['enterprise-admin/create-pre-receive-hook']
  }
  readonly '/admin/pre-receive-hooks/{pre_receive_hook_id}': {
    readonly get: operations['enterprise-admin/get-pre-receive-hook']
    readonly delete: operations['enterprise-admin/delete-pre-receive-hook']
    readonly patch: operations['enterprise-admin/update-pre-receive-hook']
  }
  readonly '/admin/tokens': {
    /** Lists personal access tokens for all users, including admin users. */
    readonly get: operations['enterprise-admin/list-personal-access-tokens']
  }
  readonly '/admin/tokens/{token_id}': {
    /** Deletes a personal access token. Returns a `403 - Forbidden` status when a personal access token is in use. For example, if you access this endpoint with the same personal access token that you are trying to delete, you will receive this error. */
    readonly delete: operations['enterprise-admin/delete-personal-access-token']
  }
  readonly '/admin/users': {
    /**
     * If an external authentication mechanism is used, the login name should match the login name in the external system. If you are using LDAP authentication, you should also [update the LDAP mapping](https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#update-ldap-mapping-for-a-user) for the user.
     *
     * The login name will be normalized to only contain alphanumeric characters or single hyphens. For example, if you send `"octo_cat"` as the login, a user named `"octo-cat"` will be created.
     *
     * If the login name or email address is already associated with an account, the server will return a `422` response.
     */
    readonly post: operations['enterprise-admin/create-user']
  }
  readonly '/admin/users/{username}': {
    /**
     * Deleting a user will delete all their repositories, gists, applications, and personal settings. [Suspending a user](https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#suspend-a-user) is often a better option.
     *
     * You can delete any user account except your own.
     */
    readonly delete: operations['enterprise-admin/delete-user']
    readonly patch: operations['enterprise-admin/update-username-for-user']
  }
  readonly '/admin/users/{username}/authorizations': {
    readonly post: operations['enterprise-admin/create-impersonation-o-auth-token']
    readonly delete: operations['enterprise-admin/delete-impersonation-o-auth-token']
  }
  readonly '/app': {
    /**
     * Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app's installations, see the "[List installations for the authenticated app](https://docs.github.com/enterprise-server@3.6/rest/reference/apps#list-installations-for-the-authenticated-app)" endpoint.
     *
     * You must use a [JWT](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     */
    readonly get: operations['apps/get-authenticated']
  }
  readonly '/app-manifests/{code}/conversions': {
    /** Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key), and `webhook_secret`. */
    readonly post: operations['apps/create-from-manifest']
  }
  readonly '/app/hook/config': {
    /**
     * Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
     *
     * You must use a [JWT](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     */
    readonly get: operations['apps/get-webhook-config-for-app']
    /**
     * Updates the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
     *
     * You must use a [JWT](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     */
    readonly patch: operations['apps/update-webhook-config-for-app']
  }
  readonly '/app/hook/deliveries': {
    /**
     * Returns a list of webhook deliveries for the webhook configured for a GitHub App.
     *
     * You must use a [JWT](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     */
    readonly get: operations['apps/list-webhook-deliveries']
  }
  readonly '/app/hook/deliveries/{delivery_id}': {
    /**
     * Returns a delivery for the webhook configured for a GitHub App.
     *
     * You must use a [JWT](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     */
    readonly get: operations['apps/get-webhook-delivery']
  }
  readonly '/app/hook/deliveries/{delivery_id}/attempts': {
    /**
     * Redeliver a delivery for the webhook configured for a GitHub App.
     *
     * You must use a [JWT](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     */
    readonly post: operations['apps/redeliver-webhook-delivery']
  }
  readonly '/app/installations': {
    /**
     * You must use a [JWT](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     *
     * The permissions the installation has are included under the `permissions` key.
     */
    readonly get: operations['apps/list-installations']
  }
  readonly '/app/installations/{installation_id}': {
    /**
     * Enables an authenticated GitHub App to find an installation's information using the installation id.
     *
     * You must use a [JWT](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     */
    readonly get: operations['apps/get-installation']
    /**
     * Uninstalls a GitHub App on a user, organization, or business account. If you prefer to temporarily suspend an app's access to your account's resources, then we recommend the "[Suspend an app installation](https://docs.github.com/enterprise-server@3.6/rest/reference/apps/#suspend-an-app-installation)" endpoint.
     *
     * You must use a [JWT](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     */
    readonly delete: operations['apps/delete-installation']
  }
  readonly '/app/installations/{installation_id}/access_tokens': {
    /**
     * Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the `repository_ids` when creating the token. When you omit `repository_ids`, the response does not contain the `repositories` key.
     *
     * You must use a [JWT](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     */
    readonly post: operations['apps/create-installation-access-token']
  }
  readonly '/app/installations/{installation_id}/suspended': {
    /**
     * Suspends a GitHub App on a user, organization, or business account, which blocks the app from accessing the account's resources. When a GitHub App is suspended, the app's access to the GitHub Enterprise Server API or webhook events is blocked for that account.
     *
     * You must use a [JWT](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     */
    readonly put: operations['apps/suspend-installation']
    /**
     * Removes a GitHub App installation suspension.
     *
     * You must use a [JWT](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     */
    readonly delete: operations['apps/unsuspend-installation']
  }
  readonly '/applications/grants': {
    /**
     * **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.6/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
     *
     * You can use this API to list the set of OAuth applications that have been granted access to your account. Unlike the [list your authorizations](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations#list-your-authorizations) API, this API does not manage individual tokens. This API will return one entry for each OAuth application that has been granted access to your account, regardless of the number of tokens an application has generated for your user. The list of OAuth applications returned matches what is shown on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized). The `scopes` returned are the union of scopes authorized for the application. For example, if an application has one token with `repo` scope and another token with `user` scope, the grant will return `["repo", "user"]`.
     */
    readonly get: operations['oauth-authorizations/list-grants']
  }
  readonly '/applications/grants/{grant_id}': {
    /** **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/). */
    readonly get: operations['oauth-authorizations/get-grant']
    /**
     * **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.6/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
     *
     * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for your user. Once deleted, the application has no access to your account and is no longer listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
     */
    readonly delete: operations['oauth-authorizations/delete-grant']
  }
  readonly '/applications/{client_id}/grant': {
    /**
     * OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.6/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid OAuth `access_token` as an input parameter and the grant for the token's owner will be deleted.
     * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
     */
    readonly delete: operations['apps/delete-authorization']
  }
  readonly '/applications/{client_id}/token': {
    /** OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.6/rest/overview/other-authentication-methods#basic-authentication) to use this endpoint, where the username is the OAuth application `client_id` and the password is its `client_secret`. Invalid tokens will return `404 NOT FOUND`. */
    readonly post: operations['apps/check-token']
    /** OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.6/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. */
    readonly delete: operations['apps/delete-token']
    /** OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.6/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`. */
    readonly patch: operations['apps/reset-token']
  }
  readonly '/applications/{client_id}/token/scoped': {
    /** Use a non-scoped user-to-server OAuth access token to create a repository scoped and/or permission scoped user-to-server OAuth access token. You can specify which repositories the token can access and which permissions are granted to the token. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.6/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`. */
    readonly post: operations['apps/scope-token']
  }
  readonly '/apps/{app_slug}': {
    /**
     * **Note**: The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).
     *
     * If the GitHub App you specify is public, you can access this endpoint without authenticating. If the GitHub App you specify is private, you must authenticate with a [personal access token](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or an [installation access token](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
     */
    readonly get: operations['apps/get-by-slug']
  }
  readonly '/authorizations': {
    /** **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/). */
    readonly get: operations['oauth-authorizations/list-authorizations']
    /**
     * **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.6/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
     *
     * **Warning:** Apps must use the [web application flow](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub Enterprise Server SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub Enterprise Server SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
     *
     * Creates OAuth tokens using [Basic Authentication](https://docs.github.com/enterprise-server@3.6/rest/overview/other-authentication-methods#basic-authentication). If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/enterprise-server@3.6/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
     *
     * To create tokens for a particular OAuth application using this endpoint, you must authenticate as the user you want to create an authorization for and provide the app's client ID and secret, found on your OAuth application's settings page. If your OAuth application intends to create multiple tokens for one user, use `fingerprint` to differentiate between them.
     *
     * You can also create tokens on GitHub Enterprise Server from the [personal access tokens settings](https://github.com/settings/tokens) page. Read more about these tokens in [the GitHub Help documentation](https://docs.github.com/articles/creating-an-access-token-for-command-line-use).
     *
     * Organizations that enforce SAML SSO require personal access tokens to be allowed. Read more about allowing tokens in [the GitHub Help documentation](https://docs.github.com/articles/about-identity-and-access-management-with-saml-single-sign-on).
     */
    readonly post: operations['oauth-authorizations/create-authorization']
  }
  readonly '/authorizations/clients/{client_id}': {
    /**
     * **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.6/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
     *
     * **Warning:** Apps must use the [web application flow](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub Enterprise Server SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub Enterprise Server SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
     *
     * Creates a new authorization for the specified OAuth application, only if an authorization for that application doesn't already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.
     *
     * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/enterprise-server@3.6/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
     *
     * **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.6/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
     */
    readonly put: operations['oauth-authorizations/get-or-create-authorization-for-app']
  }
  readonly '/authorizations/clients/{client_id}/{fingerprint}': {
    /**
     * **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.6/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
     *
     * **Warning:** Apps must use the [web application flow](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub Enterprise Server SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub Enterprise Server SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
     *
     * This method will create a new authorization for the specified OAuth application, only if an authorization for that application and fingerprint do not already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. `fingerprint` is a unique string to distinguish an authorization from others created for the same client ID and user. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.
     *
     * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/enterprise-server@3.6/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
     */
    readonly put: operations['oauth-authorizations/get-or-create-authorization-for-app-and-fingerprint']
  }
  readonly '/authorizations/{authorization_id}': {
    /** **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/). */
    readonly get: operations['oauth-authorizations/get-authorization']
    /** **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/). */
    readonly delete: operations['oauth-authorizations/delete-authorization']
    /**
     * **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.6/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
     *
     * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/enterprise-server@3.6/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
     *
     * You can only send one of these scope keys at a time.
     */
    readonly patch: operations['oauth-authorizations/update-authorization']
  }
  readonly '/codes_of_conduct': {
    readonly get: operations['codes-of-conduct/get-all-codes-of-conduct']
  }
  readonly '/codes_of_conduct/{key}': {
    readonly get: operations['codes-of-conduct/get-conduct-code']
  }
  readonly '/emojis': {
    /** Lists all the emojis available to use on GitHub Enterprise Server. */
    readonly get: operations['emojis/get']
  }
  readonly '/enterprise/announcement': {
    /** Gets the current message and expiration date of the global announcement banner in your enterprise. */
    readonly get: operations['enterprise-admin/get-announcement']
    /** Removes the global announcement banner in your enterprise. */
    readonly delete: operations['enterprise-admin/remove-announcement']
    /** Sets the message and expiration time for the global announcement banner in your enterprise. */
    readonly patch: operations['enterprise-admin/set-announcement']
  }
  readonly '/enterprise/settings/license': {
    readonly get: operations['enterprise-admin/get-license-information']
  }
  readonly '/enterprise/stats/all': {
    readonly get: operations['enterprise-admin/get-all-stats']
  }
  readonly '/enterprise/stats/comments': {
    readonly get: operations['enterprise-admin/get-comment-stats']
  }
  readonly '/enterprise/stats/gists': {
    readonly get: operations['enterprise-admin/get-gist-stats']
  }
  readonly '/enterprise/stats/hooks': {
    readonly get: operations['enterprise-admin/get-hooks-stats']
  }
  readonly '/enterprise/stats/issues': {
    readonly get: operations['enterprise-admin/get-issue-stats']
  }
  readonly '/enterprise/stats/milestones': {
    readonly get: operations['enterprise-admin/get-milestone-stats']
  }
  readonly '/enterprise/stats/orgs': {
    readonly get: operations['enterprise-admin/get-org-stats']
  }
  readonly '/enterprise/stats/pages': {
    readonly get: operations['enterprise-admin/get-pages-stats']
  }
  readonly '/enterprise/stats/pulls': {
    readonly get: operations['enterprise-admin/get-pull-request-stats']
  }
  readonly '/enterprise/stats/repos': {
    readonly get: operations['enterprise-admin/get-repo-stats']
  }
  readonly '/enterprise/stats/users': {
    readonly get: operations['enterprise-admin/get-user-stats']
  }
  readonly '/enterprises/{enterprise}/actions/cache/usage': {
    /**
     * Gets the total GitHub Actions cache usage for an enterprise.
     * The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    readonly get: operations['actions/get-actions-cache-usage-for-enterprise']
  }
  readonly '/enterprises/{enterprise}/actions/cache/usage-policy': {
    /**
     * Gets the GitHub Actions cache usage policy for an enterprise.
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * GitHub Apps must have the `enterprise_administration:write` permission to use this endpoint.
     */
    readonly get: operations['actions/get-actions-cache-usage-policy-for-enterprise']
    /**
     * Sets the GitHub Actions cache usage policy for an enterprise.
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * GitHub Apps must have the `enterprise_administration:write` permission to use this endpoint.
     */
    readonly patch: operations['actions/set-actions-cache-usage-policy-for-enterprise']
  }
  readonly '/enterprises/{enterprise}/actions/permissions': {
    /**
     * Gets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    readonly get: operations['enterprise-admin/get-github-actions-permissions-enterprise']
    /**
     * Sets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    readonly put: operations['enterprise-admin/set-github-actions-permissions-enterprise']
  }
  readonly '/enterprises/{enterprise}/actions/permissions/organizations': {
    /**
     * Lists the organizations that are selected to have GitHub Actions enabled in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    readonly get: operations['enterprise-admin/list-selected-organizations-enabled-github-actions-enterprise']
    /**
     * Replaces the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    readonly put: operations['enterprise-admin/set-selected-organizations-enabled-github-actions-enterprise']
  }
  readonly '/enterprises/{enterprise}/actions/permissions/organizations/{org_id}': {
    /**
     * Adds an organization to the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    readonly put: operations['enterprise-admin/enable-selected-organization-github-actions-enterprise']
    /**
     * Removes an organization from the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    readonly delete: operations['enterprise-admin/disable-selected-organization-github-actions-enterprise']
  }
  readonly '/enterprises/{enterprise}/actions/permissions/selected-actions': {
    /**
     * Gets the selected actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    readonly get: operations['enterprise-admin/get-allowed-actions-enterprise']
    /**
     * Sets the actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    readonly put: operations['enterprise-admin/set-allowed-actions-enterprise']
  }
  readonly '/enterprises/{enterprise}/actions/permissions/workflow': {
    /**
     * Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an enterprise,
     * as well as whether GitHub Actions can submit approving pull request reviews. For more information, see
     * "[Enforcing a policy for workflow permissions in your enterprise](https://docs.github.com/enterprise-server@3.6/admin/policies/enforcing-policies-for-your-enterprise/enforcing-policies-for-github-actions-in-your-enterprise#enforcing-a-policy-for-workflow-permissions-in-your-enterprise)."
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint. GitHub Apps must have the `enterprise_administration:write` permission to use this endpoint.
     */
    readonly get: operations['actions/get-github-actions-default-workflow-permissions-enterprise']
    /**
     * Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an enterprise, and sets
     * whether GitHub Actions can submit approving pull request reviews. For more information, see
     * "[Enforcing a policy for workflow permissions in your enterprise](https://docs.github.com/enterprise-server@3.6/admin/policies/enforcing-policies-for-your-enterprise/enforcing-policies-for-github-actions-in-your-enterprise#enforcing-a-policy-for-workflow-permissions-in-your-enterprise)."
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * GitHub Apps must have the `enterprise_administration:write` permission to use this endpoint.
     */
    readonly put: operations['actions/set-github-actions-default-workflow-permissions-enterprise']
  }
  readonly '/enterprises/{enterprise}/actions/runner-groups': {
    /**
     * Lists all self-hosted runner groups for an enterprise.
     *
     * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     */
    readonly get: operations['enterprise-admin/list-self-hosted-runner-groups-for-enterprise']
    /**
     * Creates a new self-hosted runner group for an enterprise.
     *
     * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     */
    readonly post: operations['enterprise-admin/create-self-hosted-runner-group-for-enterprise']
  }
  readonly '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}': {
    /**
     * Gets a specific self-hosted runner group for an enterprise.
     *
     * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     */
    readonly get: operations['enterprise-admin/get-self-hosted-runner-group-for-enterprise']
    /**
     * Deletes a self-hosted runner group for an enterprise.
     *
     * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     */
    readonly delete: operations['enterprise-admin/delete-self-hosted-runner-group-from-enterprise']
    /**
     * Updates the `name` and `visibility` of a self-hosted runner group in an enterprise.
     *
     * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     */
    readonly patch: operations['enterprise-admin/update-self-hosted-runner-group-for-enterprise']
  }
  readonly '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations': {
    /**
     * Lists the organizations with access to a self-hosted runner group.
     *
     * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     */
    readonly get: operations['enterprise-admin/list-org-access-to-self-hosted-runner-group-in-enterprise']
    /**
     * Replaces the list of organizations that have access to a self-hosted runner configured in an enterprise.
     *
     * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     */
    readonly put: operations['enterprise-admin/set-org-access-to-self-hosted-runner-group-in-enterprise']
  }
  readonly '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}': {
    /**
     * Adds an organization to the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise)."
     *
     * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     */
    readonly put: operations['enterprise-admin/add-org-access-to-self-hosted-runner-group-in-enterprise']
    /**
     * Removes an organization from the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise)."
     *
     * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     */
    readonly delete: operations['enterprise-admin/remove-org-access-to-self-hosted-runner-group-in-enterprise']
  }
  readonly '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners': {
    /**
     * Lists the self-hosted runners that are in a specific enterprise group.
     *
     * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     */
    readonly get: operations['enterprise-admin/list-self-hosted-runners-in-group-for-enterprise']
    /**
     * Replaces the list of self-hosted runners that are part of an enterprise runner group.
     *
     * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     */
    readonly put: operations['enterprise-admin/set-self-hosted-runners-in-group-for-enterprise']
  }
  readonly '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}': {
    /**
     * Adds a self-hosted runner to a runner group configured in an enterprise.
     *
     * You must authenticate using an access token with the `manage_runners:enterprise`
     * scope to use this endpoint.
     */
    readonly put: operations['enterprise-admin/add-self-hosted-runner-to-group-for-enterprise']
    /**
     * Removes a self-hosted runner from a group configured in an enterprise. The runner is then returned to the default group.
     *
     * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     */
    readonly delete: operations['enterprise-admin/remove-self-hosted-runner-from-group-for-enterprise']
  }
  readonly '/enterprises/{enterprise}/actions/runners': {
    /**
     * Lists all self-hosted runners configured for an enterprise.
     *
     * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     */
    readonly get: operations['enterprise-admin/list-self-hosted-runners-for-enterprise']
  }
  readonly '/enterprises/{enterprise}/actions/runners/downloads': {
    /**
     * Lists binaries for the runner application that you can download and run.
     *
     * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     */
    readonly get: operations['enterprise-admin/list-runner-applications-for-enterprise']
  }
  readonly '/enterprises/{enterprise}/actions/runners/registration-token': {
    /**
     * Returns a token that you can pass to the `config` script. The token expires after one hour.
     *
     * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     *
     * #### Example using registration token
     *
     * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
     *
     * ```
     * ./config.sh --url https://github.com/enterprises/octo-enterprise --token TOKEN
     * ```
     */
    readonly post: operations['enterprise-admin/create-registration-token-for-enterprise']
  }
  readonly '/enterprises/{enterprise}/actions/runners/remove-token': {
    /**
     * Returns a token that you can pass to the `config` script to remove a self-hosted runner from an enterprise. The token expires after one hour.
     *
     * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     *
     * #### Example using remove token
     *
     * To remove your self-hosted runner from an enterprise, replace `TOKEN` with the remove token provided by this
     * endpoint.
     *
     * ```
     * ./config.sh remove --token TOKEN
     * ```
     */
    readonly post: operations['enterprise-admin/create-remove-token-for-enterprise']
  }
  readonly '/enterprises/{enterprise}/actions/runners/{runner_id}': {
    /**
     * Gets a specific self-hosted runner configured in an enterprise.
     *
     * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     */
    readonly get: operations['enterprise-admin/get-self-hosted-runner-for-enterprise']
    /**
     * Forces the removal of a self-hosted runner from an enterprise. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
     *
     * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     */
    readonly delete: operations['enterprise-admin/delete-self-hosted-runner-from-enterprise']
  }
  readonly '/enterprises/{enterprise}/actions/runners/{runner_id}/labels': {
    /**
     * Lists all labels for a self-hosted runner configured in an enterprise.
     *
     * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     */
    readonly get: operations['enterprise-admin/list-labels-for-self-hosted-runner-for-enterprise']
    /**
     * Remove all previous custom labels and set the new custom labels for a specific
     * self-hosted runner configured in an enterprise.
     *
     * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     */
    readonly put: operations['enterprise-admin/set-custom-labels-for-self-hosted-runner-for-enterprise']
    /**
     * Add custom labels to a self-hosted runner configured in an enterprise.
     *
     * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     */
    readonly post: operations['enterprise-admin/add-custom-labels-to-self-hosted-runner-for-enterprise']
    /**
     * Remove all custom labels from a self-hosted runner configured in an
     * enterprise. Returns the remaining read-only labels from the runner.
     *
     * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     */
    readonly delete: operations['enterprise-admin/remove-all-custom-labels-from-self-hosted-runner-for-enterprise']
  }
  readonly '/enterprises/{enterprise}/actions/runners/{runner_id}/labels/{name}': {
    /**
     * Remove a custom label from a self-hosted runner configured
     * in an enterprise. Returns the remaining labels from the runner.
     *
     * This endpoint returns a `404 Not Found` status if the custom label is not
     * present on the runner.
     *
     * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
     */
    readonly delete: operations['enterprise-admin/remove-custom-label-from-self-hosted-runner-for-enterprise']
  }
  readonly '/enterprises/{enterprise}/audit-log': {
    /** Gets the audit log for an enterprise. To use this endpoint, you must be an enterprise admin, and you must use an access token with the `admin:enterprise` scope. */
    readonly get: operations['enterprise-admin/get-audit-log']
  }
  readonly '/enterprises/{enterprise}/secret-scanning/alerts': {
    /**
     * Lists secret scanning alerts for eligible repositories in an enterprise, from newest to oldest.
     * To use this endpoint, you must be a member of the enterprise, and you must use an access token with the `repo` scope or `security_events` scope. Alerts are only returned for organizations in the enterprise for which you are an organization owner or a [security manager](https://docs.github.com/enterprise-server@3.6/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).
     */
    readonly get: operations['secret-scanning/list-alerts-for-enterprise']
  }
  readonly '/enterprises/{enterprise}/settings/billing/advanced-security': {
    /**
     * Gets the GitHub Advanced Security active committers for an enterprise per repository.
     *
     * Each distinct user login across all repositories is counted as a single Advanced Security seat, so the `total_advanced_security_committers` is not the sum of active_users for each repository.
     *
     * The total number of repositories with committer information is tracked by the `total_count` field.
     */
    readonly get: operations['billing/get-github-advanced-security-billing-ghe']
  }
  readonly '/events': {
    /** We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago. */
    readonly get: operations['activity/list-public-events']
  }
  readonly '/feeds': {
    /**
     * GitHub Enterprise Server provides several timeline resources in [Atom](http://en.wikipedia.org/wiki/Atom_(standard)) format. The Feeds API lists all the feeds available to the authenticated user:
     *
     * *   **Timeline**: The GitHub Enterprise Server global public timeline
     * *   **User**: The public timeline for any user, using [URI template](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#hypermedia)
     * *   **Current user public**: The public timeline for the authenticated user
     * *   **Current user**: The private timeline for the authenticated user
     * *   **Current user actor**: The private timeline for activity created by the authenticated user
     * *   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.
     * *   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub Enterprise Server.
     *
     * **Note**: Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/enterprise-server@3.6/rest/overview/other-authentication-methods#basic-authentication) since current feed URIs use the older, non revocable auth tokens.
     */
    readonly get: operations['activity/get-feeds']
  }
  readonly '/gists': {
    /** Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists: */
    readonly get: operations['gists/list']
    /**
     * Allows you to add a new gist with one or more files.
     *
     * **Note:** Don't name your files "gistfile" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.
     */
    readonly post: operations['gists/create']
  }
  readonly '/gists/public': {
    /**
     * List public gists sorted by most recently updated to least recently updated.
     *
     * Note: With [pagination](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.
     */
    readonly get: operations['gists/list-public']
  }
  readonly '/gists/starred': {
    /** List the authenticated user's starred gists: */
    readonly get: operations['gists/list-starred']
  }
  readonly '/gists/{gist_id}': {
    readonly get: operations['gists/get']
    readonly delete: operations['gists/delete']
    /** Allows you to update a gist's description and to update, delete, or rename gist files. Files from the previous version of the gist that aren't explicitly changed during an edit are unchanged. */
    readonly patch: operations['gists/update']
  }
  readonly '/gists/{gist_id}/comments': {
    readonly get: operations['gists/list-comments']
    readonly post: operations['gists/create-comment']
  }
  readonly '/gists/{gist_id}/comments/{comment_id}': {
    readonly get: operations['gists/get-comment']
    readonly delete: operations['gists/delete-comment']
    readonly patch: operations['gists/update-comment']
  }
  readonly '/gists/{gist_id}/commits': {
    readonly get: operations['gists/list-commits']
  }
  readonly '/gists/{gist_id}/forks': {
    readonly get: operations['gists/list-forks']
    readonly post: operations['gists/fork']
  }
  readonly '/gists/{gist_id}/star': {
    readonly get: operations['gists/check-is-starred']
    /** Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#http-verbs)." */
    readonly put: operations['gists/star']
    readonly delete: operations['gists/unstar']
  }
  readonly '/gists/{gist_id}/{sha}': {
    readonly get: operations['gists/get-revision']
  }
  readonly '/gitignore/templates': {
    /** List all templates available to pass as an option when [creating a repository](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#create-a-repository-for-the-authenticated-user). */
    readonly get: operations['gitignore/get-all-templates']
  }
  readonly '/gitignore/templates/{name}': {
    /**
     * The API also allows fetching the source of a single template.
     * Use the raw [media type](https://docs.github.com/enterprise-server@3.6/rest/overview/media-types/) to get the raw contents.
     */
    readonly get: operations['gitignore/get-template']
  }
  readonly '/installation/repositories': {
    /**
     * List repositories that an app installation can access.
     *
     * You must use an [installation access token](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
     */
    readonly get: operations['apps/list-repos-accessible-to-installation']
  }
  readonly '/installation/token': {
    /**
     * Revokes the installation token you're using to authenticate as an installation and access this endpoint.
     *
     * Once an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the "[Create an installation access token for an app](https://docs.github.com/enterprise-server@3.6/rest/reference/apps#create-an-installation-access-token-for-an-app)" endpoint.
     *
     * You must use an [installation access token](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
     */
    readonly delete: operations['apps/revoke-installation-access-token']
  }
  readonly '/issues': {
    /**
     * List issues assigned to the authenticated user across all visible repositories including owned repositories, member
     * repositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not
     * necessarily assigned to you.
     *
     *
     * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
     * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
     * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
     * request id, use the "[List pull requests](https://docs.github.com/enterprise-server@3.6/rest/reference/pulls#list-pull-requests)" endpoint.
     */
    readonly get: operations['issues/list']
  }
  readonly '/licenses': {
    readonly get: operations['licenses/get-all-commonly-used']
  }
  readonly '/licenses/{license}': {
    readonly get: operations['licenses/get']
  }
  readonly '/markdown': {
    readonly post: operations['markdown/render']
  }
  readonly '/markdown/raw': {
    /** You must send Markdown as plain text (using a `Content-Type` header of `text/plain` or `text/x-markdown`) to this endpoint, rather than using JSON format. In raw mode, [GitHub Flavored Markdown](https://github.github.com/gfm/) is not supported and Markdown will be rendered in plain format like a README.md file. Markdown content must be 400 KB or less. */
    readonly post: operations['markdown/render-raw']
  }
  readonly '/meta': {
    readonly get: operations['meta/get']
  }
  readonly '/networks/{owner}/{repo}/events': {
    readonly get: operations['activity/list-public-events-for-repo-network']
  }
  readonly '/notifications': {
    /** List all notifications for the current user, sorted by most recently updated. */
    readonly get: operations['activity/list-notifications-for-authenticated-user']
    /** Marks all notifications as "read" for the current user. If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub Enterprise Server will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List notifications for the authenticated user](https://docs.github.com/enterprise-server@3.6/rest/reference/activity#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`. */
    readonly put: operations['activity/mark-notifications-as-read']
  }
  readonly '/notifications/threads/{thread_id}': {
    /** Gets information about a notification thread. */
    readonly get: operations['activity/get-thread']
    /** Marks a thread as "read." Marking a thread as "read" is equivalent to clicking a notification in your notification inbox on GitHub Enterprise Server: https://github.com/notifications. */
    readonly patch: operations['activity/mark-thread-as-read']
  }
  readonly '/notifications/threads/{thread_id}/subscription': {
    /**
     * This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/enterprise-server@3.6/rest/reference/activity#get-a-repository-subscription).
     *
     * Note that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.
     */
    readonly get: operations['activity/get-thread-subscription-for-authenticated-user']
    /**
     * If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.
     *
     * You can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.
     *
     * Unsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://docs.github.com/enterprise-server@3.6/rest/reference/activity#delete-a-thread-subscription) endpoint.
     */
    readonly put: operations['activity/set-thread-subscription']
    /** Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/enterprise-server@3.6/rest/reference/activity#set-a-thread-subscription) endpoint and set `ignore` to `true`. */
    readonly delete: operations['activity/delete-thread-subscription']
  }
  readonly '/octocat': {
    /** Get the octocat as ASCII art */
    readonly get: operations['meta/get-octocat']
  }
  readonly '/organizations': {
    /**
     * Lists all organizations, in the order that they were created on GitHub Enterprise Server.
     *
     * **Note:** Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of organizations.
     */
    readonly get: operations['orgs/list']
  }
  readonly '/organizations/{organization_id}/custom_roles': {
    /**
     * List the custom repository roles available in this organization. In order to see custom
     * repository roles in an organization, the authenticated user must be an organization owner.
     *
     * To use this endpoint the authenticated user must be an administrator for the organization or of an repository of the organizaiton and must use an access token with `admin:org repo` scope.
     * GitHub Apps must have the `organization_custom_roles:read` organization permission to use this endpoint.
     *
     * For more information on custom repository roles, see "[Managing custom repository roles for an organization](https://docs.github.com/enterprise-server@3.6/organizations/managing-peoples-access-to-your-organization-with-roles/managing-custom-repository-roles-for-an-organization)".
     */
    readonly get: operations['orgs/list-custom-roles']
  }
  readonly '/orgs/{org}': {
    /**
     * To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).
     *
     * GitHub Apps with the `Organization plan` permission can use this endpoint to retrieve information about an organization's GitHub Enterprise Server plan. See "[Authenticating with GitHub Apps](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/authenticating-with-github-apps/)" for details. For an example response, see 'Response with GitHub Enterprise Server plan information' below."
     */
    readonly get: operations['orgs/get']
    /**
     * **Parameter Deprecation Notice:** GitHub Enterprise Server will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).
     *
     * Enables an authenticated organization owner with the `admin:org` scope to update the organization's profile and member privileges.
     */
    readonly patch: operations['orgs/update']
  }
  readonly '/orgs/{org}/actions/cache/usage': {
    /**
     * Gets the total GitHub Actions cache usage for an organization.
     * The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
     * You must authenticate using an access token with the `read:org` scope to use this endpoint. GitHub Apps must have the `organization_admistration:read` permission to use this endpoint.
     */
    readonly get: operations['actions/get-actions-cache-usage-for-org']
  }
  readonly '/orgs/{org}/actions/cache/usage-by-repository': {
    /**
     * Lists repositories and their GitHub Actions cache usage for an organization.
     * The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
     * You must authenticate using an access token with the `read:org` scope to use this endpoint. GitHub Apps must have the `organization_admistration:read` permission to use this endpoint.
     */
    readonly get: operations['actions/get-actions-cache-usage-by-repo-for-org']
  }
  readonly '/orgs/{org}/actions/permissions': {
    /**
     * Gets the GitHub Actions permissions policy for repositories and allowed actions in an organization.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
     */
    readonly get: operations['actions/get-github-actions-permissions-organization']
    /**
     * Sets the GitHub Actions permissions policy for repositories and allowed actions in an organization.
     *
     * If the organization belongs to an enterprise that has set restrictive permissions at the enterprise level, such as `allowed_actions` to `selected` actions, then you cannot override them for the organization.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
     */
    readonly put: operations['actions/set-github-actions-permissions-organization']
  }
  readonly '/orgs/{org}/actions/permissions/repositories': {
    /**
     * Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
     */
    readonly get: operations['actions/list-selected-repositories-enabled-github-actions-organization']
    /**
     * Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
     */
    readonly put: operations['actions/set-selected-repositories-enabled-github-actions-organization']
  }
  readonly '/orgs/{org}/actions/permissions/repositories/{repository_id}': {
    /**
     * Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
     */
    readonly put: operations['actions/enable-selected-repository-github-actions-organization']
    /**
     * Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
     */
    readonly delete: operations['actions/disable-selected-repository-github-actions-organization']
  }
  readonly '/orgs/{org}/actions/permissions/selected-actions': {
    /**
     * Gets the selected actions that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).""
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
     */
    readonly get: operations['actions/get-allowed-actions-organization']
    /**
     * Sets the actions that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
     *
     * If the organization belongs to an enterprise that has `selected` actions set at the enterprise level, then you cannot override any of the enterprise's allowed actions settings.
     *
     * To use the `patterns_allowed` setting for private repositories, the organization must belong to an enterprise. If the organization does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories in the organization.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
     */
    readonly put: operations['actions/set-allowed-actions-organization']
  }
  readonly '/orgs/{org}/actions/permissions/workflow': {
    /**
     * Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization,
     * as well as whether GitHub Actions can submit approving pull request reviews. For more information, see
     * "[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/enterprise-server@3.6/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization)."
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
     */
    readonly get: operations['actions/get-github-actions-default-workflow-permissions-organization']
    /**
     * Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization, and sets if GitHub Actions
     * can submit approving pull request reviews. For more information, see
     * "[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/enterprise-server@3.6/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization)."
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
     */
    readonly put: operations['actions/set-github-actions-default-workflow-permissions-organization']
  }
  readonly '/orgs/{org}/actions/runner-groups': {
    /**
     * Lists all self-hosted runner groups configured in an organization and inherited from an enterprise.
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    readonly get: operations['actions/list-self-hosted-runner-groups-for-org']
    /**
     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
     *
     * Creates a new self-hosted runner group for an organization.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    readonly post: operations['actions/create-self-hosted-runner-group-for-org']
  }
  readonly '/orgs/{org}/actions/runner-groups/{runner_group_id}': {
    /**
     * Gets a specific self-hosted runner group for an organization.
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    readonly get: operations['actions/get-self-hosted-runner-group-for-org']
    /**
     * Deletes a self-hosted runner group for an organization.
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    readonly delete: operations['actions/delete-self-hosted-runner-group-from-org']
    /**
     * Updates the `name` and `visibility` of a self-hosted runner group in an organization.
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    readonly patch: operations['actions/update-self-hosted-runner-group-for-org']
  }
  readonly '/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories': {
    /**
     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
     *
     * Lists the repositories with access to a self-hosted runner group configured in an organization.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    readonly get: operations['actions/list-repo-access-to-self-hosted-runner-group-in-org']
    /**
     * Replaces the list of repositories that have access to a self-hosted runner group configured in an organization.
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    readonly put: operations['actions/set-repo-access-to-self-hosted-runner-group-in-org']
  }
  readonly '/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}': {
    /**
     * Adds a repository to the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization)."
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    readonly put: operations['actions/add-repo-access-to-self-hosted-runner-group-in-org']
    /**
     * Removes a repository from the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization)."
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    readonly delete: operations['actions/remove-repo-access-to-self-hosted-runner-group-in-org']
  }
  readonly '/orgs/{org}/actions/runner-groups/{runner_group_id}/runners': {
    /**
     * Lists self-hosted runners that are in a specific organization group.
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    readonly get: operations['actions/list-self-hosted-runners-in-group-for-org']
    /**
     * Replaces the list of self-hosted runners that are part of an organization runner group.
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    readonly put: operations['actions/set-self-hosted-runners-in-group-for-org']
  }
  readonly '/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}': {
    /**
     * Adds a self-hosted runner to a runner group configured in an organization.
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    readonly put: operations['actions/add-self-hosted-runner-to-group-for-org']
    /**
     * Removes a self-hosted runner from a group configured in an organization. The runner is then returned to the default group.
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    readonly delete: operations['actions/remove-self-hosted-runner-from-group-for-org']
  }
  readonly '/orgs/{org}/actions/runners': {
    /**
     * Lists all self-hosted runners configured in an organization.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    readonly get: operations['actions/list-self-hosted-runners-for-org']
  }
  readonly '/orgs/{org}/actions/runners/downloads': {
    /**
     * Lists binaries for the runner application that you can download and run.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    readonly get: operations['actions/list-runner-applications-for-org']
  }
  readonly '/orgs/{org}/actions/runners/registration-token': {
    /**
     * Returns a token that you can pass to the `config` script. The token expires after one hour.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     *
     * #### Example using registration token
     *
     * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
     *
     * ```
     * ./config.sh --url https://github.com/octo-org --token TOKEN
     * ```
     */
    readonly post: operations['actions/create-registration-token-for-org']
  }
  readonly '/orgs/{org}/actions/runners/remove-token': {
    /**
     * Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     *
     * #### Example using remove token
     *
     * To remove your self-hosted runner from an organization, replace `TOKEN` with the remove token provided by this
     * endpoint.
     *
     * ```
     * ./config.sh remove --token TOKEN
     * ```
     */
    readonly post: operations['actions/create-remove-token-for-org']
  }
  readonly '/orgs/{org}/actions/runners/{runner_id}': {
    /**
     * Gets a specific self-hosted runner configured in an organization.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    readonly get: operations['actions/get-self-hosted-runner-for-org']
    /**
     * Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    readonly delete: operations['actions/delete-self-hosted-runner-from-org']
  }
  readonly '/orgs/{org}/actions/runners/{runner_id}/labels': {
    /**
     * Lists all labels for a self-hosted runner configured in an organization.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    readonly get: operations['actions/list-labels-for-self-hosted-runner-for-org']
    /**
     * Remove all previous custom labels and set the new custom labels for a specific
     * self-hosted runner configured in an organization.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    readonly put: operations['actions/set-custom-labels-for-self-hosted-runner-for-org']
    /**
     * Add custom labels to a self-hosted runner configured in an organization.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    readonly post: operations['actions/add-custom-labels-to-self-hosted-runner-for-org']
    /**
     * Remove all custom labels from a self-hosted runner configured in an
     * organization. Returns the remaining read-only labels from the runner.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    readonly delete: operations['actions/remove-all-custom-labels-from-self-hosted-runner-for-org']
  }
  readonly '/orgs/{org}/actions/runners/{runner_id}/labels/{name}': {
    /**
     * Remove a custom label from a self-hosted runner configured
     * in an organization. Returns the remaining labels from the runner.
     *
     * This endpoint returns a `404 Not Found` status if the custom label is not
     * present on the runner.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    readonly delete: operations['actions/remove-custom-label-from-self-hosted-runner-for-org']
  }
  readonly '/orgs/{org}/actions/secrets': {
    /** Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */
    readonly get: operations['actions/list-org-secrets']
  }
  readonly '/orgs/{org}/actions/secrets/public-key': {
    /** Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */
    readonly get: operations['actions/get-org-public-key']
  }
  readonly '/orgs/{org}/actions/secrets/{secret_name}': {
    /** Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */
    readonly get: operations['actions/get-org-secret']
    /**
     * Creates or updates an organization secret with an encrypted value. Encrypt your secret using
     * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
     * token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to
     * use this endpoint.
     *
     * #### Example encrypting a secret using Node.js
     *
     * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
     *
     * ```
     * const sodium = require('tweetsodium');
     *
     * const key = "base64-encoded-public-key";
     * const value = "plain-text-secret";
     *
     * // Convert the message and key to Uint8Array's (Buffer implements that interface)
     * const messageBytes = Buffer.from(value);
     * const keyBytes = Buffer.from(key, 'base64');
     *
     * // Encrypt using LibSodium.
     * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
     *
     * // Base64 the encrypted secret
     * const encrypted = Buffer.from(encryptedBytes).toString('base64');
     *
     * console.log(encrypted);
     * ```
     *
     *
     * #### Example encrypting a secret using Python
     *
     * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
     *
     * ```
     * from base64 import b64encode
     * from nacl import encoding, public
     *
     * def encrypt(public_key: str, secret_value: str) -> str:
     *   """Encrypt a Unicode string using the public key."""
     *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
     *   sealed_box = public.SealedBox(public_key)
     *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
     *   return b64encode(encrypted).decode("utf-8")
     * ```
     *
     * #### Example encrypting a secret using C#
     *
     * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
     *
     * ```
     * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
     * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
     *
     * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
     *
     * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
     * ```
     *
     * #### Example encrypting a secret using Ruby
     *
     * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
     *
     * ```ruby
     * require "rbnacl"
     * require "base64"
     *
     * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
     * public_key = RbNaCl::PublicKey.new(key)
     *
     * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
     * encrypted_secret = box.encrypt("my_secret")
     *
     * # Print the base64 encoded secret
     * puts Base64.strict_encode64(encrypted_secret)
     * ```
     */
    readonly put: operations['actions/create-or-update-org-secret']
    /** Deletes a secret in an organization using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */
    readonly delete: operations['actions/delete-org-secret']
  }
  readonly '/orgs/{org}/actions/secrets/{secret_name}/repositories': {
    /** Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */
    readonly get: operations['actions/list-selected-repos-for-org-secret']
    /** Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.6/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */
    readonly put: operations['actions/set-selected-repos-for-org-secret']
  }
  readonly '/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}': {
    /** Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.6/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */
    readonly put: operations['actions/add-selected-repo-to-org-secret']
    /** Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.6/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */
    readonly delete: operations['actions/remove-selected-repo-from-org-secret']
  }
  readonly '/orgs/{org}/audit-log': {
    /**
     * Gets the audit log for an organization. For more information, see "[Reviewing the audit log for your organization](https://docs.github.com/enterprise-server@3.6/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization)."
     *
     * To use this endpoint, you must be an organization owner, and you must use an access token with the `admin:org` scope. GitHub Apps must have the `organization_administration` read permission to use this endpoint.
     *
     * By default, the response includes up to 30 events from the past three months. Use the `phrase` parameter to filter results and retrieve older events. For example, use the `phrase` parameter with the `created` qualifier to filter events based on when the events occurred. For more information, see "[Reviewing the audit log for your organization](https://docs.github.com/enterprise-server@3.6/organizations/keeping-your-organization-secure/managing-security-settings-for-your-organization/reviewing-the-audit-log-for-your-organization#searching-the-audit-log)."
     *
     * Use pagination to retrieve fewer or more than 30 events. For more information, see "[Resources in the REST API](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#pagination)."
     */
    readonly get: operations['orgs/get-audit-log']
  }
  readonly '/orgs/{org}/code-scanning/alerts': {
    /**
     * Lists code scanning alerts for the default branch for all eligible repositories in an organization. Eligible repositories are repositories that are owned by organizations that you own or for which you are a security manager. For more information, see "[Managing security managers in your organization](https://docs.github.com/enterprise-server@3.6/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     *
     * To use this endpoint, you must be an owner or security manager for the organization, and you must use an access token with the `repo` scope or `security_events` scope.
     *
     * GitHub Apps must have the `security_events` read permission to use this endpoint.
     */
    readonly get: operations['code-scanning/list-alerts-for-org']
  }
  readonly '/orgs/{org}/dependabot/secrets': {
    /** Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint. */
    readonly get: operations['dependabot/list-org-secrets']
  }
  readonly '/orgs/{org}/dependabot/secrets/public-key': {
    /** Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint. */
    readonly get: operations['dependabot/get-org-public-key']
  }
  readonly '/orgs/{org}/dependabot/secrets/{secret_name}': {
    /** Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint. */
    readonly get: operations['dependabot/get-org-secret']
    /**
     * Creates or updates an organization secret with an encrypted value. Encrypt your secret using
     * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
     * token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization
     * permission to use this endpoint.
     *
     * #### Example encrypting a secret using Node.js
     *
     * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
     *
     * ```
     * const sodium = require('tweetsodium');
     *
     * const key = "base64-encoded-public-key";
     * const value = "plain-text-secret";
     *
     * // Convert the message and key to Uint8Array's (Buffer implements that interface)
     * const messageBytes = Buffer.from(value);
     * const keyBytes = Buffer.from(key, 'base64');
     *
     * // Encrypt using LibSodium.
     * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
     *
     * // Base64 the encrypted secret
     * const encrypted = Buffer.from(encryptedBytes).toString('base64');
     *
     * console.log(encrypted);
     * ```
     *
     *
     * #### Example encrypting a secret using Python
     *
     * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
     *
     * ```
     * from base64 import b64encode
     * from nacl import encoding, public
     *
     * def encrypt(public_key: str, secret_value: str) -> str:
     *   """Encrypt a Unicode string using the public key."""
     *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
     *   sealed_box = public.SealedBox(public_key)
     *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
     *   return b64encode(encrypted).decode("utf-8")
     * ```
     *
     * #### Example encrypting a secret using C#
     *
     * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
     *
     * ```
     * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
     * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
     *
     * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
     *
     * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
     * ```
     *
     * #### Example encrypting a secret using Ruby
     *
     * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
     *
     * ```ruby
     * require "rbnacl"
     * require "base64"
     *
     * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
     * public_key = RbNaCl::PublicKey.new(key)
     *
     * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
     * encrypted_secret = box.encrypt("my_secret")
     *
     * # Print the base64 encoded secret
     * puts Base64.strict_encode64(encrypted_secret)
     * ```
     */
    readonly put: operations['dependabot/create-or-update-org-secret']
    /** Deletes a secret in an organization using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint. */
    readonly delete: operations['dependabot/delete-org-secret']
  }
  readonly '/orgs/{org}/dependabot/secrets/{secret_name}/repositories': {
    /** Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint. */
    readonly get: operations['dependabot/list-selected-repos-for-org-secret']
    /** Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.6/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint. */
    readonly put: operations['dependabot/set-selected-repos-for-org-secret']
  }
  readonly '/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}': {
    /** Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.6/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint. */
    readonly put: operations['dependabot/add-selected-repo-to-org-secret']
    /** Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.6/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint. */
    readonly delete: operations['dependabot/remove-selected-repo-from-org-secret']
  }
  readonly '/orgs/{org}/events': {
    readonly get: operations['activity/list-public-org-events']
  }
  readonly '/orgs/{org}/external-group/{group_id}': {
    /**
     * Displays information about the specific group's usage.  Provides a list of the group's external members as well as a list of teams that this group is connected to.
     *
     * You can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/enterprise-server@3.6/github/getting-started-with-github/githubs-products)" in the GitHub Help documentation.
     */
    readonly get: operations['teams/external-idp-group-info-for-org']
  }
  readonly '/orgs/{org}/external-groups': {
    /**
     * Lists external groups available in an organization. You can query the groups using the `display_name` parameter, only groups with a `group_name` containing the text provided in the `display_name` parameter will be returned.  You can also limit your page results using the `per_page` parameter. GitHub Enterprise Server generates a url-encoded `page` token using a cursor value for where the next page begins. For more information on cursor pagination, see "[Offset and Cursor Pagination explained](https://dev.to/jackmarchant/offset-and-cursor-pagination-explained-b89)."
     *
     * You can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/enterprise-server@3.6/github/getting-started-with-github/githubs-products)" in the GitHub Help documentation.
     */
    readonly get: operations['teams/list-external-idp-groups-for-org']
  }
  readonly '/orgs/{org}/hooks': {
    readonly get: operations['orgs/list-webhooks']
    /** Here's how you can create a hook that posts payloads in JSON format: */
    readonly post: operations['orgs/create-webhook']
  }
  readonly '/orgs/{org}/hooks/{hook_id}': {
    /** Returns a webhook configured in an organization. To get only the webhook `config` properties, see "[Get a webhook configuration for an organization](/rest/reference/orgs#get-a-webhook-configuration-for-an-organization)." */
    readonly get: operations['orgs/get-webhook']
    readonly delete: operations['orgs/delete-webhook']
    /** Updates a webhook configured in an organization. When you update a webhook, the `secret` will be overwritten. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for an organization](/rest/reference/orgs#update-a-webhook-configuration-for-an-organization)." */
    readonly patch: operations['orgs/update-webhook']
  }
  readonly '/orgs/{org}/hooks/{hook_id}/config': {
    /**
     * Returns the webhook configuration for an organization. To get more information about the webhook, including the `active` state and `events`, use "[Get an organization webhook ](/rest/reference/orgs#get-an-organization-webhook)."
     *
     * Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:read` permission.
     */
    readonly get: operations['orgs/get-webhook-config-for-org']
    /**
     * Updates the webhook configuration for an organization. To update more information about the webhook, including the `active` state and `events`, use "[Update an organization webhook ](/rest/reference/orgs#update-an-organization-webhook)."
     *
     * Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:write` permission.
     */
    readonly patch: operations['orgs/update-webhook-config-for-org']
  }
  readonly '/orgs/{org}/hooks/{hook_id}/deliveries': {
    /** Returns a list of webhook deliveries for a webhook configured in an organization. */
    readonly get: operations['orgs/list-webhook-deliveries']
  }
  readonly '/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}': {
    /** Returns a delivery for a webhook configured in an organization. */
    readonly get: operations['orgs/get-webhook-delivery']
  }
  readonly '/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts': {
    /** Redeliver a delivery for a webhook configured in an organization. */
    readonly post: operations['orgs/redeliver-webhook-delivery']
  }
  readonly '/orgs/{org}/hooks/{hook_id}/pings': {
    /** This will trigger a [ping event](https://docs.github.com/enterprise-server@3.6/webhooks/#ping-event) to be sent to the hook. */
    readonly post: operations['orgs/ping-webhook']
  }
  readonly '/orgs/{org}/installation': {
    /**
     * Enables an authenticated GitHub App to find the organization's installation information.
     *
     * You must use a [JWT](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     */
    readonly get: operations['apps/get-org-installation']
  }
  readonly '/orgs/{org}/installations': {
    /** Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization. You must be an organization owner with `admin:read` scope to use this endpoint. */
    readonly get: operations['orgs/list-app-installations']
  }
  readonly '/orgs/{org}/issues': {
    /**
     * List issues in an organization assigned to the authenticated user.
     *
     * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
     * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
     * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
     * request id, use the "[List pull requests](https://docs.github.com/enterprise-server@3.6/rest/reference/pulls#list-pull-requests)" endpoint.
     */
    readonly get: operations['issues/list-for-org']
  }
  readonly '/orgs/{org}/members': {
    /** List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned. */
    readonly get: operations['orgs/list-members']
  }
  readonly '/orgs/{org}/members/{username}': {
    /** Check if a user is, publicly or privately, a member of the organization. */
    readonly get: operations['orgs/check-membership-for-user']
    /** Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories. */
    readonly delete: operations['orgs/remove-member']
  }
  readonly '/orgs/{org}/memberships/{username}': {
    /** In order to get a user's membership with an organization, the authenticated user must be an organization member. The `state` parameter in the response can be used to identify the user's membership status. */
    readonly get: operations['orgs/get-membership-for-user']
    /**
     * Only authenticated organization owners can add a member to the organization or update the member's role.
     *
     * *   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://docs.github.com/enterprise-server@3.6/rest/reference/orgs#get-organization-membership-for-a-user) will be `pending` until they accept the invitation.
     *
     * *   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.
     *
     * **Rate limits**
     *
     * To prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.
     */
    readonly put: operations['orgs/set-membership-for-user']
    /**
     * In order to remove a user's membership with an organization, the authenticated user must be an organization owner.
     *
     * If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.
     */
    readonly delete: operations['orgs/remove-membership-for-user']
  }
  readonly '/orgs/{org}/migrations': {
    /** Lists the most recent migrations. */
    readonly get: operations['migrations/list-for-org']
    /** Initiates the generation of a migration archive. */
    readonly post: operations['migrations/start-for-org']
  }
  readonly '/orgs/{org}/migrations/{migration_id}': {
    /**
     * Fetches the status of a migration.
     *
     * The `state` of a migration can be one of the following values:
     *
     * *   `pending`, which means the migration hasn't started yet.
     * *   `exporting`, which means the migration is in progress.
     * *   `exported`, which means the migration finished successfully.
     * *   `failed`, which means the migration failed.
     */
    readonly get: operations['migrations/get-status-for-org']
  }
  readonly '/orgs/{org}/outside_collaborators': {
    /** List all users who are outside collaborators of an organization. */
    readonly get: operations['orgs/list-outside-collaborators']
  }
  readonly '/orgs/{org}/outside_collaborators/{username}': {
    /** When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see "[Converting an organization member to an outside collaborator](https://docs.github.com/enterprise-server@3.6/articles/converting-an-organization-member-to-an-outside-collaborator/)". Converting an organization member to an outside collaborator may be restricted by enterprise administrators. For more information, see "[Enforcing repository management policies in your enterprise](https://docs.github.com/enterprise-server@3.6/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories)." */
    readonly put: operations['orgs/convert-member-to-outside-collaborator']
    /** Removing a user from this list will remove them from all the organization's repositories. */
    readonly delete: operations['orgs/remove-outside-collaborator']
  }
  readonly '/orgs/{org}/pre-receive-hooks': {
    /** List all pre-receive hooks that are enabled or testing for this organization as well as any disabled hooks that can be configured at the organization level. Globally disabled pre-receive hooks that do not allow downstream configuration are not listed. */
    readonly get: operations['enterprise-admin/list-pre-receive-hooks-for-org']
  }
  readonly '/orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}': {
    readonly get: operations['enterprise-admin/get-pre-receive-hook-for-org']
    /** Removes any overrides for this hook at the org level for this org. */
    readonly delete: operations['enterprise-admin/remove-pre-receive-hook-enforcement-for-org']
    /** For pre-receive hooks which are allowed to be configured at the org level, you can set `enforcement` and `allow_downstream_configuration` */
    readonly patch: operations['enterprise-admin/update-pre-receive-hook-enforcement-for-org']
  }
  readonly '/orgs/{org}/projects': {
    /** Lists the projects in an organization. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. */
    readonly get: operations['projects/list-for-org']
    /** Creates an organization project board. Returns a `410 Gone` status if projects are disabled in the organization or if the organization does not have existing classic projects. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. */
    readonly post: operations['projects/create-for-org']
  }
  readonly '/orgs/{org}/public_members': {
    /** Members of an organization can choose to have their membership publicized or not. */
    readonly get: operations['orgs/list-public-members']
  }
  readonly '/orgs/{org}/public_members/{username}': {
    readonly get: operations['orgs/check-public-membership-for-user']
    /**
     * The user can publicize their own membership. (A user cannot publicize the membership for another user.)
     *
     * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#http-verbs)."
     */
    readonly put: operations['orgs/set-public-membership-for-authenticated-user']
    readonly delete: operations['orgs/remove-public-membership-for-authenticated-user']
  }
  readonly '/orgs/{org}/repos': {
    /** Lists repositories for the specified organization. */
    readonly get: operations['repos/list-for-org']
    /**
     * Creates a new repository in the specified organization. The authenticated user must be a member of the organization.
     *
     * **OAuth scope requirements**
     *
     * When using [OAuth](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
     *
     * *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
     * *   `repo` scope to create a private repository
     */
    readonly post: operations['repos/create-in-org']
  }
  readonly '/orgs/{org}/secret-scanning/alerts': {
    /**
     * Lists secret scanning alerts for eligible repositories in an organization, from newest to oldest.
     * To use this endpoint, you must be an administrator or security manager for the organization, and you must use an access token with the `repo` scope or `security_events` scope.
     * For public repositories, you may instead use the `public_repo` scope.
     *
     * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
     */
    readonly get: operations['secret-scanning/list-alerts-for-org']
  }
  readonly '/orgs/{org}/settings/billing/advanced-security': {
    /**
     * Gets the GitHub Advanced Security active committers for an organization per repository.
     *
     * Each distinct user login across all repositories is counted as a single Advanced Security seat, so the `total_advanced_security_committers` is not the sum of advanced_security_committers for each repository.
     *
     * If this organization defers to an enterprise for billing, the `total_advanced_security_committers` returned from the organization API may include some users that are in more than one organization, so they will only consume a single Advanced Security seat at the enterprise level.
     *
     * The total number of repositories with committer information is tracked by the `total_count` field.
     */
    readonly get: operations['billing/get-github-advanced-security-billing-org']
  }
  readonly '/orgs/{org}/teams': {
    /** Lists all teams in an organization that are visible to the authenticated user. */
    readonly get: operations['teams/list']
    /**
     * To create a team, the authenticated user must be a member or owner of `{org}`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see "[Setting team creation permissions](https://docs.github.com/en/articles/setting-team-creation-permissions-in-your-organization)."
     *
     * When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of `maintainers`. For more information, see "[About teams](https://docs.github.com/en/github/setting-up-and-managing-organizations-and-teams/about-teams)".
     */
    readonly post: operations['teams/create']
  }
  readonly '/orgs/{org}/teams/{team_slug}': {
    /**
     * Gets a team using the team's `slug`. GitHub Enterprise Server generates the `slug` from the team `name`.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}`.
     */
    readonly get: operations['teams/get-by-name']
    /**
     * To delete a team, the authenticated user must be an organization owner or team maintainer.
     *
     * If you are an organization owner, deleting a parent team will delete all of its child teams as well.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}`.
     */
    readonly delete: operations['teams/delete-in-org']
    /**
     * To edit a team, the authenticated user must either be an organization owner or a team maintainer.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}`.
     */
    readonly patch: operations['teams/update-in-org']
  }
  readonly '/orgs/{org}/teams/{team_slug}/discussions': {
    /**
     * List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions`.
     */
    readonly get: operations['teams/list-discussions-in-org']
    /**
     * Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions`.
     */
    readonly post: operations['teams/create-discussion-in-org']
  }
  readonly '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}': {
    /**
     * Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
     */
    readonly get: operations['teams/get-discussion-in-org']
    /**
     * Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
     */
    readonly delete: operations['teams/delete-discussion-in-org']
    /**
     * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
     */
    readonly patch: operations['teams/update-discussion-in-org']
  }
  readonly '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments': {
    /**
     * List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
     */
    readonly get: operations['teams/list-discussion-comments-in-org']
    /**
     * Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
     */
    readonly post: operations['teams/create-discussion-comment-in-org']
  }
  readonly '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}': {
    /**
     * Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
     */
    readonly get: operations['teams/get-discussion-comment-in-org']
    /**
     * Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
     */
    readonly delete: operations['teams/delete-discussion-comment-in-org']
    /**
     * Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
     */
    readonly patch: operations['teams/update-discussion-comment-in-org']
  }
  readonly '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions': {
    /**
     * List the reactions to a [team discussion comment](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#discussion-comments/). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
     */
    readonly get: operations['reactions/list-for-team-discussion-comment-in-org']
    /**
     * Create a reaction to a [team discussion comment](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
     */
    readonly post: operations['reactions/create-for-team-discussion-comment-in-org']
  }
  readonly '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}': {
    /**
     * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.
     *
     * Delete a reaction to a [team discussion comment](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     */
    readonly delete: operations['reactions/delete-for-team-discussion-comment']
  }
  readonly '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions': {
    /**
     * List the reactions to a [team discussion](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
     */
    readonly get: operations['reactions/list-for-team-discussion-in-org']
    /**
     * Create a reaction to a [team discussion](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
     */
    readonly post: operations['reactions/create-for-team-discussion-in-org']
  }
  readonly '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}': {
    /**
     * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.
     *
     * Delete a reaction to a [team discussion](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     */
    readonly delete: operations['reactions/delete-for-team-discussion']
  }
  readonly '/orgs/{org}/teams/{team_slug}/external-groups': {
    /**
     * Lists a connection between a team and an external group.
     *
     * You can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/enterprise-server@3.6/github/getting-started-with-github/githubs-products)" in the GitHub Help documentation.
     */
    readonly get: operations['teams/list-linked-external-idp-groups-to-team-for-org']
    /**
     * Deletes a connection between a team and an external group.
     *
     * You can manage team membership with your IdP using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/enterprise-server@3.6/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     */
    readonly delete: operations['teams/unlink-external-idp-group-from-team-for-org']
    /**
     * Creates a connection between a team and an external group.  Only one external group can be linked to a team.
     *
     * You can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/enterprise-server@3.6/github/getting-started-with-github/githubs-products)" in the GitHub Help documentation.
     */
    readonly patch: operations['teams/link-external-idp-group-to-team-for-org']
  }
  readonly '/orgs/{org}/teams/{team_slug}/members': {
    /**
     * Team members will include the members of child teams.
     *
     * To list members in a team, the team must be visible to the authenticated user.
     */
    readonly get: operations['teams/list-members-in-org']
  }
  readonly '/orgs/{org}/teams/{team_slug}/memberships/{username}': {
    /**
     * Team members will include the members of child teams.
     *
     * To get a user's membership with a team, the team must be visible to the authenticated user.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`.
     *
     * **Note:**
     * The response contains the `state` of the membership and the member's `role`.
     *
     * The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see see [Create a team](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#create-a-team).
     */
    readonly get: operations['teams/get-membership-for-user-in-org']
    /**
     * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.
     *
     * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
     *
     * An organization owner can add someone who is not part of the team's organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the "pending" state until the person accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team.
     *
     * If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/memberships/{username}`.
     */
    readonly put: operations['teams/add-or-update-membership-for-user-in-org']
    /**
     * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
     *
     * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}`.
     */
    readonly delete: operations['teams/remove-membership-for-user-in-org']
  }
  readonly '/orgs/{org}/teams/{team_slug}/projects': {
    /**
     * Lists the organization projects for a team.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects`.
     */
    readonly get: operations['teams/list-projects-in-org']
  }
  readonly '/orgs/{org}/teams/{team_slug}/projects/{project_id}': {
    /**
     * Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
     */
    readonly get: operations['teams/check-permissions-for-project-in-org']
    /**
     * Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
     */
    readonly put: operations['teams/add-or-update-project-permissions-in-org']
    /**
     * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. This endpoint removes the project from the team, but does not delete the project.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
     */
    readonly delete: operations['teams/remove-project-in-org']
  }
  readonly '/orgs/{org}/teams/{team_slug}/repos': {
    /**
     * Lists a team's repositories visible to the authenticated user.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos`.
     */
    readonly get: operations['teams/list-repos-in-org']
  }
  readonly '/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}': {
    /**
     * Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.
     *
     * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/enterprise-server@3.6/rest/overview/media-types/) via the `application/vnd.github.v3.repository+json` accept header.
     *
     * If a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
     */
    readonly get: operations['teams/check-permissions-for-repo-in-org']
    /**
     * To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#http-verbs)."
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
     *
     * For more information about the permission levels, see "[Repository permission levels for an organization](https://docs.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".
     */
    readonly put: operations['teams/add-or-update-repo-permissions-in-org']
    /**
     * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
     */
    readonly delete: operations['teams/remove-repo-in-org']
  }
  readonly '/orgs/{org}/teams/{team_slug}/teams': {
    /**
     * Lists the child teams of the team specified by `{team_slug}`.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/teams`.
     */
    readonly get: operations['teams/list-child-in-org']
  }
  readonly '/projects/columns/cards/{card_id}': {
    readonly get: operations['projects/get-card']
    readonly delete: operations['projects/delete-card']
    readonly patch: operations['projects/update-card']
  }
  readonly '/projects/columns/cards/{card_id}/moves': {
    readonly post: operations['projects/move-card']
  }
  readonly '/projects/columns/{column_id}': {
    readonly get: operations['projects/get-column']
    readonly delete: operations['projects/delete-column']
    readonly patch: operations['projects/update-column']
  }
  readonly '/projects/columns/{column_id}/cards': {
    readonly get: operations['projects/list-cards']
    readonly post: operations['projects/create-card']
  }
  readonly '/projects/columns/{column_id}/moves': {
    readonly post: operations['projects/move-column']
  }
  readonly '/projects/{project_id}': {
    /** Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. */
    readonly get: operations['projects/get']
    /** Deletes a project board. Returns a `404 Not Found` status if projects are disabled. */
    readonly delete: operations['projects/delete']
    /** Updates a project board's information. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. */
    readonly patch: operations['projects/update']
  }
  readonly '/projects/{project_id}/collaborators': {
    /** Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project `admin` to list collaborators. */
    readonly get: operations['projects/list-collaborators']
  }
  readonly '/projects/{project_id}/collaborators/{username}': {
    /** Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project `admin` to add a collaborator. */
    readonly put: operations['projects/add-collaborator']
    /** Removes a collaborator from an organization project. You must be an organization owner or a project `admin` to remove a collaborator. */
    readonly delete: operations['projects/remove-collaborator']
  }
  readonly '/projects/{project_id}/collaborators/{username}/permission': {
    /** Returns the collaborator's permission level for an organization project. Possible values for the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission level. */
    readonly get: operations['projects/get-permission-for-user']
  }
  readonly '/projects/{project_id}/columns': {
    readonly get: operations['projects/list-columns']
    readonly post: operations['projects/create-column']
  }
  readonly '/rate_limit': {
    /**
     * **Note:** Accessing this endpoint does not count against your REST API rate limit.
     *
     * **Note:** The `rate` object is deprecated. If you're writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object.
     */
    readonly get: operations['rate-limit/get']
  }
  readonly '/repos/{owner}/{repo}': {
    /** The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network. */
    readonly get: operations['repos/get']
    /**
     * Deleting a repository requires admin access. If OAuth is used, the `delete_repo` scope is required.
     *
     * If an organization owner has configured the organization to prevent members from deleting organization-owned
     * repositories, you will get a `403 Forbidden` response.
     */
    readonly delete: operations['repos/delete']
    /** **Note**: To edit a repository's topics, use the [Replace all repository topics](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#replace-all-repository-topics) endpoint. */
    readonly patch: operations['repos/update']
  }
  readonly '/repos/{owner}/{repo}/actions/artifacts': {
    /** Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */
    readonly get: operations['actions/list-artifacts-for-repo']
  }
  readonly '/repos/{owner}/{repo}/actions/artifacts/{artifact_id}': {
    /** Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */
    readonly get: operations['actions/get-artifact']
    /** Deletes an artifact for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. */
    readonly delete: operations['actions/delete-artifact']
  }
  readonly '/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}': {
    /**
     * Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in
     * the response header to find the URL for the download. The `:archive_format` must be `zip`. Anyone with read access to
     * the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
     * GitHub Apps must have the `actions:read` permission to use this endpoint.
     */
    readonly get: operations['actions/download-artifact']
  }
  readonly '/repos/{owner}/{repo}/actions/cache/usage': {
    /**
     * Gets GitHub Actions cache usage for a repository.
     * The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
     * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     */
    readonly get: operations['actions/get-actions-cache-usage']
  }
  readonly '/repos/{owner}/{repo}/actions/cache/usage-policy': {
    /**
     * Gets GitHub Actions cache usage policy for a repository.
     * You must authenticate using an access token with the `repo` scope to use this endpoint.
     * GitHub Apps must have the `actions:read` permission to use this endpoint.
     */
    readonly get: operations['actions/get-actions-cache-usage-policy']
    /**
     * Sets GitHub Actions cache usage policy for a repository.
     * You must authenticate using an access token with the `repo` scope to use this endpoint.
     * GitHub Apps must have the `actions:write` permission to use this endpoint.
     */
    readonly patch: operations['actions/set-actions-cache-usage-policy']
  }
  readonly '/repos/{owner}/{repo}/actions/jobs/{job_id}': {
    /** Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */
    readonly get: operations['actions/get-job-for-workflow-run']
  }
  readonly '/repos/{owner}/{repo}/actions/jobs/{job_id}/logs': {
    /**
     * Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look
     * for `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can
     * use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must
     * have the `actions:read` permission to use this endpoint.
     */
    readonly get: operations['actions/download-job-logs-for-workflow-run']
  }
  readonly '/repos/{owner}/{repo}/actions/jobs/{job_id}/rerun': {
    /** Re-run a job and its dependent jobs in a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. */
    readonly post: operations['actions/re-run-job-for-workflow-run']
  }
  readonly '/repos/{owner}/{repo}/actions/permissions': {
    /**
     * Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions allowed to run in the repository.
     *
     * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
     */
    readonly get: operations['actions/get-github-actions-permissions-repository']
    /**
     * Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions in the repository.
     *
     * If the repository belongs to an organization or enterprise that has set restrictive permissions at the organization or enterprise levels, such as `allowed_actions` to `selected` actions, then you cannot override them for the repository.
     *
     * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
     */
    readonly put: operations['actions/set-github-actions-permissions-repository']
  }
  readonly '/repos/{owner}/{repo}/actions/permissions/access': {
    /**
     * Gets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.
     * This endpoint only applies to internal repositories. For more information, see "[Managing GitHub Actions settings for a repository](https://docs.github.com/enterprise-server@3.6/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-an-internal-repository)."
     *
     * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the
     * repository `administration` permission to use this endpoint.
     */
    readonly get: operations['actions/get-workflow-access-to-repository']
    /**
     * Sets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.
     * This endpoint only applies to internal repositories. For more information, see "[Managing GitHub Actions settings for a repository](https://docs.github.com/enterprise-server@3.6/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-an-internal-repository)."
     *
     * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the
     * repository `administration` permission to use this endpoint.
     */
    readonly put: operations['actions/set-workflow-access-to-repository']
  }
  readonly '/repos/{owner}/{repo}/actions/permissions/selected-actions': {
    /**
     * Gets the settings for selected actions that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
     *
     * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
     */
    readonly get: operations['actions/get-allowed-actions-repository']
    /**
     * Sets the actions that are allowed in a repository. To use this endpoint, the repository permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
     *
     * If the repository belongs to an organization or enterprise that has `selected` actions set at the organization or enterprise levels, then you cannot override any of the allowed actions settings.
     *
     * To use the `patterns_allowed` setting for private repositories, the repository must belong to an enterprise. If the repository does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories.
     *
     * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
     */
    readonly put: operations['actions/set-allowed-actions-repository']
  }
  readonly '/repos/{owner}/{repo}/actions/permissions/workflow': {
    /**
     * Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository,
     * as well as if GitHub Actions can submit approving pull request reviews.
     * For more information, see "[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/enterprise-server@3.6/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository)."
     *
     * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the repository `administration` permission to use this API.
     */
    readonly get: operations['actions/get-github-actions-default-workflow-permissions-repository']
    /**
     * Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository, and sets if GitHub Actions
     * can submit approving pull request reviews.
     * For more information, see "[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/enterprise-server@3.6/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository)."
     *
     * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the repository `administration` permission to use this API.
     */
    readonly put: operations['actions/set-github-actions-default-workflow-permissions-repository']
  }
  readonly '/repos/{owner}/{repo}/actions/runners': {
    /** Lists all self-hosted runners configured in a repository. You must authenticate using an access token with the `repo` scope to use this endpoint. */
    readonly get: operations['actions/list-self-hosted-runners-for-repo']
  }
  readonly '/repos/{owner}/{repo}/actions/runners/downloads': {
    /**
     * Lists binaries for the runner application that you can download and run.
     *
     * You must authenticate using an access token with the `repo` scope to use this endpoint.
     */
    readonly get: operations['actions/list-runner-applications-for-repo']
  }
  readonly '/repos/{owner}/{repo}/actions/runners/registration-token': {
    /**
     * Returns a token that you can pass to the `config` script. The token expires after one hour. You must authenticate
     * using an access token with the `repo` scope to use this endpoint.
     *
     * #### Example using registration token
     *
     * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
     *
     * ```
     * ./config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN
     * ```
     */
    readonly post: operations['actions/create-registration-token-for-repo']
  }
  readonly '/repos/{owner}/{repo}/actions/runners/remove-token': {
    /**
     * Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour.
     * You must authenticate using an access token with the `repo` scope to use this endpoint.
     *
     * #### Example using remove token
     *
     * To remove your self-hosted runner from a repository, replace TOKEN with the remove token provided by this endpoint.
     *
     * ```
     * ./config.sh remove --token TOKEN
     * ```
     */
    readonly post: operations['actions/create-remove-token-for-repo']
  }
  readonly '/repos/{owner}/{repo}/actions/runners/{runner_id}': {
    /**
     * Gets a specific self-hosted runner configured in a repository.
     *
     * You must authenticate using an access token with the `repo` scope to use this
     * endpoint.
     */
    readonly get: operations['actions/get-self-hosted-runner-for-repo']
    /**
     * Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
     *
     * You must authenticate using an access token with the `repo`
     * scope to use this endpoint.
     */
    readonly delete: operations['actions/delete-self-hosted-runner-from-repo']
  }
  readonly '/repos/{owner}/{repo}/actions/runners/{runner_id}/labels': {
    /**
     * Lists all labels for a self-hosted runner configured in a repository.
     *
     * You must authenticate using an access token with the `repo` scope to use this
     * endpoint.
     */
    readonly get: operations['actions/list-labels-for-self-hosted-runner-for-repo']
    /**
     * Remove all previous custom labels and set the new custom labels for a specific
     * self-hosted runner configured in a repository.
     *
     * You must authenticate using an access token with the `repo` scope to use this
     * endpoint.
     */
    readonly put: operations['actions/set-custom-labels-for-self-hosted-runner-for-repo']
    /**
     * Add custom labels to a self-hosted runner configured in a repository.
     *
     * You must authenticate using an access token with the `repo` scope to use this
     * endpoint.
     */
    readonly post: operations['actions/add-custom-labels-to-self-hosted-runner-for-repo']
    /**
     * Remove all custom labels from a self-hosted runner configured in a
     * repository. Returns the remaining read-only labels from the runner.
     *
     * You must authenticate using an access token with the `repo` scope to use this
     * endpoint.
     */
    readonly delete: operations['actions/remove-all-custom-labels-from-self-hosted-runner-for-repo']
  }
  readonly '/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}': {
    /**
     * Remove a custom label from a self-hosted runner configured
     * in a repository. Returns the remaining labels from the runner.
     *
     * This endpoint returns a `404 Not Found` status if the custom label is not
     * present on the runner.
     *
     * You must authenticate using an access token with the `repo` scope to use this
     * endpoint.
     */
    readonly delete: operations['actions/remove-custom-label-from-self-hosted-runner-for-repo']
  }
  readonly '/repos/{owner}/{repo}/actions/runs': {
    /**
     * Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#parameters).
     *
     * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     */
    readonly get: operations['actions/list-workflow-runs-for-repo']
  }
  readonly '/repos/{owner}/{repo}/actions/runs/{run_id}': {
    /** Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */
    readonly get: operations['actions/get-workflow-run']
    /**
     * Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is
     * private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:write` permission to use
     * this endpoint.
     */
    readonly delete: operations['actions/delete-workflow-run']
  }
  readonly '/repos/{owner}/{repo}/actions/runs/{run_id}/approvals': {
    /** Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */
    readonly get: operations['actions/get-reviews-for-run']
  }
  readonly '/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts': {
    /** Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */
    readonly get: operations['actions/list-workflow-run-artifacts']
  }
  readonly '/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}': {
    /**
     * Gets a specific workflow run attempt. Anyone with read access to the repository
     * can use this endpoint. If the repository is private you must use an access token
     * with the `repo` scope. GitHub Apps must have the `actions:read` permission to
     * use this endpoint.
     */
    readonly get: operations['actions/get-workflow-run-attempt']
  }
  readonly '/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs': {
    /** Lists jobs for a specific workflow run attempt. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#parameters). */
    readonly get: operations['actions/list-jobs-for-workflow-run-attempt']
  }
  readonly '/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs': {
    /**
     * Gets a redirect URL to download an archive of log files for a specific workflow run attempt. This link expires after
     * 1 minute. Look for `Location:` in the response header to find the URL for the download. Anyone with read access to
     * the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
     * GitHub Apps must have the `actions:read` permission to use this endpoint.
     */
    readonly get: operations['actions/download-workflow-run-attempt-logs']
  }
  readonly '/repos/{owner}/{repo}/actions/runs/{run_id}/cancel': {
    /** Cancels a workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. */
    readonly post: operations['actions/cancel-workflow-run']
  }
  readonly '/repos/{owner}/{repo}/actions/runs/{run_id}/jobs': {
    /** Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#parameters). */
    readonly get: operations['actions/list-jobs-for-workflow-run']
  }
  readonly '/repos/{owner}/{repo}/actions/runs/{run_id}/logs': {
    /**
     * Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for
     * `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can use
     * this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have
     * the `actions:read` permission to use this endpoint.
     */
    readonly get: operations['actions/download-workflow-run-logs']
    /** Deletes all logs for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. */
    readonly delete: operations['actions/delete-workflow-run-logs']
  }
  readonly '/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments': {
    /**
     * Get all deployment environments for a workflow run that are waiting for protection rules to pass.
     *
     * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     */
    readonly get: operations['actions/get-pending-deployments-for-run']
    /**
     * Approve or reject pending deployments that are waiting on approval by a required reviewer.
     *
     * Required reviewers with read access to the repository contents and deployments can use this endpoint. Required reviewers must authenticate using an access token with the `repo` scope to use this endpoint.
     */
    readonly post: operations['actions/review-pending-deployments-for-run']
  }
  readonly '/repos/{owner}/{repo}/actions/runs/{run_id}/rerun': {
    /** Re-runs your workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. */
    readonly post: operations['actions/re-run-workflow']
  }
  readonly '/repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs': {
    /** Re-run all of the failed jobs and their dependent jobs in a workflow run using the `id` of the workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. */
    readonly post: operations['actions/re-run-workflow-failed-jobs']
  }
  readonly '/repos/{owner}/{repo}/actions/secrets': {
    /** Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint. */
    readonly get: operations['actions/list-repo-secrets']
  }
  readonly '/repos/{owner}/{repo}/actions/secrets/public-key': {
    /** Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint. */
    readonly get: operations['actions/get-repo-public-key']
  }
  readonly '/repos/{owner}/{repo}/actions/secrets/{secret_name}': {
    /** Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint. */
    readonly get: operations['actions/get-repo-secret']
    /**
     * Creates or updates a repository secret with an encrypted value. Encrypt your secret using
     * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
     * token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use
     * this endpoint.
     *
     * #### Example encrypting a secret using Node.js
     *
     * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
     *
     * ```
     * const sodium = require('tweetsodium');
     *
     * const key = "base64-encoded-public-key";
     * const value = "plain-text-secret";
     *
     * // Convert the message and key to Uint8Array's (Buffer implements that interface)
     * const messageBytes = Buffer.from(value);
     * const keyBytes = Buffer.from(key, 'base64');
     *
     * // Encrypt using LibSodium.
     * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
     *
     * // Base64 the encrypted secret
     * const encrypted = Buffer.from(encryptedBytes).toString('base64');
     *
     * console.log(encrypted);
     * ```
     *
     *
     * #### Example encrypting a secret using Python
     *
     * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
     *
     * ```
     * from base64 import b64encode
     * from nacl import encoding, public
     *
     * def encrypt(public_key: str, secret_value: str) -> str:
     *   """Encrypt a Unicode string using the public key."""
     *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
     *   sealed_box = public.SealedBox(public_key)
     *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
     *   return b64encode(encrypted).decode("utf-8")
     * ```
     *
     * #### Example encrypting a secret using C#
     *
     * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
     *
     * ```
     * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
     * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
     *
     * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
     *
     * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
     * ```
     *
     * #### Example encrypting a secret using Ruby
     *
     * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
     *
     * ```ruby
     * require "rbnacl"
     * require "base64"
     *
     * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
     * public_key = RbNaCl::PublicKey.new(key)
     *
     * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
     * encrypted_secret = box.encrypt("my_secret")
     *
     * # Print the base64 encoded secret
     * puts Base64.strict_encode64(encrypted_secret)
     * ```
     */
    readonly put: operations['actions/create-or-update-repo-secret']
    /** Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint. */
    readonly delete: operations['actions/delete-repo-secret']
  }
  readonly '/repos/{owner}/{repo}/actions/workflows': {
    /** Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */
    readonly get: operations['actions/list-repo-workflows']
  }
  readonly '/repos/{owner}/{repo}/actions/workflows/{workflow_id}': {
    /** Gets a specific workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */
    readonly get: operations['actions/get-workflow']
  }
  readonly '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable': {
    /**
     * Disables a workflow and sets the `state` of the workflow to `disabled_manually`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
     *
     * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
     */
    readonly put: operations['actions/disable-workflow']
  }
  readonly '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches': {
    /**
     * You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
     *
     * You must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see "[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch)."
     *
     * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. For more information, see "[Creating a personal access token for the command line](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line)."
     */
    readonly post: operations['actions/create-workflow-dispatch']
  }
  readonly '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable': {
    /**
     * Enables a workflow and sets the `state` of the workflow to `active`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
     *
     * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
     */
    readonly put: operations['actions/enable-workflow']
  }
  readonly '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs': {
    /**
     * List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#parameters).
     *
     * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
     */
    readonly get: operations['actions/list-workflow-runs']
  }
  readonly '/repos/{owner}/{repo}/assignees': {
    /** Lists the [available assignees](https://docs.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository. */
    readonly get: operations['issues/list-assignees']
  }
  readonly '/repos/{owner}/{repo}/assignees/{assignee}': {
    /**
     * Checks if a user has permission to be assigned to an issue in this repository.
     *
     * If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.
     *
     * Otherwise a `404` status code is returned.
     */
    readonly get: operations['issues/check-user-can-be-assigned']
  }
  readonly '/repos/{owner}/{repo}/autolinks': {
    /**
     * This returns a list of autolinks configured for the given repository.
     *
     * Information about autolinks are only available to repository administrators.
     */
    readonly get: operations['repos/list-autolinks']
    /** Users with admin access to the repository can create an autolink. */
    readonly post: operations['repos/create-autolink']
  }
  readonly '/repos/{owner}/{repo}/autolinks/{autolink_id}': {
    /**
     * This returns a single autolink reference by ID that was configured for the given repository.
     *
     * Information about autolinks are only available to repository administrators.
     */
    readonly get: operations['repos/get-autolink']
    /**
     * This deletes a single autolink reference by ID that was configured for the given repository.
     *
     * Information about autolinks are only available to repository administrators.
     */
    readonly delete: operations['repos/delete-autolink']
  }
  readonly '/repos/{owner}/{repo}/branches': {
    readonly get: operations['repos/list-branches']
  }
  readonly '/repos/{owner}/{repo}/branches/{branch}': {
    readonly get: operations['repos/get-branch']
  }
  readonly '/repos/{owner}/{repo}/branches/{branch}/protection': {
    /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
    readonly get: operations['repos/get-branch-protection']
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Protecting a branch requires admin or owner permissions to the repository.
     *
     * **Note**: Passing new arrays of `users` and `teams` replaces their previous values.
     *
     * **Note**: The list of users, apps, and teams in total is limited to 100 items.
     */
    readonly put: operations['repos/update-branch-protection']
    /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
    readonly delete: operations['repos/delete-branch-protection']
  }
  readonly '/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins': {
    /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
    readonly get: operations['repos/get-admin-branch-protection']
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Adding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
     */
    readonly post: operations['repos/set-admin-branch-protection']
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
     */
    readonly delete: operations['repos/delete-admin-branch-protection']
  }
  readonly '/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews': {
    /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
    readonly get: operations['repos/get-pull-request-review-protection']
    /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
    readonly delete: operations['repos/delete-pull-request-review-protection']
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
     *
     * **Note**: Passing new arrays of `users` and `teams` replaces their previous values.
     */
    readonly patch: operations['repos/update-pull-request-review-protection']
  }
  readonly '/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures': {
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://docs.github.com/articles/signing-commits-with-gpg) in GitHub Help.
     *
     * **Note**: You must enable branch protection to require signed commits.
     */
    readonly get: operations['repos/get-commit-signature-protection']
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * When authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.
     */
    readonly post: operations['repos/create-commit-signature-protection']
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.
     */
    readonly delete: operations['repos/delete-commit-signature-protection']
  }
  readonly '/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks': {
    /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
    readonly get: operations['repos/get-status-checks-protection']
    /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
    readonly delete: operations['repos/remove-status-check-protection']
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.
     */
    readonly patch: operations['repos/update-status-check-protection']
  }
  readonly '/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts': {
    /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
    readonly get: operations['repos/get-all-status-check-contexts']
    /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
    readonly put: operations['repos/set-status-check-contexts']
    /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
    readonly post: operations['repos/add-status-check-contexts']
    /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
    readonly delete: operations['repos/remove-status-check-contexts']
  }
  readonly '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions': {
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Lists who has access to this protected branch.
     *
     * **Note**: Users, apps, and teams `restrictions` are only available for organization-owned repositories.
     */
    readonly get: operations['repos/get-access-restrictions']
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Disables the ability to restrict who can push to this branch.
     */
    readonly delete: operations['repos/delete-access-restrictions']
  }
  readonly '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps': {
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Lists the GitHub Apps that have push access to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
     */
    readonly get: operations['repos/get-apps-with-access-to-protected-branch']
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Replaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
     *
     * | Type    | Description                                                                                                                                                |
     * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     */
    readonly put: operations['repos/set-app-access-restrictions']
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Grants the specified apps push access for this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
     *
     * | Type    | Description                                                                                                                                                |
     * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     */
    readonly post: operations['repos/add-app-access-restrictions']
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Removes the ability of an app to push to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
     *
     * | Type    | Description                                                                                                                                                |
     * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     */
    readonly delete: operations['repos/remove-app-access-restrictions']
  }
  readonly '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams': {
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Lists the teams who have push access to this branch. The list includes child teams.
     */
    readonly get: operations['repos/get-teams-with-access-to-protected-branch']
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Replaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams.
     *
     * | Type    | Description                                                                                                                                |
     * | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
     * | `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     */
    readonly put: operations['repos/set-team-access-restrictions']
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Grants the specified teams push access for this branch. You can also give push access to child teams.
     *
     * | Type    | Description                                                                                                                                |
     * | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
     * | `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     */
    readonly post: operations['repos/add-team-access-restrictions']
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Removes the ability of a team to push to this branch. You can also remove push access for child teams.
     *
     * | Type    | Description                                                                                                                                         |
     * | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `array` | Teams that should no longer have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     */
    readonly delete: operations['repos/remove-team-access-restrictions']
  }
  readonly '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users': {
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Lists the people who have push access to this branch.
     */
    readonly get: operations['repos/get-users-with-access-to-protected-branch']
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Replaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.
     *
     * | Type    | Description                                                                                                                   |
     * | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
     * | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     */
    readonly put: operations['repos/set-user-access-restrictions']
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Grants the specified people push access for this branch.
     *
     * | Type    | Description                                                                                                                   |
     * | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
     * | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     */
    readonly post: operations['repos/add-user-access-restrictions']
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Removes the ability of a user to push to this branch.
     *
     * | Type    | Description                                                                                                                                   |
     * | ------- | --------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `array` | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     */
    readonly delete: operations['repos/remove-user-access-restrictions']
  }
  readonly '/repos/{owner}/{repo}/branches/{branch}/rename': {
    /**
     * Renames a branch in a repository.
     *
     * **Note:** Although the API responds immediately, the branch rename process might take some extra time to complete in the background. You won't be able to push to the old branch name while the rename process is in progress. For more information, see "[Renaming a branch](https://docs.github.com/enterprise-server@3.6/github/administering-a-repository/renaming-a-branch)".
     *
     * The permissions required to use this endpoint depends on whether you are renaming the default branch.
     *
     * To rename a non-default branch:
     *
     * * Users must have push access.
     * * GitHub Apps must have the `contents:write` repository permission.
     *
     * To rename the default branch:
     *
     * * Users must have admin or owner permissions.
     * * GitHub Apps must have the `administration:write` repository permission.
     */
    readonly post: operations['repos/rename-branch']
  }
  readonly '/repos/{owner}/{repo}/check-runs': {
    /**
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
     *
     * Creates a new check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to create check runs.
     *
     * In a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs.
     */
    readonly post: operations['checks/create']
  }
  readonly '/repos/{owner}/{repo}/check-runs/{check_run_id}': {
    /**
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
     *
     * Gets a single check run using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
     */
    readonly get: operations['checks/get']
    /**
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
     *
     * Updates a check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to edit check runs.
     */
    readonly patch: operations['checks/update']
  }
  readonly '/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations': {
    /** Lists annotations for a check run using the annotation `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get annotations for a check run. OAuth Apps and authenticated users must have the `repo` scope to get annotations for a check run in a private repository. */
    readonly get: operations['checks/list-annotations']
  }
  readonly '/repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest': {
    /**
     * Triggers GitHub to rerequest an existing check run, without pushing new code to a repository. This endpoint will trigger the [`check_run` webhook](https://docs.github.com/enterprise-server@3.6/webhooks/event-payloads/#check_run) event with the action `rerequested`. When a check run is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.
     *
     * To rerequest a check run, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.
     */
    readonly post: operations['checks/rerequest-run']
  }
  readonly '/repos/{owner}/{repo}/check-suites': {
    /**
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
     *
     * By default, check suites are automatically created when you create a [check run](https://docs.github.com/enterprise-server@3.6/rest/reference/checks#check-runs). You only need to use this endpoint for manually creating check suites when you've disabled automatic creation using "[Update repository preferences for check suites](https://docs.github.com/enterprise-server@3.6/rest/reference/checks#update-repository-preferences-for-check-suites)". Your GitHub App must have the `checks:write` permission to create check suites.
     */
    readonly post: operations['checks/create-suite']
  }
  readonly '/repos/{owner}/{repo}/check-suites/preferences': {
    /** Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/enterprise-server@3.6/rest/reference/checks#create-a-check-suite). You must have admin permissions in the repository to set preferences for check suites. */
    readonly patch: operations['checks/set-suites-preferences']
  }
  readonly '/repos/{owner}/{repo}/check-suites/{check_suite_id}': {
    /**
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
     *
     * Gets a single check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
     */
    readonly get: operations['checks/get-suite']
  }
  readonly '/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs': {
    /**
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
     *
     * Lists check runs for a check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
     */
    readonly get: operations['checks/list-for-suite']
  }
  readonly '/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest': {
    /**
     * Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [`check_suite` webhook](https://docs.github.com/enterprise-server@3.6/webhooks/event-payloads/#check_suite) event with the action `rerequested`. When a check suite is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.
     *
     * To rerequest a check suite, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.
     */
    readonly post: operations['checks/rerequest-suite']
  }
  readonly '/repos/{owner}/{repo}/code-scanning/alerts': {
    /**
     * Lists code scanning alerts.
     *
     * To use this endpoint, you must use an access token with the `security_events` scope or, for alerts from public repositories only, an access token with the `public_repo` scope.
     *
     * GitHub Apps must have the `security_events` read
     * permission to use this endpoint.
     *
     * The response includes a `most_recent_instance` object.
     * This provides details of the most recent instance of this alert
     * for the default branch (or for the specified Git reference if you used `ref` in the request).
     */
    readonly get: operations['code-scanning/list-alerts-for-repo']
  }
  readonly '/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}': {
    /**
     * Gets a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint with private repos, the `public_repo` scope also grants permission to read security events on public repos only. GitHub Apps must have the `security_events` read permission to use this endpoint.
     *
     * **Deprecation notice**:
     * The instances field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The same information can now be retrieved via a GET request to the URL specified by `instances_url`.
     */
    readonly get: operations['code-scanning/get-alert']
    /** Updates the status of a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint with private repositories. You can also use tokens with the `public_repo` scope for public repositories only. GitHub Apps must have the `security_events` write permission to use this endpoint. */
    readonly patch: operations['code-scanning/update-alert']
  }
  readonly '/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances': {
    /**
     * Lists all instances of the specified code scanning alert.
     * You must use an access token with the `security_events` scope to use this endpoint with private repos,
     * the `public_repo` scope also grants permission to read security events on public repos only.
     * GitHub Apps must have the `security_events` read permission to use this endpoint.
     */
    readonly get: operations['code-scanning/list-alert-instances']
  }
  readonly '/repos/{owner}/{repo}/code-scanning/analyses': {
    /**
     * Lists the details of all code scanning analyses for a repository,
     * starting with the most recent.
     * The response is paginated and you can use the `page` and `per_page` parameters
     * to list the analyses you're interested in.
     * By default 30 analyses are listed per page.
     *
     * The `rules_count` field in the response give the number of rules
     * that were run in the analysis.
     * For very old analyses this data is not available,
     * and `0` is returned in this field.
     *
     * You must use an access token with the `security_events` scope to use this endpoint with private repos,
     * the `public_repo` scope also grants permission to read security events on public repos only.
     * GitHub Apps must have the `security_events` read permission to use this endpoint.
     *
     * **Deprecation notice**:
     * The `tool_name` field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.
     */
    readonly get: operations['code-scanning/list-recent-analyses']
  }
  readonly '/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}': {
    /**
     * Gets a specified code scanning analysis for a repository.
     * You must use an access token with the `security_events` scope to use this endpoint with private repos,
     * the `public_repo` scope also grants permission to read security events on public repos only.
     * GitHub Apps must have the `security_events` read permission to use this endpoint.
     *
     * The default JSON response contains fields that describe the analysis.
     * This includes the Git reference and commit SHA to which the analysis relates,
     * the datetime of the analysis, the name of the code scanning tool,
     * and the number of alerts.
     *
     * The `rules_count` field in the default response give the number of rules
     * that were run in the analysis.
     * For very old analyses this data is not available,
     * and `0` is returned in this field.
     *
     * If you use the Accept header `application/sarif+json`,
     * the response contains the analysis data that was uploaded.
     * This is formatted as
     * [SARIF version 2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html).
     */
    readonly get: operations['code-scanning/get-analysis']
    /**
     * Deletes a specified code scanning analysis from a repository. For
     * private repositories, you must use an access token with the `repo` scope. For public repositories,
     * you must use an access token with `public_repo` scope.
     * GitHub Apps must have the `security_events` write permission to use this endpoint.
     *
     * You can delete one analysis at a time.
     * To delete a series of analyses, start with the most recent analysis and work backwards.
     * Conceptually, the process is similar to the undo function in a text editor.
     *
     * When you list the analyses for a repository,
     * one or more will be identified as deletable in the response:
     *
     * ```
     * "deletable": true
     * ```
     *
     * An analysis is deletable when it's the most recent in a set of analyses.
     * Typically, a repository will have multiple sets of analyses
     * for each enabled code scanning tool,
     * where a set is determined by a unique combination of analysis values:
     *
     * * `ref`
     * * `tool`
     * * `category`
     *
     * If you attempt to delete an analysis that is not the most recent in a set,
     * you'll get a 400 response with the message:
     *
     * ```
     * Analysis specified is not deletable.
     * ```
     *
     * The response from a successful `DELETE` operation provides you with
     * two alternative URLs for deleting the next analysis in the set:
     * `next_analysis_url` and `confirm_delete_url`.
     * Use the `next_analysis_url` URL if you want to avoid accidentally deleting the final analysis
     * in a set. This is a useful option if you want to preserve at least one analysis
     * for the specified tool in your repository.
     * Use the `confirm_delete_url` URL if you are content to remove all analyses for a tool.
     * When you delete the last analysis in a set, the value of `next_analysis_url` and `confirm_delete_url`
     * in the 200 response is `null`.
     *
     * As an example of the deletion process,
     * let's imagine that you added a workflow that configured a particular code scanning tool
     * to analyze the code in a repository. This tool has added 15 analyses:
     * 10 on the default branch, and another 5 on a topic branch.
     * You therefore have two separate sets of analyses for this tool.
     * You've now decided that you want to remove all of the analyses for the tool.
     * To do this you must make 15 separate deletion requests.
     * To start, you must find an analysis that's identified as deletable.
     * Each set of analyses always has one that's identified as deletable.
     * Having found the deletable analysis for one of the two sets,
     * delete this analysis and then continue deleting the next analysis in the set until they're all deleted.
     * Then repeat the process for the second set.
     * The procedure therefore consists of a nested loop:
     *
     * **Outer loop**:
     * * List the analyses for the repository, filtered by tool.
     * * Parse this list to find a deletable analysis. If found:
     *
     *   **Inner loop**:
     *   * Delete the identified analysis.
     *   * Parse the response for the value of `confirm_delete_url` and, if found, use this in the next iteration.
     *
     * The above process assumes that you want to remove all trace of the tool's analyses from the GitHub user interface, for the specified repository, and it therefore uses the `confirm_delete_url` value. Alternatively, you could use the `next_analysis_url` value, which would leave the last analysis in each set undeleted to avoid removing a tool's analysis entirely.
     */
    readonly delete: operations['code-scanning/delete-analysis']
  }
  readonly '/repos/{owner}/{repo}/code-scanning/sarifs': {
    /**
     * Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. You must use an access token with the `security_events` scope to use this endpoint for private repositories. You can also use tokens with the `public_repo` scope for public repositories only. GitHub Apps must have the `security_events` write permission to use this endpoint.
     *
     * There are two places where you can upload code scanning results.
     *  - If you upload to a pull request, for example `--ref refs/pull/42/merge` or `--ref refs/pull/42/head`, then the results appear as alerts in a pull request check. For more information, see "[Triaging code scanning alerts in pull requests](/code-security/secure-coding/triaging-code-scanning-alerts-in-pull-requests)."
     *  - If you upload to a branch, for example `--ref refs/heads/my-branch`, then the results appear in the **Security** tab for your repository. For more information, see "[Managing code scanning alerts for your repository](/code-security/secure-coding/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository)."
     *
     * You must compress the SARIF-formatted analysis data that you want to upload, using `gzip`, and then encode it as a Base64 format string. For example:
     *
     * ```
     * gzip -c analysis-data.sarif | base64 -w0
     * ```
     *
     * SARIF upload supports a maximum of 5000 results per analysis run. Any results over this limit are ignored and any SARIF uploads with more than 25,000 results are rejected. Typically, but not necessarily, a SARIF file contains a single run of a single tool. If a code scanning tool generates too many results, you should update the analysis configuration to run only the most important rules or queries.
     *
     * The `202 Accepted`, response includes an `id` value.
     * You can use this ID to check the status of the upload by using this for the `/sarifs/{sarif_id}` endpoint.
     * For more information, see "[Get information about a SARIF upload](/rest/reference/code-scanning#get-information-about-a-sarif-upload)."
     */
    readonly post: operations['code-scanning/upload-sarif']
  }
  readonly '/repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}': {
    /** Gets information about a SARIF upload, including the status and the URL of the analysis that was uploaded so that you can retrieve details of the analysis. For more information, see "[Get a code scanning analysis for a repository](/rest/reference/code-scanning#get-a-code-scanning-analysis-for-a-repository)." You must use an access token with the `security_events` scope to use this endpoint with private repos, the `public_repo` scope also grants permission to read security events on public repos only. GitHub Apps must have the `security_events` read permission to use this endpoint. */
    readonly get: operations['code-scanning/get-sarif']
  }
  readonly '/repos/{owner}/{repo}/codeowners/errors': {
    /**
     * List any syntax errors that are detected in the CODEOWNERS
     * file.
     *
     * For more information about the correct CODEOWNERS syntax,
     * see "[About code owners](https://docs.github.com/enterprise-server@3.6/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners)."
     */
    readonly get: operations['repos/codeowners-errors']
  }
  readonly '/repos/{owner}/{repo}/collaborators': {
    /**
     * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
     * Organization members with write, maintain, or admin privileges on the organization-owned repository can use this endpoint.
     *
     * Team members will include the members of child teams.
     *
     * You must authenticate using an access token with the `read:org` and `repo` scopes with push access to use this
     * endpoint. GitHub Apps must have the `members` organization permission and `metadata` repository permission to use this
     * endpoint.
     */
    readonly get: operations['repos/list-collaborators']
  }
  readonly '/repos/{owner}/{repo}/collaborators/{username}': {
    /**
     * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
     *
     * Team members will include the members of child teams.
     *
     * You must authenticate using an access token with the `read:org` and `repo` scopes with push access to use this
     * endpoint. GitHub Apps must have the `members` organization permission and `metadata` repository permission to use this
     * endpoint.
     */
    readonly get: operations['repos/check-collaborator']
    /**
     * This endpoint triggers [notifications](https://docs.github.com/enterprise-server@3.6/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
     *
     * Adding an outside collaborator may be restricted by enterprise administrators. For more information, see "[Enforcing repository management policies in your enterprise](https://docs.github.com/enterprise-server@3.6/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories)."
     *
     * For more information on permission levels, see "[Repository permission levels for an organization](https://docs.github.com/enterprise-server@3.6/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)". There are restrictions on which permissions can be granted to organization members when an organization base role is in place. In this case, the permission being given must be equal to or higher than the org base permission. Otherwise, the request will fail with:
     *
     * ```
     * Cannot assign {member} permission of {role name}
     * ```
     *
     * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#http-verbs)."
     *
     * The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [repository invitations API endpoints](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#invitations).
     *
     * **Updating an existing collaborator's permission level**
     *
     * The endpoint can also be used to change the permissions of an existing collaborator without first removing and re-adding the collaborator. To change the permissions, use the same endpoint and pass a different `permission` parameter. The response will be a `204`, with no other indication that the permission level changed.
     *
     * **Rate limits**
     *
     * You are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.
     */
    readonly put: operations['repos/add-collaborator']
    readonly delete: operations['repos/remove-collaborator']
  }
  readonly '/repos/{owner}/{repo}/collaborators/{username}/permission': {
    /** Checks the repository permission of a collaborator. The possible repository permissions are `admin`, `write`, `read`, and `none`. */
    readonly get: operations['repos/get-collaborator-permission-level']
  }
  readonly '/repos/{owner}/{repo}/comments': {
    /**
     * Commit Comments use [these custom media types](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#custom-media-types). You can read more about the use of media types in the API [here](https://docs.github.com/enterprise-server@3.6/rest/overview/media-types/).
     *
     * Comments are ordered by ascending ID.
     */
    readonly get: operations['repos/list-commit-comments-for-repo']
  }
  readonly '/repos/{owner}/{repo}/comments/{comment_id}': {
    readonly get: operations['repos/get-commit-comment']
    readonly delete: operations['repos/delete-commit-comment']
    readonly patch: operations['repos/update-commit-comment']
  }
  readonly '/repos/{owner}/{repo}/comments/{comment_id}/reactions': {
    /** List the reactions to a [commit comment](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#comments). */
    readonly get: operations['reactions/list-for-commit-comment']
    /** Create a reaction to a [commit comment](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#comments). A response with an HTTP `200` status means that you already added the reaction type to this commit comment. */
    readonly post: operations['reactions/create-for-commit-comment']
  }
  readonly '/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}': {
    /**
     * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`.
     *
     * Delete a reaction to a [commit comment](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#comments).
     */
    readonly delete: operations['reactions/delete-for-commit-comment']
  }
  readonly '/repos/{owner}/{repo}/commits': {
    /**
     * **Signature verification object**
     *
     * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
     *
     * | Name | Type | Description |
     * | ---- | ---- | ----------- |
     * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
     * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
     * | `signature` | `string` | The signature that was extracted from the commit. |
     * | `payload` | `string` | The value that was signed. |
     *
     * These are the possible values for `reason` in the `verification` object:
     *
     * | Value | Description |
     * | ----- | ----------- |
     * | `expired_key` | The key that made the signature is expired. |
     * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
     * | `gpgverify_error` | There was an error communicating with the signature verification service. |
     * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
     * | `unsigned` | The object does not include a signature. |
     * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
     * | `no_user` | No user was associated with the `committer` email address in the commit. |
     * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
     * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
     * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
     * | `malformed_signature` | There was an error parsing the signature. |
     * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
     * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
     */
    readonly get: operations['repos/list-commits']
  }
  readonly '/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head': {
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch.
     */
    readonly get: operations['repos/list-branches-for-head-commit']
  }
  readonly '/repos/{owner}/{repo}/commits/{commit_sha}/comments': {
    /** Use the `:commit_sha` to specify the commit that will have its comments listed. */
    readonly get: operations['repos/list-comments-for-commit']
    /**
     * Create a comment for a commit using its `:commit_sha`.
     *
     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
     */
    readonly post: operations['repos/create-commit-comment']
  }
  readonly '/repos/{owner}/{repo}/commits/{commit_sha}/pulls': {
    /** Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, additionally returns open pull requests associated with the commit. The results may include open and closed pull requests. */
    readonly get: operations['repos/list-pull-requests-associated-with-commit']
  }
  readonly '/repos/{owner}/{repo}/commits/{ref}': {
    /**
     * Returns the contents of a single commit reference. You must have `read` access for the repository to use this endpoint.
     *
     * **Note:** If there are more than 300 files in the commit diff, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.
     *
     * You can pass the appropriate [media type](https://docs.github.com/enterprise-server@3.6/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to  fetch `diff` and `patch` formats. Diffs with binary data will have no `patch` property.
     *
     * To return only the SHA-1 hash of the commit reference, you can provide the `sha` custom [media type](https://docs.github.com/enterprise-server@3.6/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) in the `Accept` header. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.
     *
     * **Signature verification object**
     *
     * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
     *
     * | Name | Type | Description |
     * | ---- | ---- | ----------- |
     * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
     * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
     * | `signature` | `string` | The signature that was extracted from the commit. |
     * | `payload` | `string` | The value that was signed. |
     *
     * These are the possible values for `reason` in the `verification` object:
     *
     * | Value | Description |
     * | ----- | ----------- |
     * | `expired_key` | The key that made the signature is expired. |
     * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
     * | `gpgverify_error` | There was an error communicating with the signature verification service. |
     * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
     * | `unsigned` | The object does not include a signature. |
     * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
     * | `no_user` | No user was associated with the `committer` email address in the commit. |
     * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
     * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
     * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
     * | `malformed_signature` | There was an error parsing the signature. |
     * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
     * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
     */
    readonly get: operations['repos/get-commit']
  }
  readonly '/repos/{owner}/{repo}/commits/{ref}/check-runs': {
    /**
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
     *
     * Lists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
     */
    readonly get: operations['checks/list-for-ref']
  }
  readonly '/repos/{owner}/{repo}/commits/{ref}/check-suites': {
    /**
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
     *
     * Lists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to list check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
     */
    readonly get: operations['checks/list-suites-for-ref']
  }
  readonly '/repos/{owner}/{repo}/commits/{ref}/status': {
    /**
     * Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.
     *
     *
     * Additionally, a combined `state` is returned. The `state` is one of:
     *
     * *   **failure** if any of the contexts report as `error` or `failure`
     * *   **pending** if there are no statuses or a context is `pending`
     * *   **success** if the latest status for all contexts is `success`
     */
    readonly get: operations['repos/get-combined-status-for-ref']
  }
  readonly '/repos/{owner}/{repo}/commits/{ref}/statuses': {
    /**
     * Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.
     *
     * This resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`.
     */
    readonly get: operations['repos/list-commit-statuses-for-ref']
  }
  readonly '/repos/{owner}/{repo}/compare/{basehead}': {
    /**
     * The `basehead` param is comprised of two parts separated by triple dots: `{base}...{head}`. Both must be branch names in `repo`. To compare branches across other repositories in the same network as `repo`, use the format `<USERNAME>:branch`.
     *
     * The response from the API is equivalent to running the `git log base..head` command; however, commits are returned in chronological order. Pass the appropriate [media type](https://docs.github.com/enterprise-server@3.6/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
     *
     * The response also includes details on the files that were changed between the two commits. This includes the status of the change (for example, if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.
     *
     * **Working with large comparisons**
     *
     * To process a response with a large number of commits, you can use (`per_page` or `page`) to paginate the results. When using paging, the list of changed files is only returned with page 1, but includes all changed files for the entire comparison. For more information on working with pagination, see "[Traversing with pagination](/rest/guides/traversing-with-pagination)."
     *
     * When calling this API without any paging parameters (`per_page` or `page`), the returned list is limited to 250 commits and the last commit in the list is the most recent of the entire comparison. When a paging parameter is specified, the first commit in the returned list of each page is the earliest.
     *
     * **Signature verification object**
     *
     * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
     *
     * | Name | Type | Description |
     * | ---- | ---- | ----------- |
     * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
     * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
     * | `signature` | `string` | The signature that was extracted from the commit. |
     * | `payload` | `string` | The value that was signed. |
     *
     * These are the possible values for `reason` in the `verification` object:
     *
     * | Value | Description |
     * | ----- | ----------- |
     * | `expired_key` | The key that made the signature is expired. |
     * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
     * | `gpgverify_error` | There was an error communicating with the signature verification service. |
     * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
     * | `unsigned` | The object does not include a signature. |
     * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
     * | `no_user` | No user was associated with the `committer` email address in the commit. |
     * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
     * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
     * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
     * | `malformed_signature` | There was an error parsing the signature. |
     * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
     * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
     */
    readonly get: operations['repos/compare-commits']
  }
  readonly '/repos/{owner}/{repo}/contents/{path}': {
    /**
     * Gets the contents of a file or directory in a repository. Specify the file path or directory in `:path`. If you omit
     * `:path`, you will receive the contents of the repository's root directory. See the description below regarding what the API response includes for directories.
     *
     * Files and symlinks support [a custom media type](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#custom-media-types) for
     * retrieving the raw content or rendered HTML (when supported). All content types support [a custom media
     * type](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#custom-media-types) to ensure the content is returned in a consistent
     * object format.
     *
     * **Notes**:
     * *   To get a repository's contents recursively, you can [recursively get the tree](https://docs.github.com/enterprise-server@3.6/rest/reference/git#trees).
     * *   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees
     * API](https://docs.github.com/enterprise-server@3.6/rest/reference/git#get-a-tree).
     *  *  Download URLs expire and are meant to be used just once. To ensure the download URL does not expire, please use the contents API to obtain a fresh download URL for each download.
     * #### Size limits
     * If the requested file's size is:
     * * 1 MB or smaller: All features of this endpoint are supported.
     * * Between 1-100 MB: Only the `raw` or `object` [custom media types](https://docs.github.com/enterprise-server@3.6/rest/repos/contents#custom-media-types-for-repository-contents) are supported. Both will work as normal, except that when using the `object` media type, the `content` field will be an empty string and the `encoding` field will be `"none"`. To get the contents of these larger files, use the `raw` media type.
     *  * Greater than 100 MB: This endpoint is not supported.
     *
     * #### If the content is a directory
     * The response will be an array of objects, one object for each item in the directory.
     * When listing the contents of a directory, submodules have their "type" specified as "file". Logically, the value
     * _should_ be "submodule". This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW).
     * In the next major version of the API, the type will be returned as "submodule".
     *
     * #### If the content is a symlink
     * If the requested `:path` points to a symlink, and the symlink's target is a normal file in the repository, then the
     * API responds with the content of the file (in the format shown in the example. Otherwise, the API responds with an object
     * describing the symlink itself.
     *
     * #### If the content is a submodule
     * The `submodule_git_url` identifies the location of the submodule repository, and the `sha` identifies a specific
     * commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out
     * the submodule at that specific commit.
     *
     * If the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links["git"]`) and the
     * github.com URLs (`html_url` and `_links["html"]`) will have null values.
     */
    readonly get: operations['repos/get-content']
    /**
     * Creates a new file or replaces an existing file in a repository. You must authenticate using an access token with the `workflow` scope to use this endpoint.
     *
     * **Note:** If you use this endpoint and the "[Delete a file](https://docs.github.com/enterprise-server@3.6/rest/reference/repos/#delete-file)" endpoint in parallel, the concurrent requests will conflict and you will receive errors. You must use these endpoints serially instead.
     */
    readonly put: operations['repos/create-or-update-file-contents']
    /**
     * Deletes a file in a repository.
     *
     * You can provide an additional `committer` parameter, which is an object containing information about the committer. Or, you can provide an `author` parameter, which is an object containing information about the author.
     *
     * The `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.
     *
     * You must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.
     *
     * **Note:** If you use this endpoint and the "[Create or update file contents](https://docs.github.com/enterprise-server@3.6/rest/reference/repos/#create-or-update-file-contents)" endpoint in parallel, the concurrent requests will conflict and you will receive errors. You must use these endpoints serially instead.
     */
    readonly delete: operations['repos/delete-file']
  }
  readonly '/repos/{owner}/{repo}/contributors': {
    /**
     * Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API v3 caches contributor data to improve performance.
     *
     * GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
     */
    readonly get: operations['repos/list-contributors']
  }
  readonly '/repos/{owner}/{repo}/dependabot/secrets': {
    /** Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint. */
    readonly get: operations['dependabot/list-repo-secrets']
  }
  readonly '/repos/{owner}/{repo}/dependabot/secrets/public-key': {
    /** Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint. */
    readonly get: operations['dependabot/get-repo-public-key']
  }
  readonly '/repos/{owner}/{repo}/dependabot/secrets/{secret_name}': {
    /** Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint. */
    readonly get: operations['dependabot/get-repo-secret']
    /**
     * Creates or updates a repository secret with an encrypted value. Encrypt your secret using
     * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
     * token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository
     * permission to use this endpoint.
     *
     * #### Example encrypting a secret using Node.js
     *
     * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
     *
     * ```
     * const sodium = require('tweetsodium');
     *
     * const key = "base64-encoded-public-key";
     * const value = "plain-text-secret";
     *
     * // Convert the message and key to Uint8Array's (Buffer implements that interface)
     * const messageBytes = Buffer.from(value);
     * const keyBytes = Buffer.from(key, 'base64');
     *
     * // Encrypt using LibSodium.
     * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
     *
     * // Base64 the encrypted secret
     * const encrypted = Buffer.from(encryptedBytes).toString('base64');
     *
     * console.log(encrypted);
     * ```
     *
     *
     * #### Example encrypting a secret using Python
     *
     * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
     *
     * ```
     * from base64 import b64encode
     * from nacl import encoding, public
     *
     * def encrypt(public_key: str, secret_value: str) -> str:
     *   """Encrypt a Unicode string using the public key."""
     *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
     *   sealed_box = public.SealedBox(public_key)
     *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
     *   return b64encode(encrypted).decode("utf-8")
     * ```
     *
     * #### Example encrypting a secret using C#
     *
     * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
     *
     * ```
     * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
     * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
     *
     * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
     *
     * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
     * ```
     *
     * #### Example encrypting a secret using Ruby
     *
     * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
     *
     * ```ruby
     * require "rbnacl"
     * require "base64"
     *
     * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
     * public_key = RbNaCl::PublicKey.new(key)
     *
     * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
     * encrypted_secret = box.encrypt("my_secret")
     *
     * # Print the base64 encoded secret
     * puts Base64.strict_encode64(encrypted_secret)
     * ```
     */
    readonly put: operations['dependabot/create-or-update-repo-secret']
    /** Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint. */
    readonly delete: operations['dependabot/delete-repo-secret']
  }
  readonly '/repos/{owner}/{repo}/dependency-graph/compare/{basehead}': {
    /** Gets the diff of the dependency changes between two commits of a repository, based on the changes to the dependency manifests made in those commits. */
    readonly get: operations['dependency-graph/diff-range']
  }
  readonly '/repos/{owner}/{repo}/deployments': {
    /** Simple filtering of deployments is available via query parameters: */
    readonly get: operations['repos/list-deployments']
    /**
     * Deployments offer a few configurable parameters with certain defaults.
     *
     * The `ref` parameter can be any named branch, tag, or SHA. At GitHub Enterprise Server we often deploy branches and verify them
     * before we merge a pull request.
     *
     * The `environment` parameter allows deployments to be issued to different runtime environments. Teams often have
     * multiple environments for verifying their applications, such as `production`, `staging`, and `qa`. This parameter
     * makes it easier to track which environments have requested deployments. The default environment is `production`.
     *
     * The `auto_merge` parameter is used to ensure that the requested ref is not behind the repository's default branch. If
     * the ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds,
     * the API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will
     * return a failure response.
     *
     * By default, [commit statuses](https://docs.github.com/enterprise-server@3.6/rest/commits/statuses) for every submitted context must be in a `success`
     * state. The `required_contexts` parameter allows you to specify a subset of contexts that must be `success`, or to
     * specify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do
     * not require any contexts or create any commit statuses, the deployment will always succeed.
     *
     * The `payload` parameter is available for any extra information that a deployment system might need. It is a JSON text
     * field that will be passed on when a deployment event is dispatched.
     *
     * The `task` parameter is used by the deployment system to allow different execution paths. In the web world this might
     * be `deploy:migrations` to run schema changes on the system. In the compiled world this could be a flag to compile an
     * application with debugging enabled.
     *
     * Users with `repo` or `repo_deployment` scopes can create a deployment for a given ref.
     *
     * #### Merged branch response
     * You will see this response when GitHub automatically merges the base branch into the topic branch instead of creating
     * a deployment. This auto-merge happens when:
     * *   Auto-merge option is enabled in the repository
     * *   Topic branch does not include the latest changes on the base branch, which is `master` in the response example
     * *   There are no merge conflicts
     *
     * If there are no new commits in the base branch, a new request to create a deployment should give a successful
     * response.
     *
     * #### Merge conflict response
     * This error happens when the `auto_merge` option is enabled and when the default branch (in this case `master`), can't
     * be merged into the branch that's being deployed (in this case `topic-branch`), due to merge conflicts.
     *
     * #### Failed commit status checks
     * This error happens when the `required_contexts` parameter indicates that one or more contexts need to have a `success`
     * status for the commit to be deployed, but one or more of the required contexts do not have a state of `success`.
     */
    readonly post: operations['repos/create-deployment']
  }
  readonly '/repos/{owner}/{repo}/deployments/{deployment_id}': {
    readonly get: operations['repos/get-deployment']
    /**
     * If the repository only has one deployment, you can delete the deployment regardless of its status. If the repository has more than one deployment, you can only delete inactive deployments. This ensures that repositories with multiple deployments will always have an active deployment. Anyone with `repo` or `repo_deployment` scopes can delete a deployment.
     *
     * To set a deployment as inactive, you must:
     *
     * *   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment.
     * *   Mark the active deployment as inactive by adding any non-successful deployment status.
     *
     * For more information, see "[Create a deployment](https://docs.github.com/enterprise-server@3.6/rest/reference/repos/#create-a-deployment)" and "[Create a deployment status](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#create-a-deployment-status)."
     */
    readonly delete: operations['repos/delete-deployment']
  }
  readonly '/repos/{owner}/{repo}/deployments/{deployment_id}/statuses': {
    /** Users with pull access can view deployment statuses for a deployment: */
    readonly get: operations['repos/list-deployment-statuses']
    /**
     * Users with `push` access can create deployment statuses for a given deployment.
     *
     * GitHub Apps require `read & write` access to "Deployments" and `read-only` access to "Repo contents" (for private repos). OAuth Apps require the `repo_deployment` scope.
     */
    readonly post: operations['repos/create-deployment-status']
  }
  readonly '/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}': {
    /** Users with pull access can view a deployment status for a deployment: */
    readonly get: operations['repos/get-deployment-status']
  }
  readonly '/repos/{owner}/{repo}/dispatches': {
    /**
     * You can use this endpoint to trigger a webhook event called `repository_dispatch` when you want activity that happens outside of GitHub Enterprise Server to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the `repository_dispatch` event occurs. For an example `repository_dispatch` webhook payload, see "[RepositoryDispatchEvent](https://docs.github.com/enterprise-server@3.6/webhooks/event-payloads/#repository_dispatch)."
     *
     * The `client_payload` parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the `client_payload` can include a message that a user would like to send using a GitHub Actions workflow. Or the `client_payload` can be used as a test to debug your workflow.
     *
     * This endpoint requires write access to the repository by providing either:
     *
     *   - Personal access tokens with `repo` scope. For more information, see "[Creating a personal access token for the command line](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line)" in the GitHub Help documentation.
     *   - GitHub Apps with both `metadata:read` and `contents:read&write` permissions.
     *
     * This input example shows how you can use the `client_payload` as a test to debug your workflow.
     */
    readonly post: operations['repos/create-dispatch-event']
  }
  readonly '/repos/{owner}/{repo}/environments': {
    /**
     * Lists the environments for a repository.
     *
     * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     */
    readonly get: operations['repos/get-all-environments']
  }
  readonly '/repos/{owner}/{repo}/environments/{environment_name}': {
    /**
     * **Note:** To get information about name patterns that branches must match in order to deploy to this environment, see "[Get a deployment branch policy](/rest/deployments/branch-policies#get-a-deployment-branch-policy)."
     *
     * Anyone with read access to the repository can use this endpoint. If the
     * repository is private, you must use an access token with the `repo` scope. GitHub
     * Apps must have the `actions:read` permission to use this endpoint.
     */
    readonly get: operations['repos/get-environment']
    /**
     * Create or update an environment with protection rules, such as required reviewers. For more information about environment protection rules, see "[Environments](/actions/reference/environments#environment-protection-rules)."
     *
     * **Note:** To create or update name patterns that branches must match in order to deploy to this environment, see "[Deployment branch policies](/rest/deployments/branch-policies)."
     *
     * **Note:** To create or update secrets for an environment, see "[Secrets](/rest/reference/actions#secrets)."
     *
     * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration:write` permission for the repository to use this endpoint.
     */
    readonly put: operations['repos/create-or-update-environment']
    /** You must authenticate using an access token with the repo scope to use this endpoint. */
    readonly delete: operations['repos/delete-an-environment']
  }
  readonly '/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies': {
    /**
     * Lists the deployment branch policies for an environment.
     *
     * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     */
    readonly get: operations['repos/list-deployment-branch-policies']
    /**
     * Creates a deployment branch policy for an environment.
     *
     * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration:write` permission for the repository to use this endpoint.
     */
    readonly post: operations['repos/create-deployment-branch-policy']
  }
  readonly '/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}': {
    /**
     * Gets a deployment branch policy for an environment.
     *
     * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     */
    readonly get: operations['repos/get-deployment-branch-policy']
    /**
     * Updates a deployment branch policy for an environment.
     *
     * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration:write` permission for the repository to use this endpoint.
     */
    readonly put: operations['repos/update-deployment-branch-policy']
    /**
     * Deletes a deployment branch policy for an environment.
     *
     * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration:write` permission for the repository to use this endpoint.
     */
    readonly delete: operations['repos/delete-deployment-branch-policy']
  }
  readonly '/repos/{owner}/{repo}/events': {
    readonly get: operations['activity/list-repo-events']
  }
  readonly '/repos/{owner}/{repo}/forks': {
    readonly get: operations['repos/list-forks']
    /**
     * Create a fork for the authenticated user.
     *
     * **Note**: Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Enterprise Server Support](https://support.github.com/contact?tags=dotcom-rest-api).
     */
    readonly post: operations['repos/create-fork']
  }
  readonly '/repos/{owner}/{repo}/git/blobs': {
    readonly post: operations['git/create-blob']
  }
  readonly '/repos/{owner}/{repo}/git/blobs/{file_sha}': {
    /**
     * The `content` in the response will always be Base64 encoded.
     *
     * _Note_: This API supports blobs up to 100 megabytes in size.
     */
    readonly get: operations['git/get-blob']
  }
  readonly '/repos/{owner}/{repo}/git/commits': {
    /**
     * Creates a new Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).
     *
     * **Signature verification object**
     *
     * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
     *
     * | Name | Type | Description |
     * | ---- | ---- | ----------- |
     * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
     * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in the table below. |
     * | `signature` | `string` | The signature that was extracted from the commit. |
     * | `payload` | `string` | The value that was signed. |
     *
     * These are the possible values for `reason` in the `verification` object:
     *
     * | Value | Description |
     * | ----- | ----------- |
     * | `expired_key` | The key that made the signature is expired. |
     * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
     * | `gpgverify_error` | There was an error communicating with the signature verification service. |
     * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
     * | `unsigned` | The object does not include a signature. |
     * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
     * | `no_user` | No user was associated with the `committer` email address in the commit. |
     * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
     * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
     * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
     * | `malformed_signature` | There was an error parsing the signature. |
     * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
     * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
     */
    readonly post: operations['git/create-commit']
  }
  readonly '/repos/{owner}/{repo}/git/commits/{commit_sha}': {
    /**
     * Gets a Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).
     *
     * **Signature verification object**
     *
     * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
     *
     * | Name | Type | Description |
     * | ---- | ---- | ----------- |
     * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
     * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in the table below. |
     * | `signature` | `string` | The signature that was extracted from the commit. |
     * | `payload` | `string` | The value that was signed. |
     *
     * These are the possible values for `reason` in the `verification` object:
     *
     * | Value | Description |
     * | ----- | ----------- |
     * | `expired_key` | The key that made the signature is expired. |
     * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
     * | `gpgverify_error` | There was an error communicating with the signature verification service. |
     * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
     * | `unsigned` | The object does not include a signature. |
     * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
     * | `no_user` | No user was associated with the `committer` email address in the commit. |
     * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
     * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
     * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
     * | `malformed_signature` | There was an error parsing the signature. |
     * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
     * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
     */
    readonly get: operations['git/get-commit']
  }
  readonly '/repos/{owner}/{repo}/git/matching-refs/{ref}': {
    /**
     * Returns an array of references from your Git database that match the supplied name. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't exist in the repository, but existing refs start with `:ref`, they will be returned as an array.
     *
     * When you use this endpoint without providing a `:ref`, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just `heads` and `tags`.
     *
     * **Note:** You need to explicitly [request a pull request](https://docs.github.com/enterprise-server@3.6/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/enterprise-server@3.6/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
     *
     * If you request matching references for a branch named `feature` but the branch `feature` doesn't exist, the response can still include other matching head refs that start with the word `feature`, such as `featureA` and `featureB`.
     */
    readonly get: operations['git/list-matching-refs']
  }
  readonly '/repos/{owner}/{repo}/git/ref/{ref}': {
    /**
     * Returns a single reference from your Git database. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't match an existing ref, a `404` is returned.
     *
     * **Note:** You need to explicitly [request a pull request](https://docs.github.com/enterprise-server@3.6/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/enterprise-server@3.6/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
     */
    readonly get: operations['git/get-ref']
  }
  readonly '/repos/{owner}/{repo}/git/refs': {
    /** Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches. */
    readonly post: operations['git/create-ref']
  }
  readonly '/repos/{owner}/{repo}/git/refs/{ref}': {
    readonly delete: operations['git/delete-ref']
    readonly patch: operations['git/update-ref']
  }
  readonly '/repos/{owner}/{repo}/git/tags': {
    /**
     * Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then [create](https://docs.github.com/enterprise-server@3.6/rest/reference/git#create-a-reference) the `refs/tags/[tag]` reference. If you want to create a lightweight tag, you only have to [create](https://docs.github.com/enterprise-server@3.6/rest/reference/git#create-a-reference) the tag reference - this call would be unnecessary.
     *
     * **Signature verification object**
     *
     * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
     *
     * | Name | Type | Description |
     * | ---- | ---- | ----------- |
     * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
     * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
     * | `signature` | `string` | The signature that was extracted from the commit. |
     * | `payload` | `string` | The value that was signed. |
     *
     * These are the possible values for `reason` in the `verification` object:
     *
     * | Value | Description |
     * | ----- | ----------- |
     * | `expired_key` | The key that made the signature is expired. |
     * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
     * | `gpgverify_error` | There was an error communicating with the signature verification service. |
     * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
     * | `unsigned` | The object does not include a signature. |
     * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
     * | `no_user` | No user was associated with the `committer` email address in the commit. |
     * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
     * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
     * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
     * | `malformed_signature` | There was an error parsing the signature. |
     * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
     * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
     */
    readonly post: operations['git/create-tag']
  }
  readonly '/repos/{owner}/{repo}/git/tags/{tag_sha}': {
    /**
     * **Signature verification object**
     *
     * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
     *
     * | Name | Type | Description |
     * | ---- | ---- | ----------- |
     * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
     * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
     * | `signature` | `string` | The signature that was extracted from the commit. |
     * | `payload` | `string` | The value that was signed. |
     *
     * These are the possible values for `reason` in the `verification` object:
     *
     * | Value | Description |
     * | ----- | ----------- |
     * | `expired_key` | The key that made the signature is expired. |
     * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
     * | `gpgverify_error` | There was an error communicating with the signature verification service. |
     * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
     * | `unsigned` | The object does not include a signature. |
     * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
     * | `no_user` | No user was associated with the `committer` email address in the commit. |
     * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
     * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
     * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
     * | `malformed_signature` | There was an error parsing the signature. |
     * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
     * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
     */
    readonly get: operations['git/get-tag']
  }
  readonly '/repos/{owner}/{repo}/git/trees': {
    /**
     * The tree creation API accepts nested entries. If you specify both a tree and a nested path modifying that tree, this endpoint will overwrite the contents of the tree with the new path contents, and create a new tree structure.
     *
     * If you use this endpoint to add, delete, or modify the file contents in a tree, you will need to commit the tree and then update a branch to point to the commit. For more information see "[Create a commit](https://docs.github.com/enterprise-server@3.6/rest/reference/git#create-a-commit)" and "[Update a reference](https://docs.github.com/enterprise-server@3.6/rest/reference/git#update-a-reference)."
     *
     * Returns an error if you try to delete a file that does not exist.
     */
    readonly post: operations['git/create-tree']
  }
  readonly '/repos/{owner}/{repo}/git/trees/{tree_sha}': {
    /**
     * Returns a single tree using the SHA1 value for that tree.
     *
     * If `truncated` is `true` in the response then the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time.
     *
     *
     * **Note**: The limit for the `tree` array is 100,000 entries with a maximum size of 7 MB when using the `recursive` parameter.
     */
    readonly get: operations['git/get-tree']
  }
  readonly '/repos/{owner}/{repo}/hooks': {
    /** Lists webhooks for a repository. `last response` may return null if there have not been any deliveries within 30 days. */
    readonly get: operations['repos/list-webhooks']
    /**
     * Repositories can have multiple webhooks installed. Each webhook should have a unique `config`. Multiple webhooks can
     * share the same `config` as long as those webhooks do not have any `events` that overlap.
     */
    readonly post: operations['repos/create-webhook']
  }
  readonly '/repos/{owner}/{repo}/hooks/{hook_id}': {
    /** Returns a webhook configured in a repository. To get only the webhook `config` properties, see "[Get a webhook configuration for a repository](/rest/reference/repos#get-a-webhook-configuration-for-a-repository)." */
    readonly get: operations['repos/get-webhook']
    readonly delete: operations['repos/delete-webhook']
    /** Updates a webhook configured in a repository. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for a repository](/rest/reference/repos#update-a-webhook-configuration-for-a-repository)." */
    readonly patch: operations['repos/update-webhook']
  }
  readonly '/repos/{owner}/{repo}/hooks/{hook_id}/config': {
    /**
     * Returns the webhook configuration for a repository. To get more information about the webhook, including the `active` state and `events`, use "[Get a repository webhook](/rest/reference/orgs#get-a-repository-webhook)."
     *
     * Access tokens must have the `read:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:read` permission.
     */
    readonly get: operations['repos/get-webhook-config-for-repo']
    /**
     * Updates the webhook configuration for a repository. To update more information about the webhook, including the `active` state and `events`, use "[Update a repository webhook](/rest/reference/orgs#update-a-repository-webhook)."
     *
     * Access tokens must have the `write:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:write` permission.
     */
    readonly patch: operations['repos/update-webhook-config-for-repo']
  }
  readonly '/repos/{owner}/{repo}/hooks/{hook_id}/deliveries': {
    /** Returns a list of webhook deliveries for a webhook configured in a repository. */
    readonly get: operations['repos/list-webhook-deliveries']
  }
  readonly '/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}': {
    /** Returns a delivery for a webhook configured in a repository. */
    readonly get: operations['repos/get-webhook-delivery']
  }
  readonly '/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts': {
    /** Redeliver a webhook delivery for a webhook configured in a repository. */
    readonly post: operations['repos/redeliver-webhook-delivery']
  }
  readonly '/repos/{owner}/{repo}/hooks/{hook_id}/pings': {
    /** This will trigger a [ping event](https://docs.github.com/enterprise-server@3.6/webhooks/#ping-event) to be sent to the hook. */
    readonly post: operations['repos/ping-webhook']
  }
  readonly '/repos/{owner}/{repo}/hooks/{hook_id}/tests': {
    /**
     * This will trigger the hook with the latest push to the current repository if the hook is subscribed to `push` events. If the hook is not subscribed to `push` events, the server will respond with 204 but no test POST will be generated.
     *
     * **Note**: Previously `/repos/:owner/:repo/hooks/:hook_id/test`
     */
    readonly post: operations['repos/test-push-webhook']
  }
  readonly '/repos/{owner}/{repo}/installation': {
    /**
     * Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.
     *
     * You must use a [JWT](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     */
    readonly get: operations['apps/get-repo-installation']
  }
  readonly '/repos/{owner}/{repo}/invitations': {
    /** When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations. */
    readonly get: operations['repos/list-invitations']
  }
  readonly '/repos/{owner}/{repo}/invitations/{invitation_id}': {
    readonly delete: operations['repos/delete-invitation']
    readonly patch: operations['repos/update-invitation']
  }
  readonly '/repos/{owner}/{repo}/issues': {
    /**
     * List issues in a repository.
     *
     * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
     * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
     * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
     * request id, use the "[List pull requests](https://docs.github.com/enterprise-server@3.6/rest/reference/pulls#list-pull-requests)" endpoint.
     */
    readonly get: operations['issues/list-for-repo']
    /**
     * Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://docs.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.
     *
     * This endpoint triggers [notifications](https://docs.github.com/enterprise-server@3.6/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
     */
    readonly post: operations['issues/create']
  }
  readonly '/repos/{owner}/{repo}/issues/comments': {
    /** By default, Issue Comments are ordered by ascending ID. */
    readonly get: operations['issues/list-comments-for-repo']
  }
  readonly '/repos/{owner}/{repo}/issues/comments/{comment_id}': {
    readonly get: operations['issues/get-comment']
    readonly delete: operations['issues/delete-comment']
    readonly patch: operations['issues/update-comment']
  }
  readonly '/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions': {
    /** List the reactions to an [issue comment](https://docs.github.com/enterprise-server@3.6/rest/reference/issues#comments). */
    readonly get: operations['reactions/list-for-issue-comment']
    /** Create a reaction to an [issue comment](https://docs.github.com/enterprise-server@3.6/rest/reference/issues#comments). A response with an HTTP `200` status means that you already added the reaction type to this issue comment. */
    readonly post: operations['reactions/create-for-issue-comment']
  }
  readonly '/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}': {
    /**
     * **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.
     *
     * Delete a reaction to an [issue comment](https://docs.github.com/enterprise-server@3.6/rest/reference/issues#comments).
     */
    readonly delete: operations['reactions/delete-for-issue-comment']
  }
  readonly '/repos/{owner}/{repo}/issues/events': {
    readonly get: operations['issues/list-events-for-repo']
  }
  readonly '/repos/{owner}/{repo}/issues/events/{event_id}': {
    readonly get: operations['issues/get-event']
  }
  readonly '/repos/{owner}/{repo}/issues/{issue_number}': {
    /**
     * The API returns a [`301 Moved Permanently` status](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was
     * [transferred](https://docs.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If
     * the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API
     * returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read
     * access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe
     * to the [`issues`](https://docs.github.com/enterprise-server@3.6/webhooks/event-payloads/#issues) webhook.
     *
     * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
     * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
     * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
     * request id, use the "[List pull requests](https://docs.github.com/enterprise-server@3.6/rest/reference/pulls#list-pull-requests)" endpoint.
     */
    readonly get: operations['issues/get']
    /** Issue owners and users with push access can edit an issue. */
    readonly patch: operations['issues/update']
  }
  readonly '/repos/{owner}/{repo}/issues/{issue_number}/assignees': {
    /** Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced. */
    readonly post: operations['issues/add-assignees']
    /** Removes one or more assignees from an issue. */
    readonly delete: operations['issues/remove-assignees']
  }
  readonly '/repos/{owner}/{repo}/issues/{issue_number}/comments': {
    /** Issue Comments are ordered by ascending ID. */
    readonly get: operations['issues/list-comments']
    /** This endpoint triggers [notifications](https://docs.github.com/enterprise-server@3.6/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details. */
    readonly post: operations['issues/create-comment']
  }
  readonly '/repos/{owner}/{repo}/issues/{issue_number}/events': {
    readonly get: operations['issues/list-events']
  }
  readonly '/repos/{owner}/{repo}/issues/{issue_number}/labels': {
    readonly get: operations['issues/list-labels-on-issue']
    /** Removes any previous labels and sets the new labels for an issue. */
    readonly put: operations['issues/set-labels']
    readonly post: operations['issues/add-labels']
    readonly delete: operations['issues/remove-all-labels']
  }
  readonly '/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}': {
    /** Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a `404 Not Found` status if the label does not exist. */
    readonly delete: operations['issues/remove-label']
  }
  readonly '/repos/{owner}/{repo}/issues/{issue_number}/lock': {
    /**
     * Users with push access can lock an issue or pull request's conversation.
     *
     * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#http-verbs)."
     */
    readonly put: operations['issues/lock']
    /** Users with push access can unlock an issue's conversation. */
    readonly delete: operations['issues/unlock']
  }
  readonly '/repos/{owner}/{repo}/issues/{issue_number}/reactions': {
    /** List the reactions to an [issue](https://docs.github.com/enterprise-server@3.6/rest/reference/issues). */
    readonly get: operations['reactions/list-for-issue']
    /** Create a reaction to an [issue](https://docs.github.com/enterprise-server@3.6/rest/reference/issues/). A response with an HTTP `200` status means that you already added the reaction type to this issue. */
    readonly post: operations['reactions/create-for-issue']
  }
  readonly '/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}': {
    /**
     * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.
     *
     * Delete a reaction to an [issue](https://docs.github.com/enterprise-server@3.6/rest/reference/issues/).
     */
    readonly delete: operations['reactions/delete-for-issue']
  }
  readonly '/repos/{owner}/{repo}/issues/{issue_number}/timeline': {
    readonly get: operations['issues/list-events-for-timeline']
  }
  readonly '/repos/{owner}/{repo}/keys': {
    readonly get: operations['repos/list-deploy-keys']
    /** You can create a read-only deploy key. */
    readonly post: operations['repos/create-deploy-key']
  }
  readonly '/repos/{owner}/{repo}/keys/{key_id}': {
    readonly get: operations['repos/get-deploy-key']
    /** Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead. */
    readonly delete: operations['repos/delete-deploy-key']
  }
  readonly '/repos/{owner}/{repo}/labels': {
    readonly get: operations['issues/list-labels-for-repo']
    readonly post: operations['issues/create-label']
  }
  readonly '/repos/{owner}/{repo}/labels/{name}': {
    readonly get: operations['issues/get-label']
    readonly delete: operations['issues/delete-label']
    readonly patch: operations['issues/update-label']
  }
  readonly '/repos/{owner}/{repo}/languages': {
    /** Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language. */
    readonly get: operations['repos/list-languages']
  }
  readonly '/repos/{owner}/{repo}/lfs': {
    readonly put: operations['repos/enable-lfs-for-repo']
    readonly delete: operations['repos/disable-lfs-for-repo']
  }
  readonly '/repos/{owner}/{repo}/license': {
    /**
     * This method returns the contents of the repository's license file, if one is detected.
     *
     * Similar to [Get repository content](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#get-repository-content), this method also supports [custom media types](https://docs.github.com/enterprise-server@3.6/rest/overview/media-types) for retrieving the raw license content or rendered license HTML.
     */
    readonly get: operations['licenses/get-for-repo']
  }
  readonly '/repos/{owner}/{repo}/merge-upstream': {
    /** Sync a branch of a forked repository to keep it up-to-date with the upstream repository. */
    readonly post: operations['repos/merge-upstream']
  }
  readonly '/repos/{owner}/{repo}/merges': {
    readonly post: operations['repos/merge']
  }
  readonly '/repos/{owner}/{repo}/milestones': {
    readonly get: operations['issues/list-milestones']
    readonly post: operations['issues/create-milestone']
  }
  readonly '/repos/{owner}/{repo}/milestones/{milestone_number}': {
    readonly get: operations['issues/get-milestone']
    readonly delete: operations['issues/delete-milestone']
    readonly patch: operations['issues/update-milestone']
  }
  readonly '/repos/{owner}/{repo}/milestones/{milestone_number}/labels': {
    readonly get: operations['issues/list-labels-for-milestone']
  }
  readonly '/repos/{owner}/{repo}/notifications': {
    /** Lists all notifications for the current user in the specified repository. */
    readonly get: operations['activity/list-repo-notifications-for-authenticated-user']
    /** Marks all notifications in a repository as "read" for the current user. If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub Enterprise Server will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List repository notifications for the authenticated user](https://docs.github.com/enterprise-server@3.6/rest/reference/activity#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`. */
    readonly put: operations['activity/mark-repo-notifications-as-read']
  }
  readonly '/repos/{owner}/{repo}/pages': {
    readonly get: operations['repos/get-pages']
    /** Updates information for a GitHub Enterprise Server Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages). */
    readonly put: operations['repos/update-information-about-pages-site']
    /** Configures a GitHub Enterprise Server Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages)." You must be an admin of the repository in order to use this operation. */
    readonly post: operations['repos/create-pages-site']
    /** Deletes a GitHub Pages site. You must be an admin of the repository in order to use this operation. */
    readonly delete: operations['repos/delete-pages-site']
  }
  readonly '/repos/{owner}/{repo}/pages/builds': {
    readonly get: operations['repos/list-pages-builds']
    /**
     * You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.
     *
     * Build requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.
     */
    readonly post: operations['repos/request-pages-build']
  }
  readonly '/repos/{owner}/{repo}/pages/builds/latest': {
    readonly get: operations['repos/get-latest-pages-build']
  }
  readonly '/repos/{owner}/{repo}/pages/builds/{build_id}': {
    readonly get: operations['repos/get-pages-build']
  }
  readonly '/repos/{owner}/{repo}/pre-receive-hooks': {
    /** List all pre-receive hooks that are enabled or testing for this repository as well as any disabled hooks that are allowed to be enabled at the repository level. Pre-receive hooks that are disabled at a higher level and are not configurable will not be listed. */
    readonly get: operations['enterprise-admin/list-pre-receive-hooks-for-repo']
  }
  readonly '/repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}': {
    readonly get: operations['enterprise-admin/get-pre-receive-hook-for-repo']
    /**
     * Deletes any overridden enforcement on this repository for the specified hook.
     *
     * Responds with effective values inherited from owner and/or global level.
     */
    readonly delete: operations['enterprise-admin/remove-pre-receive-hook-enforcement-for-repo']
    /** For pre-receive hooks which are allowed to be configured at the repo level, you can set `enforcement` */
    readonly patch: operations['enterprise-admin/update-pre-receive-hook-enforcement-for-repo']
  }
  readonly '/repos/{owner}/{repo}/projects': {
    /** Lists the projects in a repository. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. */
    readonly get: operations['projects/list-for-repo']
    /** Creates a repository project board. Returns a `410 Gone` status if projects are disabled in the repository or if the repository does not have existing classic projects. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. */
    readonly post: operations['projects/create-for-repo']
  }
  readonly '/repos/{owner}/{repo}/pulls': {
    /** Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
    readonly get: operations['pulls/list']
    /**
     * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
     *
     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
     */
    readonly post: operations['pulls/create']
  }
  readonly '/repos/{owner}/{repo}/pulls/comments': {
    /** Lists review comments for all pull requests in a repository. By default, review comments are in ascending order by ID. */
    readonly get: operations['pulls/list-review-comments-for-repo']
  }
  readonly '/repos/{owner}/{repo}/pulls/comments/{comment_id}': {
    /** Provides details for a review comment. */
    readonly get: operations['pulls/get-review-comment']
    /** Deletes a review comment. */
    readonly delete: operations['pulls/delete-review-comment']
    /** Enables you to edit a review comment. */
    readonly patch: operations['pulls/update-review-comment']
  }
  readonly '/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions': {
    /** List the reactions to a [pull request review comment](https://docs.github.com/enterprise-server@3.6/rest/reference/pulls#review-comments). */
    readonly get: operations['reactions/list-for-pull-request-review-comment']
    /** Create a reaction to a [pull request review comment](https://docs.github.com/enterprise-server@3.6/rest/reference/pulls#comments). A response with an HTTP `200` status means that you already added the reaction type to this pull request review comment. */
    readonly post: operations['reactions/create-for-pull-request-review-comment']
  }
  readonly '/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}': {
    /**
     * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.`
     *
     * Delete a reaction to a [pull request review comment](https://docs.github.com/enterprise-server@3.6/rest/reference/pulls#review-comments).
     */
    readonly delete: operations['reactions/delete-for-pull-request-comment']
  }
  readonly '/repos/{owner}/{repo}/pulls/{pull_number}': {
    /**
     * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Lists details of a pull request by providing its number.
     *
     * When you get, [create](https://docs.github.com/enterprise-server@3.6/rest/reference/pulls/#create-a-pull-request), or [edit](https://docs.github.com/enterprise-server@3.6/rest/reference/pulls#update-a-pull-request) a pull request, GitHub Enterprise Server creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/enterprise-server@3.6/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
     *
     * The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub Enterprise Server has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.
     *
     * The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:
     *
     * *   If merged as a [merge commit](https://docs.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.
     * *   If merged via a [squash](https://docs.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.
     * *   If [rebased](https://docs.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.
     *
     * Pass the appropriate [media type](https://docs.github.com/enterprise-server@3.6/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
     */
    readonly get: operations['pulls/get']
    /**
     * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
     */
    readonly patch: operations['pulls/update']
  }
  readonly '/repos/{owner}/{repo}/pulls/{pull_number}/comments': {
    /** Lists all review comments for a pull request. By default, review comments are in ascending order by ID. */
    readonly get: operations['pulls/list-review-comments']
    /**
     * Creates a review comment in the pull request diff. To add a regular comment to a pull request timeline, see "[Create an issue comment](https://docs.github.com/enterprise-server@3.6/rest/reference/issues#create-an-issue-comment)." We recommend creating a review comment using `line`, `side`, and optionally `start_line` and `start_side` if your comment applies to more than one line in the pull request diff.
     *
     * The `position` parameter is deprecated. If you use `position`, the `line`, `side`, `start_line`, and `start_side` parameters are not required.
     *
     * **Note:** The position value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
     *
     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
     */
    readonly post: operations['pulls/create-review-comment']
  }
  readonly '/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies': {
    /**
     * Creates a reply to a review comment for a pull request. For the `comment_id`, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.
     *
     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
     */
    readonly post: operations['pulls/create-reply-for-review-comment']
  }
  readonly '/repos/{owner}/{repo}/pulls/{pull_number}/commits': {
    /** Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#list-commits) endpoint. */
    readonly get: operations['pulls/list-commits']
  }
  readonly '/repos/{owner}/{repo}/pulls/{pull_number}/files': {
    /** **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default. */
    readonly get: operations['pulls/list-files']
  }
  readonly '/repos/{owner}/{repo}/pulls/{pull_number}/merge': {
    readonly get: operations['pulls/check-if-merged']
    /** This endpoint triggers [notifications](https://docs.github.com/enterprise-server@3.6/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details. */
    readonly put: operations['pulls/merge']
  }
  readonly '/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers': {
    /** Gets the users or teams whose review is requested for a pull request. Once a requested reviewer submits a review, they are no longer considered a requested reviewer. Their review will instead be returned by the [List reviews for a pull request](https://docs.github.com/enterprise-server@3.6/rest/pulls/reviews#list-reviews-for-a-pull-request) operation. */
    readonly get: operations['pulls/list-requested-reviewers']
    /** This endpoint triggers [notifications](https://docs.github.com/enterprise-server@3.6/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details. */
    readonly post: operations['pulls/request-reviewers']
    readonly delete: operations['pulls/remove-requested-reviewers']
  }
  readonly '/repos/{owner}/{repo}/pulls/{pull_number}/reviews': {
    /** The list of reviews returns in chronological order. */
    readonly get: operations['pulls/list-reviews']
    /**
     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
     *
     * Pull request reviews created in the `PENDING` state are not submitted and therefore do not include the `submitted_at` property in the response. To create a pending review for a pull request, leave the `event` parameter blank. For more information about submitting a `PENDING` review, see "[Submit a review for a pull request](https://docs.github.com/enterprise-server@3.6/rest/pulls#submit-a-review-for-a-pull-request)."
     *
     * **Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API v3 offers the `application/vnd.github.v3.diff` [media type](https://docs.github.com/enterprise-server@3.6/rest/overview/media-types#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the `Accept` header of a call to the [single pull request](https://docs.github.com/enterprise-server@3.6/rest/reference/pulls#get-a-pull-request) endpoint.
     *
     * The `position` value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
     */
    readonly post: operations['pulls/create-review']
  }
  readonly '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}': {
    readonly get: operations['pulls/get-review']
    /** Update the review summary comment with new text. */
    readonly put: operations['pulls/update-review']
    readonly delete: operations['pulls/delete-pending-review']
  }
  readonly '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments': {
    /** List comments for a specific pull request review. */
    readonly get: operations['pulls/list-comments-for-review']
  }
  readonly '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals': {
    /** **Note:** To dismiss a pull request review on a [protected branch](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#branches), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews. */
    readonly put: operations['pulls/dismiss-review']
  }
  readonly '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events': {
    /** Submits a pending review for a pull request. For more information about creating a pending review for a pull request, see "[Create a review for a pull request](https://docs.github.com/enterprise-server@3.6/rest/pulls#create-a-review-for-a-pull-request)." */
    readonly post: operations['pulls/submit-review']
  }
  readonly '/repos/{owner}/{repo}/pulls/{pull_number}/update-branch': {
    /** Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch. */
    readonly put: operations['pulls/update-branch']
  }
  readonly '/repos/{owner}/{repo}/readme': {
    /**
     * Gets the preferred README for a repository.
     *
     * READMEs support [custom media types](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
     */
    readonly get: operations['repos/get-readme']
  }
  readonly '/repos/{owner}/{repo}/readme/{dir}': {
    /**
     * Gets the README from a repository directory.
     *
     * READMEs support [custom media types](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
     */
    readonly get: operations['repos/get-readme-in-directory']
  }
  readonly '/repos/{owner}/{repo}/releases': {
    /**
     * This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#list-repository-tags).
     *
     * Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
     */
    readonly get: operations['repos/list-releases']
    /**
     * Users with push access to the repository can create a release.
     *
     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
     */
    readonly post: operations['repos/create-release']
  }
  readonly '/repos/{owner}/{repo}/releases/assets/{asset_id}': {
    /** To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://docs.github.com/enterprise-server@3.6/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response. */
    readonly get: operations['repos/get-release-asset']
    readonly delete: operations['repos/delete-release-asset']
    /** Users with push access to the repository can edit a release asset. */
    readonly patch: operations['repos/update-release-asset']
  }
  readonly '/repos/{owner}/{repo}/releases/generate-notes': {
    /** Generate a name and body describing a [release](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#releases). The body content will be markdown formatted and contain information like the changes since last release and users who contributed. The generated release notes are not saved anywhere. They are intended to be generated and used when creating a new release. */
    readonly post: operations['repos/generate-release-notes']
  }
  readonly '/repos/{owner}/{repo}/releases/latest': {
    /**
     * View the latest published full release for the repository.
     *
     * The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
     */
    readonly get: operations['repos/get-latest-release']
  }
  readonly '/repos/{owner}/{repo}/releases/tags/{tag}': {
    /** Get a published release with the specified tag. */
    readonly get: operations['repos/get-release-by-tag']
  }
  readonly '/repos/{owner}/{repo}/releases/{release_id}': {
    /** **Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#hypermedia). */
    readonly get: operations['repos/get-release']
    /** Users with push access to the repository can delete a release. */
    readonly delete: operations['repos/delete-release']
    /** Users with push access to the repository can edit a release. */
    readonly patch: operations['repos/update-release']
  }
  readonly '/repos/{owner}/{repo}/releases/{release_id}/assets': {
    readonly get: operations['repos/list-release-assets']
    /**
     * This endpoint makes use of [a Hypermedia relation](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the `upload_url` returned in
     * the response of the [Create a release endpoint](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#create-a-release) to upload a release asset.
     *
     * You need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.
     *
     * Most libraries will set the required `Content-Length` header automatically. Use the required `Content-Type` header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example:
     *
     * `application/zip`
     *
     * GitHub Enterprise Server expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example,
     * you'll still need to pass your authentication to be able to upload an asset.
     *
     * When an upstream failure occurs, you will receive a `502 Bad Gateway` status. This may leave an empty asset with a state of `starter`. It can be safely deleted.
     *
     * **Notes:**
     * *   GitHub Enterprise Server renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The "[List assets for a release](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#list-assets-for-a-release)"
     * endpoint lists the renamed filenames. For more information and help, contact [GitHub Enterprise Server Support](https://support.github.com/contact?tags=dotcom-rest-api).
     * *   If you upload an asset with the same filename as another uploaded asset, you'll receive an error and must delete the old file before you can re-upload the new asset.
     */
    readonly post: operations['repos/upload-release-asset']
  }
  readonly '/repos/{owner}/{repo}/releases/{release_id}/reactions': {
    /** List the reactions to a [release](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#releases). */
    readonly get: operations['reactions/list-for-release']
    /** Create a reaction to a [release](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#releases). A response with a `Status: 200 OK` means that you already added the reaction type to this release. */
    readonly post: operations['reactions/create-for-release']
  }
  readonly '/repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}': {
    /**
     * **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/releases/:release_id/reactions/:reaction_id`.
     *
     * Delete a reaction to a [release](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#releases).
     */
    readonly delete: operations['reactions/delete-for-release']
  }
  readonly '/repos/{owner}/{repo}/replicas/caches': {
    /** Lists the status of each repository cache replica. */
    readonly get: operations['repos/list-cache-info']
  }
  readonly '/repos/{owner}/{repo}/secret-scanning/alerts': {
    /**
     * Lists secret scanning alerts for an eligible repository, from newest to oldest.
     * To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
     * For public repositories, you may instead use the `public_repo` scope.
     *
     * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
     */
    readonly get: operations['secret-scanning/list-alerts-for-repo']
  }
  readonly '/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}': {
    /**
     * Gets a single secret scanning alert detected in an eligible repository.
     * To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
     * For public repositories, you may instead use the `public_repo` scope.
     *
     * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
     */
    readonly get: operations['secret-scanning/get-alert']
    /**
     * Updates the status of a secret scanning alert in an eligible repository.
     * To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
     * For public repositories, you may instead use the `public_repo` scope.
     *
     * GitHub Apps must have the `secret_scanning_alerts` write permission to use this endpoint.
     */
    readonly patch: operations['secret-scanning/update-alert']
  }
  readonly '/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations': {
    /**
     * Lists all locations for a given secret scanning alert for an eligible repository.
     * To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
     * For public repositories, you may instead use the `public_repo` scope.
     *
     * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
     */
    readonly get: operations['secret-scanning/list-locations-for-alert']
  }
  readonly '/repos/{owner}/{repo}/stargazers': {
    /**
     * Lists the people that have starred the repository.
     *
     * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/enterprise-server@3.6/rest/overview/media-types/) via the `Accept` header: `application/vnd.github.star+json`.
     */
    readonly get: operations['activity/list-stargazers-for-repo']
  }
  readonly '/repos/{owner}/{repo}/stats/code_frequency': {
    /** Returns a weekly aggregate of the number of additions and deletions pushed to a repository. */
    readonly get: operations['repos/get-code-frequency-stats']
  }
  readonly '/repos/{owner}/{repo}/stats/commit_activity': {
    /** Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on `Sunday`. */
    readonly get: operations['repos/get-commit-activity-stats']
  }
  readonly '/repos/{owner}/{repo}/stats/contributors': {
    /**
     * Returns the `total` number of commits authored by the contributor. In addition, the response includes a Weekly Hash (`weeks` array) with the following information:
     *
     * *   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
     * *   `a` - Number of additions
     * *   `d` - Number of deletions
     * *   `c` - Number of commits
     */
    readonly get: operations['repos/get-contributors-stats']
  }
  readonly '/repos/{owner}/{repo}/stats/participation': {
    /**
     * Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from `all`.
     *
     * The array order is oldest week (index 0) to most recent week.
     */
    readonly get: operations['repos/get-participation-stats']
  }
  readonly '/repos/{owner}/{repo}/stats/punch_card': {
    /**
     * Each array contains the day number, hour number, and number of commits:
     *
     * *   `0-6`: Sunday - Saturday
     * *   `0-23`: Hour of day
     * *   Number of commits
     *
     * For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.
     */
    readonly get: operations['repos/get-punch-card-stats']
  }
  readonly '/repos/{owner}/{repo}/statuses/{sha}': {
    /**
     * Users with push access in a repository can create commit statuses for a given SHA.
     *
     * Note: there is a limit of 1000 statuses per `sha` and `context` within a repository. Attempts to create more than 1000 statuses will result in a validation error.
     */
    readonly post: operations['repos/create-commit-status']
  }
  readonly '/repos/{owner}/{repo}/subscribers': {
    /** Lists the people watching the specified repository. */
    readonly get: operations['activity/list-watchers-for-repo']
  }
  readonly '/repos/{owner}/{repo}/subscription': {
    readonly get: operations['activity/get-repo-subscription']
    /** If you would like to watch a repository, set `subscribed` to `true`. If you would like to ignore notifications made within a repository, set `ignored` to `true`. If you would like to stop watching a repository, [delete the repository's subscription](https://docs.github.com/enterprise-server@3.6/rest/reference/activity#delete-a-repository-subscription) completely. */
    readonly put: operations['activity/set-repo-subscription']
    /** This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository's subscription manually](https://docs.github.com/enterprise-server@3.6/rest/reference/activity#set-a-repository-subscription). */
    readonly delete: operations['activity/delete-repo-subscription']
  }
  readonly '/repos/{owner}/{repo}/tags': {
    readonly get: operations['repos/list-tags']
  }
  readonly '/repos/{owner}/{repo}/tags/protection': {
    /**
     * This returns the tag protection states of a repository.
     *
     * This information is only available to repository administrators.
     */
    readonly get: operations['repos/list-tag-protection']
    /**
     * This creates a tag protection state for a repository.
     * This endpoint is only available to repository administrators.
     */
    readonly post: operations['repos/create-tag-protection']
  }
  readonly '/repos/{owner}/{repo}/tags/protection/{tag_protection_id}': {
    /**
     * This deletes a tag protection state for a repository.
     * This endpoint is only available to repository administrators.
     */
    readonly delete: operations['repos/delete-tag-protection']
  }
  readonly '/repos/{owner}/{repo}/tarball/{ref}': {
    /**
     * Gets a redirect URL to download a tar archive for a repository. If you omit `:ref`, the repository’s default branch (usually
     * `master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
     * the `Location` header to make a second `GET` request.
     * **Note**: For private repositories, these links are temporary and expire after five minutes.
     */
    readonly get: operations['repos/download-tarball-archive']
  }
  readonly '/repos/{owner}/{repo}/teams': {
    readonly get: operations['repos/list-teams']
  }
  readonly '/repos/{owner}/{repo}/topics': {
    readonly get: operations['repos/get-all-topics']
    readonly put: operations['repos/replace-all-topics']
  }
  readonly '/repos/{owner}/{repo}/transfer': {
    /** A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original `owner`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://docs.github.com/articles/about-repository-transfers/). */
    readonly post: operations['repos/transfer']
  }
  readonly '/repos/{owner}/{repo}/zipball/{ref}': {
    /**
     * Gets a redirect URL to download a zip archive for a repository. If you omit `:ref`, the repository’s default branch (usually
     * `master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
     * the `Location` header to make a second `GET` request.
     *
     * **Note**: For private repositories, these links are temporary and expire after five minutes. If the repository is empty, you will receive a 404 when you follow the redirect.
     */
    readonly get: operations['repos/download-zipball-archive']
  }
  readonly '/repos/{template_owner}/{template_repo}/generate': {
    /**
     * Creates a new repository using a repository template. Use the `template_owner` and `template_repo` route parameters to specify the repository to use as the template. If the repository is not public, the authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository's information using the [Get a repository](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#get-a-repository) endpoint and check that the `is_template` key is `true`.
     *
     * **OAuth scope requirements**
     *
     * When using [OAuth](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
     *
     * *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
     * *   `repo` scope to create a private repository
     */
    readonly post: operations['repos/create-using-template']
  }
  readonly '/repositories': {
    /**
     * Lists all public repositories in the order that they were created.
     *
     * Note:
     * - For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise.
     * - Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of repositories.
     */
    readonly get: operations['repos/list-public']
  }
  readonly '/repositories/{repository_id}/environments/{environment_name}/secrets': {
    /** Lists all secrets available in an environment without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint. */
    readonly get: operations['actions/list-environment-secrets']
  }
  readonly '/repositories/{repository_id}/environments/{environment_name}/secrets/public-key': {
    /** Get the public key for an environment, which you need to encrypt environment secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint. */
    readonly get: operations['actions/get-environment-public-key']
  }
  readonly '/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}': {
    /** Gets a single environment secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint. */
    readonly get: operations['actions/get-environment-secret']
    /**
     * Creates or updates an environment secret with an encrypted value. Encrypt your secret using
     * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
     * token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use
     * this endpoint.
     *
     * #### Example encrypting a secret using Node.js
     *
     * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
     *
     * ```
     * const sodium = require('tweetsodium');
     *
     * const key = "base64-encoded-public-key";
     * const value = "plain-text-secret";
     *
     * // Convert the message and key to Uint8Array's (Buffer implements that interface)
     * const messageBytes = Buffer.from(value);
     * const keyBytes = Buffer.from(key, 'base64');
     *
     * // Encrypt using LibSodium.
     * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
     *
     * // Base64 the encrypted secret
     * const encrypted = Buffer.from(encryptedBytes).toString('base64');
     *
     * console.log(encrypted);
     * ```
     *
     *
     * #### Example encrypting a secret using Python
     *
     * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
     *
     * ```
     * from base64 import b64encode
     * from nacl import encoding, public
     *
     * def encrypt(public_key: str, secret_value: str) -> str:
     *   """Encrypt a Unicode string using the public key."""
     *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
     *   sealed_box = public.SealedBox(public_key)
     *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
     *   return b64encode(encrypted).decode("utf-8")
     * ```
     *
     * #### Example encrypting a secret using C#
     *
     * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
     *
     * ```
     * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
     * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
     *
     * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
     *
     * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
     * ```
     *
     * #### Example encrypting a secret using Ruby
     *
     * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
     *
     * ```ruby
     * require "rbnacl"
     * require "base64"
     *
     * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
     * public_key = RbNaCl::PublicKey.new(key)
     *
     * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
     * encrypted_secret = box.encrypt("my_secret")
     *
     * # Print the base64 encoded secret
     * puts Base64.strict_encode64(encrypted_secret)
     * ```
     */
    readonly put: operations['actions/create-or-update-environment-secret']
    /** Deletes a secret in an environment using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint. */
    readonly delete: operations['actions/delete-environment-secret']
  }
  readonly '/scim/v2/enterprises/{enterprise}/Groups': {
    /** **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change. */
    readonly get: operations['enterprise-admin/list-provisioned-groups-enterprise']
    /**
     * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
     *
     * Provision an enterprise group, and invite users to the group. This sends invitation emails to the email address of the invited users to join the GitHub organization that the SCIM group corresponds to.
     */
    readonly post: operations['enterprise-admin/provision-and-invite-enterprise-group']
  }
  readonly '/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}': {
    /** **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change. */
    readonly get: operations['enterprise-admin/get-provisioning-information-for-enterprise-group']
    /**
     * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
     *
     * Replaces an existing provisioned group’s information. You must provide all the information required for the group as if you were provisioning it for the first time. Any existing group information that you don't provide will be removed, including group membership. If you want to only update a specific attribute, use the [Update an attribute for a SCIM enterprise group](#update-an-attribute-for-a-scim-enterprise-group) endpoint instead.
     */
    readonly put: operations['enterprise-admin/set-information-for-provisioned-enterprise-group']
    /** **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change. */
    readonly delete: operations['enterprise-admin/delete-scim-group-from-enterprise']
    /**
     * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
     *
     * Allows you to change a provisioned group’s individual attributes. To change a group’s values, you must provide a specific Operations JSON format that contains at least one of the add, remove, or replace operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
     */
    readonly patch: operations['enterprise-admin/update-attribute-for-enterprise-group']
  }
  readonly '/scim/v2/enterprises/{enterprise}/Users': {
    /**
     * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
     *
     * Retrieves a paginated list of all provisioned enterprise members, including pending invitations.
     *
     * When a user with a SAML-provisioned external identity leaves (or is removed from) an enterprise, the account's metadata is immediately removed. However, the returned list of user accounts might not always match the organization or enterprise member list you see on GitHub Enterprise Server. This can happen in certain cases where an external identity associated with an organization will not match an organization member:
     *   - When a user with a SCIM-provisioned external identity is removed from an enterprise, the account's metadata is preserved to allow the user to re-join the organization in the future.
     *   - When inviting a user to join an organization, you can expect to see their external identity in the results before they accept the invitation, or if the invitation is cancelled (or never accepted).
     *   - When a user is invited over SCIM, an external identity is created that matches with the invitee's email address. However, this identity is only linked to a user account when the user accepts the invitation by going through SAML SSO.
     *
     * The returned list of external identities can include an entry for a `null` user. These are unlinked SAML identities that are created when a user goes through the following Single Sign-On (SSO) process but does not sign in to their GitHub Enterprise Server account after completing SSO:
     *
     * 1. The user is granted access by the IdP and is not a member of the GitHub Enterprise Server enterprise.
     *
     * 1. The user attempts to access the GitHub Enterprise Server enterprise and initiates the SAML SSO process, and is not currently signed in to their GitHub Enterprise Server account.
     *
     * 1. After successfully authenticating with the SAML SSO IdP, the `null` external identity entry is created and the user is prompted to sign in to their GitHub Enterprise Server account:
     *    - If the user signs in, their GitHub Enterprise Server account is linked to this entry.
     *    - If the user does not sign in (or does not create a new account when prompted), they are not added to the GitHub Enterprise Server enterprise, and the external identity `null` entry remains in place.
     */
    readonly get: operations['enterprise-admin/list-provisioned-identities-enterprise']
    /**
     * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
     *
     * Provision enterprise membership for a user, and send organization invitation emails to the email address.
     *
     * You can optionally include the groups a user will be invited to join. If you do not provide a list of `groups`, the user is provisioned for the enterprise, but no organization invitation emails will be sent.
     */
    readonly post: operations['enterprise-admin/provision-and-invite-enterprise-user']
  }
  readonly '/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}': {
    /** **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change. */
    readonly get: operations['enterprise-admin/get-provisioning-information-for-enterprise-user']
    /**
     * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
     *
     * Replaces an existing provisioned user's information. You must provide all the information required for the user as if you were provisioning them for the first time. Any existing user information that you don't provide will be removed. If you want to only update a specific attribute, use the [Update an attribute for a SCIM user](#update-an-attribute-for-an-enterprise-scim-user) endpoint instead.
     *
     * You must at least provide the required values for the user: `userName`, `name`, and `emails`.
     *
     * **Warning:** Setting `active: false` removes the user from the enterprise, deletes the external identity, and deletes the associated `{scim_user_id}`.
     */
    readonly put: operations['enterprise-admin/set-information-for-provisioned-enterprise-user']
    /** **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change. */
    readonly delete: operations['enterprise-admin/delete-user-from-enterprise']
    /**
     * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
     *
     * Allows you to change a provisioned user's individual attributes. To change a user's values, you must provide a specific `Operations` JSON format that contains at least one of the `add`, `remove`, or `replace` operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
     *
     * **Note:** Complicated SCIM `path` selectors that include filters are not supported. For example, a `path` selector defined as `"path": "emails[type eq \"work\"]"` will not work.
     *
     * **Warning:** If you set `active:false` using the `replace` operation (as shown in the JSON example below), it removes the user from the enterprise, deletes the external identity, and deletes the associated `:scim_user_id`.
     *
     * ```
     * {
     *   "Operations":[{
     *     "op":"replace",
     *     "value":{
     *       "active":false
     *     }
     *   }]
     * }
     * ```
     */
    readonly patch: operations['enterprise-admin/update-attribute-for-enterprise-user']
  }
  readonly '/search/code': {
    /**
     * Searches for query terms inside of a file. This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#pagination).
     *
     * When searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.6/rest/reference/search#text-match-metadata).
     *
     * For example, if you want to find the definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery) repository, your query would look something like this:
     *
     * `q=addClass+in:file+language:js+repo:jquery/jquery`
     *
     * This query searches for the keyword `addClass` within a file's contents. The query limits the search to files where the language is JavaScript in the `jquery/jquery` repository.
     *
     * #### Considerations for code search
     *
     * Due to the complexity of searching code, there are a few restrictions on how searches are performed:
     *
     * *   Only the _default branch_ is considered. In most cases, this will be the `master` branch.
     * *   Only files smaller than 384 KB are searchable.
     * *   You must always include at least one search term when searching source code. For example, searching for [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [`amazing
     * language:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.
     */
    readonly get: operations['search/code']
  }
  readonly '/search/commits': {
    /**
     * Find commits via various criteria on the default branch (usually `master`). This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#pagination).
     *
     * When searching for commits, you can get text match metadata for the **message** field when you provide the `text-match` media type. For more details about how to receive highlighted search results, see [Text match
     * metadata](https://docs.github.com/enterprise-server@3.6/rest/reference/search#text-match-metadata).
     *
     * For example, if you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:
     *
     * `q=repo:octocat/Spoon-Knife+css`
     */
    readonly get: operations['search/commits']
  }
  readonly '/search/issues': {
    /**
     * Find issues by state and keyword. This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#pagination).
     *
     * When searching for issues, you can get text match metadata for the issue **title**, issue **body**, and issue **comment body** fields when you pass the `text-match` media type. For more details about how to receive highlighted
     * search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.6/rest/reference/search#text-match-metadata).
     *
     * For example, if you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.
     *
     * `q=windows+label:bug+language:python+state:open&sort=created&order=asc`
     *
     * This query searches for the keyword `windows`, within any open issue that is labeled as `bug`. The search runs across repositories whose primary language is Python. The results are sorted by creation date in ascending order, which means the oldest issues appear first in the search results.
     *
     * **Note:** For [user-to-server](https://docs.github.com/developers/apps/identifying-and-authorizing-users-for-github-apps#user-to-server-requests) GitHub App requests, you can't retrieve a combination of issues and pull requests in a single query. Requests that don't include the `is:issue` or `is:pull-request` qualifier will receive an HTTP `422 Unprocessable Entity` response. To get results for both issues and pull requests, you must send separate queries for issues and pull requests. For more information about the `is` qualifier, see "[Searching only issues or pull requests](https://docs.github.com/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests)."
     */
    readonly get: operations['search/issues-and-pull-requests']
  }
  readonly '/search/labels': {
    /**
     * Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#pagination).
     *
     * When searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.6/rest/reference/search#text-match-metadata).
     *
     * For example, if you want to find labels in the `linguist` repository that match `bug`, `defect`, or `enhancement`. Your query might look like this:
     *
     * `q=bug+defect+enhancement&repository_id=64778136`
     *
     * The labels that best match the query appear first in the search results.
     */
    readonly get: operations['search/labels']
  }
  readonly '/search/repositories': {
    /**
     * Find repositories via various criteria. This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#pagination).
     *
     * When searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.6/rest/reference/search#text-match-metadata).
     *
     * For example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:
     *
     * `q=tetris+language:assembly&sort=stars&order=desc`
     *
     * This query searches for repositories with the word `tetris` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.
     */
    readonly get: operations['search/repos']
  }
  readonly '/search/topics': {
    /**
     * Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#pagination). See "[Searching topics](https://docs.github.com/articles/searching-topics/)" for a detailed list of qualifiers.
     *
     * When searching for topics, you can get text match metadata for the topic's **short\_description**, **description**, **name**, or **display\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.6/rest/reference/search#text-match-metadata).
     *
     * For example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this:
     *
     * `q=ruby+is:featured`
     *
     * This query searches for topics with the keyword `ruby` and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.
     */
    readonly get: operations['search/topics']
  }
  readonly '/search/users': {
    /**
     * Find users via various criteria. This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#pagination).
     *
     * When searching for users, you can get text match metadata for the issue **login**, public **email**, and **name** fields when you pass the `text-match` media type. For more details about highlighting search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.6/rest/reference/search#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.6/rest/reference/search#text-match-metadata).
     *
     * For example, if you're looking for a list of popular users, you might try this query:
     *
     * `q=tom+repos:%3E42+followers:%3E1000`
     *
     * This query searches for users with the name `tom`. The results are restricted to users with more than 42 repositories and over 1,000 followers.
     */
    readonly get: operations['search/users']
  }
  readonly '/setup/api/configcheck': {
    /**
     * This endpoint allows you to check the status of the most recent configuration process:
     *
     * Note that you may need to wait several seconds after you start a process before you can check its status.
     *
     * The different statuses are:
     *
     * | Status        | Description                       |
     * | ------------- | --------------------------------- |
     * | `PENDING`     | The job has not started yet       |
     * | `CONFIGURING` | The job is running                |
     * | `DONE`        | The job has finished correctly    |
     * | `FAILED`      | The job has finished unexpectedly |
     */
    readonly get: operations['enterprise-admin/get-configuration-status']
  }
  readonly '/setup/api/configure': {
    /** This endpoint allows you to start a configuration process at any time for your updated settings to take effect: */
    readonly post: operations['enterprise-admin/start-configuration-process']
  }
  readonly '/setup/api/maintenance': {
    /** Check your installation's maintenance status: */
    readonly get: operations['enterprise-admin/get-maintenance-status']
    /** **Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode). */
    readonly post: operations['enterprise-admin/enable-or-disable-maintenance-mode']
  }
  readonly '/setup/api/settings': {
    /**
     * Gets the settings for your instance. To change settings, see the [Set settings endpoint](https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#set-settings).
     *
     * **Note:** You cannot retrieve the management console password with the Enterprise administration API.
     */
    readonly get: operations['enterprise-admin/get-settings']
    /**
     * Applies settings on your instance. For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#get-settings).
     *
     * **Notes:**
     *
     * - The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode).
     * - You cannot set the management console password with the Enterprise administration API. Use the `ghe-set-password` utility to change the management console password. For more information, see "[Command-line utilities](https://docs.github.com/enterprise-server@3.6/admin/configuration/configuring-your-enterprise/command-line-utilities#ghe-set-password)."
     */
    readonly put: operations['enterprise-admin/set-settings']
  }
  readonly '/setup/api/settings/authorized-keys': {
    readonly get: operations['enterprise-admin/get-all-authorized-ssh-keys']
    /** **Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode). */
    readonly post: operations['enterprise-admin/add-authorized-ssh-key']
    /** **Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode). */
    readonly delete: operations['enterprise-admin/remove-authorized-ssh-key']
  }
  readonly '/setup/api/start': {
    /**
     * When you boot a GitHub instance for the first time, you can use the following endpoint to upload a license.
     *
     * Note that you need to `POST` to [`/setup/api/configure`](https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#start-a-configuration-process) to start the actual configuration process.
     *
     * When using this endpoint, your GitHub instance must have a password set. This can be accomplished two ways:
     *
     * 1.  If you're working directly with the API before accessing the web interface, you must pass in the password parameter to set your password.
     * 2.  If you set up your instance via the web interface before accessing the API, your calls to this endpoint do not need the password parameter.
     *
     * **Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode).
     */
    readonly post: operations['enterprise-admin/create-enterprise-server-license']
  }
  readonly '/setup/api/upgrade': {
    /**
     * This API upgrades your license and also triggers the configuration process.
     *
     * **Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode).
     */
    readonly post: operations['enterprise-admin/upgrade-license']
  }
  readonly '/teams/{team_id}': {
    /** **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#get-a-team-by-name) endpoint. */
    readonly get: operations['teams/get-legacy']
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#delete-a-team) endpoint.
     *
     * To delete a team, the authenticated user must be an organization owner or team maintainer.
     *
     * If you are an organization owner, deleting a parent team will delete all of its child teams as well.
     */
    readonly delete: operations['teams/delete-legacy']
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#update-a-team) endpoint.
     *
     * To edit a team, the authenticated user must either be an organization owner or a team maintainer.
     *
     * **Note:** With nested teams, the `privacy` for parent teams cannot be `secret`.
     */
    readonly patch: operations['teams/update-legacy']
  }
  readonly '/teams/{team_id}/discussions': {
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List discussions`](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#list-discussions) endpoint.
     *
     * List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     */
    readonly get: operations['teams/list-discussions-legacy']
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create a discussion`](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#create-a-discussion) endpoint.
     *
     * Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
     */
    readonly post: operations['teams/create-discussion-legacy']
  }
  readonly '/teams/{team_id}/discussions/{discussion_number}': {
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#get-a-discussion) endpoint.
     *
     * Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     */
    readonly get: operations['teams/get-discussion-legacy']
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Delete a discussion`](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#delete-a-discussion) endpoint.
     *
     * Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     */
    readonly delete: operations['teams/delete-discussion-legacy']
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#update-a-discussion) endpoint.
     *
     * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     */
    readonly patch: operations['teams/update-discussion-legacy']
  }
  readonly '/teams/{team_id}/discussions/{discussion_number}/comments': {
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#list-discussion-comments) endpoint.
     *
     * List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     */
    readonly get: operations['teams/list-discussion-comments-legacy']
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#create-a-discussion-comment) endpoint.
     *
     * Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
     */
    readonly post: operations['teams/create-discussion-comment-legacy']
  }
  readonly '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}': {
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#get-a-discussion-comment) endpoint.
     *
     * Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     */
    readonly get: operations['teams/get-discussion-comment-legacy']
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#delete-a-discussion-comment) endpoint.
     *
     * Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     */
    readonly delete: operations['teams/delete-discussion-comment-legacy']
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#update-a-discussion-comment) endpoint.
     *
     * Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     */
    readonly patch: operations['teams/update-discussion-comment-legacy']
  }
  readonly '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions': {
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion comment`](https://docs.github.com/enterprise-server@3.6/rest/reference/reactions#list-reactions-for-a-team-discussion-comment) endpoint.
     *
     * List the reactions to a [team discussion comment](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#discussion-comments). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     */
    readonly get: operations['reactions/list-for-team-discussion-comment-legacy']
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Create reaction for a team discussion comment](https://docs.github.com/enterprise-server@3.6/rest/reference/reactions#create-reaction-for-a-team-discussion-comment)" endpoint.
     *
     * Create a reaction to a [team discussion comment](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.
     */
    readonly post: operations['reactions/create-for-team-discussion-comment-legacy']
  }
  readonly '/teams/{team_id}/discussions/{discussion_number}/reactions': {
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://docs.github.com/enterprise-server@3.6/rest/reference/reactions#list-reactions-for-a-team-discussion) endpoint.
     *
     * List the reactions to a [team discussion](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     */
    readonly get: operations['reactions/list-for-team-discussion-legacy']
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion`](https://docs.github.com/enterprise-server@3.6/rest/reference/reactions#create-reaction-for-a-team-discussion) endpoint.
     *
     * Create a reaction to a [team discussion](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion.
     */
    readonly post: operations['reactions/create-for-team-discussion-legacy']
  }
  readonly '/teams/{team_id}/members': {
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team members`](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#list-team-members) endpoint.
     *
     * Team members will include the members of child teams.
     */
    readonly get: operations['teams/list-members-legacy']
  }
  readonly '/teams/{team_id}/members/{username}': {
    /**
     * The "Get team member" endpoint (described below) is deprecated.
     *
     * We recommend using the [Get team membership for a user](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.
     *
     * To list members in a team, the team must be visible to the authenticated user.
     */
    readonly get: operations['teams/get-member-legacy']
    /**
     * The "Add team member" endpoint (described below) is deprecated.
     *
     * We recommend using the [Add or update team membership for a user](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.
     *
     * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they're changing. The person being added to the team must be a member of the team's organization.
     *
     * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
     *
     * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#http-verbs)."
     */
    readonly put: operations['teams/add-member-legacy']
    /**
     * The "Remove team member" endpoint (described below) is deprecated.
     *
     * We recommend using the [Remove team membership for a user](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.
     *
     * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * To remove a team member, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.
     *
     * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
     */
    readonly delete: operations['teams/remove-member-legacy']
  }
  readonly '/teams/{team_id}/memberships/{username}': {
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#get-team-membership-for-a-user) endpoint.
     *
     * Team members will include the members of child teams.
     *
     * To get a user's membership with a team, the team must be visible to the authenticated user.
     *
     * **Note:**
     * The response contains the `state` of the membership and the member's `role`.
     *
     * The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#create-a-team).
     */
    readonly get: operations['teams/get-membership-for-user-legacy']
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint.
     *
     * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * If the user is already a member of the team's organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.
     *
     * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
     *
     * If the user is unaffiliated with the team's organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the "pending" state until the user accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.
     *
     * If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
     */
    readonly put: operations['teams/add-or-update-membership-for-user-legacy']
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#remove-team-membership-for-a-user) endpoint.
     *
     * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
     *
     * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
     */
    readonly delete: operations['teams/remove-membership-for-user-legacy']
  }
  readonly '/teams/{team_id}/projects': {
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team projects`](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#list-team-projects) endpoint.
     *
     * Lists the organization projects for a team.
     */
    readonly get: operations['teams/list-projects-legacy']
  }
  readonly '/teams/{team_id}/projects/{project_id}': {
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#check-team-permissions-for-a-project) endpoint.
     *
     * Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
     */
    readonly get: operations['teams/check-permissions-for-project-legacy']
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team project permissions](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#add-or-update-team-project-permissions) endpoint.
     *
     * Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
     */
    readonly put: operations['teams/add-or-update-project-permissions-legacy']
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a project from a team](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#remove-a-project-from-a-team) endpoint.
     *
     * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.
     */
    readonly delete: operations['teams/remove-project-legacy']
  }
  readonly '/teams/{team_id}/repos': {
    /** **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#list-team-repositories) endpoint. */
    readonly get: operations['teams/list-repos-legacy']
  }
  readonly '/teams/{team_id}/repos/{owner}/{repo}': {
    /**
     * **Note**: Repositories inherited through a parent team will also be checked.
     *
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#check-team-permissions-for-a-repository) endpoint.
     *
     * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/enterprise-server@3.6/rest/overview/media-types/) via the `Accept` header:
     */
    readonly get: operations['teams/check-permissions-for-repo-legacy']
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Add or update team repository permissions](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#add-or-update-team-repository-permissions)" endpoint.
     *
     * To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization.
     *
     * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#http-verbs)."
     */
    readonly put: operations['teams/add-or-update-repo-permissions-legacy']
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#remove-a-repository-from-a-team) endpoint.
     *
     * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.
     */
    readonly delete: operations['teams/remove-repo-legacy']
  }
  readonly '/teams/{team_id}/teams': {
    /** **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List child teams`](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#list-child-teams) endpoint. */
    readonly get: operations['teams/list-child-legacy']
  }
  readonly '/user': {
    /**
     * If the authenticated user is authenticated through basic authentication or OAuth with the `user` scope, then the response lists public and private profile information.
     *
     * If the authenticated user is authenticated through OAuth without the `user` scope, then the response lists only public profile information.
     */
    readonly get: operations['users/get-authenticated']
    /** **Note:** If your email is set to private and you send an `email` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API. */
    readonly patch: operations['users/update-authenticated']
  }
  readonly '/user/emails': {
    /** Lists all of your email addresses, and specifies which one is visible to the public. This endpoint is accessible with the `user:email` scope. */
    readonly get: operations['users/list-emails-for-authenticated-user']
    /** This endpoint is accessible with the `user` scope. */
    readonly post: operations['users/add-email-for-authenticated-user']
    /** This endpoint is accessible with the `user` scope. */
    readonly delete: operations['users/delete-email-for-authenticated-user']
  }
  readonly '/user/followers': {
    /** Lists the people following the authenticated user. */
    readonly get: operations['users/list-followers-for-authenticated-user']
  }
  readonly '/user/following': {
    /** Lists the people who the authenticated user follows. */
    readonly get: operations['users/list-followed-by-authenticated-user']
  }
  readonly '/user/following/{username}': {
    readonly get: operations['users/check-person-is-followed-by-authenticated']
    /**
     * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#http-verbs)."
     *
     * Following a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.
     */
    readonly put: operations['users/follow']
    /** Unfollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope. */
    readonly delete: operations['users/unfollow']
  }
  readonly '/user/gpg_keys': {
    /** Lists the current user's GPG keys. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */
    readonly get: operations['users/list-gpg-keys-for-authenticated-user']
    /** Adds a GPG key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:gpg_key` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */
    readonly post: operations['users/create-gpg-key-for-authenticated-user']
  }
  readonly '/user/gpg_keys/{gpg_key_id}': {
    /** View extended details for a single GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */
    readonly get: operations['users/get-gpg-key-for-authenticated-user']
    /** Removes a GPG key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:gpg_key` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */
    readonly delete: operations['users/delete-gpg-key-for-authenticated-user']
  }
  readonly '/user/installations': {
    /**
     * Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
     *
     * You must use a [user-to-server OAuth access token](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
     *
     * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
     *
     * You can find the permissions for the installation under the `permissions` key.
     */
    readonly get: operations['apps/list-installations-for-authenticated-user']
  }
  readonly '/user/installations/{installation_id}/repositories': {
    /**
     * List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.
     *
     * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
     *
     * You must use a [user-to-server OAuth access token](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
     *
     * The access the user has to each repository is included in the hash under the `permissions` key.
     */
    readonly get: operations['apps/list-installation-repos-for-authenticated-user']
  }
  readonly '/user/installations/{installation_id}/repositories/{repository_id}': {
    /**
     * Add a single repository to an installation. The authenticated user must have admin access to the repository.
     *
     * You must use a personal access token (which you can create via the [command line](https://docs.github.com/enterprise-server@3.6/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/enterprise-server@3.6/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
     */
    readonly put: operations['apps/add-repo-to-installation-for-authenticated-user']
    /**
     * Remove a single repository from an installation. The authenticated user must have admin access to the repository.
     *
     * You must use a personal access token (which you can create via the [command line](https://docs.github.com/enterprise-server@3.6/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/enterprise-server@3.6/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
     */
    readonly delete: operations['apps/remove-repo-from-installation-for-authenticated-user']
  }
  readonly '/user/issues': {
    /**
     * List issues across owned and member repositories assigned to the authenticated user.
     *
     * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
     * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
     * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
     * request id, use the "[List pull requests](https://docs.github.com/enterprise-server@3.6/rest/reference/pulls#list-pull-requests)" endpoint.
     */
    readonly get: operations['issues/list-for-authenticated-user']
  }
  readonly '/user/keys': {
    /** Lists the public SSH keys for the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */
    readonly get: operations['users/list-public-ssh-keys-for-authenticated-user']
    /** Adds a public SSH key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:public_key` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */
    readonly post: operations['users/create-public-ssh-key-for-authenticated-user']
  }
  readonly '/user/keys/{key_id}': {
    /** View extended details for a single public SSH key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */
    readonly get: operations['users/get-public-ssh-key-for-authenticated-user']
    /** Removes a public SSH key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:public_key` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */
    readonly delete: operations['users/delete-public-ssh-key-for-authenticated-user']
  }
  readonly '/user/memberships/orgs': {
    readonly get: operations['orgs/list-memberships-for-authenticated-user']
  }
  readonly '/user/memberships/orgs/{org}': {
    readonly get: operations['orgs/get-membership-for-authenticated-user']
    readonly patch: operations['orgs/update-membership-for-authenticated-user']
  }
  readonly '/user/migrations': {
    /** Lists all migrations a user has started. */
    readonly get: operations['migrations/list-for-authenticated-user']
    /** Initiates the generation of a user migration archive. */
    readonly post: operations['migrations/start-for-authenticated-user']
  }
  readonly '/user/migrations/{migration_id}/archive': {
    /**
     * Fetches the URL to download the migration archive as a `tar.gz` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:
     *
     * *   attachments
     * *   bases
     * *   commit\_comments
     * *   issue\_comments
     * *   issue\_events
     * *   issues
     * *   milestones
     * *   organizations
     * *   projects
     * *   protected\_branches
     * *   pull\_request\_reviews
     * *   pull\_requests
     * *   releases
     * *   repositories
     * *   review\_comments
     * *   schema
     * *   users
     *
     * The archive will also contain an `attachments` directory that includes all attachment files uploaded to GitHub.com and a `repositories` directory that contains the repository's Git data.
     */
    readonly get: operations['migrations/get-archive-for-authenticated-user']
  }
  readonly '/user/migrations/{migration_id}/repositories': {
    /** Lists all the repositories for this user migration. */
    readonly get: operations['migrations/list-repos-for-authenticated-user']
  }
  readonly '/user/orgs': {
    /**
     * List organizations for the authenticated user.
     *
     * **OAuth scope requirements**
     *
     * This only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope. OAuth requests with insufficient scope receive a `403 Forbidden` response.
     */
    readonly get: operations['orgs/list-for-authenticated-user']
  }
  readonly '/user/projects': {
    /** Creates a user project board. Returns a `410 Gone` status if the user does not have existing classic projects. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. */
    readonly post: operations['projects/create-for-authenticated-user']
  }
  readonly '/user/public_emails': {
    /** Lists your publicly visible email address, which you can set with the [Set primary email visibility for the authenticated user](https://docs.github.com/enterprise-server@3.6/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user) endpoint. This endpoint is accessible with the `user:email` scope. */
    readonly get: operations['users/list-public-emails-for-authenticated-user']
  }
  readonly '/user/repos': {
    /**
     * Lists repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
     *
     * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
     */
    readonly get: operations['repos/list-for-authenticated-user']
    /**
     * Creates a new repository for the authenticated user.
     *
     * **OAuth scope requirements**
     *
     * When using [OAuth](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
     *
     * *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
     * *   `repo` scope to create a private repository.
     */
    readonly post: operations['repos/create-for-authenticated-user']
  }
  readonly '/user/repository_invitations': {
    /** When authenticating as a user, this endpoint will list all currently open repository invitations for that user. */
    readonly get: operations['repos/list-invitations-for-authenticated-user']
  }
  readonly '/user/repository_invitations/{invitation_id}': {
    readonly delete: operations['repos/decline-invitation-for-authenticated-user']
    readonly patch: operations['repos/accept-invitation-for-authenticated-user']
  }
  readonly '/user/starred': {
    /**
     * Lists repositories the authenticated user has starred.
     *
     * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/enterprise-server@3.6/rest/overview/media-types/) via the `Accept` header: `application/vnd.github.star+json`.
     */
    readonly get: operations['activity/list-repos-starred-by-authenticated-user']
  }
  readonly '/user/starred/{owner}/{repo}': {
    readonly get: operations['activity/check-repo-is-starred-by-authenticated-user']
    /** Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#http-verbs)." */
    readonly put: operations['activity/star-repo-for-authenticated-user']
    readonly delete: operations['activity/unstar-repo-for-authenticated-user']
  }
  readonly '/user/subscriptions': {
    /** Lists repositories the authenticated user is watching. */
    readonly get: operations['activity/list-watched-repos-for-authenticated-user']
  }
  readonly '/user/teams': {
    /** List all of the teams across all of the organizations to which the authenticated user belongs. This method requires `user`, `repo`, or `read:org` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/). */
    readonly get: operations['teams/list-for-authenticated-user']
  }
  readonly '/users': {
    /**
     * Lists all users, in the order that they signed up on GitHub Enterprise Server. This list includes personal user accounts and organization accounts.
     *
     * Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of users.
     */
    readonly get: operations['users/list']
  }
  readonly '/users/{username}': {
    /**
     * Provides publicly available information about someone with a GitHub account.
     *
     * GitHub Apps with the `Plan` user permission can use this endpoint to retrieve information about a user's GitHub Enterprise Server plan. The GitHub App must be authenticated as a user. See "[Identifying and authorizing users for GitHub Apps](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/)" for details about authentication. For an example response, see 'Response with GitHub Enterprise Server plan information' below"
     *
     * The `email` key in the following response is the publicly visible email address from your GitHub Enterprise Server [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub Enterprise Server. For more information, see [Authentication](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#authentication).
     *
     * The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see "[Emails API](https://docs.github.com/enterprise-server@3.6/rest/reference/users#emails)".
     */
    readonly get: operations['users/get-by-username']
  }
  readonly '/users/{username}/events': {
    /** If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events. */
    readonly get: operations['activity/list-events-for-authenticated-user']
  }
  readonly '/users/{username}/events/orgs/{org}': {
    /** This is the user's organization dashboard. You must be authenticated as the user to view this. */
    readonly get: operations['activity/list-org-events-for-authenticated-user']
  }
  readonly '/users/{username}/events/public': {
    readonly get: operations['activity/list-public-events-for-user']
  }
  readonly '/users/{username}/followers': {
    /** Lists the people following the specified user. */
    readonly get: operations['users/list-followers-for-user']
  }
  readonly '/users/{username}/following': {
    /** Lists the people who the specified user follows. */
    readonly get: operations['users/list-following-for-user']
  }
  readonly '/users/{username}/following/{target_user}': {
    readonly get: operations['users/check-following-for-user']
  }
  readonly '/users/{username}/gists': {
    /** Lists public gists for the specified user: */
    readonly get: operations['gists/list-for-user']
  }
  readonly '/users/{username}/gpg_keys': {
    /** Lists the GPG keys for a user. This information is accessible by anyone. */
    readonly get: operations['users/list-gpg-keys-for-user']
  }
  readonly '/users/{username}/hovercard': {
    /**
     * Provides hovercard information when authenticated through basic auth or OAuth with the `repo` scope. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.
     *
     * The `subject_type` and `subject_id` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository via cURL, it would look like this:
     *
     * ```shell
     *  curl -u username:token
     *   https://api.github.com/users/octocat/hovercard?subject_type=repository&subject_id=1300192
     * ```
     */
    readonly get: operations['users/get-context-for-user']
  }
  readonly '/users/{username}/installation': {
    /**
     * Enables an authenticated GitHub App to find the user’s installation information.
     *
     * You must use a [JWT](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     */
    readonly get: operations['apps/get-user-installation']
  }
  readonly '/users/{username}/keys': {
    /** Lists the _verified_ public SSH keys for a user. This is accessible by anyone. */
    readonly get: operations['users/list-public-keys-for-user']
  }
  readonly '/users/{username}/orgs': {
    /**
     * List [public organization memberships](https://docs.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.
     *
     * This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/enterprise-server@3.6/rest/reference/orgs#list-organizations-for-the-authenticated-user) API instead.
     */
    readonly get: operations['orgs/list-for-user']
  }
  readonly '/users/{username}/projects': {
    readonly get: operations['projects/list-for-user']
  }
  readonly '/users/{username}/received_events': {
    /** These are events that you've received by watching repos and following users. If you are authenticated as the given user, you will see private events. Otherwise, you'll only see public events. */
    readonly get: operations['activity/list-received-events-for-user']
  }
  readonly '/users/{username}/received_events/public': {
    readonly get: operations['activity/list-received-public-events-for-user']
  }
  readonly '/users/{username}/repos': {
    /** Lists public repositories for the specified user. Note: For GitHub AE, this endpoint will list internal repositories for the specified user. */
    readonly get: operations['repos/list-for-user']
  }
  readonly '/users/{username}/site_admin': {
    /** Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#http-verbs)." */
    readonly put: operations['enterprise-admin/promote-user-to-be-site-administrator']
    /** You can demote any user account except your own. */
    readonly delete: operations['enterprise-admin/demote-site-administrator']
  }
  readonly '/users/{username}/starred': {
    /**
     * Lists repositories a user has starred.
     *
     * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/enterprise-server@3.6/rest/overview/media-types/) via the `Accept` header: `application/vnd.github.star+json`.
     */
    readonly get: operations['activity/list-repos-starred-by-user']
  }
  readonly '/users/{username}/subscriptions': {
    /** Lists repositories a user is watching. */
    readonly get: operations['activity/list-repos-watched-by-user']
  }
  readonly '/users/{username}/suspended': {
    /**
     * If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://docs.github.com/enterprise-server@3.6/admin/identity-and-access-management/using-ldap-for-enterprise-iam/using-ldap), Active Directory LDAP-authenticated users cannot be suspended through this API. If you attempt to suspend an Active Directory LDAP-authenticated user through this API, it will return a `403` response.
     *
     * You can suspend any user account except your own.
     *
     * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#http-verbs)."
     */
    readonly put: operations['enterprise-admin/suspend-user']
    /** If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://docs.github.com/enterprise-server@3.6/admin/identity-and-access-management/using-ldap-for-enterprise-iam/using-ldap), this API is disabled and will return a `403` response. Active Directory LDAP-authenticated users cannot be unsuspended using the API. */
    readonly delete: operations['enterprise-admin/unsuspend-user']
  }
  readonly '/zen': {
    /** Get a random sentence from the Zen of GitHub */
    readonly get: operations['meta/get-zen']
  }
}

export interface components {
  readonly schemas: {
    readonly root: {
      /** Format: uri-template */
      readonly current_user_url: string
      /** Format: uri-template */
      readonly current_user_authorizations_html_url: string
      /** Format: uri-template */
      readonly authorizations_url: string
      /** Format: uri-template */
      readonly code_search_url: string
      /** Format: uri-template */
      readonly commit_search_url: string
      /** Format: uri-template */
      readonly emails_url: string
      /** Format: uri-template */
      readonly emojis_url: string
      /** Format: uri-template */
      readonly events_url: string
      /** Format: uri-template */
      readonly feeds_url: string
      /** Format: uri-template */
      readonly followers_url: string
      /** Format: uri-template */
      readonly following_url: string
      /** Format: uri-template */
      readonly gists_url: string
      /** Format: uri-template */
      readonly hub_url: string
      /** Format: uri-template */
      readonly issue_search_url: string
      /** Format: uri-template */
      readonly issues_url: string
      /** Format: uri-template */
      readonly keys_url: string
      /** Format: uri-template */
      readonly label_search_url: string
      /** Format: uri-template */
      readonly notifications_url: string
      /** Format: uri-template */
      readonly organization_url: string
      /** Format: uri-template */
      readonly organization_repositories_url: string
      /** Format: uri-template */
      readonly organization_teams_url: string
      /** Format: uri-template */
      readonly public_gists_url: string
      /** Format: uri-template */
      readonly rate_limit_url: string
      /** Format: uri-template */
      readonly repository_url: string
      /** Format: uri-template */
      readonly repository_search_url: string
      /** Format: uri-template */
      readonly current_user_repositories_url: string
      /** Format: uri-template */
      readonly starred_url: string
      /** Format: uri-template */
      readonly starred_gists_url: string
      /** Format: uri-template */
      readonly topic_search_url?: string
      /** Format: uri-template */
      readonly user_url: string
      /** Format: uri-template */
      readonly user_organizations_url: string
      /** Format: uri-template */
      readonly user_repositories_url: string
      /** Format: uri-template */
      readonly user_search_url: string
    }
    readonly 'global-hook': {
      readonly type?: string
      readonly id?: number
      readonly name?: string
      readonly active?: boolean
      readonly events?: readonly string[]
      readonly config?: {
        readonly url?: string
        readonly content_type?: string
        readonly insecure_ssl?: string
        readonly secret?: string
      }
      readonly updated_at?: string
      readonly created_at?: string
      readonly url?: string
      readonly ping_url?: string
    }
    readonly 'global-hook-2': {
      readonly type?: string
      readonly id?: number
      readonly name?: string
      readonly active?: boolean
      readonly events?: readonly string[]
      readonly config?: {
        readonly url?: string
        readonly content_type?: string
        readonly insecure_ssl?: string
      }
      readonly updated_at?: string
      readonly created_at?: string
      readonly url?: string
      readonly ping_url?: string
    }
    readonly 'public-key-full': {
      readonly id: number
      readonly key: string
      readonly user_id: number | null
      readonly repository_id: number | null
      readonly url: string
      readonly title: string
      readonly read_only: boolean
      readonly verified: boolean
      /** Format: date-time */
      readonly created_at: string
    } & {
      last_used: unknown
    }
    readonly 'ldap-mapping-team': {
      readonly ldap_dn?: string
      readonly id?: number
      readonly node_id?: string
      readonly url?: string
      readonly html_url?: string
      readonly name?: string
      readonly slug?: string
      readonly description?: string | null
      readonly privacy?: string
      readonly permission?: string
      readonly members_url?: string
      readonly repositories_url?: string
      readonly parent?: unknown | null
    }
    /**
     * Ldap Private User
     * @description Ldap Private User
     */
    readonly 'ldap-mapping-user': {
      readonly ldap_dn?: string
      /** @example octocat */
      readonly login: string
      /** @example 1 */
      readonly id: number
      /** @example MDQ6VXNlcjE= */
      readonly node_id: string
      /**
       * Format: uri
       * @example https://github.com/images/error/octocat_happy.gif
       */
      readonly avatar_url: string
      /** @example 41d064eb2195891e12d0413f63227ea7 */
      readonly gravatar_id: string | null
      /**
       * Format: uri
       * @example https://api.github.com/users/octocat
       */
      readonly url: string
      /**
       * Format: uri
       * @example https://github.com/octocat
       */
      readonly html_url: string
      /**
       * Format: uri
       * @example https://api.github.com/users/octocat/followers
       */
      readonly followers_url: string
      /** @example https://api.github.com/users/octocat/following{/other_user} */
      readonly following_url: string
      /** @example https://api.github.com/users/octocat/gists{/gist_id} */
      readonly gists_url: string
      /** @example https://api.github.com/users/octocat/starred{/owner}{/repo} */
      readonly starred_url: string
      /**
       * Format: uri
       * @example https://api.github.com/users/octocat/subscriptions
       */
      readonly subscriptions_url: string
      /**
       * Format: uri
       * @example https://api.github.com/users/octocat/orgs
       */
      readonly organizations_url: string
      /**
       * Format: uri
       * @example https://api.github.com/users/octocat/repos
       */
      readonly repos_url: string
      /** @example https://api.github.com/users/octocat/events{/privacy} */
      readonly events_url: string
      /**
       * Format: uri
       * @example https://api.github.com/users/octocat/received_events
       */
      readonly received_events_url: string
      /** @example User */
      readonly type: string
      readonly site_admin: boolean
      /** @example monalisa octocat */
      readonly name: string | null
      /** @example GitHub */
      readonly company: string | null
      /** @example https://github.com/blog */
      readonly blog: string | null
      /** @example San Francisco */
      readonly location: string | null
      /**
       * Format: email
       * @example octocat@github.com
       */
      readonly email: string | null
      readonly hireable: boolean | null
      /** @example There once was... */
      readonly bio: string | null
      /** @example monalisa */
      readonly twitter_username?: string | null
      /** @example 2 */
      readonly public_repos: number
      /** @example 1 */
      readonly public_gists: number
      /** @example 20 */
      readonly followers: number
      /** @example 0 */
      readonly following: number
      /**
       * Format: date-time
       * @example 2008-01-14T04:33:35Z
       */
      readonly created_at: string
      /**
       * Format: date-time
       * @example 2008-01-14T04:33:35Z
       */
      readonly updated_at: string
      /** @example 81 */
      readonly private_gists: number
      /** @example 100 */
      readonly total_private_repos: number
      /** @example 100 */
      readonly owned_private_repos: number
      /** @example 10000 */
      readonly disk_usage: number
      /** @example 8 */
      readonly collaborators: number
      /** @example true */
      readonly two_factor_authentication: boolean
      readonly plan?: {
        readonly collaborators: number
        readonly name: string
        readonly space: number
        readonly private_repos: number
      }
      /** Format: date-time */
      readonly suspended_at?: string | null
      readonly business_plus?: boolean
    }
    /**
     * Organization Simple
     * @description Organization Simple
     */
    readonly 'organization-simple': {
      /** @example github */
      readonly login: string
      /** @example 1 */
      readonly id: number
      /** @example MDEyOk9yZ2FuaXphdGlvbjE= */
      readonly node_id: string
      /**
       * Format: uri
       * @example https://api.github.com/orgs/github
       */
      readonly url: string
      /**
       * Format: uri
       * @example https://api.github.com/orgs/github/repos
       */
      readonly repos_url: string
      /**
       * Format: uri
       * @example https://api.github.com/orgs/github/events
       */
      readonly events_url: string
      /** @example https://api.github.com/orgs/github/hooks */
      readonly hooks_url: string
      /** @example https://api.github.com/orgs/github/issues */
      readonly issues_url: string
      /** @example https://api.github.com/orgs/github/members{/member} */
      readonly members_url: string
      /** @example https://api.github.com/orgs/github/public_members{/member} */
      readonly public_members_url: string
      /** @example https://github.com/images/error/octocat_happy.gif */
      readonly avatar_url: string
      /** @example A great organization */
      readonly description: string | null
    }
    readonly 'pre-receive-environment': {
      readonly id?: number
      readonly name?: string
      readonly image_url?: string
      readonly url?: string
      readonly html_url?: string
      readonly default_environment?: boolean
      readonly created_at?: string
      readonly hooks_count?: number
      readonly download?: {
        readonly url?: string
        readonly state?: string
        readonly downloaded_at?: string | null
        readonly message?: string | null
      }
    }
    readonly 'pre-receive-environment-download-status': {
      readonly url?: string
      readonly state?: string
      readonly downloaded_at?: string | null
      readonly message?: string | null
    }
    readonly 'pre-receive-hook': {
      readonly id?: number
      readonly name?: string
      readonly enforcement?: string
      readonly script?: string
      readonly script_repository?: {
        readonly id?: number
        readonly full_name?: string
        readonly url?: string
        readonly html_url?: string
      }
      readonly environment?: {
        readonly id?: number
        readonly name?: string
        readonly image_url?: string
        readonly url?: string
        readonly html_url?: string
        readonly default_environment?: boolean
        readonly created_at?: string
        readonly hooks_count?: number
        readonly download?: {
          readonly url?: string
          readonly state?: string
          readonly downloaded_at?: string | null
          readonly message?: string | null
        }
      }
      readonly allow_downstream_configuration?: boolean
    }
    /**
     * Simple User
     * @description Simple User
     */
    readonly 'nullable-simple-user': {
      readonly name?: string | null
      readonly email?: string | null
      /** @example octocat */
      readonly login: string
      /** @example 1 */
      readonly id: number
      /** @example MDQ6VXNlcjE= */
      readonly node_id: string
      /**
       * Format: uri
       * @example https://github.com/images/error/octocat_happy.gif
       */
      readonly avatar_url: string
      /** @example 41d064eb2195891e12d0413f63227ea7 */
      readonly gravatar_id: string | null
      /**
       * Format: uri
       * @example https://api.github.com/users/octocat
       */
      readonly url: string
      /**
       * Format: uri
       * @example https://github.com/octocat
       */
      readonly html_url: string
      /**
       * Format: uri
       * @example https://api.github.com/users/octocat/followers
       */
      readonly followers_url: string
      /** @example https://api.github.com/users/octocat/following{/other_user} */
      readonly following_url: string
      /** @example https://api.github.com/users/octocat/gists{/gist_id} */
      readonly gists_url: string
      /** @example https://api.github.com/users/octocat/starred{/owner}{/repo} */
      readonly starred_url: string
      /**
       * Format: uri
       * @example https://api.github.com/users/octocat/subscriptions
       */
      readonly subscriptions_url: string
      /**
       * Format: uri
       * @example https://api.github.com/users/octocat/orgs
       */
      readonly organizations_url: string
      /**
       * Format: uri
       * @example https://api.github.com/users/octocat/repos
       */
      readonly repos_url: string
      /** @example https://api.github.com/users/octocat/events{/privacy} */
      readonly events_url: string
      /**
       * Format: uri
       * @example https://api.github.com/users/octocat/received_events
       */
      readonly received_events_url: string
      /** @example User */
      readonly type: string
      readonly site_admin: boolean
      /** @example "2020-07-09T00:17:55Z" */
      readonly starred_at?: string
    } | null
    /**
     * App Permissions
     * @description The permissions granted to the user-to-server access token.
     * @example {
     *   "contents": "read",
     *   "issues": "read",
     *   "deployments": "write",
     *   "single_file": "read"
     * }
     */
    readonly 'app-permissions': {
      /**
       * @description The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.
       * @enum {string}
       */
      readonly actions?: 'read' | 'write'
      /**
       * @description The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.
       * @enum {string}
       */
      readonly administration?: 'read' | 'write'
      /**
       * @description The level of permission to grant the access token for checks on code.
       * @enum {string}
       */
      readonly checks?: 'read' | 'write'
      /**
       * @description The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.
       * @enum {string}
       */
      readonly contents?: 'read' | 'write'
      /**
       * @description The level of permission to grant the access token for deployments and deployment statuses.
       * @enum {string}
       */
      readonly deployments?: 'read' | 'write'
      /**
       * @description The level of permission to grant the access token for managing repository environments.
       * @enum {string}
       */
      readonly environments?: 'read' | 'write'
      /**
       * @description The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.
       * @enum {string}
       */
      readonly issues?: 'read' | 'write'
      /**
       * @description The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.
       * @enum {string}
       */
      readonly metadata?: 'read' | 'write'
      /**
       * @description The level of permission to grant the access token for packages published to GitHub Packages.
       * @enum {string}
       */
      readonly packages?: 'read' | 'write'
      /**
       * @description The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.
       * @enum {string}
       */
      readonly pages?: 'read' | 'write'
      /**
       * @description The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.
       * @enum {string}
       */
      readonly pull_requests?: 'read' | 'write'
      /**
       * @description The level of permission to grant the access token to manage the post-receive hooks for a repository.
       * @enum {string}
       */
      readonly repository_hooks?: 'read' | 'write'
      /**
       * @description The level of permission to grant the access token to manage repository projects, columns, and cards.
       * @enum {string}
       */
      readonly repository_projects?: 'read' | 'write' | 'admin'
      /**
       * @description The level of permission to grant the access token to view and manage secret scanning alerts.
       * @enum {string}
       */
      readonly secret_scanning_alerts?: 'read' | 'write'
      /**
       * @description The level of permission to grant the access token to manage repository secrets.
       * @enum {string}
       */
      readonly secrets?: 'read' | 'write'
      /**
       * @description The level of permission to grant the access token to view and manage security events like code scanning alerts.
       * @enum {string}
       */
      readonly security_events?: 'read' | 'write'
      /**
       * @description The level of permission to grant the access token to manage just a single file.
       * @enum {string}
       */
      readonly single_file?: 'read' | 'write'
      /**
       * @description The level of permission to grant the access token for commit statuses.
       * @enum {string}
       */
      readonly statuses?: 'read' | 'write'
      /**
       * @description The level of permission to grant the access token to manage Dependabot alerts.
       * @enum {string}
       */
      readonly vulnerability_alerts?: 'read' | 'write'
      /**
       * @description The level of permission to grant the access token to update GitHub Actions workflow files.
       * @enum {string}
       */
      readonly workflows?: 'write'
      /**
       * @description The level of permission to grant the access token for organization teams and members.
       * @enum {string}
       */
      readonly members?: 'read' | 'write'
      /**
       * @description The level of permission to grant the access token to manage access to an organization.
       * @enum {string}
       */
      readonly organization_administration?: 'read' | 'write'
      /**
       * @description The level of permission to grant the access token to manage the post-receive hooks for an organization.
       * @enum {string}
       */
      readonly organization_hooks?: 'read' | 'write'
      /**
       * @description The level of permission to grant the access token for viewing an organization's plan.
       * @enum {string}
       */
      readonly organization_plan?: 'read'
      /**
       * @description The level of permission to grant the access token to manage organization projects and projects beta (where available).
       * @enum {string}
       */
      readonly organization_projects?: 'read' | 'write' | 'admin'
      /**
       * @description The level of permission to grant the access token for organization packages published to GitHub Packages.
       * @enum {string}
       */
      readonly organization_packages?: 'read' | 'write'
      /**
       * @description The level of permission to grant the access token to manage organization secrets.
       * @enum {string}
       */
      readonly organization_secrets?: 'read' | 'write'
      /**
       * @description The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.
       * @enum {string}
       */
      readonly organization_self_hosted_runners?: 'read' | 'write'
      /**
       * @description The level of permission to grant the access token to view and manage users blocked by the organization.
       * @enum {string}
       */
      readonly organization_user_blocking?: 'read' | 'write'
      /**
       * @description The level of permission to grant the access token to manage team discussions and related comments.
       * @enum {string}
       */
      readonly team_discussions?: 'read' | 'write'
    }
    /**
     * Simple User
     * @description Simple User
     */
    readonly 'simple-user': {
      readonly name?: string | null
      readonly email?: string | null
      /** @example octocat */
      readonly login: string
      /** @example 1 */
      readonly id: number
      /** @example MDQ6VXNlcjE= */
      readonly node_id: string
      /**
       * Format: uri
       * @example https://github.com/images/error/octocat_happy.gif
       */
      readonly avatar_url: string
      /** @example 41d064eb2195891e12d0413f63227ea7 */
      readonly gravatar_id: string | null
      /**
       * Format: uri
       * @example https://api.github.com/users/octocat
       */
      readonly url: string
      /**
       * Format: uri
       * @example https://github.com/octocat
       */
      readonly html_url: string
      /**
       * Format: uri
       * @example https://api.github.com/users/octocat/followers
       */
      readonly followers_url: string
      /** @example https://api.github.com/users/octocat/following{/other_user} */
      readonly following_url: string
      /** @example https://api.github.com/users/octocat/gists{/gist_id} */
      readonly gists_url: string
      /** @example https://api.github.com/users/octocat/starred{/owner}{/repo} */
      readonly starred_url: string
      /**
       * Format: uri
       * @example https://api.github.com/users/octocat/subscriptions
       */
      readonly subscriptions_url: string
      /**
       * Format: uri
       * @example https://api.github.com/users/octocat/orgs
       */
      readonly organizations_url: string
      /**
       * Format: uri
       * @example https://api.github.com/users/octocat/repos
       */
      readonly repos_url: string
      /** @example https://api.github.com/users/octocat/events{/privacy} */
      readonly events_url: string
      /**
       * Format: uri
       * @example https://api.github.com/users/octocat/received_events
       */
      readonly received_events_url: string
      /** @example User */
      readonly type: string
      readonly site_admin: boolean
      /** @example "2020-07-09T00:17:55Z" */
      readonly starred_at?: string
    }
    /** Scoped Installation */
    readonly 'nullable-scoped-installation': {
      readonly permissions: components['schemas']['app-permissions']
      /**
       * @description Describe whether all repositories have been selected or there's a selection involved
       * @enum {string}
       */
      readonly repository_selection: 'all' | 'selected'
      /** @example config.yaml */
      readonly single_file_name: string | null
      /** @example true */
      readonly has_multiple_single_files?: boolean
      /**
       * @example [
       *   "config.yml",
       *   ".github/issue_TEMPLATE.md"
       * ]
       */
      readonly single_file_paths?: readonly string[]
      /**
       * Format: uri
       * @example https://api.github.com/users/octocat/repos
       */
      readonly repositories_url: string
      readonly account: components['schemas']['simple-user']
    } | null
    /**
     * Authorization
     * @description The authorization for an OAuth app, GitHub App, or a Personal Access Token.
     */
    readonly authorization: {
      readonly id: number
      /** Format: uri */
      readonly url: string
      /** @description A list of scopes that this authorization is in. */
      readonly scopes: readonly string[] | null
      readonly token: string
      readonly token_last_eight: string | null
      readonly hashed_token: string | null
      readonly app: {
        readonly client_id: string
        readonly name: string
        /** Format: uri */
        readonly url: string
      }
      readonly note: string | null
      /** Format: uri */
      readonly note_url: string | null
      /** Format: date-time */
      readonly updated_at: string
      /** Format: date-time */
      readonly created_at: string
      readonly fingerprint: string | null
      readonly user?: components['schemas']['nullable-simple-user']
      readonly installation?: components['schemas']['nullable-scoped-installation']
      /** Format: date-time */
      readonly expires_at: string | null
    }
    /**
     * GitHub app
     * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    readonly integration: {
      /**
       * @description Unique identifier of the GitHub app
       * @example 37
       */
      readonly id: number
      /**
       * @description The slug name of the GitHub app
       * @example probot-owners
       */
      readonly slug?: string
      /** @example MDExOkludGVncmF0aW9uMQ== */
      readonly node_id: string
      readonly owner: components['schemas']['nullable-simple-user']
      /**
       * @description The name of the GitHub app
       * @example Probot Owners
       */
      readonly name: string
      /** @example The description of the app. */
      readonly description: string | null
      /**
       * Format: uri
       * @example https://example.com
       */
      readonly external_url: string
      /**
       * Format: uri
       * @example https://github.com/apps/super-ci
       */
      readonly html_url: string
      /**
       * Format: date-time
       * @example 2017-07-08T16:18:44-04:00
       */
      readonly created_at: string
      /**
       * Format: date-time
       * @example 2017-07-08T16:18:44-04:00
       */
      readonly updated_at: string
      /**
       * @description The set of permissions for the GitHub app
       * @example {
       *   "issues": "read",
       *   "deployments": "write"
       * }
       */
      readonly permissions: {
        readonly issues?: string
        readonly checks?: string
        readonly metadata?: string
        readonly contents?: string
        readonly deployments?: string
      } & { readonly [key: string]: string }
      /**
       * @description The list of events for the GitHub app
       * @example [
       *   "label",
       *   "deployment"
       * ]
       */
      readonly events: readonly string[]
      /**
       * @description The number of installations associated with the GitHub app
       * @example 5
       */
      readonly installations_count?: number
      /** @example "Iv1.25b5d1e65ffc4022" */
      readonly client_id?: string
      /** @example "1d4b2097ac622ba702d19de498f005747a8b21d3" */
      readonly client_secret?: string
      /** @example "6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b" */
      readonly webhook_secret?: string | null
      /** @example "-----BEGIN RSA PRIVATE KEY-----\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\n-----END RSA PRIVATE KEY-----\n" */
      readonly pem?: string
    }
    /**
     * Basic Error
     * @description Basic Error
     */
    readonly 'basic-error': {
      readonly message?: string
      readonly documentation_url?: string
      readonly url?: string
      readonly status?: string
    }
    /**
     * Validation Error Simple
     * @description Validation Error Simple
     */
    readonly 'validation-error-simple': {
      readonly message: string
      readonly documentation_url: string
      readonly errors?: readonly string[]
    }
    /**
     * Format: uri
     * @description The URL to which the payloads will be delivered.
     * @example https://example.com/webhook
     */
    readonly 'webhook-config-url': string
    /**
     * @description The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
     * @example "json"
     */
    readonly 'webhook-config-content-type': string
    /**
     * @description If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.6/webhooks/event-payloads/#delivery-headers).
     * @example "********"
     */
    readonly 'webhook-config-secret': string
    readonly 'webhook-config-insecure-ssl': string | number
    /**
     * Webhook Configuration
     * @description Configuration object of the webhook
     */
    readonly 'webhook-config': {
      readonly url?: components['schemas']['webhook-config-url']
      readonly content_type?: components['schemas']['webhook-config-content-type']
      readonly secret?: components['schemas']['webhook-config-secret']
      readonly insecure_ssl?: components['schemas']['webhook-config-insecure-ssl']
    }
    /**
     * Simple webhook delivery
     * @description Delivery made by a webhook, without request and response information.
     */
    readonly 'hook-delivery-item': {
      /**
       * @description Unique identifier of the webhook delivery.
       * @example 42
       */
      readonly id: number
      /**
       * @description Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
       * @example 58474f00-b361-11eb-836d-0e4f3503ccbe
       */
      readonly guid: string
      /**
       * Format: date-time
       * @description Time when the webhook delivery occurred.
       * @example 2021-05-12T20:33:44Z
       */
      readonly delivered_at: string
      /**
       * @description Whether the webhook delivery is a redelivery.
       * @example false
       */
      readonly redelivery: boolean
      /**
       * @description Time spent delivering.
       * @example 0.03
       */
      readonly duration: number
      /**
       * @description Describes the response returned after attempting the delivery.
       * @example failed to connect
       */
      readonly status: string
      /**
       * @description Status code received when delivery was made.
       * @example 502
       */
      readonly status_code: number
      /**
       * @description The event that triggered the delivery.
       * @example issues
       */
      readonly event: string
      /**
       * @description The type of activity for the event that triggered the delivery.
       * @example opened
       */
      readonly action: string | null
      /**
       * @description The id of the GitHub App installation associated with this event.
       * @example 123
       */
      readonly installation_id: number | null
      /**
       * @description The id of the repository associated with this event.
       * @example 123
       */
      readonly repository_id: number | null
    }
    /**
     * Scim Error
     * @description Scim Error
     */
    readonly 'scim-error': {
      readonly message?: string | null
      readonly documentation_url?: string | null
      readonly detail?: string | null
      readonly status?: number
      readonly scimType?: string | null
      readonly schemas?: readonly string[]
    }
    /**
     * Validation Error
     * @description Validation Error
     */
    readonly 'validation-error': {
      readonly message: string
      readonly documentation_url: string
      readonly errors?: readonly {
        readonly resource?: string
        readonly field?: string
        readonly message?: string
        readonly code: string
        readonly index?: number
        readonly value?: (string | null) | (number | null) | (readonly string[] | null)
      }[]
    }
    /**
     * Webhook delivery
     * @description Delivery made by a webhook.
     */
    readonly 'hook-delivery': {
      /**
       * @description Unique identifier of the delivery.
       * @example 42
       */
      readonly id: number
      /**
       * @description Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
       * @example 58474f00-b361-11eb-836d-0e4f3503ccbe
       */
      readonly guid: string
      /**
       * Format: date-time
       * @description Time when the delivery was delivered.
       * @example 2021-05-12T20:33:44Z
       */
      readonly delivered_at: string
      /**
       * @description Whether the delivery is a redelivery.
       * @example false
       */
      readonly redelivery: boolean
      /**
       * @description Time spent delivering.
       * @example 0.03
       */
      readonly duration: number
      /**
       * @description Description of the status of the attempted delivery
       * @example failed to connect
       */
      readonly status: string
      /**
       * @description Status code received when delivery was made.
       * @example 502
       */
      readonly status_code: number
      /**
       * @description The event that triggered the delivery.
       * @example issues
       */
      readonly event: string
      /**
       * @description The type of activity for the event that triggered the delivery.
       * @example opened
       */
      readonly action: string | null
      /**
       * @description The id of the GitHub App installation associated with this event.
       * @example 123
       */
      readonly installation_id: number | null
      /**
       * @description The id of the repository associated with this event.
       * @example 123
       */
      readonly repository_id: number | null
      /**
       * @description The URL target of the delivery.
       * @example https://www.example.com
       */
      readonly url?: string
      readonly request: {
        /** @description The request headers sent with the webhook delivery. */
        readonly headers: { readonly [key: string]: unknown } | null
        /** @description The webhook payload. */
        readonly payload: { readonly [key: string]: unknown } | null
      }
      readonly response: {
        /** @description The response headers received when the delivery was made. */
        readonly headers: { readonly [key: string]: unknown } | null
        /** @description The response payload received. */
        readonly payload: string | null
      }
    }
    /**
     * Enterprise
     * @description An enterprise account
     */
    readonly enterprise: {
      /** @description A short description of the enterprise. */
      readonly description?: string | null
      /**
       * Format: uri
       * @example https://github.com/enterprises/octo-business
       */
      readonly html_url: string
      /**
       * Format: uri
       * @description The enterprise's website URL.
       */
      readonly website_url?: string | null
      /**
       * @description Unique identifier of the enterprise
       * @example 42
       */
      readonly id: number
      /** @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5 */
      readonly node_id: string
      /**
       * @description The name of the enterprise.
       * @example Octo Business
       */
      readonly name: string
      /**
       * @description The slug url identifier for the enterprise.
       * @example octo-business
       */
      readonly slug: string
      /**
       * Format: date-time
       * @example 2019-01-26T19:01:12Z
       */
      readonly created_at: string | null
      /**
       * Format: date-time
       * @example 2019-01-26T19:14:43Z
       */
      readonly updated_at: string | null
      /** Format: uri */
      readonly avatar_url: string
    }
    /**
     * Installation
     * @description Installation
     */
    readonly installation: {
      /**
       * @description The ID of the installation.
       * @example 1
       */
      readonly id: number
      readonly account: (components['schemas']['simple-user'] | components['schemas']['enterprise']) | null
      /**
       * @description Describe whether all repositories have been selected or there's a selection involved
       * @enum {string}
       */
      readonly repository_selection: 'all' | 'selected'
      /**
       * Format: uri
       * @example https://api.github.com/installations/1/access_tokens
       */
      readonly access_tokens_url: string
      /**
       * Format: uri
       * @example https://api.github.com/installation/repositories
       */
      readonly repositories_url: string
      /**
       * Format: uri
       * @example https://github.com/organizations/github/settings/installations/1
       */
      readonly html_url: string
      /** @example 1 */
      readonly app_id: number
      /** @description The ID of the user or organization this token is being scoped to. */
      readonly target_id: number
      /** @example Organization */
      readonly target_type: string
      readonly permissions: components['schemas']['app-permissions']
      readonly events: readonly string[]
      /** Format: date-time */
      readonly created_at: string
      /** Format: date-time */
      readonly updated_at: string
      /** @example config.yaml */
      readonly single_file_name: string | null
      /** @example true */
      readonly has_multiple_single_files?: boolean
      /**
       * @example [
       *   "config.yml",
       *   ".github/issue_TEMPLATE.md"
       * ]
       */
      readonly single_file_paths?: readonly string[]
      /** @example github-actions */
      readonly app_slug: string
      readonly suspended_by: components['schemas']['nullable-simple-user']
      /** Format: date-time */
      readonly suspended_at: string | null
      /** @example "test_13f1e99741e3e004@d7e1eb0bc0a1ba12.com" */
      readonly contact_email?: string | null
    }
    /**
     * License Simple
     * @description License Simple
     */
    readonly 'nullable-license-simple': {
      /** @example mit */
      readonly key: string
      /** @example MIT License */
      readonly name: string
      /**
       * Format: uri
       * @example https://api.github.com/licenses/mit
       */
      readonly url: string | null
      /** @example MIT */
      readonly spdx_id: string | null
      /** @example MDc6TGljZW5zZW1pdA== */
      readonly node_id: string
      /** Format: uri */
      readonly html_url?: string
    } | null
    /**
     * Repository
     * @description A git repository
     */
    readonly repository: {
      /**
       * @description Unique identifier of the repository
       * @example 42
       */
      readonly id: number
      /** @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5 */
      readonly node_id: string
      /**
       * @description The name of the repository.
       * @example Team Environment
       */
      readonly name: string
      /** @example octocat/Hello-World */
      readonly full_name: string
      readonly license: components['schemas']['nullable-license-simple']
      readonly organization?: components['schemas']['nullable-simple-user']
      readonly forks: number
      readonly permissions?: {
        readonly admin: boolean
        readonly pull: boolean
        readonly triage?: boolean
        readonly push: boolean
        readonly maintain?: boolean
      }
      readonly owner: components['schemas']['simple-user']
      /**
       * @description Whether the repository is private or public.
       * @default false
       */
      readonly private: boolean
      /**
       * Format: uri
       * @example https://github.com/octocat/Hello-World
       */
      readonly html_url: string
      /** @example This your first repo! */
      readonly description: string | null
      readonly fork: boolean
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/Hello-World
       */
      readonly url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref} */
      readonly archive_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/assignees{/user} */
      readonly assignees_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha} */
      readonly blobs_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/branches{/branch} */
      readonly branches_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator} */
      readonly collaborators_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/comments{/number} */
      readonly comments_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/commits{/sha} */
      readonly commits_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head} */
      readonly compare_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/contents/{+path} */
      readonly contents_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/contributors
       */
      readonly contributors_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/deployments
       */
      readonly deployments_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/downloads
       */
      readonly downloads_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/events
       */
      readonly events_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/forks
       */
      readonly forks_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/git/commits{/sha} */
      readonly git_commits_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/git/refs{/sha} */
      readonly git_refs_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/git/tags{/sha} */
      readonly git_tags_url: string
      /** @example git:github.com/octocat/Hello-World.git */
      readonly git_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/issues/comments{/number} */
      readonly issue_comment_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/issues/events{/number} */
      readonly issue_events_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/issues{/number} */
      readonly issues_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/keys{/key_id} */
      readonly keys_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/labels{/name} */
      readonly labels_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/languages
       */
      readonly languages_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/merges
       */
      readonly merges_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/milestones{/number} */
      readonly milestones_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating} */
      readonly notifications_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/pulls{/number} */
      readonly pulls_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/releases{/id} */
      readonly releases_url: string
      /** @example git@github.com:octocat/Hello-World.git */
      readonly ssh_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/stargazers
       */
      readonly stargazers_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/statuses/{sha} */
      readonly statuses_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/subscribers
       */
      readonly subscribers_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/subscription
       */
      readonly subscription_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/tags
       */
      readonly tags_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/teams
       */
      readonly teams_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/git/trees{/sha} */
      readonly trees_url: string
      /** @example https://github.com/octocat/Hello-World.git */
      readonly clone_url: string
      /**
       * Format: uri
       * @example git:git.example.com/octocat/Hello-World
       */
      readonly mirror_url: string | null
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/hooks
       */
      readonly hooks_url: string
      /**
       * Format: uri
       * @example https://svn.github.com/octocat/Hello-World
       */
      readonly svn_url: string
      /**
       * Format: uri
       * @example https://github.com
       */
      readonly homepage: string | null
      readonly language: string | null
      /** @example 9 */
      readonly forks_count: number
      /** @example 80 */
      readonly stargazers_count: number
      /** @example 80 */
      readonly watchers_count: number
      /**
       * @description The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
       * @example 108
       */
      readonly size: number
      /**
       * @description The default branch of the repository.
       * @example master
       */
      readonly default_branch: string
      /** @example 0 */
      readonly open_issues_count: number
      /**
       * @description Whether this repository acts as a template that can be used to generate new repositories.
       * @default false
       * @example true
       */
      readonly is_template?: boolean
      readonly topics?: readonly string[]
      /**
       * @description Whether issues are enabled.
       * @default true
       * @example true
       */
      readonly has_issues: boolean
      /**
       * @description Whether projects are enabled.
       * @default true
       * @example true
       */
      readonly has_projects: boolean
      /**
       * @description Whether the wiki is enabled.
       * @default true
       * @example true
       */
      readonly has_wiki: boolean
      readonly has_pages: boolean
      /**
       * @description Whether downloads are enabled.
       * @default true
       * @example true
       */
      readonly has_downloads: boolean
      /**
       * @description Whether the repository is archived.
       * @default false
       */
      readonly archived: boolean
      /** @description Returns whether or not this repository disabled. */
      readonly disabled: boolean
      /**
       * @description The repository visibility: public, private, or internal.
       * @default public
       */
      readonly visibility?: string
      /**
       * Format: date-time
       * @example 2011-01-26T19:06:43Z
       */
      readonly pushed_at: string | null
      /**
       * Format: date-time
       * @example 2011-01-26T19:01:12Z
       */
      readonly created_at: string | null
      /**
       * Format: date-time
       * @example 2011-01-26T19:14:43Z
       */
      readonly updated_at: string | null
      /**
       * @description Whether to allow rebase merges for pull requests.
       * @default true
       * @example true
       */
      readonly allow_rebase_merge?: boolean
      readonly template_repository?: {
        readonly id?: number
        readonly node_id?: string
        readonly name?: string
        readonly full_name?: string
        readonly owner?: {
          readonly login?: string
          readonly id?: number
          readonly node_id?: string
          readonly avatar_url?: string
          readonly gravatar_id?: string
          readonly url?: string
          readonly html_url?: string
          readonly followers_url?: string
          readonly following_url?: string
          readonly gists_url?: string
          readonly starred_url?: string
          readonly subscriptions_url?: string
          readonly organizations_url?: string
          readonly repos_url?: string
          readonly events_url?: string
          readonly received_events_url?: string
          readonly type?: string
          readonly site_admin?: boolean
        }
        readonly private?: boolean
        readonly html_url?: string
        readonly description?: string
        readonly fork?: boolean
        readonly url?: string
        readonly archive_url?: string
        readonly assignees_url?: string
        readonly blobs_url?: string
        readonly branches_url?: string
        readonly collaborators_url?: string
        readonly comments_url?: string
        readonly commits_url?: string
        readonly compare_url?: string
        readonly contents_url?: string
        readonly contributors_url?: string
        readonly deployments_url?: string
        readonly downloads_url?: string
        readonly events_url?: string
        readonly forks_url?: string
        readonly git_commits_url?: string
        readonly git_refs_url?: string
        readonly git_tags_url?: string
        readonly git_url?: string
        readonly issue_comment_url?: string
        readonly issue_events_url?: string
        readonly issues_url?: string
        readonly keys_url?: string
        readonly labels_url?: string
        readonly languages_url?: string
        readonly merges_url?: string
        readonly milestones_url?: string
        readonly notifications_url?: string
        readonly pulls_url?: string
        readonly releases_url?: string
        readonly ssh_url?: string
        readonly stargazers_url?: string
        readonly statuses_url?: string
        readonly subscribers_url?: string
        readonly subscription_url?: string
        readonly tags_url?: string
        readonly teams_url?: string
        readonly trees_url?: string
        readonly clone_url?: string
        readonly mirror_url?: string
        readonly hooks_url?: string
        readonly svn_url?: string
        readonly homepage?: string
        readonly language?: string
        readonly forks_count?: number
        readonly stargazers_count?: number
        readonly watchers_count?: number
        readonly size?: number
        readonly default_branch?: string
        readonly open_issues_count?: number
        readonly is_template?: boolean
        readonly topics?: readonly string[]
        readonly has_issues?: boolean
        readonly has_projects?: boolean
        readonly has_wiki?: boolean
        readonly has_pages?: boolean
        readonly has_downloads?: boolean
        readonly archived?: boolean
        readonly disabled?: boolean
        readonly visibility?: string
        readonly pushed_at?: string
        readonly created_at?: string
        readonly updated_at?: string
        readonly permissions?: {
          readonly admin?: boolean
          readonly maintain?: boolean
          readonly push?: boolean
          readonly triage?: boolean
          readonly pull?: boolean
        }
        readonly allow_rebase_merge?: boolean
        readonly temp_clone_token?: string
        readonly allow_squash_merge?: boolean
        readonly allow_auto_merge?: boolean
        readonly delete_branch_on_merge?: boolean
        readonly allow_update_branch?: boolean
        readonly use_squash_pr_title_as_default?: boolean
        /**
         * @description The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         * @enum {string}
         */
        readonly squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE'
        /**
         * @description The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         * @enum {string}
         */
        readonly squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK'
        /**
         * @description The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         * @enum {string}
         */
        readonly merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE'
        /**
         * @description The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         * @enum {string}
         */
        readonly merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK'
        readonly allow_merge_commit?: boolean
        readonly subscribers_count?: number
        readonly network_count?: number
      } | null
      readonly temp_clone_token?: string
      /**
       * @description Whether to allow squash merges for pull requests.
       * @default true
       * @example true
       */
      readonly allow_squash_merge?: boolean
      /**
       * @description Whether to allow Auto-merge to be used on pull requests.
       * @default false
       * @example false
       */
      readonly allow_auto_merge?: boolean
      /**
       * @description Whether to delete head branches when pull requests are merged
       * @default false
       * @example false
       */
      readonly delete_branch_on_merge?: boolean
      /**
       * @description Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
       * @default false
       * @example false
       */
      readonly allow_update_branch?: boolean
      /**
       * @deprecated
       * @description Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
       * @default false
       */
      readonly use_squash_pr_title_as_default?: boolean
      /**
       * @description The default value for a squash merge commit title:
       *
       * - `PR_TITLE` - default to the pull request's title.
       * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
       * @enum {string}
       */
      readonly squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE'
      /**
       * @description The default value for a squash merge commit message:
       *
       * - `PR_BODY` - default to the pull request's body.
       * - `COMMIT_MESSAGES` - default to the branch's commit messages.
       * - `BLANK` - default to a blank commit message.
       * @enum {string}
       */
      readonly squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK'
      /**
       * @description The default value for a merge commit title.
       *
       * - `PR_TITLE` - default to the pull request's title.
       * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
       * @enum {string}
       */
      readonly merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE'
      /**
       * @description The default value for a merge commit message.
       *
       * - `PR_TITLE` - default to the pull request's title.
       * - `PR_BODY` - default to the pull request's body.
       * - `BLANK` - default to a blank commit message.
       * @enum {string}
       */
      readonly merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK'
      /**
       * @description Whether to allow merge commits for pull requests.
       * @default true
       * @example true
       */
      readonly allow_merge_commit?: boolean
      /** @description Whether to allow forking this repo */
      readonly allow_forking?: boolean
      /**
       * @description Whether to require contributors to sign off on web-based commits
       * @default false
       */
      readonly web_commit_signoff_required?: boolean
      readonly subscribers_count?: number
      readonly network_count?: number
      readonly open_issues: number
      readonly watchers: number
      readonly master_branch?: string
      /** @example "2020-07-09T00:17:42Z" */
      readonly starred_at?: string
      /** @description Whether anonymous git access is enabled for this repository */
      readonly anonymous_access_enabled?: boolean
    }
    /**
     * Installation Token
     * @description Authentication token for a GitHub App installed on a user or org.
     */
    readonly 'installation-token': {
      readonly token: string
      readonly expires_at: string
      readonly permissions?: components['schemas']['app-permissions']
      /** @enum {string} */
      readonly repository_selection?: 'all' | 'selected'
      readonly repositories?: readonly components['schemas']['repository'][]
      /** @example README.md */
      readonly single_file?: string
      /** @example true */
      readonly has_multiple_single_files?: boolean
      /**
       * @example [
       *   "config.yml",
       *   ".github/issue_TEMPLATE.md"
       * ]
       */
      readonly single_file_paths?: readonly string[]
    }
    /**
     * Application Grant
     * @description The authorization associated with an OAuth Access.
     */
    readonly 'application-grant': {
      /** @example 1 */
      readonly id: number
      /**
       * Format: uri
       * @example https://api.github.com/applications/grants/1
       */
      readonly url: string
      readonly app: {
        readonly client_id: string
        readonly name: string
        /** Format: uri */
        readonly url: string
      }
      /**
       * Format: date-time
       * @example 2011-09-06T17:26:27Z
       */
      readonly created_at: string
      /**
       * Format: date-time
       * @example 2011-09-06T20:39:23Z
       */
      readonly updated_at: string
      /**
       * @example [
       *   "public_repo"
       * ]
       */
      readonly scopes: readonly string[]
      readonly user?: components['schemas']['nullable-simple-user']
    }
    /**
     * Code Of Conduct
     * @description Code Of Conduct
     */
    readonly 'code-of-conduct': {
      /** @example contributor_covenant */
      readonly key: string
      /** @example Contributor Covenant */
      readonly name: string
      /**
       * Format: uri
       * @example https://api.github.com/codes_of_conduct/contributor_covenant
       */
      readonly url: string
      /**
       * @example # Contributor Covenant Code of Conduct
       *
       * ## Our Pledge
       *
       * In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.
       *
       * ## Our Standards
       *
       * Examples of behavior that contributes to creating a positive environment include:
       *
       * * Using welcoming and inclusive language
       * * Being respectful of differing viewpoints and experiences
       * * Gracefully accepting constructive criticism
       * * Focusing on what is best for the community
       * * Showing empathy towards other community members
       *
       * Examples of unacceptable behavior by participants include:
       *
       * * The use of sexualized language or imagery and unwelcome sexual attention or advances
       * * Trolling, insulting/derogatory comments, and personal or political attacks
       * * Public or private harassment
       * * Publishing others' private information, such as a physical or electronic address, without explicit permission
       * * Other conduct which could reasonably be considered inappropriate in a professional setting
       *
       * ## Our Responsibilities
       *
       * Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response
       *                   to any instances of unacceptable behavior.
       *
       * Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.
       *
       * ## Scope
       *
       * This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,
       *                   posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.
       *
       * ## Enforcement
       *
       * Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.
       *
       * Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.
       *
       * ## Attribution
       *
       * This Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]
       *
       * [homepage]: http://contributor-covenant.org
       * [version]: http://contributor-covenant.org/version/1/4/
       */
      readonly body?: string
      /** Format: uri */
      readonly html_url: string | null
    }
    /**
     * @description The announcement text in GitHub Flavored Markdown. For more information about GitHub Flavored Markdown, see "[Basic writing and formatting syntax](https://docs.github.com/enterprise-server@3.6/github/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax)."
     * @example Very **important** announcement about _nothing_.
     */
    readonly 'announcement-message': string
    /**
     * Format: date-time
     * @description The time at which the announcement expires. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. To set an announcement that never expires, omit this parameter, set it to `null`, or set it to an empty string.
     * @example "2021-01-01T00:00:00.000-07:00"
     */
    readonly 'announcement-expiration': string | null
    /**
     * Enterprise Announcement
     * @description Enterprise global announcement
     */
    readonly announcement: {
      readonly announcement: components['schemas']['announcement-message']
      readonly expires_at?: components['schemas']['announcement-expiration']
    }
    readonly 'license-info': {
      readonly seats?: string | number
      readonly seats_used?: number
      readonly seats_available?: string | number
      readonly kind?: string
      readonly days_until_expiration?: number
      readonly expire_at?: string
    }
    /** Repository Enterprise Stats */
    readonly 'enterprise-repository-overview': {
      readonly total_repos: number
      readonly root_repos: number
      readonly fork_repos: number
      readonly org_repos: number
      readonly total_pushes: number
      readonly total_wikis: number
    }
    /** Hooks Enterprise Stats */
    readonly 'enterprise-hook-overview': {
      readonly total_hooks: number
      readonly active_hooks: number
      readonly inactive_hooks: number
    }
    /** Enterprise Pages Stats */
    readonly 'enterprise-page-overview': {
      readonly total_pages: number
    }
    /** Enterprise Organization Stats */
    readonly 'enterprise-organization-overview': {
      readonly total_orgs: number
      readonly disabled_orgs: number
      readonly total_teams: number
      readonly total_team_members: number
    }
    /** Enterprise User Stats */
    readonly 'enterprise-user-overview': {
      readonly total_users: number
      readonly admin_users: number
      readonly suspended_users: number
    }
    /** Enterprise Pull Request Stats */
    readonly 'enterprise-pull-request-overview': {
      readonly total_pulls: number
      readonly merged_pulls: number
      readonly mergeable_pulls: number
      readonly unmergeable_pulls: number
    }
    /** Enterprise Issue Stats */
    readonly 'enterprise-issue-overview': {
      readonly total_issues: number
      readonly open_issues: number
      readonly closed_issues: number
    }
    /** Enterprise Milestone Stats */
    readonly 'enterprise-milestone-overview': {
      readonly total_milestones: number
      readonly open_milestones: number
      readonly closed_milestones: number
    }
    /** Enterprise Gist Stats */
    readonly 'enterprise-gist-overview': {
      readonly total_gists: number
      readonly private_gists: number
      readonly public_gists: number
    }
    /** Enterprise Comment Stats */
    readonly 'enterprise-comment-overview': {
      readonly total_commit_comments: number
      readonly total_gist_comments: number
      readonly total_issue_comments: number
      readonly total_pull_request_comments: number
    }
    readonly 'enterprise-overview': {
      readonly repos?: components['schemas']['enterprise-repository-overview']
      readonly hooks?: components['schemas']['enterprise-hook-overview']
      readonly pages?: components['schemas']['enterprise-page-overview']
      readonly orgs?: components['schemas']['enterprise-organization-overview']
      readonly users?: components['schemas']['enterprise-user-overview']
      readonly pulls?: components['schemas']['enterprise-pull-request-overview']
      readonly issues?: components['schemas']['enterprise-issue-overview']
      readonly milestones?: components['schemas']['enterprise-milestone-overview']
      readonly gists?: components['schemas']['enterprise-gist-overview']
      readonly comments?: components['schemas']['enterprise-comment-overview']
    }
    readonly 'actions-cache-usage-org-enterprise': {
      /** @description The count of active caches across all repositories of an enterprise or an organization. */
      readonly total_active_caches_count: number
      /** @description The total size in bytes of all active cache items across all repositories of an enterprise or an organization. */
      readonly total_active_caches_size_in_bytes: number
    }
    /**
     * Actions cache usage policy for an enterprise
     * @description GitHub Actions cache usage policy for an enterprise.
     */
    readonly 'actions-cache-usage-policy-enterprise': {
      /**
       * @description For repositories in an enterprise, the default size limit for the sum of all caches in a repository, in gigabytes.
       * @example 10
       */
      readonly repo_cache_size_limit_in_gb?: number
      /**
       * @description For repositories in an enterprise, the maximum value that can be set as the limit for the sum of all caches in a repository, in gigabytes.
       * @example 15
       */
      readonly max_repo_cache_size_limit_in_gb?: number
    }
    /**
     * @description The policy that controls the organizations in the enterprise that are allowed to run GitHub Actions.
     * @enum {string}
     */
    readonly 'enabled-organizations': 'all' | 'none' | 'selected'
    /**
     * @description The permissions policy that controls the actions that are allowed to run.
     * @enum {string}
     */
    readonly 'allowed-actions': 'all' | 'local_only' | 'selected'
    /** @description The API URL to use to get or set the actions that are allowed to run, when `allowed_actions` is set to `selected`. */
    readonly 'selected-actions-url': string
    readonly 'actions-enterprise-permissions': {
      readonly enabled_organizations: components['schemas']['enabled-organizations']
      /** @description The API URL to use to get or set the selected organizations that are allowed to run GitHub Actions, when `enabled_organizations` is set to `selected`. */
      readonly selected_organizations_url?: string
      readonly allowed_actions?: components['schemas']['allowed-actions']
      readonly selected_actions_url?: components['schemas']['selected-actions-url']
    }
    readonly 'selected-actions': {
      /** @description Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization. */
      readonly github_owned_allowed: boolean
      /** @description Specifies a list of string-matching patterns to allow specific action(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`." */
      readonly patterns_allowed: readonly string[]
    }
    /**
     * @description The default workflow permissions granted to the GITHUB_TOKEN when running workflows.
     * @enum {string}
     */
    readonly 'actions-default-workflow-permissions': 'read' | 'write'
    /** @description Whether GitHub Actions can approve pull requests. Enabling this can be a security risk. */
    readonly 'actions-can-approve-pull-request-reviews': boolean
    readonly 'actions-get-default-workflow-permissions': {
      readonly default_workflow_permissions: components['schemas']['actions-default-workflow-permissions']
      readonly can_approve_pull_request_reviews: components['schemas']['actions-can-approve-pull-request-reviews']
    }
    readonly 'actions-set-default-workflow-permissions': {
      readonly default_workflow_permissions?: components['schemas']['actions-default-workflow-permissions']
      readonly can_approve_pull_request_reviews?: components['schemas']['actions-can-approve-pull-request-reviews']
    }
    readonly 'runner-groups-enterprise': {
      readonly id: number
      readonly name: string
      readonly visibility: string
      readonly default: boolean
      readonly selected_organizations_url?: string
      readonly runners_url: string
      readonly allows_public_repositories: boolean
      /**
       * @description If `true`, the `restricted_to_workflows` and `selected_workflows` fields cannot be modified.
       * @default false
       */
      readonly workflow_restrictions_read_only?: boolean
      /**
       * @description If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.
       * @default false
       */
      readonly restricted_to_workflows?: boolean
      /** @description List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`. */
      readonly selected_workflows?: readonly string[]
    }
    /**
     * Self hosted runner label
     * @description A label for a self hosted runner
     */
    readonly 'runner-label': {
      /** @description Unique identifier of the label. */
      readonly id?: number
      /** @description Name of the label. */
      readonly name: string
      /**
       * @description The type of label. Read-only labels are applied automatically when the runner is configured.
       * @enum {string}
       */
      readonly type?: 'read-only' | 'custom'
    }
    /**
     * Self hosted runners
     * @description A self hosted runner
     */
    readonly runner: {
      /**
       * @description The id of the runner.
       * @example 5
       */
      readonly id: number
      /**
       * @description The name of the runner.
       * @example iMac
       */
      readonly name: string
      /**
       * @description The Operating System of the runner.
       * @example macos
       */
      readonly os: string
      /**
       * @description The status of the runner.
       * @example online
       */
      readonly status: string
      readonly busy: boolean
      readonly labels: readonly components['schemas']['runner-label'][]
    }
    /**
     * Runner Application
     * @description Runner Application
     */
    readonly 'runner-application': {
      readonly os: string
      readonly architecture: string
      readonly download_url: string
      readonly filename: string
      /** @description A short lived bearer token used to download the runner, if needed. */
      readonly temp_download_token?: string
      readonly sha256_checksum?: string
    }
    /**
     * Authentication Token
     * @description Authentication Token
     */
    readonly 'authentication-token': {
      /**
       * @description The token used for authentication
       * @example v1.1f699f1069f60xxx
       */
      readonly token: string
      /**
       * Format: date-time
       * @description The time this token expires
       * @example 2016-07-11T22:14:10Z
       */
      readonly expires_at: string
      /**
       * @example {
       *   "issues": "read",
       *   "deployments": "write"
       * }
       */
      readonly permissions?: { readonly [key: string]: unknown }
      /** @description The repositories this token has access to */
      readonly repositories?: readonly components['schemas']['repository'][]
      /** @example config.yaml */
      readonly single_file?: string | null
      /**
       * @description Describe whether all repositories have been selected or there's a selection involved
       * @enum {string}
       */
      readonly repository_selection?: 'all' | 'selected'
    }
    readonly 'audit-log-event': {
      /** @description The time the audit log event occurred, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time). */
      readonly '@timestamp'?: number
      /** @description The name of the action that was performed, for example `user.login` or `repo.create`. */
      readonly action?: string
      readonly active?: boolean
      readonly active_was?: boolean
      /** @description The actor who performed the action. */
      readonly actor?: string
      /** @description The id of the actor who performed the action. */
      readonly actor_id?: number
      readonly actor_location?: {
        readonly country_name?: string
      }
      readonly data?: { readonly [key: string]: unknown }
      readonly org_id?: number
      /** @description The username of the account being blocked. */
      readonly blocked_user?: string
      readonly business?: string
      readonly config?: readonly { readonly [key: string]: unknown }[]
      readonly config_was?: readonly { readonly [key: string]: unknown }[]
      readonly content_type?: string
      /** @description The time the audit log event was recorded, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time). */
      readonly created_at?: number
      readonly deploy_key_fingerprint?: string
      /** @description A unique identifier for an audit event. */
      readonly _document_id?: string
      readonly emoji?: string
      readonly events?: readonly { readonly [key: string]: unknown }[]
      readonly events_were?: readonly { readonly [key: string]: unknown }[]
      readonly explanation?: string
      readonly fingerprint?: string
      readonly hook_id?: number
      readonly limited_availability?: boolean
      readonly message?: string
      readonly name?: string
      readonly old_user?: string
      readonly openssh_public_key?: string
      readonly org?: string
      readonly previous_visibility?: string
      readonly read_only?: boolean
      /** @description The name of the repository. */
      readonly repo?: string
      /** @description The name of the repository. */
      readonly repository?: string
      readonly repository_public?: boolean
      readonly target_login?: string
      readonly team?: string
      /** @description The type of protocol (for example, HTTP or SSH) used to transfer Git data. */
      readonly transport_protocol?: number
      /** @description A human readable name for the protocol (for example, HTTP or SSH) used to transfer Git data. */
      readonly transport_protocol_name?: string
      /** @description The user that was affected by the action performed (if available). */
      readonly user?: string
      /** @description The repository visibility, for example `public` or `private`. */
      readonly visibility?: string
    }
    /** @description The security alert number. */
    readonly 'alert-number': number
    /**
     * Format: date-time
     * @description The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    readonly 'alert-created-at': string
    /**
     * Format: date-time
     * @description The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    readonly 'nullable-alert-updated-at': string | null
    /**
     * Format: uri
     * @description The REST API URL of the alert resource.
     */
    readonly 'alert-url': string
    /**
     * Format: uri
     * @description The GitHub URL of the alert resource.
     */
    readonly 'alert-html-url': string
    /**
     * @description Sets the state of the secret scanning alert. You must provide `resolution` when you set the state to `resolved`.
     * @enum {string}
     */
    readonly 'secret-scanning-alert-state': 'open' | 'resolved'
    /**
     * @description **Required when the `state` is `resolved`.** The reason for resolving the alert.
     * @enum {string|null}
     */
    readonly 'secret-scanning-alert-resolution': (null | 'false_positive' | 'wont_fix' | 'revoked' | 'used_in_tests') | null
    /**
     * Simple Repository
     * @description Simple Repository
     */
    readonly 'simple-repository': {
      /**
       * @description A unique identifier of the repository.
       * @example 1296269
       */
      readonly id: number
      /**
       * @description The GraphQL identifier of the repository.
       * @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5
       */
      readonly node_id: string
      /**
       * @description The name of the repository.
       * @example Hello-World
       */
      readonly name: string
      /**
       * @description The full, globally unique, name of the repository.
       * @example octocat/Hello-World
       */
      readonly full_name: string
      readonly owner: components['schemas']['simple-user']
      /** @description Whether the repository is private. */
      readonly private: boolean
      /**
       * Format: uri
       * @description The URL to view the repository on GitHub.com.
       * @example https://github.com/octocat/Hello-World
       */
      readonly html_url: string
      /**
       * @description The repository description.
       * @example This your first repo!
       */
      readonly description: string | null
      /** @description Whether the repository is a fork. */
      readonly fork: boolean
      /**
       * Format: uri
       * @description The URL to get more information about the repository from the GitHub API.
       * @example https://api.github.com/repos/octocat/Hello-World
       */
      readonly url: string
      /**
       * @description A template for the API URL to download the repository as an archive.
       * @example https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}
       */
      readonly archive_url: string
      /**
       * @description A template for the API URL to list the available assignees for issues in the repository.
       * @example https://api.github.com/repos/octocat/Hello-World/assignees{/user}
       */
      readonly assignees_url: string
      /**
       * @description A template for the API URL to create or retrieve a raw Git blob in the repository.
       * @example https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}
       */
      readonly blobs_url: string
      /**
       * @description A template for the API URL to get information about branches in the repository.
       * @example https://api.github.com/repos/octocat/Hello-World/branches{/branch}
       */
      readonly branches_url: string
      /**
       * @description A template for the API URL to get information about collaborators of the repository.
       * @example https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}
       */
      readonly collaborators_url: string
      /**
       * @description A template for the API URL to get information about comments on the repository.
       * @example https://api.github.com/repos/octocat/Hello-World/comments{/number}
       */
      readonly comments_url: string
      /**
       * @description A template for the API URL to get information about commits on the repository.
       * @example https://api.github.com/repos/octocat/Hello-World/commits{/sha}
       */
      readonly commits_url: string
      /**
       * @description A template for the API URL to compare two commits or refs.
       * @example https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}
       */
      readonly compare_url: string
      /**
       * @description A template for the API URL to get the contents of the repository.
       * @example https://api.github.com/repos/octocat/Hello-World/contents/{+path}
       */
      readonly contents_url: string
      /**
       * Format: uri
       * @description A template for the API URL to list the contributors to the repository.
       * @example https://api.github.com/repos/octocat/Hello-World/contributors
       */
      readonly contributors_url: string
      /**
       * Format: uri
       * @description The API URL to list the deployments of the repository.
       * @example https://api.github.com/repos/octocat/Hello-World/deployments
       */
      readonly deployments_url: string
      /**
       * Format: uri
       * @description The API URL to list the downloads on the repository.
       * @example https://api.github.com/repos/octocat/Hello-World/downloads
       */
      readonly downloads_url: string
      /**
       * Format: uri
       * @description The API URL to list the events of the repository.
       * @example https://api.github.com/repos/octocat/Hello-World/events
       */
      readonly events_url: string
      /**
       * Format: uri
       * @description The API URL to list the forks of the repository.
       * @example https://api.github.com/repos/octocat/Hello-World/forks
       */
      readonly forks_url: string
      /**
       * @description A template for the API URL to get information about Git commits of the repository.
       * @example https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}
       */
      readonly git_commits_url: string
      /**
       * @description A template for the API URL to get information about Git refs of the repository.
       * @example https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}
       */
      readonly git_refs_url: string
      /**
       * @description A template for the API URL to get information about Git tags of the repository.
       * @example https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}
       */
      readonly git_tags_url: string
      /**
       * @description A template for the API URL to get information about issue comments on the repository.
       * @example https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}
       */
      readonly issue_comment_url: string
      /**
       * @description A template for the API URL to get information about issue events on the repository.
       * @example https://api.github.com/repos/octocat/Hello-World/issues/events{/number}
       */
      readonly issue_events_url: string
      /**
       * @description A template for the API URL to get information about issues on the repository.
       * @example https://api.github.com/repos/octocat/Hello-World/issues{/number}
       */
      readonly issues_url: string
      /**
       * @description A template for the API URL to get information about deploy keys on the repository.
       * @example https://api.github.com/repos/octocat/Hello-World/keys{/key_id}
       */
      readonly keys_url: string
      /**
       * @description A template for the API URL to get information about labels of the repository.
       * @example https://api.github.com/repos/octocat/Hello-World/labels{/name}
       */
      readonly labels_url: string
      /**
       * Format: uri
       * @description The API URL to get information about the languages of the repository.
       * @example https://api.github.com/repos/octocat/Hello-World/languages
       */
      readonly languages_url: string
      /**
       * Format: uri
       * @description The API URL to merge branches in the repository.
       * @example https://api.github.com/repos/octocat/Hello-World/merges
       */
      readonly merges_url: string
      /**
       * @description A template for the API URL to get information about milestones of the repository.
       * @example https://api.github.com/repos/octocat/Hello-World/milestones{/number}
       */
      readonly milestones_url: string
      /**
       * @description A template for the API URL to get information about notifications on the repository.
       * @example https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}
       */
      readonly notifications_url: string
      /**
       * @description A template for the API URL to get information about pull requests on the repository.
       * @example https://api.github.com/repos/octocat/Hello-World/pulls{/number}
       */
      readonly pulls_url: string
      /**
       * @description A template for the API URL to get information about releases on the repository.
       * @example https://api.github.com/repos/octocat/Hello-World/releases{/id}
       */
      readonly releases_url: string
      /**
       * Format: uri
       * @description The API URL to list the stargazers on the repository.
       * @example https://api.github.com/repos/octocat/Hello-World/stargazers
       */
      readonly stargazers_url: string
      /**
       * @description A template for the API URL to get information about statuses of a commit.
       * @example https://api.github.com/repos/octocat/Hello-World/statuses/{sha}
       */
      readonly statuses_url: string
      /**
       * Format: uri
       * @description The API URL to list the subscribers on the repository.
       * @example https://api.github.com/repos/octocat/Hello-World/subscribers
       */
      readonly subscribers_url: string
      /**
       * Format: uri
       * @description The API URL to subscribe to notifications for this repository.
       * @example https://api.github.com/repos/octocat/Hello-World/subscription
       */
      readonly subscription_url: string
      /**
       * Format: uri
       * @description The API URL to get information about tags on the repository.
       * @example https://api.github.com/repos/octocat/Hello-World/tags
       */
      readonly tags_url: string
      /**
       * Format: uri
       * @description The API URL to list the teams on the repository.
       * @example https://api.github.com/repos/octocat/Hello-World/teams
       */
      readonly teams_url: string
      /**
       * @description A template for the API URL to create or retrieve a raw Git tree of the repository.
       * @example https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}
       */
      readonly trees_url: string
      /**
       * Format: uri
       * @description The API URL to list the hooks on the repository.
       * @example https://api.github.com/repos/octocat/Hello-World/hooks
       */
      readonly hooks_url: string
    }
    readonly 'organization-secret-scanning-alert': {
      readonly number?: components['schemas']['alert-number']
      readonly created_at?: components['schemas']['alert-created-at']
      readonly updated_at?: components['schemas']['nullable-alert-updated-at']
      readonly url?: components['schemas']['alert-url']
      readonly html_url?: components['schemas']['alert-html-url']
      /**
       * Format: uri
       * @description The REST API URL of the code locations for this alert.
       */
      readonly locations_url?: string
      readonly state?: components['schemas']['secret-scanning-alert-state']
      readonly resolution?: components['schemas']['secret-scanning-alert-resolution']
      /**
       * Format: date-time
       * @description The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
       */
      readonly resolved_at?: string | null
      readonly resolved_by?: components['schemas']['nullable-simple-user']
      /** @description The type of secret that secret scanning detected. */
      readonly secret_type?: string
      /**
       * @description User-friendly name for the detected secret, matching the `secret_type`.
       * For a list of built-in patterns, see "[Secret scanning patterns](https://docs.github.com/enterprise-server@3.6/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)."
       */
      readonly secret_type_display_name?: string
      /** @description The secret that was detected. */
      readonly secret?: string
      readonly repository?: components['schemas']['simple-repository']
      /** @description Whether push protection was bypassed for the detected secret. */
      readonly push_protection_bypassed?: boolean | null
      readonly push_protection_bypassed_by?: components['schemas']['nullable-simple-user']
      /**
       * Format: date-time
       * @description The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
       */
      readonly push_protection_bypassed_at?: string | null
    }
    readonly 'advanced-security-active-committers-user': {
      readonly user_login: string
      /** @example 2021-11-03 */
      readonly last_pushed_date: string
    }
    readonly 'advanced-security-active-committers-repository': {
      /** @example octocat/Hello-World */
      readonly name: string
      /** @example 25 */
      readonly advanced_security_committers: number
      readonly advanced_security_committers_breakdown: readonly components['schemas']['advanced-security-active-committers-user'][]
    }
    readonly 'advanced-security-active-committers': {
      /** @example 25 */
      readonly total_advanced_security_committers?: number
      /** @example 2 */
      readonly total_count?: number
      readonly repositories: readonly components['schemas']['advanced-security-active-committers-repository'][]
    }
    /**
     * Actor
     * @description Actor
     */
    readonly actor: {
      readonly id: number
      readonly login: string
      readonly display_login?: string
      readonly gravatar_id: string | null
      /** Format: uri */
      readonly url: string
      /** Format: uri */
      readonly avatar_url: string
    }
    /**
     * Milestone
     * @description A collection of related issues and pull requests.
     */
    readonly 'nullable-milestone': {
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/Hello-World/milestones/1
       */
      readonly url: string
      /**
       * Format: uri
       * @example https://github.com/octocat/Hello-World/milestones/v1.0
       */
      readonly html_url: string
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/Hello-World/milestones/1/labels
       */
      readonly labels_url: string
      /** @example 1002604 */
      readonly id: number
      /** @example MDk6TWlsZXN0b25lMTAwMjYwNA== */
      readonly node_id: string
      /**
       * @description The number of the milestone.
       * @example 42
       */
      readonly number: number
      /**
       * @description The state of the milestone.
       * @default open
       * @example open
       * @enum {string}
       */
      readonly state: 'open' | 'closed'
      /**
       * @description The title of the milestone.
       * @example v1.0
       */
      readonly title: string
      /** @example Tracking milestone for version 1.0 */
      readonly description: string | null
      readonly creator: components['schemas']['nullable-simple-user']
      /** @example 4 */
      readonly open_issues: number
      /** @example 8 */
      readonly closed_issues: number
      /**
       * Format: date-time
       * @example 2011-04-10T20:09:31Z
       */
      readonly created_at: string
      /**
       * Format: date-time
       * @example 2014-03-03T18:58:10Z
       */
      readonly updated_at: string
      /**
       * Format: date-time
       * @example 2013-02-12T13:22:01Z
       */
      readonly closed_at: string | null
      /**
       * Format: date-time
       * @example 2012-10-09T23:39:01Z
       */
      readonly due_on: string | null
    } | null
    /**
     * GitHub app
     * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    readonly 'nullable-integration': {
      /**
       * @description Unique identifier of the GitHub app
       * @example 37
       */
      readonly id: number
      /**
       * @description The slug name of the GitHub app
       * @example probot-owners
       */
      readonly slug?: string
      /** @example MDExOkludGVncmF0aW9uMQ== */
      readonly node_id: string
      readonly owner: components['schemas']['nullable-simple-user']
      /**
       * @description The name of the GitHub app
       * @example Probot Owners
       */
      readonly name: string
      /** @example The description of the app. */
      readonly description: string | null
      /**
       * Format: uri
       * @example https://example.com
       */
      readonly external_url: string
      /**
       * Format: uri
       * @example https://github.com/apps/super-ci
       */
      readonly html_url: string
      /**
       * Format: date-time
       * @example 2017-07-08T16:18:44-04:00
       */
      readonly created_at: string
      /**
       * Format: date-time
       * @example 2017-07-08T16:18:44-04:00
       */
      readonly updated_at: string
      /**
       * @description The set of permissions for the GitHub app
       * @example {
       *   "issues": "read",
       *   "deployments": "write"
       * }
       */
      readonly permissions: {
        readonly issues?: string
        readonly checks?: string
        readonly metadata?: string
        readonly contents?: string
        readonly deployments?: string
      } & { readonly [key: string]: string }
      /**
       * @description The list of events for the GitHub app
       * @example [
       *   "label",
       *   "deployment"
       * ]
       */
      readonly events: readonly string[]
      /**
       * @description The number of installations associated with the GitHub app
       * @example 5
       */
      readonly installations_count?: number
      /** @example "Iv1.25b5d1e65ffc4022" */
      readonly client_id?: string
      /** @example "1d4b2097ac622ba702d19de498f005747a8b21d3" */
      readonly client_secret?: string
      /** @example "6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b" */
      readonly webhook_secret?: string | null
      /** @example "-----BEGIN RSA PRIVATE KEY-----\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\n-----END RSA PRIVATE KEY-----\n" */
      readonly pem?: string
    } | null
    /**
     * author_association
     * @description How the author is associated with the repository.
     * @example OWNER
     * @enum {string}
     */
    readonly 'author-association':
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER'
    /** Reaction Rollup */
    readonly 'reaction-rollup': {
      /** Format: uri */
      readonly url: string
      readonly total_count: number
      readonly '+1': number
      readonly '-1': number
      readonly laugh: number
      readonly confused: number
      readonly heart: number
      readonly hooray: number
      readonly eyes: number
      readonly rocket: number
    }
    /**
     * Issue
     * @description Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
     */
    readonly issue: {
      readonly id: number
      readonly node_id: string
      /**
       * Format: uri
       * @description URL for the issue
       * @example https://api.github.com/repositories/42/issues/1
       */
      readonly url: string
      /** Format: uri */
      readonly repository_url: string
      readonly labels_url: string
      /** Format: uri */
      readonly comments_url: string
      /** Format: uri */
      readonly events_url: string
      /** Format: uri */
      readonly html_url: string
      /**
       * @description Number uniquely identifying the issue within its repository
       * @example 42
       */
      readonly number: number
      /**
       * @description State of the issue; either 'open' or 'closed'
       * @example open
       */
      readonly state: string
      /**
       * @description The reason for the current state
       * @example not_planned
       * @enum {string|null}
       */
      readonly state_reason?: ('completed' | 'reopened' | 'not_planned') | null
      /**
       * @description Title of the issue
       * @example Widget creation fails in Safari on OS X 10.8
       */
      readonly title: string
      /**
       * @description Contents of the issue
       * @example It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?
       */
      readonly body?: string | null
      readonly user: components['schemas']['nullable-simple-user']
      /**
       * @description Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
       * @example [
       *   "bug",
       *   "registration"
       * ]
       */
      readonly labels: readonly (
        | string
        | {
            /** Format: int64 */
            readonly id?: number
            readonly node_id?: string
            /** Format: uri */
            readonly url?: string
            readonly name?: string
            readonly description?: string | null
            readonly color?: string | null
            readonly default?: boolean
          }
      )[]
      readonly assignee: components['schemas']['nullable-simple-user']
      readonly assignees?: readonly components['schemas']['simple-user'][] | null
      readonly milestone: components['schemas']['nullable-milestone']
      readonly locked: boolean
      readonly active_lock_reason?: string | null
      readonly comments: number
      readonly pull_request?: {
        /** Format: date-time */
        readonly merged_at?: string | null
        /** Format: uri */
        readonly diff_url: string | null
        /** Format: uri */
        readonly html_url: string | null
        /** Format: uri */
        readonly patch_url: string | null
        /** Format: uri */
        readonly url: string | null
      }
      /** Format: date-time */
      readonly closed_at: string | null
      /** Format: date-time */
      readonly created_at: string
      /** Format: date-time */
      readonly updated_at: string
      readonly draft?: boolean
      readonly closed_by?: components['schemas']['nullable-simple-user']
      readonly body_html?: string
      readonly body_text?: string
      /** Format: uri */
      readonly timeline_url?: string
      readonly repository?: components['schemas']['repository']
      readonly performed_via_github_app?: components['schemas']['nullable-integration']
      readonly author_association: components['schemas']['author-association']
      readonly reactions?: components['schemas']['reaction-rollup']
    }
    /**
     * Issue Comment
     * @description Comments provide a way for people to collaborate on an issue.
     */
    readonly 'issue-comment': {
      /**
       * @description Unique identifier of the issue comment
       * @example 42
       */
      readonly id: number
      readonly node_id: string
      /**
       * Format: uri
       * @description URL for the issue comment
       * @example https://api.github.com/repositories/42/issues/comments/1
       */
      readonly url: string
      /**
       * @description Contents of the issue comment
       * @example What version of Safari were you using when you observed this bug?
       */
      readonly body?: string
      readonly body_text?: string
      readonly body_html?: string
      /** Format: uri */
      readonly html_url: string
      readonly user: components['schemas']['nullable-simple-user']
      /**
       * Format: date-time
       * @example 2011-04-14T16:00:49Z
       */
      readonly created_at: string
      /**
       * Format: date-time
       * @example 2011-04-14T16:00:49Z
       */
      readonly updated_at: string
      /** Format: uri */
      readonly issue_url: string
      readonly author_association: components['schemas']['author-association']
      readonly performed_via_github_app?: components['schemas']['nullable-integration']
      readonly reactions?: components['schemas']['reaction-rollup']
    }
    /**
     * Event
     * @description Event
     */
    readonly event: {
      readonly id: string
      readonly type: string | null
      readonly actor: components['schemas']['actor']
      readonly repo: {
        readonly id: number
        readonly name: string
        /** Format: uri */
        readonly url: string
      }
      readonly org?: components['schemas']['actor']
      readonly payload: {
        readonly action?: string
        readonly issue?: components['schemas']['issue']
        readonly comment?: components['schemas']['issue-comment']
        readonly pages?: readonly {
          readonly page_name?: string
          readonly title?: string
          readonly summary?: string | null
          readonly action?: string
          readonly sha?: string
          readonly html_url?: string
        }[]
      }
      readonly public: boolean
      /** Format: date-time */
      readonly created_at: string | null
    }
    /**
     * Link With Type
     * @description Hypermedia Link with Type
     */
    readonly 'link-with-type': {
      readonly href: string
      readonly type: string
    }
    /**
     * Feed
     * @description Feed
     */
    readonly feed: {
      /** @example https://github.com/timeline */
      readonly timeline_url: string
      /** @example https://github.com/{user} */
      readonly user_url: string
      /** @example https://github.com/octocat */
      readonly current_user_public_url?: string
      /** @example https://github.com/octocat.private?token=abc123 */
      readonly current_user_url?: string
      /** @example https://github.com/octocat.private.actor?token=abc123 */
      readonly current_user_actor_url?: string
      /** @example https://github.com/octocat-org */
      readonly current_user_organization_url?: string
      /**
       * @example [
       *   "https://github.com/organizations/github/octocat.private.atom?token=abc123"
       * ]
       */
      readonly current_user_organization_urls?: readonly string[]
      /** @example https://github.com/security-advisories */
      readonly security_advisories_url?: string
      readonly _links: {
        readonly timeline: components['schemas']['link-with-type']
        readonly user: components['schemas']['link-with-type']
        readonly security_advisories?: components['schemas']['link-with-type']
        readonly current_user?: components['schemas']['link-with-type']
        readonly current_user_public?: components['schemas']['link-with-type']
        readonly current_user_actor?: components['schemas']['link-with-type']
        readonly current_user_organization?: components['schemas']['link-with-type']
        readonly current_user_organizations?: readonly components['schemas']['link-with-type'][]
      }
    }
    /**
     * Base Gist
     * @description Base Gist
     */
    readonly 'base-gist': {
      /** Format: uri */
      readonly url: string
      /** Format: uri */
      readonly forks_url: string
      /** Format: uri */
      readonly commits_url: string
      readonly id: string
      readonly node_id: string
      /** Format: uri */
      readonly git_pull_url: string
      /** Format: uri */
      readonly git_push_url: string
      /** Format: uri */
      readonly html_url: string
      readonly files: {
        readonly [key: string]: {
          readonly filename?: string
          readonly type?: string
          readonly language?: string
          readonly raw_url?: string
          readonly size?: number
        }
      }
      readonly public: boolean
      /** Format: date-time */
      readonly created_at: string
      /** Format: date-time */
      readonly updated_at: string
      readonly description: string | null
      readonly comments: number
      readonly user: components['schemas']['nullable-simple-user']
      /** Format: uri */
      readonly comments_url: string
      readonly owner?: components['schemas']['simple-user']
      readonly truncated?: boolean
      readonly forks?: readonly unknown[]
      readonly history?: readonly unknown[]
    }
    /**
     * Public User
     * @description Public User
     */
    readonly 'public-user': {
      readonly login: string
      readonly id: number
      readonly node_id: string
      /** Format: uri */
      readonly avatar_url: string
      readonly gravatar_id: string | null
      /** Format: uri */
      readonly url: string
      /** Format: uri */
      readonly html_url: string
      /** Format: uri */
      readonly followers_url: string
      readonly following_url: string
      readonly gists_url: string
      readonly starred_url: string
      /** Format: uri */
      readonly subscriptions_url: string
      /** Format: uri */
      readonly organizations_url: string
      /** Format: uri */
      readonly repos_url: string
      readonly events_url: string
      /** Format: uri */
      readonly received_events_url: string
      readonly type: string
      readonly site_admin: boolean
      readonly name: string | null
      readonly company: string | null
      readonly blog: string | null
      readonly location: string | null
      /** Format: email */
      readonly email: string | null
      readonly hireable: boolean | null
      readonly bio: string | null
      readonly twitter_username?: string | null
      readonly public_repos: number
      readonly public_gists: number
      readonly followers: number
      readonly following: number
      /** Format: date-time */
      readonly created_at: string
      /** Format: date-time */
      readonly updated_at: string
      readonly plan?: {
        readonly collaborators: number
        readonly name: string
        readonly space: number
        readonly private_repos: number
      }
      /** Format: date-time */
      readonly suspended_at?: string | null
      /** @example 1 */
      readonly private_gists?: number
      /** @example 2 */
      readonly total_private_repos?: number
      /** @example 2 */
      readonly owned_private_repos?: number
      /** @example 1 */
      readonly disk_usage?: number
      /** @example 3 */
      readonly collaborators?: number
    }
    /**
     * Gist History
     * @description Gist History
     */
    readonly 'gist-history': {
      readonly user?: components['schemas']['nullable-simple-user']
      readonly version?: string
      /** Format: date-time */
      readonly committed_at?: string
      readonly change_status?: {
        readonly total?: number
        readonly additions?: number
        readonly deletions?: number
      }
      /** Format: uri */
      readonly url?: string
    }
    /**
     * Gist Simple
     * @description Gist Simple
     */
    readonly 'gist-simple': {
      /** @deprecated */
      readonly forks?:
        | readonly {
            readonly id?: string
            /** Format: uri */
            readonly url?: string
            readonly user?: components['schemas']['public-user']
            /** Format: date-time */
            readonly created_at?: string
            /** Format: date-time */
            readonly updated_at?: string
          }[]
        | null
      /** @deprecated */
      readonly history?: readonly components['schemas']['gist-history'][] | null
      /**
       * Gist
       * @description Gist
       */
      readonly fork_of?: {
        /** Format: uri */
        readonly url: string
        /** Format: uri */
        readonly forks_url: string
        /** Format: uri */
        readonly commits_url: string
        readonly id: string
        readonly node_id: string
        /** Format: uri */
        readonly git_pull_url: string
        /** Format: uri */
        readonly git_push_url: string
        /** Format: uri */
        readonly html_url: string
        readonly files: {
          readonly [key: string]: {
            readonly filename?: string
            readonly type?: string
            readonly language?: string
            readonly raw_url?: string
            readonly size?: number
          }
        }
        readonly public: boolean
        /** Format: date-time */
        readonly created_at: string
        /** Format: date-time */
        readonly updated_at: string
        readonly description: string | null
        readonly comments: number
        readonly user: components['schemas']['nullable-simple-user']
        /** Format: uri */
        readonly comments_url: string
        readonly owner?: components['schemas']['nullable-simple-user']
        readonly truncated?: boolean
        readonly forks?: readonly unknown[]
        readonly history?: readonly unknown[]
      } | null
      readonly url?: string
      readonly forks_url?: string
      readonly commits_url?: string
      readonly id?: string
      readonly node_id?: string
      readonly git_pull_url?: string
      readonly git_push_url?: string
      readonly html_url?: string
      readonly files?: {
        readonly [key: string]: {
          readonly filename?: string
          readonly type?: string
          readonly language?: string
          readonly raw_url?: string
          readonly size?: number
          readonly truncated?: boolean
          readonly content?: string
        } | null
      }
      readonly public?: boolean
      readonly created_at?: string
      readonly updated_at?: string
      readonly description?: string | null
      readonly comments?: number
      readonly user?: string | null
      readonly comments_url?: string
      readonly owner?: components['schemas']['simple-user']
      readonly truncated?: boolean
    }
    /**
     * Gist Comment
     * @description A comment made to a gist.
     */
    readonly 'gist-comment': {
      /** @example 1 */
      readonly id: number
      /** @example MDExOkdpc3RDb21tZW50MQ== */
      readonly node_id: string
      /**
       * Format: uri
       * @example https://api.github.com/gists/a6db0bec360bb87e9418/comments/1
       */
      readonly url: string
      /**
       * @description The comment text.
       * @example Body of the attachment
       */
      readonly body: string
      readonly user: components['schemas']['nullable-simple-user']
      /**
       * Format: date-time
       * @example 2011-04-18T23:23:56Z
       */
      readonly created_at: string
      /**
       * Format: date-time
       * @example 2011-04-18T23:23:56Z
       */
      readonly updated_at: string
      readonly author_association: components['schemas']['author-association']
    }
    /**
     * Gist Commit
     * @description Gist Commit
     */
    readonly 'gist-commit': {
      /**
       * Format: uri
       * @example https://api.github.com/gists/aa5a315d61ae9438b18d/57a7f021a713b1c5a6a199b54cc514735d2d462f
       */
      readonly url: string
      /** @example 57a7f021a713b1c5a6a199b54cc514735d2d462f */
      readonly version: string
      readonly user: components['schemas']['nullable-simple-user']
      readonly change_status: {
        readonly total?: number
        readonly additions?: number
        readonly deletions?: number
      }
      /**
       * Format: date-time
       * @example 2010-04-14T02:15:15Z
       */
      readonly committed_at: string
    }
    /**
     * Gitignore Template
     * @description Gitignore Template
     */
    readonly 'gitignore-template': {
      /** @example C */
      readonly name: string
      /**
       * @example # Object files
       * *.o
       *
       * # Libraries
       * *.lib
       * *.a
       *
       * # Shared objects (inc. Windows DLLs)
       * *.dll
       * *.so
       * *.so.*
       * *.dylib
       *
       * # Executables
       * *.exe
       * *.out
       * *.app
       */
      readonly source: string
    }
    /**
     * License Simple
     * @description License Simple
     */
    readonly 'license-simple': {
      /** @example mit */
      readonly key: string
      /** @example MIT License */
      readonly name: string
      /**
       * Format: uri
       * @example https://api.github.com/licenses/mit
       */
      readonly url: string | null
      /** @example MIT */
      readonly spdx_id: string | null
      /** @example MDc6TGljZW5zZW1pdA== */
      readonly node_id: string
      /** Format: uri */
      readonly html_url?: string
    }
    /**
     * License
     * @description License
     */
    readonly license: {
      /** @example mit */
      readonly key: string
      /** @example MIT License */
      readonly name: string
      /** @example MIT */
      readonly spdx_id: string | null
      /**
       * Format: uri
       * @example https://api.github.com/licenses/mit
       */
      readonly url: string | null
      /** @example MDc6TGljZW5zZW1pdA== */
      readonly node_id: string
      /**
       * Format: uri
       * @example http://choosealicense.com/licenses/mit/
       */
      readonly html_url: string
      /** @example A permissive license that is short and to the point. It lets people do anything with your code with proper attribution and without warranty. */
      readonly description: string
      /** @example Create a text file (typically named LICENSE or LICENSE.txt) in the root of your source code and copy the text of the license into the file. Replace [year] with the current year and [fullname] with the name (or names) of the copyright holders. */
      readonly implementation: string
      /**
       * @example [
       *   "commercial-use",
       *   "modifications",
       *   "distribution",
       *   "sublicense",
       *   "private-use"
       * ]
       */
      readonly permissions: readonly string[]
      /**
       * @example [
       *   "include-copyright"
       * ]
       */
      readonly conditions: readonly string[]
      /**
       * @example [
       *   "no-liability"
       * ]
       */
      readonly limitations: readonly string[]
      /**
       * @example
       *
       * The MIT License (MIT)
       *
       * Copyright (c) [year] [fullname]
       *
       * Permission is hereby granted, free of charge, to any person obtaining a copy
       * of this software and associated documentation files (the "Software"), to deal
       * in the Software without restriction, including without limitation the rights
       * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
       * copies of the Software, and to permit persons to whom the Software is
       * furnished to do so, subject to the following conditions:
       *
       * The above copyright notice and this permission notice shall be included in all
       * copies or substantial portions of the Software.
       *
       * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
       * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
       * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
       * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
       * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
       * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
       * SOFTWARE.
       */
      readonly body: string
      /** @example true */
      readonly featured: boolean
    }
    /**
     * Api Overview
     * @description Api Overview
     */
    readonly 'api-overview': {
      /** @example true */
      readonly verifiable_password_authentication: boolean
      /**
       * @example [
       *   "13.65.0.0/16",
       *   "157.55.204.33/32",
       *   "2a01:111:f403:f90c::/62"
       * ]
       */
      readonly packages?: readonly string[]
      /**
       * @example [
       *   "192.168.7.15/32",
       *   "192.168.7.16/32"
       * ]
       */
      readonly dependabot?: readonly string[]
      /** @example 3.6.0 */
      readonly installed_version?: string
    }
    /**
     * Minimal Repository
     * @description Minimal Repository
     */
    readonly 'minimal-repository': {
      /** @example 1296269 */
      readonly id: number
      /** @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5 */
      readonly node_id: string
      /** @example Hello-World */
      readonly name: string
      /** @example octocat/Hello-World */
      readonly full_name: string
      readonly owner: components['schemas']['simple-user']
      readonly private: boolean
      /**
       * Format: uri
       * @example https://github.com/octocat/Hello-World
       */
      readonly html_url: string
      /** @example This your first repo! */
      readonly description: string | null
      readonly fork: boolean
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/Hello-World
       */
      readonly url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref} */
      readonly archive_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/assignees{/user} */
      readonly assignees_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha} */
      readonly blobs_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/branches{/branch} */
      readonly branches_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator} */
      readonly collaborators_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/comments{/number} */
      readonly comments_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/commits{/sha} */
      readonly commits_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head} */
      readonly compare_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/contents/{+path} */
      readonly contents_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/contributors
       */
      readonly contributors_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/deployments
       */
      readonly deployments_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/downloads
       */
      readonly downloads_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/events
       */
      readonly events_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/forks
       */
      readonly forks_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/git/commits{/sha} */
      readonly git_commits_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/git/refs{/sha} */
      readonly git_refs_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/git/tags{/sha} */
      readonly git_tags_url: string
      readonly git_url?: string
      /** @example http://api.github.com/repos/octocat/Hello-World/issues/comments{/number} */
      readonly issue_comment_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/issues/events{/number} */
      readonly issue_events_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/issues{/number} */
      readonly issues_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/keys{/key_id} */
      readonly keys_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/labels{/name} */
      readonly labels_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/languages
       */
      readonly languages_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/merges
       */
      readonly merges_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/milestones{/number} */
      readonly milestones_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating} */
      readonly notifications_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/pulls{/number} */
      readonly pulls_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/releases{/id} */
      readonly releases_url: string
      readonly ssh_url?: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/stargazers
       */
      readonly stargazers_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/statuses/{sha} */
      readonly statuses_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/subscribers
       */
      readonly subscribers_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/subscription
       */
      readonly subscription_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/tags
       */
      readonly tags_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/teams
       */
      readonly teams_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/git/trees{/sha} */
      readonly trees_url: string
      readonly clone_url?: string
      readonly mirror_url?: string | null
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/hooks
       */
      readonly hooks_url: string
      readonly svn_url?: string
      readonly homepage?: string | null
      readonly language?: string | null
      readonly forks_count?: number
      readonly stargazers_count?: number
      readonly watchers_count?: number
      /** @description The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0. */
      readonly size?: number
      readonly default_branch?: string
      readonly open_issues_count?: number
      readonly is_template?: boolean
      readonly topics?: readonly string[]
      readonly has_issues?: boolean
      readonly has_projects?: boolean
      readonly has_wiki?: boolean
      readonly has_pages?: boolean
      readonly has_downloads?: boolean
      readonly archived?: boolean
      readonly disabled?: boolean
      readonly visibility?: string
      /**
       * Format: date-time
       * @example 2011-01-26T19:06:43Z
       */
      readonly pushed_at?: string | null
      /**
       * Format: date-time
       * @example 2011-01-26T19:01:12Z
       */
      readonly created_at?: string | null
      /**
       * Format: date-time
       * @example 2011-01-26T19:14:43Z
       */
      readonly updated_at?: string | null
      readonly permissions?: {
        readonly admin?: boolean
        readonly maintain?: boolean
        readonly push?: boolean
        readonly triage?: boolean
        readonly pull?: boolean
      }
      /** @example admin */
      readonly role_name?: string
      readonly temp_clone_token?: string
      readonly delete_branch_on_merge?: boolean
      readonly subscribers_count?: number
      readonly network_count?: number
      readonly code_of_conduct?: components['schemas']['code-of-conduct']
      readonly license?: {
        readonly key?: string
        readonly name?: string
        readonly spdx_id?: string
        readonly url?: string
        readonly node_id?: string
      } | null
      /** @example 0 */
      readonly forks?: number
      /** @example 0 */
      readonly open_issues?: number
      /** @example 0 */
      readonly watchers?: number
      readonly allow_forking?: boolean
      /** @example false */
      readonly web_commit_signoff_required?: boolean
    }
    /**
     * Thread
     * @description Thread
     */
    readonly thread: {
      readonly id: string
      readonly repository: components['schemas']['minimal-repository']
      readonly subject: {
        readonly title: string
        readonly url: string
        readonly latest_comment_url: string
        readonly type: string
      }
      readonly reason: string
      readonly unread: boolean
      readonly updated_at: string
      readonly last_read_at: string | null
      readonly url: string
      /** @example https://api.github.com/notifications/threads/2/subscription */
      readonly subscription_url: string
    }
    /**
     * Thread Subscription
     * @description Thread Subscription
     */
    readonly 'thread-subscription': {
      /** @example true */
      readonly subscribed: boolean
      readonly ignored: boolean
      readonly reason: string | null
      /**
       * Format: date-time
       * @example 2012-10-06T21:34:12Z
       */
      readonly created_at: string | null
      /**
       * Format: uri
       * @example https://api.github.com/notifications/threads/1/subscription
       */
      readonly url: string
      /**
       * Format: uri
       * @example https://api.github.com/notifications/threads/1
       */
      readonly thread_url?: string
      /**
       * Format: uri
       * @example https://api.github.com/repos/1
       */
      readonly repository_url?: string
    }
    /**
     * Organization Custom Repository Role
     * @description Custom repository roles created by organization administrators
     */
    readonly 'organization-custom-repository-role': {
      /** @description The unique identifier of the custom role. */
      readonly id: number
      /** @description The name of the custom role. */
      readonly name: string
    }
    /**
     * Organization Full
     * @description Organization Full
     */
    readonly 'organization-full': {
      /** @example github */
      readonly login: string
      /** @example 1 */
      readonly id: number
      /** @example MDEyOk9yZ2FuaXphdGlvbjE= */
      readonly node_id: string
      /**
       * Format: uri
       * @example https://api.github.com/orgs/github
       */
      readonly url: string
      /**
       * Format: uri
       * @example https://api.github.com/orgs/github/repos
       */
      readonly repos_url: string
      /**
       * Format: uri
       * @example https://api.github.com/orgs/github/events
       */
      readonly events_url: string
      /** @example https://api.github.com/orgs/github/hooks */
      readonly hooks_url: string
      /** @example https://api.github.com/orgs/github/issues */
      readonly issues_url: string
      /** @example https://api.github.com/orgs/github/members{/member} */
      readonly members_url: string
      /** @example https://api.github.com/orgs/github/public_members{/member} */
      readonly public_members_url: string
      /** @example https://github.com/images/error/octocat_happy.gif */
      readonly avatar_url: string
      /** @example A great organization */
      readonly description: string | null
      /** @example github */
      readonly name?: string
      /** @example GitHub */
      readonly company?: string
      /**
       * Format: uri
       * @example https://github.com/blog
       */
      readonly blog?: string
      /** @example San Francisco */
      readonly location?: string
      /**
       * Format: email
       * @example octocat@github.com
       */
      readonly email?: string
      /** @example github */
      readonly twitter_username?: string | null
      /** @example true */
      readonly is_verified?: boolean
      /** @example true */
      readonly has_organization_projects: boolean
      /** @example true */
      readonly has_repository_projects: boolean
      /** @example 2 */
      readonly public_repos: number
      /** @example 1 */
      readonly public_gists: number
      /** @example 20 */
      readonly followers: number
      /** @example 0 */
      readonly following: number
      /**
       * Format: uri
       * @example https://github.com/octocat
       */
      readonly html_url: string
      /**
       * Format: date-time
       * @example 2008-01-14T04:33:35Z
       */
      readonly created_at: string
      /** @example Organization */
      readonly type: string
      /** @example 100 */
      readonly total_private_repos?: number
      /** @example 100 */
      readonly owned_private_repos?: number
      /** @example 81 */
      readonly private_gists?: number | null
      /** @example 10000 */
      readonly disk_usage?: number | null
      /** @example 8 */
      readonly collaborators?: number | null
      /**
       * Format: email
       * @example org@example.com
       */
      readonly billing_email?: string | null
      readonly plan?: {
        readonly name: string
        readonly space: number
        readonly private_repos: number
        readonly filled_seats?: number
        readonly seats?: number
      }
      readonly default_repository_permission?: string | null
      /** @example true */
      readonly members_can_create_repositories?: boolean | null
      /** @example true */
      readonly two_factor_requirement_enabled?: boolean | null
      /** @example all */
      readonly members_allowed_repository_creation_type?: string
      /** @example true */
      readonly members_can_create_public_repositories?: boolean
      /** @example true */
      readonly members_can_create_private_repositories?: boolean
      /** @example true */
      readonly members_can_create_internal_repositories?: boolean
      /** @example true */
      readonly members_can_create_pages?: boolean
      /** @example true */
      readonly members_can_create_public_pages?: boolean
      /** @example true */
      readonly members_can_create_private_pages?: boolean
      /** @example false */
      readonly members_can_fork_private_repositories?: boolean | null
      /** @example false */
      readonly web_commit_signoff_required?: boolean
      /** Format: date-time */
      readonly updated_at: string
    }
    /**
     * Actions Cache Usage by repository
     * @description GitHub Actions Cache Usage by repository.
     */
    readonly 'actions-cache-usage-by-repository': {
      /**
       * @description The repository owner and name for the cache usage being shown.
       * @example octo-org/Hello-World
       */
      readonly full_name: string
      /**
       * @description The sum of the size in bytes of all the active cache items in the repository.
       * @example 2322142
       */
      readonly active_caches_size_in_bytes: number
      /**
       * @description The number of active caches in the repository.
       * @example 3
       */
      readonly active_caches_count: number
    }
    /**
     * @description The policy that controls the repositories in the organization that are allowed to run GitHub Actions.
     * @enum {string}
     */
    readonly 'enabled-repositories': 'all' | 'none' | 'selected'
    readonly 'actions-organization-permissions': {
      readonly enabled_repositories: components['schemas']['enabled-repositories']
      /** @description The API URL to use to get or set the selected repositories that are allowed to run GitHub Actions, when `enabled_repositories` is set to `selected`. */
      readonly selected_repositories_url?: string
      readonly allowed_actions?: components['schemas']['allowed-actions']
      readonly selected_actions_url?: components['schemas']['selected-actions-url']
    }
    readonly 'runner-groups-org': {
      readonly id: number
      readonly name: string
      readonly visibility: string
      readonly default: boolean
      /** @description Link to the selected repositories resource for this runner group. Not present unless visibility was set to `selected` */
      readonly selected_repositories_url?: string
      readonly runners_url: string
      readonly inherited: boolean
      readonly inherited_allows_public_repositories?: boolean
      readonly allows_public_repositories: boolean
      /**
       * @description If `true`, the `restricted_to_workflows` and `selected_workflows` fields cannot be modified.
       * @default false
       */
      readonly workflow_restrictions_read_only?: boolean
      /**
       * @description If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.
       * @default false
       */
      readonly restricted_to_workflows?: boolean
      /** @description List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`. */
      readonly selected_workflows?: readonly string[]
    }
    /**
     * Actions Secret for an Organization
     * @description Secrets for GitHub Actions for an organization.
     */
    readonly 'organization-actions-secret': {
      /**
       * @description The name of the secret.
       * @example SECRET_TOKEN
       */
      readonly name: string
      /** Format: date-time */
      readonly created_at: string
      /** Format: date-time */
      readonly updated_at: string
      /**
       * @description Visibility of a secret
       * @enum {string}
       */
      readonly visibility: 'all' | 'private' | 'selected'
      /**
       * Format: uri
       * @example https://api.github.com/organizations/org/secrets/my_secret/repositories
       */
      readonly selected_repositories_url?: string
    }
    /**
     * ActionsPublicKey
     * @description The public key used for setting Actions Secrets.
     */
    readonly 'actions-public-key': {
      /**
       * @description The identifier for the key.
       * @example 1234567
       */
      readonly key_id: string
      /**
       * @description The Base64 encoded public key.
       * @example hBT5WZEj8ZoOv6TYJsfWq7MxTEQopZO5/IT3ZCVQPzs=
       */
      readonly key: string
      /** @example 2 */
      readonly id?: number
      /** @example https://api.github.com/user/keys/2 */
      readonly url?: string
      /** @example ssh-rsa AAAAB3NzaC1yc2EAAA */
      readonly title?: string
      /** @example 2011-01-26T19:01:12Z */
      readonly created_at?: string
    }
    /**
     * Empty Object
     * @description An object without any properties.
     */
    readonly 'empty-object': { readonly [key: string]: unknown }
    /** @description The name of the tool used to generate the code scanning analysis. */
    readonly 'code-scanning-analysis-tool-name': string
    /** @description The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data. */
    readonly 'code-scanning-analysis-tool-guid': string | null
    /**
     * @description State of a code scanning alert.
     * @enum {string}
     */
    readonly 'code-scanning-alert-state': 'open' | 'closed' | 'dismissed' | 'fixed'
    /**
     * Format: date-time
     * @description The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    readonly 'alert-updated-at': string
    /**
     * Format: uri
     * @description The REST API URL for fetching the list of instances for an alert.
     */
    readonly 'alert-instances-url': string
    /**
     * Format: date-time
     * @description The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    readonly 'alert-fixed-at': string | null
    /**
     * Format: date-time
     * @description The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    readonly 'alert-dismissed-at': string | null
    /**
     * @description **Required when the state is dismissed.** The reason for dismissing or closing the alert.
     * @enum {string|null}
     */
    readonly 'code-scanning-alert-dismissed-reason': (null | 'false positive' | "won't fix" | 'used in tests') | null
    /** @description The dismissal comment associated with the dismissal of the alert. */
    readonly 'code-scanning-alert-dismissed-comment': string | null
    readonly 'code-scanning-alert-rule': {
      /** @description A unique identifier for the rule used to detect the alert. */
      readonly id?: string | null
      /** @description The name of the rule used to detect the alert. */
      readonly name?: string
      /**
       * @description The severity of the alert.
       * @enum {string|null}
       */
      readonly severity?: ('none' | 'note' | 'warning' | 'error') | null
      /**
       * @description The security severity of the alert.
       * @enum {string|null}
       */
      readonly security_severity_level?: ('low' | 'medium' | 'high' | 'critical') | null
      /** @description A short description of the rule used to detect the alert. */
      readonly description?: string
      /** @description description of the rule used to detect the alert. */
      readonly full_description?: string
      /** @description A set of tags applicable for the rule. */
      readonly tags?: readonly string[] | null
      /** @description Detailed documentation for the rule as GitHub Flavored Markdown. */
      readonly help?: string | null
      /** @description A link to the documentation for the rule used to detect the alert. */
      readonly help_uri?: string | null
    }
    /** @description The version of the tool used to generate the code scanning analysis. */
    readonly 'code-scanning-analysis-tool-version': string | null
    readonly 'code-scanning-analysis-tool': {
      readonly name?: components['schemas']['code-scanning-analysis-tool-name']
      readonly version?: components['schemas']['code-scanning-analysis-tool-version']
      readonly guid?: components['schemas']['code-scanning-analysis-tool-guid']
    }
    /**
     * @description The full Git reference, formatted as `refs/heads/<branch name>`,
     * `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
     */
    readonly 'code-scanning-ref': string
    /** @description Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
    readonly 'code-scanning-analysis-analysis-key': string
    /** @description Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
    readonly 'code-scanning-alert-environment': string
    /** @description Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code. */
    readonly 'code-scanning-analysis-category': string
    /** @description Describe a region within a file for the alert. */
    readonly 'code-scanning-alert-location': {
      readonly path?: string
      readonly start_line?: number
      readonly end_line?: number
      readonly start_column?: number
      readonly end_column?: number
    }
    /**
     * @description A classification of the file. For example to identify it as generated.
     * @enum {string|null}
     */
    readonly 'code-scanning-alert-classification': ('source' | 'generated' | 'test' | 'library') | null
    readonly 'code-scanning-alert-instance': {
      readonly ref?: components['schemas']['code-scanning-ref']
      readonly analysis_key?: components['schemas']['code-scanning-analysis-analysis-key']
      readonly environment?: components['schemas']['code-scanning-alert-environment']
      readonly category?: components['schemas']['code-scanning-analysis-category']
      readonly state?: components['schemas']['code-scanning-alert-state']
      readonly commit_sha?: string
      readonly message?: {
        readonly text?: string
      }
      readonly location?: components['schemas']['code-scanning-alert-location']
      readonly html_url?: string
      /**
       * @description Classifications that have been applied to the file that triggered the alert.
       * For example identifying it as documentation, or a generated file.
       */
      readonly classifications?: readonly components['schemas']['code-scanning-alert-classification'][]
    }
    readonly 'code-scanning-organization-alert-items': {
      readonly number: components['schemas']['alert-number']
      readonly created_at: components['schemas']['alert-created-at']
      readonly updated_at?: components['schemas']['alert-updated-at']
      readonly url: components['schemas']['alert-url']
      readonly html_url: components['schemas']['alert-html-url']
      readonly instances_url: components['schemas']['alert-instances-url']
      readonly state: components['schemas']['code-scanning-alert-state']
      readonly fixed_at?: components['schemas']['alert-fixed-at']
      readonly dismissed_by: components['schemas']['nullable-simple-user']
      readonly dismissed_at: components['schemas']['alert-dismissed-at']
      readonly dismissed_reason: components['schemas']['code-scanning-alert-dismissed-reason']
      readonly dismissed_comment?: components['schemas']['code-scanning-alert-dismissed-comment']
      readonly rule: components['schemas']['code-scanning-alert-rule']
      readonly tool: components['schemas']['code-scanning-analysis-tool']
      readonly most_recent_instance: components['schemas']['code-scanning-alert-instance']
      readonly repository: components['schemas']['simple-repository']
    }
    /**
     * Dependabot Secret for an Organization
     * @description Secrets for GitHub Dependabot for an organization.
     */
    readonly 'organization-dependabot-secret': {
      /**
       * @description The name of the secret.
       * @example SECRET_TOKEN
       */
      readonly name: string
      /** Format: date-time */
      readonly created_at: string
      /** Format: date-time */
      readonly updated_at: string
      /**
       * @description Visibility of a secret
       * @enum {string}
       */
      readonly visibility: 'all' | 'private' | 'selected'
      /**
       * Format: uri
       * @example https://api.github.com/organizations/org/dependabot/secrets/my_secret/repositories
       */
      readonly selected_repositories_url?: string
    }
    /**
     * DependabotPublicKey
     * @description The public key used for setting Dependabot Secrets.
     */
    readonly 'dependabot-public-key': {
      /**
       * @description The identifier for the key.
       * @example 1234567
       */
      readonly key_id: string
      /**
       * @description The Base64 encoded public key.
       * @example hBT5WZEj8ZoOv6TYJsfWq7MxTEQopZO5/IT3ZCVQPzs=
       */
      readonly key: string
    }
    /**
     * ExternalGroup
     * @description Information about an external group's usage and its members
     */
    readonly 'external-group': {
      /**
       * @description The internal ID of the group
       * @example 1
       */
      readonly group_id: number
      /**
       * @description The display name for the group
       * @example group-azuread-test
       */
      readonly group_name: string
      /**
       * @description The date when the group was last updated_at
       * @example 2021-01-03 22:27:15:000 -700
       */
      readonly updated_at?: string
      /**
       * @description An array of teams linked to this group
       * @example [
       *   {
       *     "team_id": 1,
       *     "team_name": "team-test"
       *   },
       *   {
       *     "team_id": 2,
       *     "team_name": "team-test2"
       *   }
       * ]
       */
      readonly teams: readonly {
        /**
         * @description The id for a team
         * @example 1
         */
        readonly team_id: number
        /**
         * @description The name of the team
         * @example team-test
         */
        readonly team_name: string
      }[]
      /**
       * @description An array of external members linked to this group
       * @example [
       *   {
       *     "member_id": 1,
       *     "member_login": "mona-lisa_eocsaxrs",
       *     "member_name": "Mona Lisa",
       *     "member_email": "mona_lisa@github.com"
       *   },
       *   {
       *     "member_id": 2,
       *     "member_login": "octo-lisa_eocsaxrs",
       *     "member_name": "Octo Lisa",
       *     "member_email": "octo_lisa@github.com"
       *   }
       * ]
       */
      readonly members: readonly {
        /**
         * @description The internal user ID of the identity
         * @example 1
         */
        readonly member_id: number
        /**
         * @description The handle/login for the user
         * @example mona-lisa_eocsaxrs
         */
        readonly member_login: string
        /**
         * @description The user display name/profile name
         * @example Mona Lisa
         */
        readonly member_name: string
        /**
         * @description An email attached to a user
         * @example mona_lisa@github.com
         */
        readonly member_email: string
      }[]
    }
    /**
     * ExternalGroups
     * @description A list of external groups available to be connected to a team
     */
    readonly 'external-groups': {
      /**
       * @description An array of external groups available to be mapped to a team
       * @example [
       *   {
       *     "group_id": 1,
       *     "group_name": "group-azuread-test",
       *     "updated_at": "2021-01-03 22:27:15:000 -700"
       *   },
       *   {
       *     "group_id": 2,
       *     "group_name": "group-azuread-test2",
       *     "updated_at": "2021-06-03 22:27:15:000 -700"
       *   }
       * ]
       */
      readonly groups?: readonly {
        /**
         * @description The internal ID of the group
         * @example 1
         */
        readonly group_id: number
        /**
         * @description The display name of the group
         * @example group-azuread-test
         */
        readonly group_name: string
        /**
         * @description The time of the last update for this group
         * @example 2019-06-03 22:27:15:000 -700
         */
        readonly updated_at: string
      }[]
    }
    /**
     * Org Hook
     * @description Org Hook
     */
    readonly 'org-hook': {
      /** @example 1 */
      readonly id: number
      /**
       * Format: uri
       * @example https://api.github.com/orgs/octocat/hooks/1
       */
      readonly url: string
      /**
       * Format: uri
       * @example https://api.github.com/orgs/octocat/hooks/1/pings
       */
      readonly ping_url: string
      /**
       * Format: uri
       * @example https://api.github.com/orgs/octocat/hooks/1/deliveries
       */
      readonly deliveries_url?: string
      /** @example web */
      readonly name: string
      /**
       * @example [
       *   "push",
       *   "pull_request"
       * ]
       */
      readonly events: readonly string[]
      /** @example true */
      readonly active: boolean
      readonly config: {
        /** @example "http://example.com/2" */
        readonly url?: string
        /** @example "0" */
        readonly insecure_ssl?: string
        /** @example "form" */
        readonly content_type?: string
        /** @example "********" */
        readonly secret?: string
      }
      /**
       * Format: date-time
       * @example 2011-09-06T20:39:23Z
       */
      readonly updated_at: string
      /**
       * Format: date-time
       * @example 2011-09-06T17:26:27Z
       */
      readonly created_at: string
      readonly type: string
    }
    /**
     * Org Membership
     * @description Org Membership
     */
    readonly 'org-membership': {
      /**
       * Format: uri
       * @example https://api.github.com/orgs/octocat/memberships/defunkt
       */
      readonly url: string
      /**
       * @description The state of the member in the organization. The `pending` state indicates the user has not yet accepted an invitation.
       * @example active
       * @enum {string}
       */
      readonly state: 'active' | 'pending'
      /**
       * @description The user's membership type in the organization.
       * @example admin
       * @enum {string}
       */
      readonly role: 'admin' | 'member' | 'billing_manager'
      /**
       * Format: uri
       * @example https://api.github.com/orgs/octocat
       */
      readonly organization_url: string
      readonly organization: components['schemas']['organization-simple']
      readonly user: components['schemas']['nullable-simple-user']
      readonly permissions?: {
        readonly can_create_repository: boolean
      }
    }
    /**
     * Migration
     * @description A migration.
     */
    readonly migration: {
      /** @example 79 */
      readonly id: number
      readonly owner: components['schemas']['nullable-simple-user']
      /** @example 0b989ba4-242f-11e5-81e1-c7b6966d2516 */
      readonly guid: string
      /** @example pending */
      readonly state: string
      /** @example true */
      readonly lock_repositories: boolean
      readonly exclude_metadata: boolean
      readonly exclude_git_data: boolean
      readonly exclude_attachments: boolean
      readonly exclude_releases: boolean
      readonly exclude_owner_projects: boolean
      readonly org_metadata_only: boolean
      readonly repositories: readonly components['schemas']['repository'][]
      /**
       * Format: uri
       * @example https://api.github.com/orgs/octo-org/migrations/79
       */
      readonly url: string
      /**
       * Format: date-time
       * @example 2015-07-06T15:33:38-07:00
       */
      readonly created_at: string
      /**
       * Format: date-time
       * @example 2015-07-06T15:33:38-07:00
       */
      readonly updated_at: string
      readonly node_id: string
      /** Format: uri */
      readonly archive_url?: string
      readonly exclude?: readonly unknown[]
    }
    readonly 'org-pre-receive-hook': {
      readonly id?: number
      readonly name?: string
      readonly enforcement?: string
      readonly configuration_url?: string
      readonly allow_downstream_configuration?: boolean
    }
    /**
     * Project
     * @description Projects are a way to organize columns and cards of work.
     */
    readonly project: {
      /**
       * Format: uri
       * @example https://api.github.com/repos/api-playground/projects-test
       */
      readonly owner_url: string
      /**
       * Format: uri
       * @example https://api.github.com/projects/1002604
       */
      readonly url: string
      /**
       * Format: uri
       * @example https://github.com/api-playground/projects-test/projects/12
       */
      readonly html_url: string
      /**
       * Format: uri
       * @example https://api.github.com/projects/1002604/columns
       */
      readonly columns_url: string
      /** @example 1002604 */
      readonly id: number
      /** @example MDc6UHJvamVjdDEwMDI2MDQ= */
      readonly node_id: string
      /**
       * @description Name of the project
       * @example Week One Sprint
       */
      readonly name: string
      /**
       * @description Body of the project
       * @example This project represents the sprint of the first week in January
       */
      readonly body: string | null
      /** @example 1 */
      readonly number: number
      /**
       * @description State of the project; either 'open' or 'closed'
       * @example open
       */
      readonly state: string
      readonly creator: components['schemas']['nullable-simple-user']
      /**
       * Format: date-time
       * @example 2011-04-10T20:09:31Z
       */
      readonly created_at: string
      /**
       * Format: date-time
       * @example 2014-03-03T18:58:10Z
       */
      readonly updated_at: string
      /**
       * @description The baseline permission that all organization members have on this project. Only present if owner is an organization.
       * @enum {string}
       */
      readonly organization_permission?: 'read' | 'write' | 'admin' | 'none'
      /** @description Whether or not this project can be seen by everyone. Only present if owner is an organization. */
      readonly private?: boolean
    }
    /**
     * Team Simple
     * @description Groups of organization members that gives permissions on specified repositories.
     */
    readonly 'nullable-team-simple': {
      /**
       * @description Unique identifier of the team
       * @example 1
       */
      readonly id: number
      /** @example MDQ6VGVhbTE= */
      readonly node_id: string
      /**
       * Format: uri
       * @description URL for the team
       * @example https://api.github.com/organizations/1/team/1
       */
      readonly url: string
      /** @example https://api.github.com/organizations/1/team/1/members{/member} */
      readonly members_url: string
      /**
       * @description Name of the team
       * @example Justice League
       */
      readonly name: string
      /**
       * @description Description of the team
       * @example A great team.
       */
      readonly description: string | null
      /**
       * @description Permission that the team will have for its repositories
       * @example admin
       */
      readonly permission: string
      /**
       * @description The level of privacy this team should have
       * @example closed
       */
      readonly privacy?: string
      /**
       * Format: uri
       * @example https://github.com/orgs/rails/teams/core
       */
      readonly html_url: string
      /**
       * Format: uri
       * @example https://api.github.com/organizations/1/team/1/repos
       */
      readonly repositories_url: string
      /** @example justice-league */
      readonly slug: string
      /**
       * @description Distinguished Name (DN) that team maps to within LDAP environment
       * @example uid=example,ou=users,dc=github,dc=com
       */
      readonly ldap_dn?: string
    } | null
    /**
     * Team
     * @description Groups of organization members that gives permissions on specified repositories.
     */
    readonly team: {
      readonly id: number
      readonly node_id: string
      readonly name: string
      readonly slug: string
      readonly description: string | null
      readonly privacy?: string
      readonly permission: string
      readonly permissions?: {
        readonly pull: boolean
        readonly triage: boolean
        readonly push: boolean
        readonly maintain: boolean
        readonly admin: boolean
      }
      /** Format: uri */
      readonly url: string
      /**
       * Format: uri
       * @example https://github.com/orgs/rails/teams/core
       */
      readonly html_url: string
      readonly members_url: string
      /** Format: uri */
      readonly repositories_url: string
      readonly parent: components['schemas']['nullable-team-simple']
    }
    /**
     * Team Organization
     * @description Team Organization
     */
    readonly 'team-organization': {
      /** @example github */
      readonly login: string
      /** @example 1 */
      readonly id: number
      /** @example MDEyOk9yZ2FuaXphdGlvbjE= */
      readonly node_id: string
      /**
       * Format: uri
       * @example https://api.github.com/orgs/github
       */
      readonly url: string
      /**
       * Format: uri
       * @example https://api.github.com/orgs/github/repos
       */
      readonly repos_url: string
      /**
       * Format: uri
       * @example https://api.github.com/orgs/github/events
       */
      readonly events_url: string
      /** @example https://api.github.com/orgs/github/hooks */
      readonly hooks_url: string
      /** @example https://api.github.com/orgs/github/issues */
      readonly issues_url: string
      /** @example https://api.github.com/orgs/github/members{/member} */
      readonly members_url: string
      /** @example https://api.github.com/orgs/github/public_members{/member} */
      readonly public_members_url: string
      /** @example https://github.com/images/error/octocat_happy.gif */
      readonly avatar_url: string
      /** @example A great organization */
      readonly description: string | null
      /** @example github */
      readonly name?: string
      /** @example GitHub */
      readonly company?: string
      /**
       * Format: uri
       * @example https://github.com/blog
       */
      readonly blog?: string
      /** @example San Francisco */
      readonly location?: string
      /**
       * Format: email
       * @example octocat@github.com
       */
      readonly email?: string
      /** @example github */
      readonly twitter_username?: string | null
      /** @example true */
      readonly is_verified?: boolean
      /** @example true */
      readonly has_organization_projects: boolean
      /** @example true */
      readonly has_repository_projects: boolean
      /** @example 2 */
      readonly public_repos: number
      /** @example 1 */
      readonly public_gists: number
      /** @example 20 */
      readonly followers: number
      /** @example 0 */
      readonly following: number
      /**
       * Format: uri
       * @example https://github.com/octocat
       */
      readonly html_url: string
      /**
       * Format: date-time
       * @example 2008-01-14T04:33:35Z
       */
      readonly created_at: string
      /** @example Organization */
      readonly type: string
      /** @example 100 */
      readonly total_private_repos?: number
      /** @example 100 */
      readonly owned_private_repos?: number
      /** @example 81 */
      readonly private_gists?: number | null
      /** @example 10000 */
      readonly disk_usage?: number | null
      /** @example 8 */
      readonly collaborators?: number | null
      /**
       * Format: email
       * @example org@example.com
       */
      readonly billing_email?: string | null
      readonly plan?: {
        readonly name: string
        readonly space: number
        readonly private_repos: number
        readonly filled_seats?: number
        readonly seats?: number
      }
      readonly default_repository_permission?: string | null
      /** @example true */
      readonly members_can_create_repositories?: boolean | null
      /** @example true */
      readonly two_factor_requirement_enabled?: boolean | null
      /** @example all */
      readonly members_allowed_repository_creation_type?: string
      /** @example true */
      readonly members_can_create_public_repositories?: boolean
      /** @example true */
      readonly members_can_create_private_repositories?: boolean
      /** @example true */
      readonly members_can_create_internal_repositories?: boolean
      /** @example true */
      readonly members_can_create_pages?: boolean
      /** @example true */
      readonly members_can_create_public_pages?: boolean
      /** @example true */
      readonly members_can_create_private_pages?: boolean
      /** @example false */
      readonly members_can_fork_private_repositories?: boolean | null
      /** @example false */
      readonly web_commit_signoff_required?: boolean
      /** Format: date-time */
      readonly updated_at: string
    }
    /**
     * Full Team
     * @description Groups of organization members that gives permissions on specified repositories.
     */
    readonly 'team-full': {
      /**
       * @description Unique identifier of the team
       * @example 42
       */
      readonly id: number
      /** @example MDQ6VGVhbTE= */
      readonly node_id: string
      /**
       * Format: uri
       * @description URL for the team
       * @example https://api.github.com/organizations/1/team/1
       */
      readonly url: string
      /**
       * Format: uri
       * @example https://github.com/orgs/rails/teams/core
       */
      readonly html_url: string
      /**
       * @description Name of the team
       * @example Developers
       */
      readonly name: string
      /** @example justice-league */
      readonly slug: string
      /** @example A great team. */
      readonly description: string | null
      /**
       * @description The level of privacy this team should have
       * @example closed
       * @enum {string}
       */
      readonly privacy?: 'closed' | 'secret'
      /**
       * @description Permission that the team will have for its repositories
       * @example push
       */
      readonly permission: string
      /** @example https://api.github.com/organizations/1/team/1/members{/member} */
      readonly members_url: string
      /**
       * Format: uri
       * @example https://api.github.com/organizations/1/team/1/repos
       */
      readonly repositories_url: string
      readonly parent?: components['schemas']['nullable-team-simple']
      /** @example 3 */
      readonly members_count: number
      /** @example 10 */
      readonly repos_count: number
      /**
       * Format: date-time
       * @example 2017-07-14T16:53:42Z
       */
      readonly created_at: string
      /**
       * Format: date-time
       * @example 2017-08-17T12:37:15Z
       */
      readonly updated_at: string
      readonly organization: components['schemas']['team-organization']
      /**
       * @description Distinguished Name (DN) that team maps to within LDAP environment
       * @example uid=example,ou=users,dc=github,dc=com
       */
      readonly ldap_dn?: string
    }
    /**
     * Team Discussion
     * @description A team discussion is a persistent record of a free-form conversation within a team.
     */
    readonly 'team-discussion': {
      readonly author: components['schemas']['nullable-simple-user']
      /**
       * @description The main text of the discussion.
       * @example Please suggest improvements to our workflow in comments.
       */
      readonly body: string
      /** @example <p>Hi! This is an area for us to collaborate as a team</p> */
      readonly body_html: string
      /**
       * @description The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
       * @example 0307116bbf7ced493b8d8a346c650b71
       */
      readonly body_version: string
      /** @example 0 */
      readonly comments_count: number
      /**
       * Format: uri
       * @example https://api.github.com/organizations/1/team/2343027/discussions/1/comments
       */
      readonly comments_url: string
      /**
       * Format: date-time
       * @example 2018-01-25T18:56:31Z
       */
      readonly created_at: string
      /** Format: date-time */
      readonly last_edited_at: string | null
      /**
       * Format: uri
       * @example https://github.com/orgs/github/teams/justice-league/discussions/1
       */
      readonly html_url: string
      /** @example MDE0OlRlYW1EaXNjdXNzaW9uMQ== */
      readonly node_id: string
      /**
       * @description The unique sequence number of a team discussion.
       * @example 42
       */
      readonly number: number
      /**
       * @description Whether or not this discussion should be pinned for easy retrieval.
       * @example true
       */
      readonly pinned: boolean
      /**
       * @description Whether or not this discussion should be restricted to team members and organization administrators.
       * @example true
       */
      readonly private: boolean
      /**
       * Format: uri
       * @example https://api.github.com/organizations/1/team/2343027
       */
      readonly team_url: string
      /**
       * @description The title of the discussion.
       * @example How can we improve our workflow?
       */
      readonly title: string
      /**
       * Format: date-time
       * @example 2018-01-25T18:56:31Z
       */
      readonly updated_at: string
      /**
       * Format: uri
       * @example https://api.github.com/organizations/1/team/2343027/discussions/1
       */
      readonly url: string
      readonly reactions?: components['schemas']['reaction-rollup']
    }
    /**
     * Team Discussion Comment
     * @description A reply to a discussion within a team.
     */
    readonly 'team-discussion-comment': {
      readonly author: components['schemas']['nullable-simple-user']
      /**
       * @description The main text of the comment.
       * @example I agree with this suggestion.
       */
      readonly body: string
      /** @example <p>Do you like apples?</p> */
      readonly body_html: string
      /**
       * @description The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
       * @example 0307116bbf7ced493b8d8a346c650b71
       */
      readonly body_version: string
      /**
       * Format: date-time
       * @example 2018-01-15T23:53:58Z
       */
      readonly created_at: string
      /** Format: date-time */
      readonly last_edited_at: string | null
      /**
       * Format: uri
       * @example https://api.github.com/organizations/1/team/2403582/discussions/1
       */
      readonly discussion_url: string
      /**
       * Format: uri
       * @example https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1
       */
      readonly html_url: string
      /** @example MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE= */
      readonly node_id: string
      /**
       * @description The unique sequence number of a team discussion comment.
       * @example 42
       */
      readonly number: number
      /**
       * Format: date-time
       * @example 2018-01-15T23:53:58Z
       */
      readonly updated_at: string
      /**
       * Format: uri
       * @example https://api.github.com/organizations/1/team/2403582/discussions/1/comments/1
       */
      readonly url: string
      readonly reactions?: components['schemas']['reaction-rollup']
    }
    /**
     * Reaction
     * @description Reactions to conversations provide a way to help people express their feelings more simply and effectively.
     */
    readonly reaction: {
      /** @example 1 */
      readonly id: number
      /** @example MDg6UmVhY3Rpb24x */
      readonly node_id: string
      readonly user: components['schemas']['nullable-simple-user']
      /**
       * @description The reaction to use
       * @example heart
       * @enum {string}
       */
      readonly content: '+1' | '-1' | 'laugh' | 'confused' | 'heart' | 'hooray' | 'rocket' | 'eyes'
      /**
       * Format: date-time
       * @example 2016-05-20T20:09:31Z
       */
      readonly created_at: string
    }
    /**
     * Team Membership
     * @description Team Membership
     */
    readonly 'team-membership': {
      /** Format: uri */
      readonly url: string
      /**
       * @description The role of the user in the team.
       * @default member
       * @example member
       * @enum {string}
       */
      readonly role: 'member' | 'maintainer'
      /**
       * @description The state of the user's membership in the team.
       * @enum {string}
       */
      readonly state: 'active' | 'pending'
    }
    /**
     * Team Project
     * @description A team's access to a project.
     */
    readonly 'team-project': {
      readonly owner_url: string
      readonly url: string
      readonly html_url: string
      readonly columns_url: string
      readonly id: number
      readonly node_id: string
      readonly name: string
      readonly body: string | null
      readonly number: number
      readonly state: string
      readonly creator: components['schemas']['simple-user']
      readonly created_at: string
      readonly updated_at: string
      /** @description The organization permission for this project. Only present when owner is an organization. */
      readonly organization_permission?: string
      /** @description Whether the project is private or not. Only present when owner is an organization. */
      readonly private?: boolean
      readonly permissions: {
        readonly read: boolean
        readonly write: boolean
        readonly admin: boolean
      }
    }
    /**
     * Repository
     * @description A git repository
     */
    readonly 'nullable-repository': {
      /**
       * @description Unique identifier of the repository
       * @example 42
       */
      readonly id: number
      /** @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5 */
      readonly node_id: string
      /**
       * @description The name of the repository.
       * @example Team Environment
       */
      readonly name: string
      /** @example octocat/Hello-World */
      readonly full_name: string
      readonly license: components['schemas']['nullable-license-simple']
      readonly organization?: components['schemas']['nullable-simple-user']
      readonly forks: number
      readonly permissions?: {
        readonly admin: boolean
        readonly pull: boolean
        readonly triage?: boolean
        readonly push: boolean
        readonly maintain?: boolean
      }
      readonly owner: components['schemas']['simple-user']
      /**
       * @description Whether the repository is private or public.
       * @default false
       */
      readonly private: boolean
      /**
       * Format: uri
       * @example https://github.com/octocat/Hello-World
       */
      readonly html_url: string
      /** @example This your first repo! */
      readonly description: string | null
      readonly fork: boolean
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/Hello-World
       */
      readonly url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref} */
      readonly archive_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/assignees{/user} */
      readonly assignees_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha} */
      readonly blobs_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/branches{/branch} */
      readonly branches_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator} */
      readonly collaborators_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/comments{/number} */
      readonly comments_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/commits{/sha} */
      readonly commits_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head} */
      readonly compare_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/contents/{+path} */
      readonly contents_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/contributors
       */
      readonly contributors_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/deployments
       */
      readonly deployments_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/downloads
       */
      readonly downloads_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/events
       */
      readonly events_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/forks
       */
      readonly forks_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/git/commits{/sha} */
      readonly git_commits_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/git/refs{/sha} */
      readonly git_refs_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/git/tags{/sha} */
      readonly git_tags_url: string
      /** @example git:github.com/octocat/Hello-World.git */
      readonly git_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/issues/comments{/number} */
      readonly issue_comment_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/issues/events{/number} */
      readonly issue_events_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/issues{/number} */
      readonly issues_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/keys{/key_id} */
      readonly keys_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/labels{/name} */
      readonly labels_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/languages
       */
      readonly languages_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/merges
       */
      readonly merges_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/milestones{/number} */
      readonly milestones_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating} */
      readonly notifications_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/pulls{/number} */
      readonly pulls_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/releases{/id} */
      readonly releases_url: string
      /** @example git@github.com:octocat/Hello-World.git */
      readonly ssh_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/stargazers
       */
      readonly stargazers_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/statuses/{sha} */
      readonly statuses_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/subscribers
       */
      readonly subscribers_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/subscription
       */
      readonly subscription_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/tags
       */
      readonly tags_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/teams
       */
      readonly teams_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/git/trees{/sha} */
      readonly trees_url: string
      /** @example https://github.com/octocat/Hello-World.git */
      readonly clone_url: string
      /**
       * Format: uri
       * @example git:git.example.com/octocat/Hello-World
       */
      readonly mirror_url: string | null
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/hooks
       */
      readonly hooks_url: string
      /**
       * Format: uri
       * @example https://svn.github.com/octocat/Hello-World
       */
      readonly svn_url: string
      /**
       * Format: uri
       * @example https://github.com
       */
      readonly homepage: string | null
      readonly language: string | null
      /** @example 9 */
      readonly forks_count: number
      /** @example 80 */
      readonly stargazers_count: number
      /** @example 80 */
      readonly watchers_count: number
      /**
       * @description The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
       * @example 108
       */
      readonly size: number
      /**
       * @description The default branch of the repository.
       * @example master
       */
      readonly default_branch: string
      /** @example 0 */
      readonly open_issues_count: number
      /**
       * @description Whether this repository acts as a template that can be used to generate new repositories.
       * @default false
       * @example true
       */
      readonly is_template?: boolean
      readonly topics?: readonly string[]
      /**
       * @description Whether issues are enabled.
       * @default true
       * @example true
       */
      readonly has_issues: boolean
      /**
       * @description Whether projects are enabled.
       * @default true
       * @example true
       */
      readonly has_projects: boolean
      /**
       * @description Whether the wiki is enabled.
       * @default true
       * @example true
       */
      readonly has_wiki: boolean
      readonly has_pages: boolean
      /**
       * @description Whether downloads are enabled.
       * @default true
       * @example true
       */
      readonly has_downloads: boolean
      /**
       * @description Whether the repository is archived.
       * @default false
       */
      readonly archived: boolean
      /** @description Returns whether or not this repository disabled. */
      readonly disabled: boolean
      /**
       * @description The repository visibility: public, private, or internal.
       * @default public
       */
      readonly visibility?: string
      /**
       * Format: date-time
       * @example 2011-01-26T19:06:43Z
       */
      readonly pushed_at: string | null
      /**
       * Format: date-time
       * @example 2011-01-26T19:01:12Z
       */
      readonly created_at: string | null
      /**
       * Format: date-time
       * @example 2011-01-26T19:14:43Z
       */
      readonly updated_at: string | null
      /**
       * @description Whether to allow rebase merges for pull requests.
       * @default true
       * @example true
       */
      readonly allow_rebase_merge?: boolean
      readonly template_repository?: {
        readonly id?: number
        readonly node_id?: string
        readonly name?: string
        readonly full_name?: string
        readonly owner?: {
          readonly login?: string
          readonly id?: number
          readonly node_id?: string
          readonly avatar_url?: string
          readonly gravatar_id?: string
          readonly url?: string
          readonly html_url?: string
          readonly followers_url?: string
          readonly following_url?: string
          readonly gists_url?: string
          readonly starred_url?: string
          readonly subscriptions_url?: string
          readonly organizations_url?: string
          readonly repos_url?: string
          readonly events_url?: string
          readonly received_events_url?: string
          readonly type?: string
          readonly site_admin?: boolean
        }
        readonly private?: boolean
        readonly html_url?: string
        readonly description?: string
        readonly fork?: boolean
        readonly url?: string
        readonly archive_url?: string
        readonly assignees_url?: string
        readonly blobs_url?: string
        readonly branches_url?: string
        readonly collaborators_url?: string
        readonly comments_url?: string
        readonly commits_url?: string
        readonly compare_url?: string
        readonly contents_url?: string
        readonly contributors_url?: string
        readonly deployments_url?: string
        readonly downloads_url?: string
        readonly events_url?: string
        readonly forks_url?: string
        readonly git_commits_url?: string
        readonly git_refs_url?: string
        readonly git_tags_url?: string
        readonly git_url?: string
        readonly issue_comment_url?: string
        readonly issue_events_url?: string
        readonly issues_url?: string
        readonly keys_url?: string
        readonly labels_url?: string
        readonly languages_url?: string
        readonly merges_url?: string
        readonly milestones_url?: string
        readonly notifications_url?: string
        readonly pulls_url?: string
        readonly releases_url?: string
        readonly ssh_url?: string
        readonly stargazers_url?: string
        readonly statuses_url?: string
        readonly subscribers_url?: string
        readonly subscription_url?: string
        readonly tags_url?: string
        readonly teams_url?: string
        readonly trees_url?: string
        readonly clone_url?: string
        readonly mirror_url?: string
        readonly hooks_url?: string
        readonly svn_url?: string
        readonly homepage?: string
        readonly language?: string
        readonly forks_count?: number
        readonly stargazers_count?: number
        readonly watchers_count?: number
        readonly size?: number
        readonly default_branch?: string
        readonly open_issues_count?: number
        readonly is_template?: boolean
        readonly topics?: readonly string[]
        readonly has_issues?: boolean
        readonly has_projects?: boolean
        readonly has_wiki?: boolean
        readonly has_pages?: boolean
        readonly has_downloads?: boolean
        readonly archived?: boolean
        readonly disabled?: boolean
        readonly visibility?: string
        readonly pushed_at?: string
        readonly created_at?: string
        readonly updated_at?: string
        readonly permissions?: {
          readonly admin?: boolean
          readonly maintain?: boolean
          readonly push?: boolean
          readonly triage?: boolean
          readonly pull?: boolean
        }
        readonly allow_rebase_merge?: boolean
        readonly temp_clone_token?: string
        readonly allow_squash_merge?: boolean
        readonly allow_auto_merge?: boolean
        readonly delete_branch_on_merge?: boolean
        readonly allow_update_branch?: boolean
        readonly use_squash_pr_title_as_default?: boolean
        /**
         * @description The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         * @enum {string}
         */
        readonly squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE'
        /**
         * @description The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         * @enum {string}
         */
        readonly squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK'
        /**
         * @description The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         * @enum {string}
         */
        readonly merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE'
        /**
         * @description The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         * @enum {string}
         */
        readonly merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK'
        readonly allow_merge_commit?: boolean
        readonly subscribers_count?: number
        readonly network_count?: number
      } | null
      readonly temp_clone_token?: string
      /**
       * @description Whether to allow squash merges for pull requests.
       * @default true
       * @example true
       */
      readonly allow_squash_merge?: boolean
      /**
       * @description Whether to allow Auto-merge to be used on pull requests.
       * @default false
       * @example false
       */
      readonly allow_auto_merge?: boolean
      /**
       * @description Whether to delete head branches when pull requests are merged
       * @default false
       * @example false
       */
      readonly delete_branch_on_merge?: boolean
      /**
       * @description Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
       * @default false
       * @example false
       */
      readonly allow_update_branch?: boolean
      /**
       * @deprecated
       * @description Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
       * @default false
       */
      readonly use_squash_pr_title_as_default?: boolean
      /**
       * @description The default value for a squash merge commit title:
       *
       * - `PR_TITLE` - default to the pull request's title.
       * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
       * @enum {string}
       */
      readonly squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE'
      /**
       * @description The default value for a squash merge commit message:
       *
       * - `PR_BODY` - default to the pull request's body.
       * - `COMMIT_MESSAGES` - default to the branch's commit messages.
       * - `BLANK` - default to a blank commit message.
       * @enum {string}
       */
      readonly squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK'
      /**
       * @description The default value for a merge commit title.
       *
       * - `PR_TITLE` - default to the pull request's title.
       * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
       * @enum {string}
       */
      readonly merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE'
      /**
       * @description The default value for a merge commit message.
       *
       * - `PR_TITLE` - default to the pull request's title.
       * - `PR_BODY` - default to the pull request's body.
       * - `BLANK` - default to a blank commit message.
       * @enum {string}
       */
      readonly merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK'
      /**
       * @description Whether to allow merge commits for pull requests.
       * @default true
       * @example true
       */
      readonly allow_merge_commit?: boolean
      /** @description Whether to allow forking this repo */
      readonly allow_forking?: boolean
      /**
       * @description Whether to require contributors to sign off on web-based commits
       * @default false
       */
      readonly web_commit_signoff_required?: boolean
      readonly subscribers_count?: number
      readonly network_count?: number
      readonly open_issues: number
      readonly watchers: number
      readonly master_branch?: string
      /** @example "2020-07-09T00:17:42Z" */
      readonly starred_at?: string
      /** @description Whether anonymous git access is enabled for this repository */
      readonly anonymous_access_enabled?: boolean
    } | null
    /**
     * Team Repository
     * @description A team's access to a repository.
     */
    readonly 'team-repository': {
      /**
       * @description Unique identifier of the repository
       * @example 42
       */
      readonly id: number
      /** @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5 */
      readonly node_id: string
      /**
       * @description The name of the repository.
       * @example Team Environment
       */
      readonly name: string
      /** @example octocat/Hello-World */
      readonly full_name: string
      readonly license: components['schemas']['nullable-license-simple']
      readonly forks: number
      readonly permissions?: {
        readonly admin: boolean
        readonly pull: boolean
        readonly triage?: boolean
        readonly push: boolean
        readonly maintain?: boolean
      }
      /** @example admin */
      readonly role_name?: string
      readonly owner: components['schemas']['nullable-simple-user']
      /**
       * @description Whether the repository is private or public.
       * @default false
       */
      readonly private: boolean
      /**
       * Format: uri
       * @example https://github.com/octocat/Hello-World
       */
      readonly html_url: string
      /** @example This your first repo! */
      readonly description: string | null
      readonly fork: boolean
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/Hello-World
       */
      readonly url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref} */
      readonly archive_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/assignees{/user} */
      readonly assignees_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha} */
      readonly blobs_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/branches{/branch} */
      readonly branches_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator} */
      readonly collaborators_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/comments{/number} */
      readonly comments_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/commits{/sha} */
      readonly commits_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head} */
      readonly compare_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/contents/{+path} */
      readonly contents_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/contributors
       */
      readonly contributors_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/deployments
       */
      readonly deployments_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/downloads
       */
      readonly downloads_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/events
       */
      readonly events_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/forks
       */
      readonly forks_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/git/commits{/sha} */
      readonly git_commits_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/git/refs{/sha} */
      readonly git_refs_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/git/tags{/sha} */
      readonly git_tags_url: string
      /** @example git:github.com/octocat/Hello-World.git */
      readonly git_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/issues/comments{/number} */
      readonly issue_comment_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/issues/events{/number} */
      readonly issue_events_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/issues{/number} */
      readonly issues_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/keys{/key_id} */
      readonly keys_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/labels{/name} */
      readonly labels_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/languages
       */
      readonly languages_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/merges
       */
      readonly merges_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/milestones{/number} */
      readonly milestones_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating} */
      readonly notifications_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/pulls{/number} */
      readonly pulls_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/releases{/id} */
      readonly releases_url: string
      /** @example git@github.com:octocat/Hello-World.git */
      readonly ssh_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/stargazers
       */
      readonly stargazers_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/statuses/{sha} */
      readonly statuses_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/subscribers
       */
      readonly subscribers_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/subscription
       */
      readonly subscription_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/tags
       */
      readonly tags_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/teams
       */
      readonly teams_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/git/trees{/sha} */
      readonly trees_url: string
      /** @example https://github.com/octocat/Hello-World.git */
      readonly clone_url: string
      /**
       * Format: uri
       * @example git:git.example.com/octocat/Hello-World
       */
      readonly mirror_url: string | null
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/hooks
       */
      readonly hooks_url: string
      /**
       * Format: uri
       * @example https://svn.github.com/octocat/Hello-World
       */
      readonly svn_url: string
      /**
       * Format: uri
       * @example https://github.com
       */
      readonly homepage: string | null
      readonly language: string | null
      /** @example 9 */
      readonly forks_count: number
      /** @example 80 */
      readonly stargazers_count: number
      /** @example 80 */
      readonly watchers_count: number
      /** @example 108 */
      readonly size: number
      /**
       * @description The default branch of the repository.
       * @example master
       */
      readonly default_branch: string
      /** @example 0 */
      readonly open_issues_count: number
      /**
       * @description Whether this repository acts as a template that can be used to generate new repositories.
       * @default false
       * @example true
       */
      readonly is_template?: boolean
      readonly topics?: readonly string[]
      /**
       * @description Whether issues are enabled.
       * @default true
       * @example true
       */
      readonly has_issues: boolean
      /**
       * @description Whether projects are enabled.
       * @default true
       * @example true
       */
      readonly has_projects: boolean
      /**
       * @description Whether the wiki is enabled.
       * @default true
       * @example true
       */
      readonly has_wiki: boolean
      readonly has_pages: boolean
      /**
       * @description Whether downloads are enabled.
       * @default true
       * @example true
       */
      readonly has_downloads: boolean
      /**
       * @description Whether the repository is archived.
       * @default false
       */
      readonly archived: boolean
      /** @description Returns whether or not this repository disabled. */
      readonly disabled: boolean
      /**
       * @description The repository visibility: public, private, or internal.
       * @default public
       */
      readonly visibility?: string
      /**
       * Format: date-time
       * @example 2011-01-26T19:06:43Z
       */
      readonly pushed_at: string | null
      /**
       * Format: date-time
       * @example 2011-01-26T19:01:12Z
       */
      readonly created_at: string | null
      /**
       * Format: date-time
       * @example 2011-01-26T19:14:43Z
       */
      readonly updated_at: string | null
      /**
       * @description Whether to allow rebase merges for pull requests.
       * @default true
       * @example true
       */
      readonly allow_rebase_merge?: boolean
      readonly template_repository?: components['schemas']['nullable-repository']
      readonly temp_clone_token?: string
      /**
       * @description Whether to allow squash merges for pull requests.
       * @default true
       * @example true
       */
      readonly allow_squash_merge?: boolean
      /**
       * @description Whether to allow Auto-merge to be used on pull requests.
       * @default false
       * @example false
       */
      readonly allow_auto_merge?: boolean
      /**
       * @description Whether to delete head branches when pull requests are merged
       * @default false
       * @example false
       */
      readonly delete_branch_on_merge?: boolean
      /**
       * @description Whether to allow merge commits for pull requests.
       * @default true
       * @example true
       */
      readonly allow_merge_commit?: boolean
      /**
       * @description Whether to allow forking this repo
       * @default false
       * @example false
       */
      readonly allow_forking?: boolean
      /**
       * @description Whether to require contributors to sign off on web-based commits
       * @default false
       * @example false
       */
      readonly web_commit_signoff_required?: boolean
      readonly subscribers_count?: number
      readonly network_count?: number
      readonly open_issues: number
      readonly watchers: number
      readonly master_branch?: string
    }
    /**
     * Project Card
     * @description Project cards represent a scope of work.
     */
    readonly 'project-card': {
      /**
       * Format: uri
       * @example https://api.github.com/projects/columns/cards/1478
       */
      readonly url: string
      /**
       * @description The project card's ID
       * @example 42
       */
      readonly id: number
      /** @example MDExOlByb2plY3RDYXJkMTQ3OA== */
      readonly node_id: string
      /** @example Add payload for delete Project column */
      readonly note: string | null
      readonly creator: components['schemas']['nullable-simple-user']
      /**
       * Format: date-time
       * @example 2016-09-05T14:21:06Z
       */
      readonly created_at: string
      /**
       * Format: date-time
       * @example 2016-09-05T14:20:22Z
       */
      readonly updated_at: string
      /**
       * @description Whether or not the card is archived
       * @example false
       */
      readonly archived?: boolean
      readonly column_name?: string
      readonly project_id?: string
      /**
       * Format: uri
       * @example https://api.github.com/projects/columns/367
       */
      readonly column_url: string
      /**
       * Format: uri
       * @example https://api.github.com/repos/api-playground/projects-test/issues/3
       */
      readonly content_url?: string
      /**
       * Format: uri
       * @example https://api.github.com/projects/120
       */
      readonly project_url: string
    }
    /**
     * Project Column
     * @description Project columns contain cards of work.
     */
    readonly 'project-column': {
      /**
       * Format: uri
       * @example https://api.github.com/projects/columns/367
       */
      readonly url: string
      /**
       * Format: uri
       * @example https://api.github.com/projects/120
       */
      readonly project_url: string
      /**
       * Format: uri
       * @example https://api.github.com/projects/columns/367/cards
       */
      readonly cards_url: string
      /**
       * @description The unique identifier of the project column
       * @example 42
       */
      readonly id: number
      /** @example MDEzOlByb2plY3RDb2x1bW4zNjc= */
      readonly node_id: string
      /**
       * @description Name of the project column
       * @example Remaining tasks
       */
      readonly name: string
      /**
       * Format: date-time
       * @example 2016-09-05T14:18:44Z
       */
      readonly created_at: string
      /**
       * Format: date-time
       * @example 2016-09-05T14:22:28Z
       */
      readonly updated_at: string
    }
    /**
     * Project Collaborator Permission
     * @description Project Collaborator Permission
     */
    readonly 'project-collaborator-permission': {
      readonly permission: string
      readonly user: components['schemas']['nullable-simple-user']
    }
    /** Rate Limit */
    readonly 'rate-limit': {
      readonly limit: number
      readonly remaining: number
      readonly reset: number
      readonly used: number
    }
    /**
     * Rate Limit Overview
     * @description Rate Limit Overview
     */
    readonly 'rate-limit-overview': {
      readonly resources: {
        readonly core: components['schemas']['rate-limit']
        readonly graphql?: components['schemas']['rate-limit']
        readonly search: components['schemas']['rate-limit']
        readonly source_import?: components['schemas']['rate-limit']
        readonly integration_manifest?: components['schemas']['rate-limit']
        readonly code_scanning_upload?: components['schemas']['rate-limit']
        readonly actions_runner_registration?: components['schemas']['rate-limit']
        readonly scim?: components['schemas']['rate-limit']
      }
      readonly rate: components['schemas']['rate-limit']
    }
    /**
     * Code Of Conduct Simple
     * @description Code of Conduct Simple
     */
    readonly 'code-of-conduct-simple': {
      /**
       * Format: uri
       * @example https://api.github.com/repos/github/docs/community/code_of_conduct
       */
      readonly url: string
      /** @example citizen_code_of_conduct */
      readonly key: string
      /** @example Citizen Code of Conduct */
      readonly name: string
      /**
       * Format: uri
       * @example https://github.com/github/docs/blob/main/CODE_OF_CONDUCT.md
       */
      readonly html_url: string | null
    }
    readonly 'security-and-analysis': {
      readonly advanced_security?: {
        /** @enum {string} */
        readonly status?: 'enabled' | 'disabled'
      }
      readonly secret_scanning?: {
        /** @enum {string} */
        readonly status?: 'enabled' | 'disabled'
      }
      readonly secret_scanning_push_protection?: {
        /** @enum {string} */
        readonly status?: 'enabled' | 'disabled'
      }
    } | null
    /**
     * Full Repository
     * @description Full Repository
     */
    readonly 'full-repository': {
      /** @example 1296269 */
      readonly id: number
      /** @example MDEwOlJlcG9zaXRvcnkxMjk2MjY5 */
      readonly node_id: string
      /** @example Hello-World */
      readonly name: string
      /** @example octocat/Hello-World */
      readonly full_name: string
      readonly owner: components['schemas']['simple-user']
      readonly private: boolean
      /**
       * Format: uri
       * @example https://github.com/octocat/Hello-World
       */
      readonly html_url: string
      /** @example This your first repo! */
      readonly description: string | null
      readonly fork: boolean
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/Hello-World
       */
      readonly url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref} */
      readonly archive_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/assignees{/user} */
      readonly assignees_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha} */
      readonly blobs_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/branches{/branch} */
      readonly branches_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator} */
      readonly collaborators_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/comments{/number} */
      readonly comments_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/commits{/sha} */
      readonly commits_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head} */
      readonly compare_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/contents/{+path} */
      readonly contents_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/contributors
       */
      readonly contributors_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/deployments
       */
      readonly deployments_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/downloads
       */
      readonly downloads_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/events
       */
      readonly events_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/forks
       */
      readonly forks_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/git/commits{/sha} */
      readonly git_commits_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/git/refs{/sha} */
      readonly git_refs_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/git/tags{/sha} */
      readonly git_tags_url: string
      /** @example git:github.com/octocat/Hello-World.git */
      readonly git_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/issues/comments{/number} */
      readonly issue_comment_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/issues/events{/number} */
      readonly issue_events_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/issues{/number} */
      readonly issues_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/keys{/key_id} */
      readonly keys_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/labels{/name} */
      readonly labels_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/languages
       */
      readonly languages_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/merges
       */
      readonly merges_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/milestones{/number} */
      readonly milestones_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating} */
      readonly notifications_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/pulls{/number} */
      readonly pulls_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/releases{/id} */
      readonly releases_url: string
      /** @example git@github.com:octocat/Hello-World.git */
      readonly ssh_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/stargazers
       */
      readonly stargazers_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/statuses/{sha} */
      readonly statuses_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/subscribers
       */
      readonly subscribers_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/subscription
       */
      readonly subscription_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/tags
       */
      readonly tags_url: string
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/teams
       */
      readonly teams_url: string
      /** @example http://api.github.com/repos/octocat/Hello-World/git/trees{/sha} */
      readonly trees_url: string
      /** @example https://github.com/octocat/Hello-World.git */
      readonly clone_url: string
      /**
       * Format: uri
       * @example git:git.example.com/octocat/Hello-World
       */
      readonly mirror_url: string | null
      /**
       * Format: uri
       * @example http://api.github.com/repos/octocat/Hello-World/hooks
       */
      readonly hooks_url: string
      /**
       * Format: uri
       * @example https://svn.github.com/octocat/Hello-World
       */
      readonly svn_url: string
      /**
       * Format: uri
       * @example https://github.com
       */
      readonly homepage: string | null
      readonly language: string | null
      /** @example 9 */
      readonly forks_count: number
      /** @example 80 */
      readonly stargazers_count: number
      /** @example 80 */
      readonly watchers_count: number
      /**
       * @description The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
       * @example 108
       */
      readonly size: number
      /** @example master */
      readonly default_branch: string
      /** @example 0 */
      readonly open_issues_count: number
      /** @example true */
      readonly is_template?: boolean
      /**
       * @example [
       *   "octocat",
       *   "atom",
       *   "electron",
       *   "API"
       * ]
       */
      readonly topics?: readonly string[]
      /** @example true */
      readonly has_issues: boolean
      /** @example true */
      readonly has_projects: boolean
      /** @example true */
      readonly has_wiki: boolean
      readonly has_pages: boolean
      /** @example true */
      readonly has_downloads: boolean
      readonly archived: boolean
      /** @description Returns whether or not this repository disabled. */
      readonly disabled: boolean
      /**
       * @description The repository visibility: public, private, or internal.
       * @example public
       */
      readonly visibility?: string
      /**
       * Format: date-time
       * @example 2011-01-26T19:06:43Z
       */
      readonly pushed_at: string
      /**
       * Format: date-time
       * @example 2011-01-26T19:01:12Z
       */
      readonly created_at: string
      /**
       * Format: date-time
       * @example 2011-01-26T19:14:43Z
       */
      readonly updated_at: string
      readonly permissions?: {
        readonly admin: boolean
        readonly maintain?: boolean
        readonly push: boolean
        readonly triage?: boolean
        readonly pull: boolean
      }
      /** @example true */
      readonly allow_rebase_merge?: boolean
      readonly template_repository?: components['schemas']['nullable-repository']
      readonly temp_clone_token?: string | null
      /** @example true */
      readonly allow_squash_merge?: boolean
      /** @example false */
      readonly allow_auto_merge?: boolean
      /** @example false */
      readonly delete_branch_on_merge?: boolean
      /** @example true */
      readonly allow_merge_commit?: boolean
      /** @example true */
      readonly allow_update_branch?: boolean
      /** @example false */
      readonly use_squash_pr_title_as_default?: boolean
      /**
       * @description The default value for a squash merge commit title:
       *
       * - `PR_TITLE` - default to the pull request's title.
       * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
       * @example PR_TITLE
       * @enum {string}
       */
      readonly squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE'
      /**
       * @description The default value for a squash merge commit message:
       *
       * - `PR_BODY` - default to the pull request's body.
       * - `COMMIT_MESSAGES` - default to the branch's commit messages.
       * - `BLANK` - default to a blank commit message.
       * @example PR_BODY
       * @enum {string}
       */
      readonly squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK'
      /**
       * @description The default value for a merge commit title.
       *
       *   - `PR_TITLE` - default to the pull request's title.
       *   - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
       * @example PR_TITLE
       * @enum {string}
       */
      readonly merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE'
      /**
       * @description The default value for a merge commit message.
       *
       * - `PR_TITLE` - default to the pull request's title.
       * - `PR_BODY` - default to the pull request's body.
       * - `BLANK` - default to a blank commit message.
       * @example PR_BODY
       * @enum {string}
       */
      readonly merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK'
      /** @example true */
      readonly allow_forking?: boolean
      /** @example false */
      readonly web_commit_signoff_required?: boolean
      /** @example 42 */
      readonly subscribers_count: number
      /** @example 0 */
      readonly network_count: number
      readonly license: components['schemas']['nullable-license-simple']
      readonly organization?: components['schemas']['nullable-simple-user']
      readonly parent?: components['schemas']['repository']
      readonly source?: components['schemas']['repository']
      readonly forks: number
      readonly master_branch?: string
      readonly open_issues: number
      readonly watchers: number
      /**
       * @description Whether anonymous git access is allowed.
       * @default true
       */
      readonly anonymous_access_enabled?: boolean
      readonly code_of_conduct?: components['schemas']['code-of-conduct-simple']
      readonly security_and_analysis?: components['schemas']['security-and-analysis']
    }
    /**
     * Artifact
     * @description An artifact
     */
    readonly artifact: {
      /** @example 5 */
      readonly id: number
      /** @example MDEwOkNoZWNrU3VpdGU1 */
      readonly node_id: string
      /**
       * @description The name of the artifact.
       * @example AdventureWorks.Framework
       */
      readonly name: string
      /**
       * @description The size in bytes of the artifact.
       * @example 12345
       */
      readonly size_in_bytes: number
      /** @example https://api.github.com/repos/github/hello-world/actions/artifacts/5 */
      readonly url: string
      /** @example https://api.github.com/repos/github/hello-world/actions/artifacts/5/zip */
      readonly archive_download_url: string
      /** @description Whether or not the artifact has expired. */
      readonly expired: boolean
      /** Format: date-time */
      readonly created_at: string | null
      /** Format: date-time */
      readonly expires_at: string | null
      /** Format: date-time */
      readonly updated_at: string | null
      readonly workflow_run?: {
        /** @example 10 */
        readonly id?: number
        /** @example 42 */
        readonly repository_id?: number
        /** @example 42 */
        readonly head_repository_id?: number
        /** @example main */
        readonly head_branch?: string
        /** @example 009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d */
        readonly head_sha?: string
      } | null
    }
    /**
     * Actions cache usage policy for repository
     * @description GitHub Actions cache usage policy for repository.
     */
    readonly 'actions-cache-usage-policy-for-repository': {
      /**
       * @description The size limit for the sum of all caches, in gigabytes.
       * @example 14
       */
      readonly repo_cache_size_limit_in_gb: number
    }
    /**
     * Job
     * @description Information of a job execution in a workflow run
     */
    readonly job: {
      /**
       * @description The id of the job.
       * @example 21
       */
      readonly id: number
      /**
       * @description The id of the associated workflow run.
       * @example 5
       */
      readonly run_id: number
      /** @example https://api.github.com/repos/github/hello-world/actions/runs/5 */
      readonly run_url: string
      /**
       * @description Attempt number of the associated workflow run, 1 for first attempt and higher if the workflow was re-run.
       * @example 1
       */
      readonly run_attempt?: number
      /** @example MDg6Q2hlY2tSdW40 */
      readonly node_id: string
      /**
       * @description The SHA of the commit that is being run.
       * @example 009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d
       */
      readonly head_sha: string
      /** @example https://api.github.com/repos/github/hello-world/actions/jobs/21 */
      readonly url: string
      /** @example https://github.com/github/hello-world/runs/4 */
      readonly html_url: string | null
      /**
       * @description The phase of the lifecycle that the job is currently in.
       * @example queued
       * @enum {string}
       */
      readonly status: 'queued' | 'in_progress' | 'completed'
      /**
       * @description The outcome of the job.
       * @example success
       * @enum {string|null}
       */
      readonly conclusion: ('success' | 'failure' | 'neutral' | 'cancelled' | 'skipped' | 'timed_out' | 'action_required') | null
      /**
       * Format: date-time
       * @description The time that the job started, in ISO 8601 format.
       * @example 2019-08-08T08:00:00-07:00
       */
      readonly started_at: string
      /**
       * Format: date-time
       * @description The time that the job finished, in ISO 8601 format.
       * @example 2019-08-08T08:00:00-07:00
       */
      readonly completed_at: string | null
      /**
       * @description The name of the job.
       * @example test-coverage
       */
      readonly name: string
      /** @description Steps in this job. */
      readonly steps?: readonly {
        /**
         * @description The phase of the lifecycle that the job is currently in.
         * @example queued
         * @enum {string}
         */
        readonly status: 'queued' | 'in_progress' | 'completed'
        /**
         * @description The outcome of the job.
         * @example success
         */
        readonly conclusion: string | null
        /**
         * @description The name of the job.
         * @example test-coverage
         */
        readonly name: string
        /** @example 1 */
        readonly number: number
        /**
         * Format: date-time
         * @description The time that the step started, in ISO 8601 format.
         * @example 2019-08-08T08:00:00-07:00
         */
        readonly started_at?: string | null
        /**
         * Format: date-time
         * @description The time that the job finished, in ISO 8601 format.
         * @example 2019-08-08T08:00:00-07:00
         */
        readonly completed_at?: string | null
      }[]
      /** @example https://api.github.com/repos/github/hello-world/check-runs/4 */
      readonly check_run_url: string
      /**
       * @description Labels for the workflow job. Specified by the "runs_on" attribute in the action's workflow file.
       * @example [
       *   "self-hosted",
       *   "foo",
       *   "bar"
       * ]
       */
      readonly labels: readonly string[]
      /**
       * @description The ID of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
       * @example 1
       */
      readonly runner_id: number | null
      /**
       * @description The name of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
       * @example my runner
       */
      readonly runner_name: string | null
      /**
       * @description The ID of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
       * @example 2
       */
      readonly runner_group_id: number | null
      /**
       * @description The name of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
       * @example my runner group
       */
      readonly runner_group_name: string | null
    }
    /** @description Whether GitHub Actions is enabled on the repository. */
    readonly 'actions-enabled': boolean
    readonly 'actions-repository-permissions': {
      readonly enabled: components['schemas']['actions-enabled']
      readonly allowed_actions?: components['schemas']['allowed-actions']
      readonly selected_actions_url?: components['schemas']['selected-actions-url']
    }
    readonly 'actions-workflow-access-to-repository': {
      /**
       * @description Defines the level of access that workflows outside of the repository have to actions and reusable workflows within the
       * repository. `none` means access is only possible from workflows in this repository.
       * @enum {string}
       */
      readonly access_level: 'none' | 'organization' | 'enterprise'
    }
    /**
     * Referenced workflow
     * @description A workflow referenced/reused by the initial caller workflow
     */
    readonly 'referenced-workflow': {
      readonly path: string
      readonly sha: string
      readonly ref?: string
    }
    /** Pull Request Minimal */
    readonly 'pull-request-minimal': {
      readonly id: number
      readonly number: number
      readonly url: string
      readonly head: {
        readonly ref: string
        readonly sha: string
        readonly repo: {
          readonly id: number
          readonly url: string
          readonly name: string
        }
      }
      readonly base: {
        readonly ref: string
        readonly sha: string
        readonly repo: {
          readonly id: number
          readonly url: string
          readonly name: string
        }
      }
    }
    /**
     * Simple Commit
     * @description Simple Commit
     */
    readonly 'nullable-simple-commit': {
      readonly id: string
      readonly tree_id: string
      readonly message: string
      /** Format: date-time */
      readonly timestamp: string
      readonly author: {
        readonly name: string
        readonly email: string
      } | null
      readonly committer: {
        readonly name: string
        readonly email: string
      } | null
    } | null
    /**
     * Workflow Run
     * @description An invocation of a workflow
     */
    readonly 'workflow-run': {
      /**
       * @description The ID of the workflow run.
       * @example 5
       */
      readonly id: number
      /**
       * @description The name of the workflow run.
       * @example Build
       */
      readonly name?: string | null
      /** @example MDEwOkNoZWNrU3VpdGU1 */
      readonly node_id: string
      /**
       * @description The ID of the associated check suite.
       * @example 42
       */
      readonly check_suite_id?: number
      /**
       * @description The node ID of the associated check suite.
       * @example MDEwOkNoZWNrU3VpdGU0Mg==
       */
      readonly check_suite_node_id?: string
      /** @example master */
      readonly head_branch: string | null
      /**
       * @description The SHA of the head commit that points to the version of the workflow being run.
       * @example 009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d
       */
      readonly head_sha: string
      /**
       * @description The full path of the workflow
       * @example octocat/octo-repo/.github/workflows/ci.yml@main
       */
      readonly path: string
      /**
       * @description The auto incrementing run number for the workflow run.
       * @example 106
       */
      readonly run_number: number
      /**
       * @description Attempt number of the run, 1 for first attempt and higher if the workflow was re-run.
       * @example 1
       */
      readonly run_attempt?: number
      readonly referenced_workflows?: readonly components['schemas']['referenced-workflow'][] | null
      /** @example push */
      readonly event: string
      /** @example completed */
      readonly status: string | null
      /** @example neutral */
      readonly conclusion: string | null
      /**
       * @description The ID of the parent workflow.
       * @example 5
       */
      readonly workflow_id: number
      /**
       * @description The URL to the workflow run.
       * @example https://api.github.com/repos/github/hello-world/actions/runs/5
       */
      readonly url: string
      /** @example https://github.com/github/hello-world/suites/4 */
      readonly html_url: string
      readonly pull_requests: readonly components['schemas']['pull-request-minimal'][] | null
      /** Format: date-time */
      readonly created_at: string
      /** Format: date-time */
      readonly updated_at: string
      readonly actor?: components['schemas']['simple-user']
      readonly triggering_actor?: components['schemas']['simple-user']
      /**
       * Format: date-time
       * @description The start time of the latest run. Resets on re-run.
       */
      readonly run_started_at?: string
      /**
       * @description The URL to the jobs for the workflow run.
       * @example https://api.github.com/repos/github/hello-world/actions/runs/5/jobs
       */
      readonly jobs_url: string
      /**
       * @description The URL to download the logs for the workflow run.
       * @example https://api.github.com/repos/github/hello-world/actions/runs/5/logs
       */
      readonly logs_url: string
      /**
       * @description The URL to the associated check suite.
       * @example https://api.github.com/repos/github/hello-world/check-suites/12
       */
      readonly check_suite_url: string
      /**
       * @description The URL to the artifacts for the workflow run.
       * @example https://api.github.com/repos/github/hello-world/actions/runs/5/rerun/artifacts
       */
      readonly artifacts_url: string
      /**
       * @description The URL to cancel the workflow run.
       * @example https://api.github.com/repos/github/hello-world/actions/runs/5/cancel
       */
      readonly cancel_url: string
      /**
       * @description The URL to rerun the workflow run.
       * @example https://api.github.com/repos/github/hello-world/actions/runs/5/rerun
       */
      readonly rerun_url: string
      /**
       * @description The URL to the previous attempted run of this workflow, if one exists.
       * @example https://api.github.com/repos/github/hello-world/actions/runs/5/attempts/3
       */
      readonly previous_attempt_url?: string | null
      /**
       * @description The URL to the workflow.
       * @example https://api.github.com/repos/github/hello-world/actions/workflows/main.yaml
       */
      readonly workflow_url: string
      readonly head_commit: components['schemas']['nullable-simple-commit']
      readonly repository: components['schemas']['minimal-repository']
      readonly head_repository: components['schemas']['minimal-repository']
      /** @example 5 */
      readonly head_repository_id?: number
    } & {
      display_title: unknown
    }
    /**
     * Environment Approval
     * @description An entry in the reviews log for environment deployments
     */
    readonly 'environment-approvals': {
      /** @description The list of environments that were approved or rejected */
      readonly environments: readonly {
        /**
         * @description The id of the environment.
         * @example 56780428
         */
        readonly id?: number
        /** @example MDExOkVudmlyb25tZW50NTY3ODA0Mjg= */
        readonly node_id?: string
        /**
         * @description The name of the environment.
         * @example staging
         */
        readonly name?: string
        /** @example https://api.github.com/repos/github/hello-world/environments/staging */
        readonly url?: string
        /** @example https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging */
        readonly html_url?: string
        /**
         * Format: date-time
         * @description The time that the environment was created, in ISO 8601 format.
         * @example 2020-11-23T22:00:40Z
         */
        readonly created_at?: string
        /**
         * Format: date-time
         * @description The time that the environment was last updated, in ISO 8601 format.
         * @example 2020-11-23T22:00:40Z
         */
        readonly updated_at?: string
      }[]
      /**
       * @description Whether deployment to the environment(s) was approved or rejected
       * @example approved
       * @enum {string}
       */
      readonly state: 'approved' | 'rejected'
      readonly user: components['schemas']['simple-user']
      /**
       * @description The comment submitted with the deployment review
       * @example Ship it!
       */
      readonly comment: string
    }
    /**
     * @description The type of reviewer.
     * @example User
     * @enum {string}
     */
    readonly 'deployment-reviewer-type': 'User' | 'Team'
    /**
     * Pending Deployment
     * @description Details of a deployment that is waiting for protection rules to pass
     */
    readonly 'pending-deployment': {
      readonly environment: {
        /**
         * @description The id of the environment.
         * @example 56780428
         */
        readonly id?: number
        /** @example MDExOkVudmlyb25tZW50NTY3ODA0Mjg= */
        readonly node_id?: string
        /**
         * @description The name of the environment.
         * @example staging
         */
        readonly name?: string
        /** @example https://api.github.com/repos/github/hello-world/environments/staging */
        readonly url?: string
        /** @example https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging */
        readonly html_url?: string
      }
      /**
       * @description The set duration of the wait timer
       * @example 30
       */
      readonly wait_timer: number
      /**
       * Format: date-time
       * @description The time that the wait timer began.
       * @example 2020-11-23T22:00:40Z
       */
      readonly wait_timer_started_at: string | null
      /**
       * @description Whether the currently authenticated user can approve the deployment
       * @example true
       */
      readonly current_user_can_approve: boolean
      /** @description The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed. */
      readonly reviewers: readonly {
        readonly type?: components['schemas']['deployment-reviewer-type']
        readonly reviewer?: components['schemas']['simple-user'] | components['schemas']['team']
      }[]
    }
    /**
     * Deployment
     * @description A request for a specific ref(branch,sha,tag) to be deployed
     */
    readonly deployment: {
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/example/deployments/1
       */
      readonly url: string
      /**
       * @description Unique identifier of the deployment
       * @example 42
       */
      readonly id: number
      /** @example MDEwOkRlcGxveW1lbnQx */
      readonly node_id: string
      /** @example a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d */
      readonly sha: string
      /**
       * @description The ref to deploy. This can be a branch, tag, or sha.
       * @example topic-branch
       */
      readonly ref: string
      /**
       * @description Parameter to specify a task to execute
       * @example deploy
       */
      readonly task: string
      readonly payload: { readonly [key: string]: unknown } | string
      /** @example staging */
      readonly original_environment?: string
      /**
       * @description Name for the target deployment environment.
       * @example production
       */
      readonly environment: string
      /** @example Deploy request from hubot */
      readonly description: string | null
      readonly creator: components['schemas']['nullable-simple-user']
      /**
       * Format: date-time
       * @example 2012-07-20T01:19:13Z
       */
      readonly created_at: string
      /**
       * Format: date-time
       * @example 2012-07-20T01:19:13Z
       */
      readonly updated_at: string
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/example/deployments/1/statuses
       */
      readonly statuses_url: string
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/example
       */
      readonly repository_url: string
      /**
       * @description Specifies if the given environment is will no longer exist at some point in the future. Default: false.
       * @example true
       */
      readonly transient_environment?: boolean
      /**
       * @description Specifies if the given environment is one that end-users directly interact with. Default: false.
       * @example true
       */
      readonly production_environment?: boolean
      readonly performed_via_github_app?: components['schemas']['nullable-integration']
    }
    /**
     * Actions Secret
     * @description Set secrets for GitHub Actions.
     */
    readonly 'actions-secret': {
      /**
       * @description The name of the secret.
       * @example SECRET_TOKEN
       */
      readonly name: string
      /** Format: date-time */
      readonly created_at: string
      /** Format: date-time */
      readonly updated_at: string
    }
    /**
     * Workflow
     * @description A GitHub Actions workflow
     */
    readonly workflow: {
      /** @example 5 */
      readonly id: number
      /** @example MDg6V29ya2Zsb3cxMg== */
      readonly node_id: string
      /** @example CI */
      readonly name: string
      /** @example ruby.yaml */
      readonly path: string
      /**
       * @example active
       * @enum {string}
       */
      readonly state: 'active' | 'deleted' | 'disabled_fork' | 'disabled_inactivity' | 'disabled_manually'
      /**
       * Format: date-time
       * @example 2019-12-06T14:20:20.000Z
       */
      readonly created_at: string
      /**
       * Format: date-time
       * @example 2019-12-06T14:20:20.000Z
       */
      readonly updated_at: string
      /** @example https://api.github.com/repos/actions/setup-ruby/workflows/5 */
      readonly url: string
      /** @example https://github.com/actions/setup-ruby/blob/master/.github/workflows/ruby.yaml */
      readonly html_url: string
      /** @example https://github.com/actions/setup-ruby/workflows/CI/badge.svg */
      readonly badge_url: string
      /**
       * Format: date-time
       * @example 2019-12-06T14:20:20.000Z
       */
      readonly deleted_at?: string
    }
    /**
     * Autolink reference
     * @description An autolink reference.
     */
    readonly autolink: {
      /** @example 3 */
      readonly id: number
      /**
       * @description The prefix of a key that is linkified.
       * @example TICKET-
       */
      readonly key_prefix: string
      /**
       * @description A template for the target URL that is generated if a key was found.
       * @example https://example.com/TICKET?query=<num>
       */
      readonly url_template: string
    }
    /**
     * Protected Branch Required Status Check
     * @description Protected Branch Required Status Check
     */
    readonly 'protected-branch-required-status-check': {
      readonly url?: string
      readonly enforcement_level?: string
      readonly contexts: readonly string[]
      readonly checks: readonly {
        readonly context: string
        readonly app_id: number | null
      }[]
      readonly contexts_url?: string
      readonly strict?: boolean
    }
    /**
     * Protected Branch Admin Enforced
     * @description Protected Branch Admin Enforced
     */
    readonly 'protected-branch-admin-enforced': {
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/Hello-World/branches/master/protection/enforce_admins
       */
      readonly url: string
      /** @example true */
      readonly enabled: boolean
    }
    /**
     * Protected Branch Pull Request Review
     * @description Protected Branch Pull Request Review
     */
    readonly 'protected-branch-pull-request-review': {
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions
       */
      readonly url?: string
      readonly dismissal_restrictions?: {
        /** @description The list of users with review dismissal access. */
        readonly users?: readonly components['schemas']['simple-user'][]
        /** @description The list of teams with review dismissal access. */
        readonly teams?: readonly components['schemas']['team'][]
        /** @description The list of apps with review dismissal access. */
        readonly apps?: readonly components['schemas']['integration'][]
        /** @example "https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions" */
        readonly url?: string
        /** @example "https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/users" */
        readonly users_url?: string
        /** @example "https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/teams" */
        readonly teams_url?: string
      }
      /** @description Allow specific users, teams, or apps to bypass pull request requirements. */
      readonly bypass_pull_request_allowances?: {
        /** @description The list of users allowed to bypass pull request requirements. */
        readonly users?: readonly components['schemas']['simple-user'][]
        /** @description The list of teams allowed to bypass pull request requirements. */
        readonly teams?: readonly components['schemas']['team'][]
        /** @description The list of apps allowed to bypass pull request requirements. */
        readonly apps?: readonly components['schemas']['integration'][]
      }
      /** @example true */
      readonly dismiss_stale_reviews: boolean
      /** @example true */
      readonly require_code_owner_reviews: boolean
      /** @example 2 */
      readonly required_approving_review_count?: number
    }
    /**
     * Branch Restriction Policy
     * @description Branch Restriction Policy
     */
    readonly 'branch-restriction-policy': {
      /** Format: uri */
      readonly url: string
      /** Format: uri */
      readonly users_url: string
      /** Format: uri */
      readonly teams_url: string
      /** Format: uri */
      readonly apps_url: string
      readonly users: readonly {
        readonly login?: string
        readonly id?: number
        readonly node_id?: string
        readonly avatar_url?: string
        readonly gravatar_id?: string
        readonly url?: string
        readonly html_url?: string
        readonly followers_url?: string
        readonly following_url?: string
        readonly gists_url?: string
        readonly starred_url?: string
        readonly subscriptions_url?: string
        readonly organizations_url?: string
        readonly repos_url?: string
        readonly events_url?: string
        readonly received_events_url?: string
        readonly type?: string
        readonly site_admin?: boolean
      }[]
      readonly teams: readonly {
        readonly id?: number
        readonly node_id?: string
        readonly url?: string
        readonly html_url?: string
        readonly name?: string
        readonly slug?: string
        readonly description?: string | null
        readonly privacy?: string
        readonly permission?: string
        readonly members_url?: string
        readonly repositories_url?: string
        readonly parent?: string | null
      }[]
      readonly apps: readonly {
        readonly id?: number
        readonly slug?: string
        readonly node_id?: string
        readonly owner?: {
          readonly login?: string
          readonly id?: number
          readonly node_id?: string
          readonly url?: string
          readonly repos_url?: string
          readonly events_url?: string
          readonly hooks_url?: string
          readonly issues_url?: string
          readonly members_url?: string
          readonly public_members_url?: string
          readonly avatar_url?: string
          readonly description?: string
          /** @example "" */
          readonly gravatar_id?: string
          /** @example "https://github.com/testorg-ea8ec76d71c3af4b" */
          readonly html_url?: string
          /** @example "https://api.github.com/users/testorg-ea8ec76d71c3af4b/followers" */
          readonly followers_url?: string
          /** @example "https://api.github.com/users/testorg-ea8ec76d71c3af4b/following{/other_user}" */
          readonly following_url?: string
          /** @example "https://api.github.com/users/testorg-ea8ec76d71c3af4b/gists{/gist_id}" */
          readonly gists_url?: string
          /** @example "https://api.github.com/users/testorg-ea8ec76d71c3af4b/starred{/owner}{/repo}" */
          readonly starred_url?: string
          /** @example "https://api.github.com/users/testorg-ea8ec76d71c3af4b/subscriptions" */
          readonly subscriptions_url?: string
          /** @example "https://api.github.com/users/testorg-ea8ec76d71c3af4b/orgs" */
          readonly organizations_url?: string
          /** @example "https://api.github.com/users/testorg-ea8ec76d71c3af4b/received_events" */
          readonly received_events_url?: string
          /** @example "Organization" */
          readonly type?: string
          /** @example false */
          readonly site_admin?: boolean
        }
        readonly name?: string
        readonly description?: string
        readonly external_url?: string
        readonly html_url?: string
        readonly created_at?: string
        readonly updated_at?: string
        readonly permissions?: {
          readonly metadata?: string
          readonly contents?: string
          readonly issues?: string
          readonly single_file?: string
        }
        readonly events?: readonly string[]
      }[]
    }
    /**
     * Branch Protection
     * @description Branch Protection
     */
    readonly 'branch-protection': {
      readonly url?: string
      readonly enabled?: boolean
      readonly required_status_checks?: components['schemas']['protected-branch-required-status-check']
      readonly enforce_admins?: components['schemas']['protected-branch-admin-enforced']
      readonly required_pull_request_reviews?: components['schemas']['protected-branch-pull-request-review']
      readonly restrictions?: components['schemas']['branch-restriction-policy']
      readonly required_linear_history?: {
        readonly enabled?: boolean
      }
      readonly allow_force_pushes?: {
        readonly enabled?: boolean
      }
      readonly allow_deletions?: {
        readonly enabled?: boolean
      }
      readonly block_creations?: {
        readonly enabled?: boolean
      }
      readonly required_conversation_resolution?: {
        readonly enabled?: boolean
      }
      /** @example "branch/with/protection" */
      readonly name?: string
      /** @example "https://api.github.com/repos/owner-79e94e2d36b3fd06a32bb213/AAA_Public_Repo/branches/branch/with/protection/protection" */
      readonly protection_url?: string
      readonly required_signatures?: {
        /**
         * Format: uri
         * @example https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures
         */
        readonly url: string
        /** @example true */
        readonly enabled: boolean
      }
    }
    /**
     * Short Branch
     * @description Short Branch
     */
    readonly 'short-branch': {
      readonly name: string
      readonly commit: {
        readonly sha: string
        /** Format: uri */
        readonly url: string
      }
      readonly protected: boolean
      readonly protection?: components['schemas']['branch-protection']
      /** Format: uri */
      readonly protection_url?: string
    }
    /**
     * Git User
     * @description Metaproperties for Git author/committer information.
     */
    readonly 'nullable-git-user': {
      /** @example "Chris Wanstrath" */
      readonly name?: string
      /** @example "chris@ozmm.org" */
      readonly email?: string
      /** @example "2007-10-29T02:42:39.000-07:00" */
      readonly date?: string
    } | null
    /** Verification */
    readonly verification: {
      readonly verified: boolean
      readonly reason: string
      readonly payload: string | null
      readonly signature: string | null
    }
    /**
     * Diff Entry
     * @description Diff Entry
     */
    readonly 'diff-entry': {
      /** @example bbcd538c8e72b8c175046e27cc8f907076331401 */
      readonly sha: string
      /** @example file1.txt */
      readonly filename: string
      /**
       * @example added
       * @enum {string}
       */
      readonly status: 'added' | 'removed' | 'modified' | 'renamed' | 'copied' | 'changed' | 'unchanged'
      /** @example 103 */
      readonly additions: number
      /** @example 21 */
      readonly deletions: number
      /** @example 124 */
      readonly changes: number
      /**
       * Format: uri
       * @example https://github.com/octocat/Hello-World/blob/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt
       */
      readonly blob_url: string
      /**
       * Format: uri
       * @example https://github.com/octocat/Hello-World/raw/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt
       */
      readonly raw_url: string
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/Hello-World/contents/file1.txt?ref=6dcb09b5b57875f334f61aebed695e2e4193db5e
       */
      readonly contents_url: string
      /** @example @@ -132,7 +132,7 @@ module Test @@ -1000,7 +1000,7 @@ module Test */
      readonly patch?: string
      /** @example file.txt */
      readonly previous_filename?: string
    }
    /**
     * Commit
     * @description Commit
     */
    readonly commit: {
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e
       */
      readonly url: string
      /** @example 6dcb09b5b57875f334f61aebed695e2e4193db5e */
      readonly sha: string
      /** @example MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ== */
      readonly node_id: string
      /**
       * Format: uri
       * @example https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e
       */
      readonly html_url: string
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments
       */
      readonly comments_url: string
      readonly commit: {
        /**
         * Format: uri
         * @example https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e
         */
        readonly url: string
        readonly author: components['schemas']['nullable-git-user']
        readonly committer: components['schemas']['nullable-git-user']
        /** @example Fix all the bugs */
        readonly message: string
        /** @example 0 */
        readonly comment_count: number
        readonly tree: {
          /** @example 827efc6d56897b048c772eb4087f854f46256132 */
          readonly sha: string
          /**
           * Format: uri
           * @example https://api.github.com/repos/octocat/Hello-World/tree/827efc6d56897b048c772eb4087f854f46256132
           */
          readonly url: string
        }
        readonly verification?: components['schemas']['verification']
      }
      readonly author: components['schemas']['nullable-simple-user']
      readonly committer: components['schemas']['nullable-simple-user']
      readonly parents: readonly {
        /** @example 7638417db6d59f3c431d3e1f261cc637155684cd */
        readonly sha: string
        /**
         * Format: uri
         * @example https://api.github.com/repos/octocat/Hello-World/commits/7638417db6d59f3c431d3e1f261cc637155684cd
         */
        readonly url: string
        /**
         * Format: uri
         * @example https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd
         */
        readonly html_url?: string
      }[]
      readonly stats?: {
        readonly additions?: number
        readonly deletions?: number
        readonly total?: number
      }
      readonly files?: readonly components['schemas']['diff-entry'][]
    }
    /**
     * Branch With Protection
     * @description Branch With Protection
     */
    readonly 'branch-with-protection': {
      readonly name: string
      readonly commit: components['schemas']['commit']
      readonly _links: {
        readonly html: string
        /** Format: uri */
        readonly self: string
      }
      readonly protected: boolean
      readonly protection: components['schemas']['branch-protection']
      /** Format: uri */
      readonly protection_url: string
      /** @example "mas*" */
      readonly pattern?: string
      /** @example 1 */
      readonly required_approving_review_count?: number
    }
    /**
     * Status Check Policy
     * @description Status Check Policy
     */
    readonly 'status-check-policy': {
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks
       */
      readonly url: string
      /** @example true */
      readonly strict: boolean
      /**
       * @example [
       *   "continuous-integration/travis-ci"
       * ]
       */
      readonly contexts: readonly string[]
      readonly checks: readonly {
        /** @example continuous-integration/travis-ci */
        readonly context: string
        readonly app_id: number | null
      }[]
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks/contexts
       */
      readonly contexts_url: string
    }
    /**
     * Protected Branch
     * @description Branch protections protect branches
     */
    readonly 'protected-branch': {
      /** Format: uri */
      readonly url: string
      readonly required_status_checks?: components['schemas']['status-check-policy']
      readonly required_pull_request_reviews?: {
        /** Format: uri */
        readonly url: string
        readonly dismiss_stale_reviews?: boolean
        readonly require_code_owner_reviews?: boolean
        readonly required_approving_review_count?: number
        readonly dismissal_restrictions?: {
          /** Format: uri */
          readonly url: string
          /** Format: uri */
          readonly users_url: string
          /** Format: uri */
          readonly teams_url: string
          readonly users: readonly components['schemas']['simple-user'][]
          readonly teams: readonly components['schemas']['team'][]
          readonly apps?: readonly components['schemas']['integration'][]
        }
        readonly bypass_pull_request_allowances?: {
          readonly users: readonly components['schemas']['simple-user'][]
          readonly teams: readonly components['schemas']['team'][]
          readonly apps?: readonly components['schemas']['integration'][]
        }
      }
      readonly required_signatures?: {
        /**
         * Format: uri
         * @example https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures
         */
        readonly url: string
        /** @example true */
        readonly enabled: boolean
      }
      readonly enforce_admins?: {
        /** Format: uri */
        readonly url: string
        readonly enabled: boolean
      }
      readonly required_linear_history?: {
        readonly enabled: boolean
      }
      readonly allow_force_pushes?: {
        readonly enabled: boolean
      }
      readonly allow_deletions?: {
        readonly enabled: boolean
      }
      readonly restrictions?: components['schemas']['branch-restriction-policy']
      readonly required_conversation_resolution?: {
        readonly enabled?: boolean
      }
      readonly block_creations?: {
        readonly enabled: boolean
      }
    }
    /**
     * Deployment
     * @description A deployment created as the result of an Actions check run from a workflow that references an environment
     */
    readonly 'deployment-simple': {
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/example/deployments/1
       */
      readonly url: string
      /**
       * @description Unique identifier of the deployment
       * @example 42
       */
      readonly id: number
      /** @example MDEwOkRlcGxveW1lbnQx */
      readonly node_id: string
      /**
       * @description Parameter to specify a task to execute
       * @example deploy
       */
      readonly task: string
      /** @example staging */
      readonly original_environment?: string
      /**
       * @description Name for the target deployment environment.
       * @example production
       */
      readonly environment: string
      /** @example Deploy request from hubot */
      readonly description: string | null
      /**
       * Format: date-time
       * @example 2012-07-20T01:19:13Z
       */
      readonly created_at: string
      /**
       * Format: date-time
       * @example 2012-07-20T01:19:13Z
       */
      readonly updated_at: string
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/example/deployments/1/statuses
       */
      readonly statuses_url: string
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/example
       */
      readonly repository_url: string
      /**
       * @description Specifies if the given environment is will no longer exist at some point in the future. Default: false.
       * @example true
       */
      readonly transient_environment?: boolean
      /**
       * @description Specifies if the given environment is one that end-users directly interact with. Default: false.
       * @example true
       */
      readonly production_environment?: boolean
      readonly performed_via_github_app?: components['schemas']['nullable-integration']
    }
    /**
     * CheckRun
     * @description A check performed on the code of a given code change
     */
    readonly 'check-run': {
      /**
       * @description The id of the check.
       * @example 21
       */
      readonly id: number
      /**
       * @description The SHA of the commit that is being checked.
       * @example 009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d
       */
      readonly head_sha: string
      /** @example MDg6Q2hlY2tSdW40 */
      readonly node_id: string
      /** @example 42 */
      readonly external_id: string | null
      /** @example https://api.github.com/repos/github/hello-world/check-runs/4 */
      readonly url: string
      /** @example https://github.com/github/hello-world/runs/4 */
      readonly html_url: string | null
      /** @example https://example.com */
      readonly details_url: string | null
      /**
       * @description The phase of the lifecycle that the check is currently in.
       * @example queued
       * @enum {string}
       */
      readonly status: 'queued' | 'in_progress' | 'completed'
      /**
       * @example neutral
       * @enum {string|null}
       */
      readonly conclusion: ('success' | 'failure' | 'neutral' | 'cancelled' | 'skipped' | 'timed_out' | 'action_required') | null
      /**
       * Format: date-time
       * @example 2018-05-04T01:14:52Z
       */
      readonly started_at: string | null
      /**
       * Format: date-time
       * @example 2018-05-04T01:14:52Z
       */
      readonly completed_at: string | null
      readonly output: {
        readonly title: string | null
        readonly summary: string | null
        readonly text: string | null
        readonly annotations_count: number
        /** Format: uri */
        readonly annotations_url: string
      }
      /**
       * @description The name of the check.
       * @example test-coverage
       */
      readonly name: string
      readonly check_suite: {
        readonly id: number
      } | null
      readonly app: components['schemas']['nullable-integration']
      readonly pull_requests: readonly components['schemas']['pull-request-minimal'][]
      readonly deployment?: components['schemas']['deployment-simple']
    }
    /**
     * Check Annotation
     * @description Check Annotation
     */
    readonly 'check-annotation': {
      /** @example README.md */
      readonly path: string
      /** @example 2 */
      readonly start_line: number
      /** @example 2 */
      readonly end_line: number
      /** @example 5 */
      readonly start_column: number | null
      /** @example 10 */
      readonly end_column: number | null
      /** @example warning */
      readonly annotation_level: string | null
      /** @example Spell Checker */
      readonly title: string | null
      /** @example Check your spelling for 'banaas'. */
      readonly message: string | null
      /** @example Do you mean 'bananas' or 'banana'? */
      readonly raw_details: string | null
      readonly blob_href: string
    }
    /**
     * Simple Commit
     * @description Simple Commit
     */
    readonly 'simple-commit': {
      readonly id: string
      readonly tree_id: string
      readonly message: string
      /** Format: date-time */
      readonly timestamp: string
      readonly author: {
        readonly name: string
        readonly email: string
      } | null
      readonly committer: {
        readonly name: string
        readonly email: string
      } | null
    }
    /**
     * CheckSuite
     * @description A suite of checks performed on the code of a given code change
     */
    readonly 'check-suite': {
      /** @example 5 */
      readonly id: number
      /** @example MDEwOkNoZWNrU3VpdGU1 */
      readonly node_id: string
      /** @example master */
      readonly head_branch: string | null
      /**
       * @description The SHA of the head commit that is being checked.
       * @example 009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d
       */
      readonly head_sha: string
      /**
       * @example completed
       * @enum {string|null}
       */
      readonly status: ('queued' | 'in_progress' | 'completed') | null
      /**
       * @example neutral
       * @enum {string|null}
       */
      readonly conclusion: ('success' | 'failure' | 'neutral' | 'cancelled' | 'skipped' | 'timed_out' | 'action_required') | null
      /** @example https://api.github.com/repos/github/hello-world/check-suites/5 */
      readonly url: string | null
      /** @example 146e867f55c26428e5f9fade55a9bbf5e95a7912 */
      readonly before: string | null
      /** @example d6fde92930d4715a2b49857d24b940956b26d2d3 */
      readonly after: string | null
      readonly pull_requests: readonly components['schemas']['pull-request-minimal'][] | null
      readonly app: components['schemas']['nullable-integration']
      readonly repository: components['schemas']['minimal-repository']
      /** Format: date-time */
      readonly created_at: string | null
      /** Format: date-time */
      readonly updated_at: string | null
      readonly head_commit: components['schemas']['simple-commit']
      readonly latest_check_runs_count: number
      readonly check_runs_url: string
      readonly rerequestable?: boolean
      readonly runs_rerequestable?: boolean
    }
    /**
     * Check Suite Preference
     * @description Check suite configuration preferences for a repository.
     */
    readonly 'check-suite-preference': {
      readonly preferences: {
        readonly auto_trigger_checks?: readonly {
          readonly app_id: number
          readonly setting: boolean
        }[]
      }
      readonly repository: components['schemas']['minimal-repository']
    }
    readonly 'code-scanning-alert-rule-summary': {
      /** @description A unique identifier for the rule used to detect the alert. */
      readonly id?: string | null
      /** @description The name of the rule used to detect the alert. */
      readonly name?: string
      /** @description A set of tags applicable for the rule. */
      readonly tags?: readonly string[] | null
      /**
       * @description The severity of the alert.
       * @enum {string|null}
       */
      readonly severity?: ('none' | 'note' | 'warning' | 'error') | null
      /** @description A short description of the rule used to detect the alert. */
      readonly description?: string
    }
    readonly 'code-scanning-alert-items': {
      readonly number: components['schemas']['alert-number']
      readonly created_at: components['schemas']['alert-created-at']
      readonly updated_at?: components['schemas']['alert-updated-at']
      readonly url: components['schemas']['alert-url']
      readonly html_url: components['schemas']['alert-html-url']
      readonly instances_url: components['schemas']['alert-instances-url']
      readonly state: components['schemas']['code-scanning-alert-state']
      readonly fixed_at?: components['schemas']['alert-fixed-at']
      readonly dismissed_by: components['schemas']['nullable-simple-user']
      readonly dismissed_at: components['schemas']['alert-dismissed-at']
      readonly dismissed_reason: components['schemas']['code-scanning-alert-dismissed-reason']
      readonly dismissed_comment?: components['schemas']['code-scanning-alert-dismissed-comment']
      readonly rule: components['schemas']['code-scanning-alert-rule-summary']
      readonly tool: components['schemas']['code-scanning-analysis-tool']
      readonly most_recent_instance: components['schemas']['code-scanning-alert-instance']
    }
    readonly 'code-scanning-alert': {
      readonly number: components['schemas']['alert-number']
      readonly created_at: components['schemas']['alert-created-at']
      readonly updated_at?: components['schemas']['alert-updated-at']
      readonly url: components['schemas']['alert-url']
      readonly html_url: components['schemas']['alert-html-url']
      readonly instances_url: components['schemas']['alert-instances-url']
      readonly state: components['schemas']['code-scanning-alert-state']
      readonly fixed_at?: components['schemas']['alert-fixed-at']
      readonly dismissed_by: components['schemas']['nullable-simple-user']
      readonly dismissed_at: components['schemas']['alert-dismissed-at']
      readonly dismissed_reason: components['schemas']['code-scanning-alert-dismissed-reason']
      readonly dismissed_comment?: components['schemas']['code-scanning-alert-dismissed-comment']
      readonly rule: components['schemas']['code-scanning-alert-rule']
      readonly tool: components['schemas']['code-scanning-analysis-tool']
      readonly most_recent_instance: components['schemas']['code-scanning-alert-instance']
    }
    /**
     * @description Sets the state of the code scanning alert. You must provide `dismissed_reason` when you set the state to `dismissed`.
     * @enum {string}
     */
    readonly 'code-scanning-alert-set-state': 'open' | 'dismissed'
    /**
     * @description An identifier for the upload.
     * @example 6c81cd8e-b078-4ac3-a3be-1dad7dbd0b53
     */
    readonly 'code-scanning-analysis-sarif-id': string
    /** @description The SHA of the commit to which the analysis you are uploading relates. */
    readonly 'code-scanning-analysis-commit-sha': string
    /** @description Identifies the variable values associated with the environment in which this analysis was performed. */
    readonly 'code-scanning-analysis-environment': string
    /**
     * Format: date-time
     * @description The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    readonly 'code-scanning-analysis-created-at': string
    /**
     * Format: uri
     * @description The REST API URL of the analysis resource.
     */
    readonly 'code-scanning-analysis-url': string
    readonly 'code-scanning-analysis': {
      readonly ref: components['schemas']['code-scanning-ref']
      readonly commit_sha: components['schemas']['code-scanning-analysis-commit-sha']
      readonly analysis_key: components['schemas']['code-scanning-analysis-analysis-key']
      readonly environment: components['schemas']['code-scanning-analysis-environment']
      readonly category?: components['schemas']['code-scanning-analysis-category']
      /** @example error reading field xyz */
      readonly error: string
      readonly created_at: components['schemas']['code-scanning-analysis-created-at']
      /** @description The total number of results in the analysis. */
      readonly results_count: number
      /** @description The total number of rules used in the analysis. */
      readonly rules_count: number
      /** @description Unique identifier for this analysis. */
      readonly id: number
      readonly url: components['schemas']['code-scanning-analysis-url']
      readonly sarif_id: components['schemas']['code-scanning-analysis-sarif-id']
      readonly tool: components['schemas']['code-scanning-analysis-tool']
      readonly deletable: boolean
      /**
       * @description Warning generated when processing the analysis
       * @example 123 results were ignored
       */
      readonly warning: string
    }
    /**
     * Analysis deletion
     * @description Successful deletion of a code scanning analysis
     */
    readonly 'code-scanning-analysis-deletion': {
      /**
       * Format: uri
       * @description Next deletable analysis in chain, without last analysis deletion confirmation
       */
      readonly next_analysis_url: string | null
      /**
       * Format: uri
       * @description Next deletable analysis in chain, with last analysis deletion confirmation
       */
      readonly confirm_delete_url: string | null
    }
    /** @description A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see "[SARIF support for code scanning](https://docs.github.com/enterprise-server@3.6/code-security/secure-coding/sarif-support-for-code-scanning)." */
    readonly 'code-scanning-analysis-sarif-file': string
    readonly 'code-scanning-sarifs-receipt': {
      readonly id?: components['schemas']['code-scanning-analysis-sarif-id']
      /**
       * Format: uri
       * @description The REST API URL for checking the status of the upload.
       */
      readonly url?: string
    }
    readonly 'code-scanning-sarifs-status': {
      /**
       * @description `pending` files have not yet been processed, while `complete` means results from the SARIF have been stored. `failed` files have either not been processed at all, or could only be partially processed.
       * @enum {string}
       */
      readonly processing_status?: 'pending' | 'complete' | 'failed'
      /**
       * Format: uri
       * @description The REST API URL for getting the analyses associated with the upload.
       */
      readonly analyses_url?: string | null
      /** @description Any errors that ocurred during processing of the delivery. */
      readonly errors?: readonly string[] | null
    }
    /**
     * CODEOWNERS errors
     * @description A list of errors found in a repo's CODEOWNERS file
     */
    readonly 'codeowners-errors': {
      readonly errors: readonly {
        /**
         * @description The line number where this errors occurs.
         * @example 7
         */
        readonly line: number
        /**
         * @description The column number where this errors occurs.
         * @example 3
         */
        readonly column: number
        /**
         * @description The contents of the line where the error occurs.
         * @example * user
         */
        readonly source?: string
        /**
         * @description The type of error.
         * @example Invalid owner
         */
        readonly kind: string
        /**
         * @description Suggested action to fix the error. This will usually be `null`, but is provided for some common errors.
         * @example The pattern `/` will never match anything, did you mean `*` instead?
         */
        readonly suggestion?: string | null
        /**
         * @description A human-readable description of the error, combining information from multiple fields, laid out for display in a monospaced typeface (for example, a command-line setting).
         * @example Invalid owner on line 7:
         *
         *   * user
         *     ^
         */
        readonly message: string
        /**
         * @description The path of the file where the error occured.
         * @example .github/CODEOWNERS
         */
        readonly path: string
      }[]
    }
    /**
     * Collaborator
     * @description Collaborator
     */
    readonly collaborator: {
      /** @example octocat */
      readonly login: string
      /** @example 1 */
      readonly id: number
      readonly email?: string | null
      readonly name?: string | null
      /** @example MDQ6VXNlcjE= */
      readonly node_id: string
      /**
       * Format: uri
       * @example https://github.com/images/error/octocat_happy.gif
       */
      readonly avatar_url: string
      /** @example 41d064eb2195891e12d0413f63227ea7 */
      readonly gravatar_id: string | null
      /**
       * Format: uri
       * @example https://api.github.com/users/octocat
       */
      readonly url: string
      /**
       * Format: uri
       * @example https://github.com/octocat
       */
      readonly html_url: string
      /**
       * Format: uri
       * @example https://api.github.com/users/octocat/followers
       */
      readonly followers_url: string
      /** @example https://api.github.com/users/octocat/following{/other_user} */
      readonly following_url: string
      /** @example https://api.github.com/users/octocat/gists{/gist_id} */
      readonly gists_url: string
      /** @example https://api.github.com/users/octocat/starred{/owner}{/repo} */
      readonly starred_url: string
      /**
       * Format: uri
       * @example https://api.github.com/users/octocat/subscriptions
       */
      readonly subscriptions_url: string
      /**
       * Format: uri
       * @example https://api.github.com/users/octocat/orgs
       */
      readonly organizations_url: string
      /**
       * Format: uri
       * @example https://api.github.com/users/octocat/repos
       */
      readonly repos_url: string
      /** @example https://api.github.com/users/octocat/events{/privacy} */
      readonly events_url: string
      /**
       * Format: uri
       * @example https://api.github.com/users/octocat/received_events
       */
      readonly received_events_url: string
      /** @example User */
      readonly type: string
      readonly site_admin: boolean
      readonly permissions?: {
        readonly pull: boolean
        readonly triage?: boolean
        readonly push: boolean
        readonly maintain?: boolean
        readonly admin: boolean
      }
      /** @example admin */
      readonly role_name?: string
    }
    /**
     * Repository Invitation
     * @description Repository invitations let you manage who you collaborate with.
     */
    readonly 'repository-invitation': {
      /**
       * @description Unique identifier of the repository invitation.
       * @example 42
       */
      readonly id: number
      readonly repository: components['schemas']['minimal-repository']
      readonly invitee: components['schemas']['nullable-simple-user']
      readonly inviter: components['schemas']['nullable-simple-user']
      /**
       * @description The permission associated with the invitation.
       * @example read
       * @enum {string}
       */
      readonly permissions: 'read' | 'write' | 'admin' | 'triage' | 'maintain'
      /**
       * Format: date-time
       * @example 2016-06-13T14:52:50-05:00
       */
      readonly created_at: string
      /** @description Whether or not the invitation has expired */
      readonly expired?: boolean
      /**
       * @description URL for the repository invitation
       * @example https://api.github.com/user/repository-invitations/1
       */
      readonly url: string
      /** @example https://github.com/octocat/Hello-World/invitations */
      readonly html_url: string
      readonly node_id: string
    }
    /**
     * Collaborator
     * @description Collaborator
     */
    readonly 'nullable-collaborator': {
      /** @example octocat */
      readonly login: string
      /** @example 1 */
      readonly id: number
      readonly email?: string | null
      readonly name?: string | null
      /** @example MDQ6VXNlcjE= */
      readonly node_id: string
      /**
       * Format: uri
       * @example https://github.com/images/error/octocat_happy.gif
       */
      readonly avatar_url: string
      /** @example 41d064eb2195891e12d0413f63227ea7 */
      readonly gravatar_id: string | null
      /**
       * Format: uri
       * @example https://api.github.com/users/octocat
       */
      readonly url: string
      /**
       * Format: uri
       * @example https://github.com/octocat
       */
      readonly html_url: string
      /**
       * Format: uri
       * @example https://api.github.com/users/octocat/followers
       */
      readonly followers_url: string
      /** @example https://api.github.com/users/octocat/following{/other_user} */
      readonly following_url: string
      /** @example https://api.github.com/users/octocat/gists{/gist_id} */
      readonly gists_url: string
      /** @example https://api.github.com/users/octocat/starred{/owner}{/repo} */
      readonly starred_url: string
      /**
       * Format: uri
       * @example https://api.github.com/users/octocat/subscriptions
       */
      readonly subscriptions_url: string
      /**
       * Format: uri
       * @example https://api.github.com/users/octocat/orgs
       */
      readonly organizations_url: string
      /**
       * Format: uri
       * @example https://api.github.com/users/octocat/repos
       */
      readonly repos_url: string
      /** @example https://api.github.com/users/octocat/events{/privacy} */
      readonly events_url: string
      /**
       * Format: uri
       * @example https://api.github.com/users/octocat/received_events
       */
      readonly received_events_url: string
      /** @example User */
      readonly type: string
      readonly site_admin: boolean
      readonly permissions?: {
        readonly pull: boolean
        readonly triage?: boolean
        readonly push: boolean
        readonly maintain?: boolean
        readonly admin: boolean
      }
      /** @example admin */
      readonly role_name?: string
    } | null
    /**
     * Repository Collaborator Permission
     * @description Repository Collaborator Permission
     */
    readonly 'repository-collaborator-permission': {
      readonly permission: string
      /** @example admin */
      readonly role_name: string
      readonly user: components['schemas']['nullable-collaborator']
    }
    /**
     * Commit Comment
     * @description Commit Comment
     */
    readonly 'commit-comment': {
      /** Format: uri */
      readonly html_url: string
      /** Format: uri */
      readonly url: string
      readonly id: number
      readonly node_id: string
      readonly body: string
      readonly path: string | null
      readonly position: number | null
      readonly line: number | null
      readonly commit_id: string
      readonly user: components['schemas']['nullable-simple-user']
      /** Format: date-time */
      readonly created_at: string
      /** Format: date-time */
      readonly updated_at: string
      readonly author_association: components['schemas']['author-association']
      readonly reactions?: components['schemas']['reaction-rollup']
    }
    /**
     * Branch Short
     * @description Branch Short
     */
    readonly 'branch-short': {
      readonly name: string
      readonly commit: {
        readonly sha: string
        readonly url: string
      }
      readonly protected: boolean
    }
    /**
     * Link
     * @description Hypermedia Link
     */
    readonly link: {
      readonly href: string
    }
    /**
     * Auto merge
     * @description The status of auto merging a pull request.
     */
    readonly 'auto-merge': {
      readonly enabled_by: components['schemas']['simple-user']
      /**
       * @description The merge method to use.
       * @enum {string}
       */
      readonly merge_method: 'merge' | 'squash' | 'rebase'
      /** @description Title for the merge commit message. */
      readonly commit_title: string
      /** @description Commit message for the merge commit. */
      readonly commit_message: string
    } | null
    /**
     * Pull Request Simple
     * @description Pull Request Simple
     */
    readonly 'pull-request-simple': {
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/Hello-World/pulls/1347
       */
      readonly url: string
      /** @example 1 */
      readonly id: number
      /** @example MDExOlB1bGxSZXF1ZXN0MQ== */
      readonly node_id: string
      /**
       * Format: uri
       * @example https://github.com/octocat/Hello-World/pull/1347
       */
      readonly html_url: string
      /**
       * Format: uri
       * @example https://github.com/octocat/Hello-World/pull/1347.diff
       */
      readonly diff_url: string
      /**
       * Format: uri
       * @example https://github.com/octocat/Hello-World/pull/1347.patch
       */
      readonly patch_url: string
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/Hello-World/issues/1347
       */
      readonly issue_url: string
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits
       */
      readonly commits_url: string
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments
       */
      readonly review_comments_url: string
      /** @example https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number} */
      readonly review_comment_url: string
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/Hello-World/issues/1347/comments
       */
      readonly comments_url: string
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e
       */
      readonly statuses_url: string
      /** @example 1347 */
      readonly number: number
      /** @example open */
      readonly state: string
      /** @example true */
      readonly locked: boolean
      /** @example new-feature */
      readonly title: string
      readonly user: components['schemas']['nullable-simple-user']
      /** @example Please pull these awesome changes */
      readonly body: string | null
      readonly labels: readonly {
        /** Format: int64 */
        readonly id: number
        readonly node_id: string
        readonly url: string
        readonly name: string
        readonly description: string
        readonly color: string
        readonly default: boolean
      }[]
      readonly milestone: components['schemas']['nullable-milestone']
      /** @example too heated */
      readonly active_lock_reason?: string | null
      /**
       * Format: date-time
       * @example 2011-01-26T19:01:12Z
       */
      readonly created_at: string
      /**
       * Format: date-time
       * @example 2011-01-26T19:01:12Z
       */
      readonly updated_at: string
      /**
       * Format: date-time
       * @example 2011-01-26T19:01:12Z
       */
      readonly closed_at: string | null
      /**
       * Format: date-time
       * @example 2011-01-26T19:01:12Z
       */
      readonly merged_at: string | null
      /** @example e5bd3914e2e596debea16f433f57875b5b90bcd6 */
      readonly merge_commit_sha: string | null
      readonly assignee: components['schemas']['nullable-simple-user']
      readonly assignees?: readonly components['schemas']['simple-user'][] | null
      readonly requested_reviewers?: readonly components['schemas']['simple-user'][] | null
      readonly requested_teams?: readonly components['schemas']['team'][] | null
      readonly head: {
        readonly label: string
        readonly ref: string
        readonly repo: components['schemas']['repository']
        readonly sha: string
        readonly user: components['schemas']['nullable-simple-user']
      }
      readonly base: {
        readonly label: string
        readonly ref: string
        readonly repo: components['schemas']['repository']
        readonly sha: string
        readonly user: components['schemas']['nullable-simple-user']
      }
      readonly _links: {
        readonly comments: components['schemas']['link']
        readonly commits: components['schemas']['link']
        readonly statuses: components['schemas']['link']
        readonly html: components['schemas']['link']
        readonly issue: components['schemas']['link']
        readonly review_comments: components['schemas']['link']
        readonly review_comment: components['schemas']['link']
        readonly self: components['schemas']['link']
      }
      readonly author_association: components['schemas']['author-association']
      readonly auto_merge: components['schemas']['auto-merge']
      /**
       * @description Indicates whether or not the pull request is a draft.
       * @example false
       */
      readonly draft?: boolean
    }
    /** Simple Commit Status */
    readonly 'simple-commit-status': {
      readonly description: string | null
      readonly id: number
      readonly node_id: string
      readonly state: string
      readonly context: string
      /** Format: uri */
      readonly target_url: string | null
      readonly required?: boolean | null
      /** Format: uri */
      readonly avatar_url: string | null
      /** Format: uri */
      readonly url: string
      /** Format: date-time */
      readonly created_at: string
      /** Format: date-time */
      readonly updated_at: string
    }
    /**
     * Combined Commit Status
     * @description Combined Commit Status
     */
    readonly 'combined-commit-status': {
      readonly state: string
      readonly statuses: readonly components['schemas']['simple-commit-status'][]
      readonly sha: string
      readonly total_count: number
      readonly repository: components['schemas']['minimal-repository']
      /** Format: uri */
      readonly commit_url: string
      /** Format: uri */
      readonly url: string
    }
    /**
     * Status
     * @description The status of a commit.
     */
    readonly status: {
      readonly url: string
      readonly avatar_url: string | null
      readonly id: number
      readonly node_id: string
      readonly state: string
      readonly description: string | null
      readonly target_url: string | null
      readonly context: string
      readonly created_at: string
      readonly updated_at: string
      readonly creator: components['schemas']['nullable-simple-user']
    }
    /**
     * Commit Comparison
     * @description Commit Comparison
     */
    readonly 'commit-comparison': {
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/Hello-World/compare/master...topic
       */
      readonly url: string
      /**
       * Format: uri
       * @example https://github.com/octocat/Hello-World/compare/master...topic
       */
      readonly html_url: string
      /**
       * Format: uri
       * @example https://github.com/octocat/Hello-World/compare/octocat:bbcd538c8e72b8c175046e27cc8f907076331401...octocat:0328041d1152db8ae77652d1618a02e57f745f17
       */
      readonly permalink_url: string
      /**
       * Format: uri
       * @example https://github.com/octocat/Hello-World/compare/master...topic.diff
       */
      readonly diff_url: string
      /**
       * Format: uri
       * @example https://github.com/octocat/Hello-World/compare/master...topic.patch
       */
      readonly patch_url: string
      readonly base_commit: components['schemas']['commit']
      readonly merge_base_commit: components['schemas']['commit']
      /**
       * @example ahead
       * @enum {string}
       */
      readonly status: 'diverged' | 'ahead' | 'behind' | 'identical'
      /** @example 4 */
      readonly ahead_by: number
      /** @example 5 */
      readonly behind_by: number
      /** @example 6 */
      readonly total_commits: number
      readonly commits: readonly components['schemas']['commit'][]
      readonly files?: readonly components['schemas']['diff-entry'][]
    }
    /**
     * Content Tree
     * @description Content Tree
     */
    readonly 'content-tree': {
      readonly type: string
      readonly size: number
      readonly name: string
      readonly path: string
      readonly sha: string
      /** Format: uri */
      readonly url: string
      /** Format: uri */
      readonly git_url: string | null
      /** Format: uri */
      readonly html_url: string | null
      /** Format: uri */
      readonly download_url: string | null
      readonly entries?: readonly {
        readonly type: string
        readonly size: number
        readonly name: string
        readonly path: string
        readonly content?: string
        readonly sha: string
        /** Format: uri */
        readonly url: string
        /** Format: uri */
        readonly git_url: string | null
        /** Format: uri */
        readonly html_url: string | null
        /** Format: uri */
        readonly download_url: string | null
        readonly _links: {
          /** Format: uri */
          readonly git: string | null
          /** Format: uri */
          readonly html: string | null
          /** Format: uri */
          readonly self: string
        }
      }[]
      readonly _links: {
        /** Format: uri */
        readonly git: string | null
        /** Format: uri */
        readonly html: string | null
        /** Format: uri */
        readonly self: string
      }
    } & {
      content: unknown
      encoding: unknown
    }
    /**
     * Content Directory
     * @description A list of directory items
     */
    readonly 'content-directory': readonly {
      /** @enum {string} */
      readonly type: 'dir' | 'file' | 'submodule' | 'symlink'
      readonly size: number
      readonly name: string
      readonly path: string
      readonly content?: string
      readonly sha: string
      /** Format: uri */
      readonly url: string
      /** Format: uri */
      readonly git_url: string | null
      /** Format: uri */
      readonly html_url: string | null
      /** Format: uri */
      readonly download_url: string | null
      readonly _links: {
        /** Format: uri */
        readonly git: string | null
        /** Format: uri */
        readonly html: string | null
        /** Format: uri */
        readonly self: string
      }
    }[]
    /**
     * Content File
     * @description Content File
     */
    readonly 'content-file': {
      /** @enum {string} */
      readonly type: 'file'
      readonly encoding: string
      readonly size: number
      readonly name: string
      readonly path: string
      readonly content: string
      readonly sha: string
      /** Format: uri */
      readonly url: string
      /** Format: uri */
      readonly git_url: string | null
      /** Format: uri */
      readonly html_url: string | null
      /** Format: uri */
      readonly download_url: string | null
      readonly _links: {
        /** Format: uri */
        readonly git: string | null
        /** Format: uri */
        readonly html: string | null
        /** Format: uri */
        readonly self: string
      }
      /** @example "actual/actual.md" */
      readonly target?: string
      /** @example "git://example.com/defunkt/dotjs.git" */
      readonly submodule_git_url?: string
    }
    /**
     * Symlink Content
     * @description An object describing a symlink
     */
    readonly 'content-symlink': {
      /** @enum {string} */
      readonly type: 'symlink'
      readonly target: string
      readonly size: number
      readonly name: string
      readonly path: string
      readonly sha: string
      /** Format: uri */
      readonly url: string
      /** Format: uri */
      readonly git_url: string | null
      /** Format: uri */
      readonly html_url: string | null
      /** Format: uri */
      readonly download_url: string | null
      readonly _links: {
        /** Format: uri */
        readonly git: string | null
        /** Format: uri */
        readonly html: string | null
        /** Format: uri */
        readonly self: string
      }
    }
    /**
     * Submodule Content
     * @description An object describing a submodule
     */
    readonly 'content-submodule': {
      /** @enum {string} */
      readonly type: 'submodule'
      /** Format: uri */
      readonly submodule_git_url: string
      readonly size: number
      readonly name: string
      readonly path: string
      readonly sha: string
      /** Format: uri */
      readonly url: string
      /** Format: uri */
      readonly git_url: string | null
      /** Format: uri */
      readonly html_url: string | null
      /** Format: uri */
      readonly download_url: string | null
      readonly _links: {
        /** Format: uri */
        readonly git: string | null
        /** Format: uri */
        readonly html: string | null
        /** Format: uri */
        readonly self: string
      }
    }
    /**
     * File Commit
     * @description File Commit
     */
    readonly 'file-commit': {
      readonly content: {
        readonly name?: string
        readonly path?: string
        readonly sha?: string
        readonly size?: number
        readonly url?: string
        readonly html_url?: string
        readonly git_url?: string
        readonly download_url?: string
        readonly type?: string
        readonly _links?: {
          readonly self?: string
          readonly git?: string
          readonly html?: string
        }
      } | null
      readonly commit: {
        readonly sha?: string
        readonly node_id?: string
        readonly url?: string
        readonly html_url?: string
        readonly author?: {
          readonly date?: string
          readonly name?: string
          readonly email?: string
        }
        readonly committer?: {
          readonly date?: string
          readonly name?: string
          readonly email?: string
        }
        readonly message?: string
        readonly tree?: {
          readonly url?: string
          readonly sha?: string
        }
        readonly parents?: readonly {
          readonly url?: string
          readonly html_url?: string
          readonly sha?: string
        }[]
        readonly verification?: {
          readonly verified?: boolean
          readonly reason?: string
          readonly signature?: string | null
          readonly payload?: string | null
        }
      }
    }
    /**
     * Contributor
     * @description Contributor
     */
    readonly contributor: {
      readonly login?: string
      readonly id?: number
      readonly node_id?: string
      /** Format: uri */
      readonly avatar_url?: string
      readonly gravatar_id?: string | null
      /** Format: uri */
      readonly url?: string
      /** Format: uri */
      readonly html_url?: string
      /** Format: uri */
      readonly followers_url?: string
      readonly following_url?: string
      readonly gists_url?: string
      readonly starred_url?: string
      /** Format: uri */
      readonly subscriptions_url?: string
      /** Format: uri */
      readonly organizations_url?: string
      /** Format: uri */
      readonly repos_url?: string
      readonly events_url?: string
      /** Format: uri */
      readonly received_events_url?: string
      readonly type: string
      readonly site_admin?: boolean
      readonly contributions: number
      readonly email?: string
      readonly name?: string
    }
    /**
     * Dependabot Secret
     * @description Set secrets for Dependabot.
     */
    readonly 'dependabot-secret': {
      /**
       * @description The name of the secret.
       * @example MY_ARTIFACTORY_PASSWORD
       */
      readonly name: string
      /** Format: date-time */
      readonly created_at: string
      /** Format: date-time */
      readonly updated_at: string
    }
    /**
     * Dependency Graph Diff
     * @description A diff of the dependencies between two commits.
     */
    readonly 'dependency-graph-diff': readonly {
      /** @enum {string} */
      readonly change_type: 'added' | 'removed'
      /** @example path/to/package-lock.json */
      readonly manifest: string
      /** @example npm */
      readonly ecosystem: string
      /** @example @actions/core */
      readonly name: string
      /** @example 1.0.0 */
      readonly version: string
      /** @example pkg:/npm/%40actions/core@1.1.0 */
      readonly package_url: string | null
      /** @example MIT */
      readonly license: string | null
      /** @example https://github.com/github/actions */
      readonly source_repository_url: string | null
      readonly vulnerabilities: readonly {
        /** @example critical */
        readonly severity: string
        /** @example GHSA-rf4j-j272-fj86 */
        readonly advisory_ghsa_id: string
        /** @example A summary of the advisory. */
        readonly advisory_summary: string
        /** @example https://github.com/advisories/GHSA-rf4j-j272-fj86 */
        readonly advisory_url: string
      }[]
    }[]
    /**
     * Deployment Status
     * @description The status of a deployment.
     */
    readonly 'deployment-status': {
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/example/deployments/42/statuses/1
       */
      readonly url: string
      /** @example 1 */
      readonly id: number
      /** @example MDE2OkRlcGxveW1lbnRTdGF0dXMx */
      readonly node_id: string
      /**
       * @description The state of the status.
       * @example success
       * @enum {string}
       */
      readonly state: 'error' | 'failure' | 'inactive' | 'pending' | 'success' | 'queued' | 'in_progress'
      readonly creator: components['schemas']['nullable-simple-user']
      /**
       * @description A short description of the status.
       * @default
       * @example Deployment finished successfully.
       */
      readonly description: string
      /**
       * @description The environment of the deployment that the status is for.
       * @default
       * @example production
       */
      readonly environment?: string
      /**
       * Format: uri
       * @description Deprecated: the URL to associate with this status.
       * @default
       * @example https://example.com/deployment/42/output
       */
      readonly target_url: string
      /**
       * Format: date-time
       * @example 2012-07-20T01:19:13Z
       */
      readonly created_at: string
      /**
       * Format: date-time
       * @example 2012-07-20T01:19:13Z
       */
      readonly updated_at: string
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/example/deployments/42
       */
      readonly deployment_url: string
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/example
       */
      readonly repository_url: string
      /**
       * Format: uri
       * @description The URL for accessing your environment.
       * @default
       * @example https://staging.example.com/
       */
      readonly environment_url?: string
      /**
       * Format: uri
       * @description The URL to associate with this status.
       * @default
       * @example https://example.com/deployment/42/output
       */
      readonly log_url?: string
      readonly performed_via_github_app?: components['schemas']['nullable-integration']
    }
    /**
     * @description The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days).
     * @example 30
     */
    readonly 'wait-timer': number
    /** @description The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`. */
    readonly 'deployment-branch-policy-settings': {
      /** @description Whether only branches with branch protection rules can deploy to this environment. If `protected_branches` is `true`, `custom_branch_policies` must be `false`; if `protected_branches` is `false`, `custom_branch_policies` must be `true`. */
      readonly protected_branches: boolean
      /** @description Whether only branches that match the specified name patterns can deploy to this environment.  If `custom_branch_policies` is `true`, `protected_branches` must be `false`; if `custom_branch_policies` is `false`, `protected_branches` must be `true`. */
      readonly custom_branch_policies: boolean
    } | null
    /**
     * Environment
     * @description Details of a deployment environment
     */
    readonly environment: {
      /**
       * @description The id of the environment.
       * @example 56780428
       */
      readonly id: number
      /** @example MDExOkVudmlyb25tZW50NTY3ODA0Mjg= */
      readonly node_id: string
      /**
       * @description The name of the environment.
       * @example staging
       */
      readonly name: string
      /** @example https://api.github.com/repos/github/hello-world/environments/staging */
      readonly url: string
      /** @example https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging */
      readonly html_url: string
      /**
       * Format: date-time
       * @description The time that the environment was created, in ISO 8601 format.
       * @example 2020-11-23T22:00:40Z
       */
      readonly created_at: string
      /**
       * Format: date-time
       * @description The time that the environment was last updated, in ISO 8601 format.
       * @example 2020-11-23T22:00:40Z
       */
      readonly updated_at: string
      readonly protection_rules?: readonly (
        | {
            /** @example 3515 */
            readonly id: number
            /** @example MDQ6R2F0ZTM1MTU= */
            readonly node_id: string
            /** @example wait_timer */
            readonly type: string
            readonly wait_timer?: components['schemas']['wait-timer']
          }
        | {
            /** @example 3755 */
            readonly id: number
            /** @example MDQ6R2F0ZTM3NTU= */
            readonly node_id: string
            /** @example required_reviewers */
            readonly type: string
            /** @description The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed. */
            readonly reviewers?: readonly {
              readonly type?: components['schemas']['deployment-reviewer-type']
              readonly reviewer?: components['schemas']['simple-user'] | components['schemas']['team']
            }[]
          }
        | {
            /** @example 3515 */
            readonly id: number
            /** @example MDQ6R2F0ZTM1MTU= */
            readonly node_id: string
            /** @example branch_policy */
            readonly type: string
          }
      )[]
      readonly deployment_branch_policy?: components['schemas']['deployment-branch-policy-settings']
    }
    /**
     * Deployment branch policy
     * @description Details of a deployment branch policy.
     */
    readonly 'deployment-branch-policy': {
      /**
       * @description The unique identifier of the branch policy.
       * @example 361471
       */
      readonly id?: number
      /** @example MDE2OkdhdGVCcmFuY2hQb2xpY3kzNjE0NzE= */
      readonly node_id?: string
      /**
       * @description The name pattern that branches must match in order to deploy to the environment.
       * @example release/*
       */
      readonly name?: string
    }
    /** Deployment branch policy name pattern */
    readonly 'deployment-branch-policy-name-pattern': {
      /**
       * @description The name pattern that branches must match in order to deploy to the environment.
       *
       * Wildcard characters will not match `/`. For example, to match branches that begin with `release/` and contain an additional single slash, use `release/*\/*`.
       * For more information about pattern matching syntax, see the [Ruby File.fnmatch documentation](https://ruby-doc.org/core-2.5.1/File.html#method-c-fnmatch).
       * @example release/*
       */
      readonly name: string
    }
    /**
     * Short Blob
     * @description Short Blob
     */
    readonly 'short-blob': {
      readonly url: string
      readonly sha: string
    }
    /**
     * Blob
     * @description Blob
     */
    readonly blob: {
      readonly content: string
      readonly encoding: string
      /** Format: uri */
      readonly url: string
      readonly sha: string
      readonly size: number | null
      readonly node_id: string
      readonly highlighted_content?: string
    }
    /**
     * Git Commit
     * @description Low-level Git commit operations within a repository
     */
    readonly 'git-commit': {
      /**
       * @description SHA for the commit
       * @example 7638417db6d59f3c431d3e1f261cc637155684cd
       */
      readonly sha: string
      readonly node_id: string
      /** Format: uri */
      readonly url: string
      /** @description Identifying information for the git-user */
      readonly author: {
        /**
         * Format: date-time
         * @description Timestamp of the commit
         * @example 2014-08-09T08:02:04+12:00
         */
        readonly date: string
        /**
         * @description Git email address of the user
         * @example monalisa.octocat@example.com
         */
        readonly email: string
        /**
         * @description Name of the git user
         * @example Monalisa Octocat
         */
        readonly name: string
      }
      /** @description Identifying information for the git-user */
      readonly committer: {
        /**
         * Format: date-time
         * @description Timestamp of the commit
         * @example 2014-08-09T08:02:04+12:00
         */
        readonly date: string
        /**
         * @description Git email address of the user
         * @example monalisa.octocat@example.com
         */
        readonly email: string
        /**
         * @description Name of the git user
         * @example Monalisa Octocat
         */
        readonly name: string
      }
      /**
       * @description Message describing the purpose of the commit
       * @example Fix #42
       */
      readonly message: string
      readonly tree: {
        /**
         * @description SHA for the commit
         * @example 7638417db6d59f3c431d3e1f261cc637155684cd
         */
        readonly sha: string
        /** Format: uri */
        readonly url: string
      }
      readonly parents: readonly {
        /**
         * @description SHA for the commit
         * @example 7638417db6d59f3c431d3e1f261cc637155684cd
         */
        readonly sha: string
        /** Format: uri */
        readonly url: string
        /** Format: uri */
        readonly html_url: string
      }[]
      readonly verification: {
        readonly verified: boolean
        readonly reason: string
        readonly signature: string | null
        readonly payload: string | null
      }
      /** Format: uri */
      readonly html_url: string
    }
    /**
     * Git Reference
     * @description Git references within a repository
     */
    readonly 'git-ref': {
      readonly ref: string
      readonly node_id: string
      /** Format: uri */
      readonly url: string
      readonly object: {
        readonly type: string
        /**
         * @description SHA for the reference
         * @example 7638417db6d59f3c431d3e1f261cc637155684cd
         */
        readonly sha: string
        /** Format: uri */
        readonly url: string
      }
    }
    /**
     * Git Tag
     * @description Metadata for a Git tag
     */
    readonly 'git-tag': {
      /** @example MDM6VGFnOTQwYmQzMzYyNDhlZmFlMGY5ZWU1YmM3YjJkNWM5ODU4ODdiMTZhYw== */
      readonly node_id: string
      /**
       * @description Name of the tag
       * @example v0.0.1
       */
      readonly tag: string
      /** @example 940bd336248efae0f9ee5bc7b2d5c985887b16ac */
      readonly sha: string
      /**
       * Format: uri
       * @description URL for the tag
       * @example https://api.github.com/repositories/42/git/tags/940bd336248efae0f9ee5bc7b2d5c985887b16ac
       */
      readonly url: string
      /**
       * @description Message describing the purpose of the tag
       * @example Initial public release
       */
      readonly message: string
      readonly tagger: {
        readonly date: string
        readonly email: string
        readonly name: string
      }
      readonly object: {
        readonly sha: string
        readonly type: string
        /** Format: uri */
        readonly url: string
      }
      readonly verification?: components['schemas']['verification']
    }
    /**
     * Git Tree
     * @description The hierarchy between files in a Git repository.
     */
    readonly 'git-tree': {
      readonly sha: string
      /** Format: uri */
      readonly url: string
      readonly truncated: boolean
      /**
       * @description Objects specifying a tree structure
       * @example [
       *   {
       *     "path": "file.rb",
       *     "mode": "100644",
       *     "type": "blob",
       *     "size": 30,
       *     "sha": "44b4fc6d56897b048c772eb4087f854f46256132",
       *     "url": "https://api.github.com/repos/octocat/Hello-World/git/blobs/44b4fc6d56897b048c772eb4087f854f46256132",
       *     "properties": {
       *       "path": {
       *         "type": "string"
       *       },
       *       "mode": {
       *         "type": "string"
       *       },
       *       "type": {
       *         "type": "string"
       *       },
       *       "size": {
       *         "type": "integer"
       *       },
       *       "sha": {
       *         "type": "string"
       *       },
       *       "url": {
       *         "type": "string"
       *       }
       *     },
       *     "required": [
       *       "path",
       *       "mode",
       *       "type",
       *       "sha",
       *       "url",
       *       "size"
       *     ]
       *   }
       * ]
       */
      readonly tree: readonly {
        /** @example test/file.rb */
        readonly path?: string
        /** @example 040000 */
        readonly mode?: string
        /** @example tree */
        readonly type?: string
        /** @example 23f6827669e43831def8a7ad935069c8bd418261 */
        readonly sha?: string
        /** @example 12 */
        readonly size?: number
        /** @example https://api.github.com/repos/owner-482f3203ecf01f67e9deb18e/BBB_Private_Repo/git/blobs/23f6827669e43831def8a7ad935069c8bd418261 */
        readonly url?: string
      }[]
    }
    /** Hook Response */
    readonly 'hook-response': {
      readonly code: number | null
      readonly status: string | null
      readonly message: string | null
    }
    /**
     * Webhook
     * @description Webhooks for repositories.
     */
    readonly hook: {
      readonly type: string
      /**
       * @description Unique identifier of the webhook.
       * @example 42
       */
      readonly id: number
      /**
       * @description The name of a valid service, use 'web' for a webhook.
       * @example web
       */
      readonly name: string
      /**
       * @description Determines whether the hook is actually triggered on pushes.
       * @example true
       */
      readonly active: boolean
      /**
       * @description Determines what events the hook is triggered for. Default: ['push'].
       * @example [
       *   "push",
       *   "pull_request"
       * ]
       */
      readonly events: readonly string[]
      readonly config: {
        /** @example "foo@bar.com" */
        readonly email?: string
        /** @example "foo" */
        readonly password?: string
        /** @example "roomer" */
        readonly room?: string
        /** @example "foo" */
        readonly subdomain?: string
        readonly url?: components['schemas']['webhook-config-url']
        readonly insecure_ssl?: components['schemas']['webhook-config-insecure-ssl']
        readonly content_type?: components['schemas']['webhook-config-content-type']
        /** @example "sha256" */
        readonly digest?: string
        readonly secret?: components['schemas']['webhook-config-secret']
        /** @example "abc" */
        readonly token?: string
      }
      /**
       * Format: date-time
       * @example 2011-09-06T20:39:23Z
       */
      readonly updated_at: string
      /**
       * Format: date-time
       * @example 2011-09-06T17:26:27Z
       */
      readonly created_at: string
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/Hello-World/hooks/1
       */
      readonly url: string
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/Hello-World/hooks/1/test
       */
      readonly test_url: string
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/Hello-World/hooks/1/pings
       */
      readonly ping_url: string
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/Hello-World/hooks/1/deliveries
       */
      readonly deliveries_url?: string
      readonly last_response: components['schemas']['hook-response']
    }
    /**
     * Issue
     * @description Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
     */
    readonly 'nullable-issue': {
      readonly id: number
      readonly node_id: string
      /**
       * Format: uri
       * @description URL for the issue
       * @example https://api.github.com/repositories/42/issues/1
       */
      readonly url: string
      /** Format: uri */
      readonly repository_url: string
      readonly labels_url: string
      /** Format: uri */
      readonly comments_url: string
      /** Format: uri */
      readonly events_url: string
      /** Format: uri */
      readonly html_url: string
      /**
       * @description Number uniquely identifying the issue within its repository
       * @example 42
       */
      readonly number: number
      /**
       * @description State of the issue; either 'open' or 'closed'
       * @example open
       */
      readonly state: string
      /**
       * @description The reason for the current state
       * @example not_planned
       * @enum {string|null}
       */
      readonly state_reason?: ('completed' | 'reopened' | 'not_planned') | null
      /**
       * @description Title of the issue
       * @example Widget creation fails in Safari on OS X 10.8
       */
      readonly title: string
      /**
       * @description Contents of the issue
       * @example It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?
       */
      readonly body?: string | null
      readonly user: components['schemas']['nullable-simple-user']
      /**
       * @description Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
       * @example [
       *   "bug",
       *   "registration"
       * ]
       */
      readonly labels: readonly (
        | string
        | {
            /** Format: int64 */
            readonly id?: number
            readonly node_id?: string
            /** Format: uri */
            readonly url?: string
            readonly name?: string
            readonly description?: string | null
            readonly color?: string | null
            readonly default?: boolean
          }
      )[]
      readonly assignee: components['schemas']['nullable-simple-user']
      readonly assignees?: readonly components['schemas']['simple-user'][] | null
      readonly milestone: components['schemas']['nullable-milestone']
      readonly locked: boolean
      readonly active_lock_reason?: string | null
      readonly comments: number
      readonly pull_request?: {
        /** Format: date-time */
        readonly merged_at?: string | null
        /** Format: uri */
        readonly diff_url: string | null
        /** Format: uri */
        readonly html_url: string | null
        /** Format: uri */
        readonly patch_url: string | null
        /** Format: uri */
        readonly url: string | null
      }
      /** Format: date-time */
      readonly closed_at: string | null
      /** Format: date-time */
      readonly created_at: string
      /** Format: date-time */
      readonly updated_at: string
      readonly draft?: boolean
      readonly closed_by?: components['schemas']['nullable-simple-user']
      readonly body_html?: string
      readonly body_text?: string
      /** Format: uri */
      readonly timeline_url?: string
      readonly repository?: components['schemas']['repository']
      readonly performed_via_github_app?: components['schemas']['nullable-integration']
      readonly author_association: components['schemas']['author-association']
      readonly reactions?: components['schemas']['reaction-rollup']
    } | null
    /**
     * Issue Event Label
     * @description Issue Event Label
     */
    readonly 'issue-event-label': {
      readonly name: string | null
      readonly color: string | null
    }
    /** Issue Event Dismissed Review */
    readonly 'issue-event-dismissed-review': {
      readonly state: string
      readonly review_id: number
      readonly dismissal_message: string | null
      readonly dismissal_commit_id?: string | null
    }
    /**
     * Issue Event Milestone
     * @description Issue Event Milestone
     */
    readonly 'issue-event-milestone': {
      readonly title: string
    }
    /**
     * Issue Event Project Card
     * @description Issue Event Project Card
     */
    readonly 'issue-event-project-card': {
      /** Format: uri */
      readonly url: string
      readonly id: number
      /** Format: uri */
      readonly project_url: string
      readonly project_id: number
      readonly column_name: string
      readonly previous_column_name?: string
    }
    /**
     * Issue Event Rename
     * @description Issue Event Rename
     */
    readonly 'issue-event-rename': {
      readonly from: string
      readonly to: string
    }
    /**
     * Issue Event
     * @description Issue Event
     */
    readonly 'issue-event': {
      /** @example 1 */
      readonly id: number
      /** @example MDEwOklzc3VlRXZlbnQx */
      readonly node_id: string
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/Hello-World/issues/events/1
       */
      readonly url: string
      readonly actor: components['schemas']['nullable-simple-user']
      /** @example closed */
      readonly event: string
      /** @example 6dcb09b5b57875f334f61aebed695e2e4193db5e */
      readonly commit_id: string | null
      /** @example https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e */
      readonly commit_url: string | null
      /**
       * Format: date-time
       * @example 2011-04-14T16:00:49Z
       */
      readonly created_at: string
      readonly issue?: components['schemas']['nullable-issue']
      readonly label?: components['schemas']['issue-event-label']
      readonly assignee?: components['schemas']['nullable-simple-user']
      readonly assigner?: components['schemas']['nullable-simple-user']
      readonly review_requester?: components['schemas']['nullable-simple-user']
      readonly requested_reviewer?: components['schemas']['nullable-simple-user']
      readonly requested_team?: components['schemas']['team']
      readonly dismissed_review?: components['schemas']['issue-event-dismissed-review']
      readonly milestone?: components['schemas']['issue-event-milestone']
      readonly project_card?: components['schemas']['issue-event-project-card']
      readonly rename?: components['schemas']['issue-event-rename']
      readonly author_association?: components['schemas']['author-association']
      readonly lock_reason?: string | null
      readonly performed_via_github_app?: components['schemas']['nullable-integration']
    }
    /**
     * Labeled Issue Event
     * @description Labeled Issue Event
     */
    readonly 'labeled-issue-event': {
      readonly id: number
      readonly node_id: string
      readonly url: string
      readonly actor: components['schemas']['simple-user']
      readonly event: string
      readonly commit_id: string | null
      readonly commit_url: string | null
      readonly created_at: string
      readonly performed_via_github_app: components['schemas']['nullable-integration']
      readonly label: {
        readonly name: string
        readonly color: string
      }
    }
    /**
     * Unlabeled Issue Event
     * @description Unlabeled Issue Event
     */
    readonly 'unlabeled-issue-event': {
      readonly id: number
      readonly node_id: string
      readonly url: string
      readonly actor: components['schemas']['simple-user']
      readonly event: string
      readonly commit_id: string | null
      readonly commit_url: string | null
      readonly created_at: string
      readonly performed_via_github_app: components['schemas']['nullable-integration']
      readonly label: {
        readonly name: string
        readonly color: string
      }
    }
    /**
     * Assigned Issue Event
     * @description Assigned Issue Event
     */
    readonly 'assigned-issue-event': {
      readonly id: number
      readonly node_id: string
      readonly url: string
      readonly actor: components['schemas']['simple-user']
      readonly event: string
      readonly commit_id: string | null
      readonly commit_url: string | null
      readonly created_at: string
      readonly performed_via_github_app: components['schemas']['integration']
      readonly assignee: components['schemas']['simple-user']
      readonly assigner: components['schemas']['simple-user']
    }
    /**
     * Unassigned Issue Event
     * @description Unassigned Issue Event
     */
    readonly 'unassigned-issue-event': {
      readonly id: number
      readonly node_id: string
      readonly url: string
      readonly actor: components['schemas']['simple-user']
      readonly event: string
      readonly commit_id: string | null
      readonly commit_url: string | null
      readonly created_at: string
      readonly performed_via_github_app: components['schemas']['nullable-integration']
      readonly assignee: components['schemas']['simple-user']
      readonly assigner: components['schemas']['simple-user']
    }
    /**
     * Milestoned Issue Event
     * @description Milestoned Issue Event
     */
    readonly 'milestoned-issue-event': {
      readonly id: number
      readonly node_id: string
      readonly url: string
      readonly actor: components['schemas']['simple-user']
      readonly event: string
      readonly commit_id: string | null
      readonly commit_url: string | null
      readonly created_at: string
      readonly performed_via_github_app: components['schemas']['nullable-integration']
      readonly milestone: {
        readonly title: string
      }
    }
    /**
     * Demilestoned Issue Event
     * @description Demilestoned Issue Event
     */
    readonly 'demilestoned-issue-event': {
      readonly id: number
      readonly node_id: string
      readonly url: string
      readonly actor: components['schemas']['simple-user']
      readonly event: string
      readonly commit_id: string | null
      readonly commit_url: string | null
      readonly created_at: string
      readonly performed_via_github_app: components['schemas']['nullable-integration']
      readonly milestone: {
        readonly title: string
      }
    }
    /**
     * Renamed Issue Event
     * @description Renamed Issue Event
     */
    readonly 'renamed-issue-event': {
      readonly id: number
      readonly node_id: string
      readonly url: string
      readonly actor: components['schemas']['simple-user']
      readonly event: string
      readonly commit_id: string | null
      readonly commit_url: string | null
      readonly created_at: string
      readonly performed_via_github_app: components['schemas']['nullable-integration']
      readonly rename: {
        readonly from: string
        readonly to: string
      }
    }
    /**
     * Review Requested Issue Event
     * @description Review Requested Issue Event
     */
    readonly 'review-requested-issue-event': {
      readonly id: number
      readonly node_id: string
      readonly url: string
      readonly actor: components['schemas']['simple-user']
      readonly event: string
      readonly commit_id: string | null
      readonly commit_url: string | null
      readonly created_at: string
      readonly performed_via_github_app: components['schemas']['nullable-integration']
      readonly review_requester: components['schemas']['simple-user']
      readonly requested_team?: components['schemas']['team']
      readonly requested_reviewer?: components['schemas']['simple-user']
    }
    /**
     * Review Request Removed Issue Event
     * @description Review Request Removed Issue Event
     */
    readonly 'review-request-removed-issue-event': {
      readonly id: number
      readonly node_id: string
      readonly url: string
      readonly actor: components['schemas']['simple-user']
      readonly event: string
      readonly commit_id: string | null
      readonly commit_url: string | null
      readonly created_at: string
      readonly performed_via_github_app: components['schemas']['nullable-integration']
      readonly review_requester: components['schemas']['simple-user']
      readonly requested_team?: components['schemas']['team']
      readonly requested_reviewer?: components['schemas']['simple-user']
    }
    /**
     * Review Dismissed Issue Event
     * @description Review Dismissed Issue Event
     */
    readonly 'review-dismissed-issue-event': {
      readonly id: number
      readonly node_id: string
      readonly url: string
      readonly actor: components['schemas']['simple-user']
      readonly event: string
      readonly commit_id: string | null
      readonly commit_url: string | null
      readonly created_at: string
      readonly performed_via_github_app: components['schemas']['nullable-integration']
      readonly dismissed_review: {
        readonly state: string
        readonly review_id: number
        readonly dismissal_message: string | null
        readonly dismissal_commit_id?: string
      }
    }
    /**
     * Locked Issue Event
     * @description Locked Issue Event
     */
    readonly 'locked-issue-event': {
      readonly id: number
      readonly node_id: string
      readonly url: string
      readonly actor: components['schemas']['simple-user']
      readonly event: string
      readonly commit_id: string | null
      readonly commit_url: string | null
      readonly created_at: string
      readonly performed_via_github_app: components['schemas']['nullable-integration']
      /** @example "off-topic" */
      readonly lock_reason: string | null
    }
    /**
     * Added to Project Issue Event
     * @description Added to Project Issue Event
     */
    readonly 'added-to-project-issue-event': {
      readonly id: number
      readonly node_id: string
      readonly url: string
      readonly actor: components['schemas']['simple-user']
      readonly event: string
      readonly commit_id: string | null
      readonly commit_url: string | null
      readonly created_at: string
      readonly performed_via_github_app: components['schemas']['nullable-integration']
      readonly project_card?: {
        readonly id: number
        /** Format: uri */
        readonly url: string
        readonly project_id: number
        /** Format: uri */
        readonly project_url: string
        readonly column_name: string
        readonly previous_column_name?: string
      }
    }
    /**
     * Moved Column in Project Issue Event
     * @description Moved Column in Project Issue Event
     */
    readonly 'moved-column-in-project-issue-event': {
      readonly id: number
      readonly node_id: string
      readonly url: string
      readonly actor: components['schemas']['simple-user']
      readonly event: string
      readonly commit_id: string | null
      readonly commit_url: string | null
      readonly created_at: string
      readonly performed_via_github_app: components['schemas']['nullable-integration']
      readonly project_card?: {
        readonly id: number
        /** Format: uri */
        readonly url: string
        readonly project_id: number
        /** Format: uri */
        readonly project_url: string
        readonly column_name: string
        readonly previous_column_name?: string
      }
    }
    /**
     * Removed from Project Issue Event
     * @description Removed from Project Issue Event
     */
    readonly 'removed-from-project-issue-event': {
      readonly id: number
      readonly node_id: string
      readonly url: string
      readonly actor: components['schemas']['simple-user']
      readonly event: string
      readonly commit_id: string | null
      readonly commit_url: string | null
      readonly created_at: string
      readonly performed_via_github_app: components['schemas']['nullable-integration']
      readonly project_card?: {
        readonly id: number
        /** Format: uri */
        readonly url: string
        readonly project_id: number
        /** Format: uri */
        readonly project_url: string
        readonly column_name: string
        readonly previous_column_name?: string
      }
    }
    /**
     * Converted Note to Issue Issue Event
     * @description Converted Note to Issue Issue Event
     */
    readonly 'converted-note-to-issue-issue-event': {
      readonly id: number
      readonly node_id: string
      readonly url: string
      readonly actor: components['schemas']['simple-user']
      readonly event: string
      readonly commit_id: string | null
      readonly commit_url: string | null
      readonly created_at: string
      readonly performed_via_github_app: components['schemas']['integration']
      readonly project_card?: {
        readonly id: number
        /** Format: uri */
        readonly url: string
        readonly project_id: number
        /** Format: uri */
        readonly project_url: string
        readonly column_name: string
        readonly previous_column_name?: string
      }
    }
    /**
     * Issue Event for Issue
     * @description Issue Event for Issue
     */
    readonly 'issue-event-for-issue':
      | components['schemas']['labeled-issue-event']
      | components['schemas']['unlabeled-issue-event']
      | components['schemas']['assigned-issue-event']
      | components['schemas']['unassigned-issue-event']
      | components['schemas']['milestoned-issue-event']
      | components['schemas']['demilestoned-issue-event']
      | components['schemas']['renamed-issue-event']
      | components['schemas']['review-requested-issue-event']
      | components['schemas']['review-request-removed-issue-event']
      | components['schemas']['review-dismissed-issue-event']
      | components['schemas']['locked-issue-event']
      | components['schemas']['added-to-project-issue-event']
      | components['schemas']['moved-column-in-project-issue-event']
      | components['schemas']['removed-from-project-issue-event']
      | components['schemas']['converted-note-to-issue-issue-event']
    /**
     * Label
     * @description Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
     */
    readonly label: {
      /**
       * Format: int64
       * @example 208045946
       */
      readonly id: number
      /** @example MDU6TGFiZWwyMDgwNDU5NDY= */
      readonly node_id: string
      /**
       * Format: uri
       * @description URL for the label
       * @example https://api.github.com/repositories/42/labels/bug
       */
      readonly url: string
      /**
       * @description The name of the label.
       * @example bug
       */
      readonly name: string
      /** @example Something isn't working */
      readonly description: string | null
      /**
       * @description 6-character hex code, without the leading #, identifying the color
       * @example FFFFFF
       */
      readonly color: string
      /** @example true */
      readonly default: boolean
    }
    /**
     * Timeline Comment Event
     * @description Timeline Comment Event
     */
    readonly 'timeline-comment-event': {
      readonly event: string
      readonly actor: components['schemas']['simple-user']
      /**
       * @description Unique identifier of the issue comment
       * @example 42
       */
      readonly id: number
      readonly node_id: string
      /**
       * Format: uri
       * @description URL for the issue comment
       * @example https://api.github.com/repositories/42/issues/comments/1
       */
      readonly url: string
      /**
       * @description Contents of the issue comment
       * @example What version of Safari were you using when you observed this bug?
       */
      readonly body?: string
      readonly body_text?: string
      readonly body_html?: string
      /** Format: uri */
      readonly html_url: string
      readonly user: components['schemas']['simple-user']
      /**
       * Format: date-time
       * @example 2011-04-14T16:00:49Z
       */
      readonly created_at: string
      /**
       * Format: date-time
       * @example 2011-04-14T16:00:49Z
       */
      readonly updated_at: string
      /** Format: uri */
      readonly issue_url: string
      readonly author_association: components['schemas']['author-association']
      readonly performed_via_github_app?: components['schemas']['nullable-integration']
      readonly reactions?: components['schemas']['reaction-rollup']
    }
    /**
     * Timeline Cross Referenced Event
     * @description Timeline Cross Referenced Event
     */
    readonly 'timeline-cross-referenced-event': {
      readonly event: string
      readonly actor?: components['schemas']['simple-user']
      /** Format: date-time */
      readonly created_at: string
      /** Format: date-time */
      readonly updated_at: string
      readonly source: {
        readonly type?: string
        readonly issue?: components['schemas']['issue']
      }
    }
    /**
     * Timeline Committed Event
     * @description Timeline Committed Event
     */
    readonly 'timeline-committed-event': {
      readonly event?: string
      /**
       * @description SHA for the commit
       * @example 7638417db6d59f3c431d3e1f261cc637155684cd
       */
      readonly sha: string
      readonly node_id: string
      /** Format: uri */
      readonly url: string
      /** @description Identifying information for the git-user */
      readonly author: {
        /**
         * Format: date-time
         * @description Timestamp of the commit
         * @example 2014-08-09T08:02:04+12:00
         */
        readonly date: string
        /**
         * @description Git email address of the user
         * @example monalisa.octocat@example.com
         */
        readonly email: string
        /**
         * @description Name of the git user
         * @example Monalisa Octocat
         */
        readonly name: string
      }
      /** @description Identifying information for the git-user */
      readonly committer: {
        /**
         * Format: date-time
         * @description Timestamp of the commit
         * @example 2014-08-09T08:02:04+12:00
         */
        readonly date: string
        /**
         * @description Git email address of the user
         * @example monalisa.octocat@example.com
         */
        readonly email: string
        /**
         * @description Name of the git user
         * @example Monalisa Octocat
         */
        readonly name: string
      }
      /**
       * @description Message describing the purpose of the commit
       * @example Fix #42
       */
      readonly message: string
      readonly tree: {
        /**
         * @description SHA for the commit
         * @example 7638417db6d59f3c431d3e1f261cc637155684cd
         */
        readonly sha: string
        /** Format: uri */
        readonly url: string
      }
      readonly parents: readonly {
        /**
         * @description SHA for the commit
         * @example 7638417db6d59f3c431d3e1f261cc637155684cd
         */
        readonly sha: string
        /** Format: uri */
        readonly url: string
        /** Format: uri */
        readonly html_url: string
      }[]
      readonly verification: {
        readonly verified: boolean
        readonly reason: string
        readonly signature: string | null
        readonly payload: string | null
      }
      /** Format: uri */
      readonly html_url: string
    }
    /**
     * Timeline Reviewed Event
     * @description Timeline Reviewed Event
     */
    readonly 'timeline-reviewed-event': {
      readonly event: string
      /**
       * @description Unique identifier of the review
       * @example 42
       */
      readonly id: number
      /** @example MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA= */
      readonly node_id: string
      readonly user: components['schemas']['simple-user']
      /**
       * @description The text of the review.
       * @example This looks great.
       */
      readonly body: string | null
      /** @example CHANGES_REQUESTED */
      readonly state: string
      /**
       * Format: uri
       * @example https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80
       */
      readonly html_url: string
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/Hello-World/pulls/12
       */
      readonly pull_request_url: string
      readonly _links: {
        readonly html: {
          readonly href: string
        }
        readonly pull_request: {
          readonly href: string
        }
      }
      /** Format: date-time */
      readonly submitted_at?: string
      /**
       * @description A commit SHA for the review.
       * @example 54bb654c9e6025347f57900a4a5c2313a96b8035
       */
      readonly commit_id: string
      readonly body_html?: string
      readonly body_text?: string
      readonly author_association: components['schemas']['author-association']
    }
    /**
     * Pull Request Review Comment
     * @description Pull Request Review Comments are comments on a portion of the Pull Request's diff.
     */
    readonly 'pull-request-review-comment': {
      /**
       * @description URL for the pull request review comment
       * @example https://api.github.com/repos/octocat/Hello-World/pulls/comments/1
       */
      readonly url: string
      /**
       * @description The ID of the pull request review to which the comment belongs.
       * @example 42
       */
      readonly pull_request_review_id: number | null
      /**
       * @description The ID of the pull request review comment.
       * @example 1
       */
      readonly id: number
      /**
       * @description The node ID of the pull request review comment.
       * @example MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw
       */
      readonly node_id: string
      /**
       * @description The diff of the line that the comment refers to.
       * @example @@ -16,33 +16,40 @@ public class Connection : IConnection...
       */
      readonly diff_hunk: string
      /**
       * @description The relative path of the file to which the comment applies.
       * @example config/database.yaml
       */
      readonly path: string
      /**
       * @description The line index in the diff to which the comment applies. This field is deprecated; use `line` instead.
       * @example 1
       */
      readonly position: number
      /**
       * @description The index of the original line in the diff to which the comment applies. This field is deprecated; use `original_line` instead.
       * @example 4
       */
      readonly original_position: number
      /**
       * @description The SHA of the commit to which the comment applies.
       * @example 6dcb09b5b57875f334f61aebed695e2e4193db5e
       */
      readonly commit_id: string
      /**
       * @description The SHA of the original commit to which the comment applies.
       * @example 9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840
       */
      readonly original_commit_id: string
      /**
       * @description The comment ID to reply to.
       * @example 8
       */
      readonly in_reply_to_id?: number
      readonly user: components['schemas']['simple-user']
      /**
       * @description The text of the comment.
       * @example We should probably include a check for null values here.
       */
      readonly body: string
      /**
       * Format: date-time
       * @example 2011-04-14T16:00:49Z
       */
      readonly created_at: string
      /**
       * Format: date-time
       * @example 2011-04-14T16:00:49Z
       */
      readonly updated_at: string
      /**
       * Format: uri
       * @description HTML URL for the pull request review comment.
       * @example https://github.com/octocat/Hello-World/pull/1#discussion-diff-1
       */
      readonly html_url: string
      /**
       * Format: uri
       * @description URL for the pull request that the review comment belongs to.
       * @example https://api.github.com/repos/octocat/Hello-World/pulls/1
       */
      readonly pull_request_url: string
      readonly author_association: components['schemas']['author-association']
      readonly _links: {
        readonly self: {
          /**
           * Format: uri
           * @example https://api.github.com/repos/octocat/Hello-World/pulls/comments/1
           */
          readonly href: string
        }
        readonly html: {
          /**
           * Format: uri
           * @example https://github.com/octocat/Hello-World/pull/1#discussion-diff-1
           */
          readonly href: string
        }
        readonly pull_request: {
          /**
           * Format: uri
           * @example https://api.github.com/repos/octocat/Hello-World/pulls/1
           */
          readonly href: string
        }
      }
      /**
       * @description The first line of the range for a multi-line comment.
       * @example 2
       */
      readonly start_line?: number | null
      /**
       * @description The first line of the range for a multi-line comment.
       * @example 2
       */
      readonly original_start_line?: number | null
      /**
       * @description The side of the first line of the range for a multi-line comment.
       * @default RIGHT
       * @enum {string|null}
       */
      readonly start_side?: ('LEFT' | 'RIGHT') | null
      /**
       * @description The line of the blob to which the comment applies. The last line of the range for a multi-line comment
       * @example 2
       */
      readonly line?: number
      /**
       * @description The line of the blob to which the comment applies. The last line of the range for a multi-line comment
       * @example 2
       */
      readonly original_line?: number
      /**
       * @description The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
       * @default RIGHT
       * @enum {string}
       */
      readonly side?: 'LEFT' | 'RIGHT'
      readonly reactions?: components['schemas']['reaction-rollup']
      /** @example "<p>comment body</p>" */
      readonly body_html?: string
      /** @example "comment body" */
      readonly body_text?: string
    }
    /**
     * Timeline Line Commented Event
     * @description Timeline Line Commented Event
     */
    readonly 'timeline-line-commented-event': {
      readonly event?: string
      readonly node_id?: string
      readonly comments?: readonly components['schemas']['pull-request-review-comment'][]
    }
    /**
     * Timeline Commit Commented Event
     * @description Timeline Commit Commented Event
     */
    readonly 'timeline-commit-commented-event': {
      readonly event?: string
      readonly node_id?: string
      readonly commit_id?: string
      readonly comments?: readonly components['schemas']['commit-comment'][]
    }
    /**
     * Timeline Assigned Issue Event
     * @description Timeline Assigned Issue Event
     */
    readonly 'timeline-assigned-issue-event': {
      readonly id: number
      readonly node_id: string
      readonly url: string
      readonly actor: components['schemas']['simple-user']
      readonly event: string
      readonly commit_id: string | null
      readonly commit_url: string | null
      readonly created_at: string
      readonly performed_via_github_app: components['schemas']['nullable-integration']
      readonly assignee: components['schemas']['simple-user']
    }
    /**
     * Timeline Unassigned Issue Event
     * @description Timeline Unassigned Issue Event
     */
    readonly 'timeline-unassigned-issue-event': {
      readonly id: number
      readonly node_id: string
      readonly url: string
      readonly actor: components['schemas']['simple-user']
      readonly event: string
      readonly commit_id: string | null
      readonly commit_url: string | null
      readonly created_at: string
      readonly performed_via_github_app: components['schemas']['nullable-integration']
      readonly assignee: components['schemas']['simple-user']
    }
    /**
     * State Change Issue Event
     * @description State Change Issue Event
     */
    readonly 'state-change-issue-event': {
      readonly id: number
      readonly node_id: string
      readonly url: string
      readonly actor: components['schemas']['simple-user']
      readonly event: string
      readonly commit_id: string | null
      readonly commit_url: string | null
      readonly created_at: string
      readonly performed_via_github_app: components['schemas']['nullable-integration']
      readonly state_reason?: string | null
    }
    /**
     * Timeline Event
     * @description Timeline Event
     */
    readonly 'timeline-issue-events':
      | components['schemas']['labeled-issue-event']
      | components['schemas']['unlabeled-issue-event']
      | components['schemas']['milestoned-issue-event']
      | components['schemas']['demilestoned-issue-event']
      | components['schemas']['renamed-issue-event']
      | components['schemas']['review-requested-issue-event']
      | components['schemas']['review-request-removed-issue-event']
      | components['schemas']['review-dismissed-issue-event']
      | components['schemas']['locked-issue-event']
      | components['schemas']['added-to-project-issue-event']
      | components['schemas']['moved-column-in-project-issue-event']
      | components['schemas']['removed-from-project-issue-event']
      | components['schemas']['converted-note-to-issue-issue-event']
      | components['schemas']['timeline-comment-event']
      | components['schemas']['timeline-cross-referenced-event']
      | components['schemas']['timeline-committed-event']
      | components['schemas']['timeline-reviewed-event']
      | components['schemas']['timeline-line-commented-event']
      | components['schemas']['timeline-commit-commented-event']
      | components['schemas']['timeline-assigned-issue-event']
      | components['schemas']['timeline-unassigned-issue-event']
      | components['schemas']['state-change-issue-event']
    /**
     * Deploy Key
     * @description An SSH key granting access to a single repository.
     */
    readonly 'deploy-key': {
      readonly id: number
      readonly key: string
      readonly url: string
      readonly title: string
      readonly verified: boolean
      readonly created_at: string
      readonly read_only: boolean
    }
    /**
     * Language
     * @description Language
     */
    readonly language: { readonly [key: string]: number }
    /**
     * License Content
     * @description License Content
     */
    readonly 'license-content': {
      readonly name: string
      readonly path: string
      readonly sha: string
      readonly size: number
      /** Format: uri */
      readonly url: string
      /** Format: uri */
      readonly html_url: string | null
      /** Format: uri */
      readonly git_url: string | null
      /** Format: uri */
      readonly download_url: string | null
      readonly type: string
      readonly content: string
      readonly encoding: string
      readonly _links: {
        /** Format: uri */
        readonly git: string | null
        /** Format: uri */
        readonly html: string | null
        /** Format: uri */
        readonly self: string
      }
      readonly license: components['schemas']['nullable-license-simple']
    }
    /**
     * Merged upstream
     * @description Results of a successful merge upstream request
     */
    readonly 'merged-upstream': {
      readonly message?: string
      /** @enum {string} */
      readonly merge_type?: 'merge' | 'fast-forward' | 'none'
      readonly base_branch?: string
    }
    /**
     * Milestone
     * @description A collection of related issues and pull requests.
     */
    readonly milestone: {
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/Hello-World/milestones/1
       */
      readonly url: string
      /**
       * Format: uri
       * @example https://github.com/octocat/Hello-World/milestones/v1.0
       */
      readonly html_url: string
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/Hello-World/milestones/1/labels
       */
      readonly labels_url: string
      /** @example 1002604 */
      readonly id: number
      /** @example MDk6TWlsZXN0b25lMTAwMjYwNA== */
      readonly node_id: string
      /**
       * @description The number of the milestone.
       * @example 42
       */
      readonly number: number
      /**
       * @description The state of the milestone.
       * @default open
       * @example open
       * @enum {string}
       */
      readonly state: 'open' | 'closed'
      /**
       * @description The title of the milestone.
       * @example v1.0
       */
      readonly title: string
      /** @example Tracking milestone for version 1.0 */
      readonly description: string | null
      readonly creator: components['schemas']['nullable-simple-user']
      /** @example 4 */
      readonly open_issues: number
      /** @example 8 */
      readonly closed_issues: number
      /**
       * Format: date-time
       * @example 2011-04-10T20:09:31Z
       */
      readonly created_at: string
      /**
       * Format: date-time
       * @example 2014-03-03T18:58:10Z
       */
      readonly updated_at: string
      /**
       * Format: date-time
       * @example 2013-02-12T13:22:01Z
       */
      readonly closed_at: string | null
      /**
       * Format: date-time
       * @example 2012-10-09T23:39:01Z
       */
      readonly due_on: string | null
    }
    /** Pages Source Hash */
    readonly 'pages-source-hash': {
      readonly branch: string
      readonly path: string
    }
    /** Pages Https Certificate */
    readonly 'pages-https-certificate': {
      /**
       * @example approved
       * @enum {string}
       */
      readonly state:
        | 'new'
        | 'authorization_created'
        | 'authorization_pending'
        | 'authorized'
        | 'authorization_revoked'
        | 'issued'
        | 'uploaded'
        | 'approved'
        | 'errored'
        | 'bad_authz'
        | 'destroy_pending'
        | 'dns_changed'
      /** @example Certificate is approved */
      readonly description: string
      /**
       * @description Array of the domain set and its alternate name (if it is configured)
       * @example [
       *   "example.com",
       *   "www.example.com"
       * ]
       */
      readonly domains: readonly string[]
      /** Format: date */
      readonly expires_at?: string
    }
    /**
     * GitHub Pages
     * @description The configuration for GitHub Pages for a repository.
     */
    readonly page: {
      /**
       * Format: uri
       * @description The API address for accessing this Page resource.
       * @example https://api.github.com/repos/github/hello-world/pages
       */
      readonly url: string
      /**
       * @description The status of the most recent build of the Page.
       * @example built
       * @enum {string|null}
       */
      readonly status: ('built' | 'building' | 'errored') | null
      /**
       * @description The Pages site's custom domain
       * @example example.com
       */
      readonly cname: string | null
      /**
       * @description The state if the domain is verified
       * @example pending
       * @enum {string|null}
       */
      readonly protected_domain_state?: ('pending' | 'verified' | 'unverified') | null
      /**
       * Format: date-time
       * @description The timestamp when a pending domain becomes unverified.
       */
      readonly pending_domain_unverified_at?: string | null
      /**
       * @description Whether the Page has a custom 404 page.
       * @default false
       * @example false
       */
      readonly custom_404: boolean
      /**
       * Format: uri
       * @description The web address the Page can be accessed from.
       * @example https://example.com
       */
      readonly html_url?: string
      /**
       * @description The process in which the Page will be built.
       * @example legacy
       * @enum {string|null}
       */
      readonly build_type?: ('legacy' | 'workflow') | null
      readonly source?: components['schemas']['pages-source-hash']
      /**
       * @description Whether the GitHub Pages site is publicly visible. If set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site.
       * @example true
       */
      readonly public: boolean
      readonly https_certificate?: components['schemas']['pages-https-certificate']
      /**
       * @description Whether https is enabled on the domain
       * @example true
       */
      readonly https_enforced?: boolean
    }
    /**
     * Page Build
     * @description Page Build
     */
    readonly 'page-build': {
      /** Format: uri */
      readonly url: string
      readonly status: string
      readonly error: {
        readonly message: string | null
      }
      readonly pusher: components['schemas']['nullable-simple-user']
      readonly commit: string
      readonly duration: number
      /** Format: date-time */
      readonly created_at: string
      /** Format: date-time */
      readonly updated_at: string
    }
    /**
     * Page Build Status
     * @description Page Build Status
     */
    readonly 'page-build-status': {
      /**
       * Format: uri
       * @example https://api.github.com/repos/github/hello-world/pages/builds/latest
       */
      readonly url: string
      /** @example queued */
      readonly status: string
    }
    readonly 'repository-pre-receive-hook': {
      readonly id?: number
      readonly name?: string
      readonly enforcement?: string
      readonly configuration_url?: string
    }
    /**
     * Team Simple
     * @description Groups of organization members that gives permissions on specified repositories.
     */
    readonly 'team-simple': {
      /**
       * @description Unique identifier of the team
       * @example 1
       */
      readonly id: number
      /** @example MDQ6VGVhbTE= */
      readonly node_id: string
      /**
       * Format: uri
       * @description URL for the team
       * @example https://api.github.com/organizations/1/team/1
       */
      readonly url: string
      /** @example https://api.github.com/organizations/1/team/1/members{/member} */
      readonly members_url: string
      /**
       * @description Name of the team
       * @example Justice League
       */
      readonly name: string
      /**
       * @description Description of the team
       * @example A great team.
       */
      readonly description: string | null
      /**
       * @description Permission that the team will have for its repositories
       * @example admin
       */
      readonly permission: string
      /**
       * @description The level of privacy this team should have
       * @example closed
       */
      readonly privacy?: string
      /**
       * Format: uri
       * @example https://github.com/orgs/rails/teams/core
       */
      readonly html_url: string
      /**
       * Format: uri
       * @example https://api.github.com/organizations/1/team/1/repos
       */
      readonly repositories_url: string
      /** @example justice-league */
      readonly slug: string
      /**
       * @description Distinguished Name (DN) that team maps to within LDAP environment
       * @example uid=example,ou=users,dc=github,dc=com
       */
      readonly ldap_dn?: string
    }
    /**
     * Pull Request
     * @description Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
     */
    readonly 'pull-request': {
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/Hello-World/pulls/1347
       */
      readonly url: string
      /** @example 1 */
      readonly id: number
      /** @example MDExOlB1bGxSZXF1ZXN0MQ== */
      readonly node_id: string
      /**
       * Format: uri
       * @example https://github.com/octocat/Hello-World/pull/1347
       */
      readonly html_url: string
      /**
       * Format: uri
       * @example https://github.com/octocat/Hello-World/pull/1347.diff
       */
      readonly diff_url: string
      /**
       * Format: uri
       * @example https://github.com/octocat/Hello-World/pull/1347.patch
       */
      readonly patch_url: string
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/Hello-World/issues/1347
       */
      readonly issue_url: string
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits
       */
      readonly commits_url: string
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments
       */
      readonly review_comments_url: string
      /** @example https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number} */
      readonly review_comment_url: string
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/Hello-World/issues/1347/comments
       */
      readonly comments_url: string
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e
       */
      readonly statuses_url: string
      /**
       * @description Number uniquely identifying the pull request within its repository.
       * @example 42
       */
      readonly number: number
      /**
       * @description State of this Pull Request. Either `open` or `closed`.
       * @example open
       * @enum {string}
       */
      readonly state: 'open' | 'closed'
      /** @example true */
      readonly locked: boolean
      /**
       * @description The title of the pull request.
       * @example Amazing new feature
       */
      readonly title: string
      readonly user: components['schemas']['nullable-simple-user']
      /** @example Please pull these awesome changes */
      readonly body: string | null
      readonly labels: readonly {
        /** Format: int64 */
        readonly id: number
        readonly node_id: string
        readonly url: string
        readonly name: string
        readonly description: string | null
        readonly color: string
        readonly default: boolean
      }[]
      readonly milestone: components['schemas']['nullable-milestone']
      /** @example too heated */
      readonly active_lock_reason?: string | null
      /**
       * Format: date-time
       * @example 2011-01-26T19:01:12Z
       */
      readonly created_at: string
      /**
       * Format: date-time
       * @example 2011-01-26T19:01:12Z
       */
      readonly updated_at: string
      /**
       * Format: date-time
       * @example 2011-01-26T19:01:12Z
       */
      readonly closed_at: string | null
      /**
       * Format: date-time
       * @example 2011-01-26T19:01:12Z
       */
      readonly merged_at: string | null
      /** @example e5bd3914e2e596debea16f433f57875b5b90bcd6 */
      readonly merge_commit_sha: string | null
      readonly assignee: components['schemas']['nullable-simple-user']
      readonly assignees?: readonly components['schemas']['simple-user'][] | null
      readonly requested_reviewers?: readonly components['schemas']['simple-user'][] | null
      readonly requested_teams?: readonly components['schemas']['team-simple'][] | null
      readonly head: {
        readonly label: string
        readonly ref: string
        readonly repo: {
          readonly archive_url: string
          readonly assignees_url: string
          readonly blobs_url: string
          readonly branches_url: string
          readonly collaborators_url: string
          readonly comments_url: string
          readonly commits_url: string
          readonly compare_url: string
          readonly contents_url: string
          /** Format: uri */
          readonly contributors_url: string
          /** Format: uri */
          readonly deployments_url: string
          readonly description: string | null
          /** Format: uri */
          readonly downloads_url: string
          /** Format: uri */
          readonly events_url: string
          readonly fork: boolean
          /** Format: uri */
          readonly forks_url: string
          readonly full_name: string
          readonly git_commits_url: string
          readonly git_refs_url: string
          readonly git_tags_url: string
          /** Format: uri */
          readonly hooks_url: string
          /** Format: uri */
          readonly html_url: string
          readonly id: number
          readonly node_id: string
          readonly issue_comment_url: string
          readonly issue_events_url: string
          readonly issues_url: string
          readonly keys_url: string
          readonly labels_url: string
          /** Format: uri */
          readonly languages_url: string
          /** Format: uri */
          readonly merges_url: string
          readonly milestones_url: string
          readonly name: string
          readonly notifications_url: string
          readonly owner: {
            /** Format: uri */
            readonly avatar_url: string
            readonly events_url: string
            /** Format: uri */
            readonly followers_url: string
            readonly following_url: string
            readonly gists_url: string
            readonly gravatar_id: string | null
            /** Format: uri */
            readonly html_url: string
            readonly id: number
            readonly node_id: string
            readonly login: string
            /** Format: uri */
            readonly organizations_url: string
            /** Format: uri */
            readonly received_events_url: string
            /** Format: uri */
            readonly repos_url: string
            readonly site_admin: boolean
            readonly starred_url: string
            /** Format: uri */
            readonly subscriptions_url: string
            readonly type: string
            /** Format: uri */
            readonly url: string
          }
          readonly private: boolean
          readonly pulls_url: string
          readonly releases_url: string
          /** Format: uri */
          readonly stargazers_url: string
          readonly statuses_url: string
          /** Format: uri */
          readonly subscribers_url: string
          /** Format: uri */
          readonly subscription_url: string
          /** Format: uri */
          readonly tags_url: string
          /** Format: uri */
          readonly teams_url: string
          readonly trees_url: string
          /** Format: uri */
          readonly url: string
          readonly clone_url: string
          readonly default_branch: string
          readonly forks: number
          readonly forks_count: number
          readonly git_url: string
          readonly has_downloads: boolean
          readonly has_issues: boolean
          readonly has_projects: boolean
          readonly has_wiki: boolean
          readonly has_pages: boolean
          /** Format: uri */
          readonly homepage: string | null
          readonly language: string | null
          readonly master_branch?: string
          readonly archived: boolean
          readonly disabled: boolean
          /** @description The repository visibility: public, private, or internal. */
          readonly visibility?: string
          /** Format: uri */
          readonly mirror_url: string | null
          readonly open_issues: number
          readonly open_issues_count: number
          readonly permissions?: {
            readonly admin: boolean
            readonly maintain?: boolean
            readonly push: boolean
            readonly triage?: boolean
            readonly pull: boolean
          }
          readonly temp_clone_token?: string
          readonly allow_merge_commit?: boolean
          readonly allow_squash_merge?: boolean
          readonly allow_rebase_merge?: boolean
          readonly license: {
            readonly key: string
            readonly name: string
            /** Format: uri */
            readonly url: string | null
            readonly spdx_id: string | null
            readonly node_id: string
          } | null
          /** Format: date-time */
          readonly pushed_at: string
          readonly size: number
          readonly ssh_url: string
          readonly stargazers_count: number
          /** Format: uri */
          readonly svn_url: string
          readonly topics?: readonly string[]
          readonly watchers: number
          readonly watchers_count: number
          /** Format: date-time */
          readonly created_at: string
          /** Format: date-time */
          readonly updated_at: string
          readonly allow_forking?: boolean
          readonly is_template?: boolean
          readonly web_commit_signoff_required?: boolean
        } | null
        readonly sha: string
        readonly user: {
          /** Format: uri */
          readonly avatar_url: string
          readonly events_url: string
          /** Format: uri */
          readonly followers_url: string
          readonly following_url: string
          readonly gists_url: string
          readonly gravatar_id: string | null
          /** Format: uri */
          readonly html_url: string
          readonly id: number
          readonly node_id: string
          readonly login: string
          /** Format: uri */
          readonly organizations_url: string
          /** Format: uri */
          readonly received_events_url: string
          /** Format: uri */
          readonly repos_url: string
          readonly site_admin: boolean
          readonly starred_url: string
          /** Format: uri */
          readonly subscriptions_url: string
          readonly type: string
          /** Format: uri */
          readonly url: string
        }
      }
      readonly base: {
        readonly label: string
        readonly ref: string
        readonly repo: {
          readonly archive_url: string
          readonly assignees_url: string
          readonly blobs_url: string
          readonly branches_url: string
          readonly collaborators_url: string
          readonly comments_url: string
          readonly commits_url: string
          readonly compare_url: string
          readonly contents_url: string
          /** Format: uri */
          readonly contributors_url: string
          /** Format: uri */
          readonly deployments_url: string
          readonly description: string | null
          /** Format: uri */
          readonly downloads_url: string
          /** Format: uri */
          readonly events_url: string
          readonly fork: boolean
          /** Format: uri */
          readonly forks_url: string
          readonly full_name: string
          readonly git_commits_url: string
          readonly git_refs_url: string
          readonly git_tags_url: string
          /** Format: uri */
          readonly hooks_url: string
          /** Format: uri */
          readonly html_url: string
          readonly id: number
          readonly is_template?: boolean
          readonly node_id: string
          readonly issue_comment_url: string
          readonly issue_events_url: string
          readonly issues_url: string
          readonly keys_url: string
          readonly labels_url: string
          /** Format: uri */
          readonly languages_url: string
          /** Format: uri */
          readonly merges_url: string
          readonly milestones_url: string
          readonly name: string
          readonly notifications_url: string
          readonly owner: {
            /** Format: uri */
            readonly avatar_url: string
            readonly events_url: string
            /** Format: uri */
            readonly followers_url: string
            readonly following_url: string
            readonly gists_url: string
            readonly gravatar_id: string | null
            /** Format: uri */
            readonly html_url: string
            readonly id: number
            readonly node_id: string
            readonly login: string
            /** Format: uri */
            readonly organizations_url: string
            /** Format: uri */
            readonly received_events_url: string
            /** Format: uri */
            readonly repos_url: string
            readonly site_admin: boolean
            readonly starred_url: string
            /** Format: uri */
            readonly subscriptions_url: string
            readonly type: string
            /** Format: uri */
            readonly url: string
          }
          readonly private: boolean
          readonly pulls_url: string
          readonly releases_url: string
          /** Format: uri */
          readonly stargazers_url: string
          readonly statuses_url: string
          /** Format: uri */
          readonly subscribers_url: string
          /** Format: uri */
          readonly subscription_url: string
          /** Format: uri */
          readonly tags_url: string
          /** Format: uri */
          readonly teams_url: string
          readonly trees_url: string
          /** Format: uri */
          readonly url: string
          readonly clone_url: string
          readonly default_branch: string
          readonly forks: number
          readonly forks_count: number
          readonly git_url: string
          readonly has_downloads: boolean
          readonly has_issues: boolean
          readonly has_projects: boolean
          readonly has_wiki: boolean
          readonly has_pages: boolean
          /** Format: uri */
          readonly homepage: string | null
          readonly language: string | null
          readonly master_branch?: string
          readonly archived: boolean
          readonly disabled: boolean
          /** @description The repository visibility: public, private, or internal. */
          readonly visibility?: string
          /** Format: uri */
          readonly mirror_url: string | null
          readonly open_issues: number
          readonly open_issues_count: number
          readonly permissions?: {
            readonly admin: boolean
            readonly maintain?: boolean
            readonly push: boolean
            readonly triage?: boolean
            readonly pull: boolean
          }
          readonly temp_clone_token?: string
          readonly allow_merge_commit?: boolean
          readonly allow_squash_merge?: boolean
          readonly allow_rebase_merge?: boolean
          readonly license: components['schemas']['nullable-license-simple']
          /** Format: date-time */
          readonly pushed_at: string
          readonly size: number
          readonly ssh_url: string
          readonly stargazers_count: number
          /** Format: uri */
          readonly svn_url: string
          readonly topics?: readonly string[]
          readonly watchers: number
          readonly watchers_count: number
          /** Format: date-time */
          readonly created_at: string
          /** Format: date-time */
          readonly updated_at: string
          readonly allow_forking?: boolean
          readonly web_commit_signoff_required?: boolean
        }
        readonly sha: string
        readonly user: {
          /** Format: uri */
          readonly avatar_url: string
          readonly events_url: string
          /** Format: uri */
          readonly followers_url: string
          readonly following_url: string
          readonly gists_url: string
          readonly gravatar_id: string | null
          /** Format: uri */
          readonly html_url: string
          readonly id: number
          readonly node_id: string
          readonly login: string
          /** Format: uri */
          readonly organizations_url: string
          /** Format: uri */
          readonly received_events_url: string
          /** Format: uri */
          readonly repos_url: string
          readonly site_admin: boolean
          readonly starred_url: string
          /** Format: uri */
          readonly subscriptions_url: string
          readonly type: string
          /** Format: uri */
          readonly url: string
        }
      }
      readonly _links: {
        readonly comments: components['schemas']['link']
        readonly commits: components['schemas']['link']
        readonly statuses: components['schemas']['link']
        readonly html: components['schemas']['link']
        readonly issue: components['schemas']['link']
        readonly review_comments: components['schemas']['link']
        readonly review_comment: components['schemas']['link']
        readonly self: components['schemas']['link']
      }
      readonly author_association: components['schemas']['author-association']
      readonly auto_merge: components['schemas']['auto-merge']
      /**
       * @description Indicates whether or not the pull request is a draft.
       * @example false
       */
      readonly draft?: boolean
      readonly merged: boolean
      /** @example true */
      readonly mergeable: boolean | null
      /** @example true */
      readonly rebaseable?: boolean | null
      /** @example clean */
      readonly mergeable_state: string
      readonly merged_by: components['schemas']['nullable-simple-user']
      /** @example 10 */
      readonly comments: number
      /** @example 0 */
      readonly review_comments: number
      /**
       * @description Indicates whether maintainers can modify the pull request.
       * @example true
       */
      readonly maintainer_can_modify: boolean
      /** @example 3 */
      readonly commits: number
      /** @example 100 */
      readonly additions: number
      /** @example 3 */
      readonly deletions: number
      /** @example 5 */
      readonly changed_files: number
    }
    /**
     * Pull Request Merge Result
     * @description Pull Request Merge Result
     */
    readonly 'pull-request-merge-result': {
      readonly sha: string
      readonly merged: boolean
      readonly message: string
    }
    /**
     * Pull Request Review Request
     * @description Pull Request Review Request
     */
    readonly 'pull-request-review-request': {
      readonly users: readonly components['schemas']['simple-user'][]
      readonly teams: readonly components['schemas']['team'][]
    }
    /**
     * Pull Request Review
     * @description Pull Request Reviews are reviews on pull requests.
     */
    readonly 'pull-request-review': {
      /**
       * @description Unique identifier of the review
       * @example 42
       */
      readonly id: number
      /** @example MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA= */
      readonly node_id: string
      readonly user: components['schemas']['nullable-simple-user']
      /**
       * @description The text of the review.
       * @example This looks great.
       */
      readonly body: string
      /** @example CHANGES_REQUESTED */
      readonly state: string
      /**
       * Format: uri
       * @example https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80
       */
      readonly html_url: string
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/Hello-World/pulls/12
       */
      readonly pull_request_url: string
      readonly _links: {
        readonly html: {
          readonly href: string
        }
        readonly pull_request: {
          readonly href: string
        }
      }
      /** Format: date-time */
      readonly submitted_at?: string
      /**
       * @description A commit SHA for the review.
       * @example 54bb654c9e6025347f57900a4a5c2313a96b8035
       */
      readonly commit_id: string
      readonly body_html?: string
      readonly body_text?: string
      readonly author_association: components['schemas']['author-association']
    }
    /**
     * Legacy Review Comment
     * @description Legacy Review Comment
     */
    readonly 'review-comment': {
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/Hello-World/pulls/comments/1
       */
      readonly url: string
      /** @example 42 */
      readonly pull_request_review_id: number | null
      /** @example 10 */
      readonly id: number
      /** @example MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw */
      readonly node_id: string
      /** @example @@ -16,33 +16,40 @@ public class Connection : IConnection... */
      readonly diff_hunk: string
      /** @example file1.txt */
      readonly path: string
      /** @example 1 */
      readonly position: number | null
      /** @example 4 */
      readonly original_position: number
      /** @example 6dcb09b5b57875f334f61aebed695e2e4193db5e */
      readonly commit_id: string
      /** @example 9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840 */
      readonly original_commit_id: string
      /** @example 8 */
      readonly in_reply_to_id?: number
      readonly user: components['schemas']['nullable-simple-user']
      /** @example Great stuff */
      readonly body: string
      /**
       * Format: date-time
       * @example 2011-04-14T16:00:49Z
       */
      readonly created_at: string
      /**
       * Format: date-time
       * @example 2011-04-14T16:00:49Z
       */
      readonly updated_at: string
      /**
       * Format: uri
       * @example https://github.com/octocat/Hello-World/pull/1#discussion-diff-1
       */
      readonly html_url: string
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/Hello-World/pulls/1
       */
      readonly pull_request_url: string
      readonly author_association: components['schemas']['author-association']
      readonly _links: {
        readonly self: components['schemas']['link']
        readonly html: components['schemas']['link']
        readonly pull_request: components['schemas']['link']
      }
      readonly body_text?: string
      readonly body_html?: string
      readonly reactions?: components['schemas']['reaction-rollup']
      /**
       * @description The side of the first line of the range for a multi-line comment.
       * @default RIGHT
       * @enum {string}
       */
      readonly side?: 'LEFT' | 'RIGHT'
      /**
       * @description The side of the first line of the range for a multi-line comment.
       * @default RIGHT
       * @enum {string|null}
       */
      readonly start_side?: ('LEFT' | 'RIGHT') | null
      /**
       * @description The line of the blob to which the comment applies. The last line of the range for a multi-line comment
       * @example 2
       */
      readonly line?: number
      /**
       * @description The original line of the blob to which the comment applies. The last line of the range for a multi-line comment
       * @example 2
       */
      readonly original_line?: number
      /**
       * @description The first line of the range for a multi-line comment.
       * @example 2
       */
      readonly start_line?: number | null
      /**
       * @description The original first line of the range for a multi-line comment.
       * @example 2
       */
      readonly original_start_line?: number | null
    }
    /**
     * Release Asset
     * @description Data related to a release.
     */
    readonly 'release-asset': {
      /** Format: uri */
      readonly url: string
      /** Format: uri */
      readonly browser_download_url: string
      readonly id: number
      readonly node_id: string
      /**
       * @description The file name of the asset.
       * @example Team Environment
       */
      readonly name: string
      readonly label: string | null
      /**
       * @description State of the release asset.
       * @enum {string}
       */
      readonly state: 'uploaded' | 'open'
      readonly content_type: string
      readonly size: number
      readonly download_count: number
      /** Format: date-time */
      readonly created_at: string
      /** Format: date-time */
      readonly updated_at: string
      readonly uploader: components['schemas']['nullable-simple-user']
    }
    /**
     * Release
     * @description A release.
     */
    readonly release: {
      /** Format: uri */
      readonly url: string
      /** Format: uri */
      readonly html_url: string
      /** Format: uri */
      readonly assets_url: string
      readonly upload_url: string
      /** Format: uri */
      readonly tarball_url: string | null
      /** Format: uri */
      readonly zipball_url: string | null
      readonly id: number
      readonly node_id: string
      /**
       * @description The name of the tag.
       * @example v1.0.0
       */
      readonly tag_name: string
      /**
       * @description Specifies the commitish value that determines where the Git tag is created from.
       * @example master
       */
      readonly target_commitish: string
      readonly name: string | null
      readonly body?: string | null
      /**
       * @description true to create a draft (unpublished) release, false to create a published one.
       * @example false
       */
      readonly draft: boolean
      /**
       * @description Whether to identify the release as a prerelease or a full release.
       * @example false
       */
      readonly prerelease: boolean
      /** Format: date-time */
      readonly created_at: string
      /** Format: date-time */
      readonly published_at: string | null
      readonly author: components['schemas']['simple-user']
      readonly assets: readonly components['schemas']['release-asset'][]
      readonly body_html?: string
      readonly body_text?: string
      readonly mentions_count?: number
      readonly reactions?: components['schemas']['reaction-rollup']
    }
    /**
     * Generated Release Notes Content
     * @description Generated name and body describing a release
     */
    readonly 'release-notes-content': {
      /**
       * @description The generated name of the release
       * @example Release v1.0.0 is now available!
       */
      readonly name: string
      /** @description The generated body describing the contents of the release supporting markdown formatting */
      readonly body: string
    }
    readonly 'secret-scanning-alert': {
      readonly number?: components['schemas']['alert-number']
      readonly created_at?: components['schemas']['alert-created-at']
      readonly updated_at?: components['schemas']['alert-updated-at']
      readonly url?: components['schemas']['alert-url']
      readonly html_url?: components['schemas']['alert-html-url']
      /**
       * Format: uri
       * @description The REST API URL of the code locations for this alert.
       */
      readonly locations_url?: string
      readonly state?: components['schemas']['secret-scanning-alert-state']
      readonly resolution?: components['schemas']['secret-scanning-alert-resolution']
      /**
       * Format: date-time
       * @description The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
       */
      readonly resolved_at?: string | null
      readonly resolved_by?: components['schemas']['nullable-simple-user']
      /** @description The type of secret that secret scanning detected. */
      readonly secret_type?: string
      /**
       * @description User-friendly name for the detected secret, matching the `secret_type`.
       * For a list of built-in patterns, see "[Secret scanning patterns](https://docs.github.com/enterprise-server@3.6/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)."
       */
      readonly secret_type_display_name?: string
      /** @description The secret that was detected. */
      readonly secret?: string
      /** @description Whether push protection was bypassed for the detected secret. */
      readonly push_protection_bypassed?: boolean | null
      readonly push_protection_bypassed_by?: components['schemas']['nullable-simple-user']
      /**
       * Format: date-time
       * @description The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
       */
      readonly push_protection_bypassed_at?: string | null
    }
    /** @description Represents a 'commit' secret scanning location type. This location type shows that a secret was detected inside a commit to a repository. */
    readonly 'secret-scanning-location-commit': {
      /**
       * @description The file path in the repository
       * @example /example/secrets.txt
       */
      readonly path: string
      /** @description Line number at which the secret starts in the file */
      readonly start_line: number
      /** @description Line number at which the secret ends in the file */
      readonly end_line: number
      /** @description The column at which the secret starts within the start line when the file is interpreted as 8BIT ASCII */
      readonly start_column: number
      /** @description The column at which the secret ends within the end line when the file is interpreted as 8BIT ASCII */
      readonly end_column: number
      /**
       * @description SHA-1 hash ID of the associated blob
       * @example af5626b4a114abcb82d63db7c8082c3c4756e51b
       */
      readonly blob_sha: string
      /** @description The API URL to get the associated blob resource */
      readonly blob_url: string
      /**
       * @description SHA-1 hash ID of the associated commit
       * @example af5626b4a114abcb82d63db7c8082c3c4756e51b
       */
      readonly commit_sha: string
      /** @description The API URL to get the associated commit resource */
      readonly commit_url: string
    }
    readonly 'secret-scanning-location': {
      /**
       * @description The location type. Because secrets may be found in different types of resources (ie. code, comments, issues), this field identifies the type of resource where the secret was found.
       * @example commit
       * @enum {string}
       */
      readonly type: 'commit'
      readonly details: components['schemas']['secret-scanning-location-commit']
    }
    /**
     * Stargazer
     * @description Stargazer
     */
    readonly stargazer: {
      /** Format: date-time */
      readonly starred_at: string
      readonly user: components['schemas']['nullable-simple-user']
    }
    /**
     * Code Frequency Stat
     * @description Code Frequency Stat
     */
    readonly 'code-frequency-stat': readonly number[]
    /**
     * Commit Activity
     * @description Commit Activity
     */
    readonly 'commit-activity': {
      /**
       * @example [
       *   0,
       *   3,
       *   26,
       *   20,
       *   39,
       *   1,
       *   0
       * ]
       */
      readonly days: readonly number[]
      /** @example 89 */
      readonly total: number
      /** @example 1336280400 */
      readonly week: number
    }
    /**
     * Contributor Activity
     * @description Contributor Activity
     */
    readonly 'contributor-activity': {
      readonly author: components['schemas']['nullable-simple-user']
      /** @example 135 */
      readonly total: number
      /**
       * @example [
       *   {
       *     "w": "1367712000",
       *     "a": 6898,
       *     "d": 77,
       *     "c": 10
       *   }
       * ]
       */
      readonly weeks: readonly {
        readonly w?: number
        readonly a?: number
        readonly d?: number
        readonly c?: number
      }[]
    }
    /** Participation Stats */
    readonly 'participation-stats': {
      readonly all: readonly number[]
      readonly owner: readonly number[]
    }
    /**
     * Repository Invitation
     * @description Repository invitations let you manage who you collaborate with.
     */
    readonly 'repository-subscription': {
      /**
       * @description Determines if notifications should be received from this repository.
       * @example true
       */
      readonly subscribed: boolean
      /** @description Determines if all notifications should be blocked from this repository. */
      readonly ignored: boolean
      readonly reason: string | null
      /**
       * Format: date-time
       * @example 2012-10-06T21:34:12Z
       */
      readonly created_at: string
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/example/subscription
       */
      readonly url: string
      /**
       * Format: uri
       * @example https://api.github.com/repos/octocat/example
       */
      readonly repository_url: string
    }
    /**
     * Tag
     * @description Tag
     */
    readonly tag: {
      /** @example v0.1 */
      readonly name: string
      readonly commit: {
        readonly sha: string
        /** Format: uri */
        readonly url: string
      }
      /**
       * Format: uri
       * @example https://github.com/octocat/Hello-World/zipball/v0.1
       */
      readonly zipball_url: string
      /**
       * Format: uri
       * @example https://github.com/octocat/Hello-World/tarball/v0.1
       */
      readonly tarball_url: string
      readonly node_id: string
    }
    /**
     * Tag protection
     * @description Tag protection
     */
    readonly 'tag-protection': {
      /** @example 2 */
      readonly id?: number
      /** @example 2011-01-26T19:01:12Z */
      readonly created_at?: string
      /** @example 2011-01-26T19:01:12Z */
      readonly updated_at?: string
      /** @example true */
      readonly enabled?: boolean
      /** @example v1.* */
      readonly pattern: string
    }
    /**
     * Topic
     * @description A topic aggregates entities that are related to a subject.
     */
    readonly topic: {
      readonly names: readonly string[]
    }
    readonly 'scim-group-list-enterprise': {
      readonly schemas: readonly string[]
      readonly totalResults: number
      readonly itemsPerPage: number
      readonly startIndex: number
      readonly Resources: readonly {
        readonly schemas: readonly string[]
        readonly id: string
        readonly externalId?: string | null
        readonly displayName?: string
        readonly members?: readonly {
          readonly value?: string
          readonly $ref?: string
          readonly display?: string
        }[]
        readonly meta?: {
          readonly resourceType?: string
          readonly created?: string
          readonly lastModified?: string
          readonly location?: string
        }
      }[]
    }
    readonly 'scim-enterprise-group': {
      readonly schemas: readonly string[]
      readonly id: string
      readonly externalId?: string | null
      readonly displayName?: string
      readonly members?: readonly {
        readonly value?: string
        readonly $ref?: string
        readonly display?: string
      }[]
      readonly meta?: {
        readonly resourceType?: string
        readonly created?: string
        readonly lastModified?: string
        readonly location?: string
      }
    }
    readonly 'scim-user-list-enterprise': {
      readonly schemas: readonly string[]
      readonly totalResults: number
      readonly itemsPerPage: number
      readonly startIndex: number
      readonly Resources: readonly {
        readonly schemas: readonly string[]
        readonly id: string
        readonly externalId?: string
        readonly userName?: string
        readonly name?: {
          readonly givenName?: string
          readonly familyName?: string
        }
        readonly emails?: readonly {
          readonly value?: string
          readonly primary?: boolean
          readonly type?: string
        }[]
        readonly groups?: readonly {
          readonly value?: string
        }[]
        readonly active?: boolean
        readonly meta?: {
          readonly resourceType?: string
          readonly created?: string
          readonly lastModified?: string
          readonly location?: string
        }
      }[]
    }
    readonly 'scim-enterprise-user': {
      readonly schemas: readonly string[]
      readonly id: string
      readonly externalId?: string
      readonly userName?: string
      readonly name?: {
        readonly givenName?: string
        readonly familyName?: string
      }
      readonly emails?: readonly {
        readonly value?: string
        readonly type?: string
        readonly primary?: boolean
      }[]
      readonly groups?: readonly {
        readonly value?: string
      }[]
      readonly active?: boolean
      readonly meta?: {
        readonly resourceType?: string
        readonly created?: string
        readonly lastModified?: string
        readonly location?: string
      }
    }
    /** Search Result Text Matches */
    readonly 'search-result-text-matches': readonly {
      readonly object_url?: string
      readonly object_type?: string | null
      readonly property?: string
      readonly fragment?: string
      readonly matches?: readonly {
        readonly text?: string
        readonly indices?: readonly number[]
      }[]
    }[]
    /**
     * Code Search Result Item
     * @description Code Search Result Item
     */
    readonly 'code-search-result-item': {
      readonly name: string
      readonly path: string
      readonly sha: string
      /** Format: uri */
      readonly url: string
      /** Format: uri */
      readonly git_url: string
      /** Format: uri */
      readonly html_url: string
      readonly repository: components['schemas']['minimal-repository']
      readonly score: number
      readonly file_size?: number
      readonly language?: string | null
      /** Format: date-time */
      readonly last_modified_at?: string
      /**
       * @example [
       *   "73..77",
       *   "77..78"
       * ]
       */
      readonly line_numbers?: readonly string[]
      readonly text_matches?: components['schemas']['search-result-text-matches']
    }
    /**
     * Commit Search Result Item
     * @description Commit Search Result Item
     */
    readonly 'commit-search-result-item': {
      /** Format: uri */
      readonly url: string
      readonly sha: string
      /** Format: uri */
      readonly html_url: string
      /** Format: uri */
      readonly comments_url: string
      readonly commit: {
        readonly author: {
          readonly name: string
          readonly email: string
          /** Format: date-time */
          readonly date: string
        }
        readonly committer: components['schemas']['nullable-git-user']
        readonly comment_count: number
        readonly message: string
        readonly tree: {
          readonly sha: string
          /** Format: uri */
          readonly url: string
        }
        /** Format: uri */
        readonly url: string
        readonly verification?: components['schemas']['verification']
      }
      readonly author: components['schemas']['nullable-simple-user']
      readonly committer: components['schemas']['nullable-git-user']
      readonly parents: readonly {
        readonly url?: string
        readonly html_url?: string
        readonly sha?: string
      }[]
      readonly repository: components['schemas']['minimal-repository']
      readonly score: number
      readonly node_id: string
      readonly text_matches?: components['schemas']['search-result-text-matches']
    }
    /**
     * Issue Search Result Item
     * @description Issue Search Result Item
     */
    readonly 'issue-search-result-item': {
      /** Format: uri */
      readonly url: string
      /** Format: uri */
      readonly repository_url: string
      readonly labels_url: string
      /** Format: uri */
      readonly comments_url: string
      /** Format: uri */
      readonly events_url: string
      /** Format: uri */
      readonly html_url: string
      readonly id: number
      readonly node_id: string
      readonly number: number
      readonly title: string
      readonly locked: boolean
      readonly active_lock_reason?: string | null
      readonly assignees?: readonly components['schemas']['simple-user'][] | null
      readonly user: components['schemas']['nullable-simple-user']
      readonly labels: readonly {
        /** Format: int64 */
        readonly id?: number
        readonly node_id?: string
        readonly url?: string
        readonly name?: string
        readonly color?: string
        readonly default?: boolean
        readonly description?: string | null
      }[]
      readonly state: string
      readonly state_reason?: string | null
      readonly assignee: components['schemas']['nullable-simple-user']
      readonly milestone: components['schemas']['nullable-milestone']
      readonly comments: number
      /** Format: date-time */
      readonly created_at: string
      /** Format: date-time */
      readonly updated_at: string
      /** Format: date-time */
      readonly closed_at: string | null
      readonly text_matches?: components['schemas']['search-result-text-matches']
      readonly pull_request?: {
        /** Format: date-time */
        readonly merged_at?: string | null
        /** Format: uri */
        readonly diff_url: string | null
        /** Format: uri */
        readonly html_url: string | null
        /** Format: uri */
        readonly patch_url: string | null
        /** Format: uri */
        readonly url: string | null
      }
      readonly body?: string
      readonly score: number
      readonly author_association: components['schemas']['author-association']
      readonly draft?: boolean
      readonly repository?: components['schemas']['repository']
      readonly body_html?: string
      readonly body_text?: string
      /** Format: uri */
      readonly timeline_url?: string
      readonly performed_via_github_app?: components['schemas']['nullable-integration']
      readonly reactions?: components['schemas']['reaction-rollup']
    }
    /**
     * Label Search Result Item
     * @description Label Search Result Item
     */
    readonly 'label-search-result-item': {
      readonly id: number
      readonly node_id: string
      /** Format: uri */
      readonly url: string
      readonly name: string
      readonly color: string
      readonly default: boolean
      readonly description: string | null
      readonly score: number
      readonly text_matches?: components['schemas']['search-result-text-matches']
    }
    /**
     * Repo Search Result Item
     * @description Repo Search Result Item
     */
    readonly 'repo-search-result-item': {
      readonly id: number
      readonly node_id: string
      readonly name: string
      readonly full_name: string
      readonly owner: components['schemas']['nullable-simple-user']
      readonly private: boolean
      /** Format: uri */
      readonly html_url: string
      readonly description: string | null
      readonly fork: boolean
      /** Format: uri */
      readonly url: string
      /** Format: date-time */
      readonly created_at: string
      /** Format: date-time */
      readonly updated_at: string
      /** Format: date-time */
      readonly pushed_at: string
      /** Format: uri */
      readonly homepage: string | null
      readonly size: number
      readonly stargazers_count: number
      readonly watchers_count: number
      readonly language: string | null
      readonly forks_count: number
      readonly open_issues_count: number
      readonly master_branch?: string
      readonly default_branch: string
      readonly score: number
      /** Format: uri */
      readonly forks_url: string
      readonly keys_url: string
      readonly collaborators_url: string
      /** Format: uri */
      readonly teams_url: string
      /** Format: uri */
      readonly hooks_url: string
      readonly issue_events_url: string
      /** Format: uri */
      readonly events_url: string
      readonly assignees_url: string
      readonly branches_url: string
      /** Format: uri */
      readonly tags_url: string
      readonly blobs_url: string
      readonly git_tags_url: string
      readonly git_refs_url: string
      readonly trees_url: string
      readonly statuses_url: string
      /** Format: uri */
      readonly languages_url: string
      /** Format: uri */
      readonly stargazers_url: string
      /** Format: uri */
      readonly contributors_url: string
      /** Format: uri */
      readonly subscribers_url: string
      /** Format: uri */
      readonly subscription_url: string
      readonly commits_url: string
      readonly git_commits_url: string
      readonly comments_url: string
      readonly issue_comment_url: string
      readonly contents_url: string
      readonly compare_url: string
      /** Format: uri */
      readonly merges_url: string
      readonly archive_url: string
      /** Format: uri */
      readonly downloads_url: string
      readonly issues_url: string
      readonly pulls_url: string
      readonly milestones_url: string
      readonly notifications_url: string
      readonly labels_url: string
      readonly releases_url: string
      /** Format: uri */
      readonly deployments_url: string
      readonly git_url: string
      readonly ssh_url: string
      readonly clone_url: string
      /** Format: uri */
      readonly svn_url: string
      readonly forks: number
      readonly open_issues: number
      readonly watchers: number
      readonly topics?: readonly string[]
      /** Format: uri */
      readonly mirror_url: string | null
      readonly has_issues: boolean
      readonly has_projects: boolean
      readonly has_pages: boolean
      readonly has_wiki: boolean
      readonly has_downloads: boolean
      readonly archived: boolean
      /** @description Returns whether or not this repository disabled. */
      readonly disabled: boolean
      /** @description The repository visibility: public, private, or internal. */
      readonly visibility?: string
      readonly license: components['schemas']['nullable-license-simple']
      readonly permissions?: {
        readonly admin: boolean
        readonly maintain?: boolean
        readonly push: boolean
        readonly triage?: boolean
        readonly pull: boolean
      }
      readonly text_matches?: components['schemas']['search-result-text-matches']
      readonly temp_clone_token?: string
      readonly allow_merge_commit?: boolean
      readonly allow_squash_merge?: boolean
      readonly allow_rebase_merge?: boolean
      readonly allow_auto_merge?: boolean
      readonly delete_branch_on_merge?: boolean
      readonly allow_forking?: boolean
      readonly is_template?: boolean
      /** @example false */
      readonly web_commit_signoff_required?: boolean
    }
    /**
     * Topic Search Result Item
     * @description Topic Search Result Item
     */
    readonly 'topic-search-result-item': {
      readonly name: string
      readonly display_name: string | null
      readonly short_description: string | null
      readonly description: string | null
      readonly created_by: string | null
      readonly released: string | null
      /** Format: date-time */
      readonly created_at: string
      /** Format: date-time */
      readonly updated_at: string
      readonly featured: boolean
      readonly curated: boolean
      readonly score: number
      readonly repository_count?: number | null
      /** Format: uri */
      readonly logo_url?: string | null
      readonly text_matches?: components['schemas']['search-result-text-matches']
      readonly related?:
        | readonly {
            readonly topic_relation?: {
              readonly id?: number
              readonly name?: string
              readonly topic_id?: number
              readonly relation_type?: string
            }
          }[]
        | null
      readonly aliases?:
        | readonly {
            readonly topic_relation?: {
              readonly id?: number
              readonly name?: string
              readonly topic_id?: number
              readonly relation_type?: string
            }
          }[]
        | null
    }
    /**
     * User Search Result Item
     * @description User Search Result Item
     */
    readonly 'user-search-result-item': {
      readonly login: string
      readonly id: number
      readonly node_id: string
      /** Format: uri */
      readonly avatar_url: string
      readonly gravatar_id: string | null
      /** Format: uri */
      readonly url: string
      /** Format: uri */
      readonly html_url: string
      /** Format: uri */
      readonly followers_url: string
      /** Format: uri */
      readonly subscriptions_url: string
      /** Format: uri */
      readonly organizations_url: string
      /** Format: uri */
      readonly repos_url: string
      /** Format: uri */
      readonly received_events_url: string
      readonly type: string
      readonly score: number
      readonly following_url: string
      readonly gists_url: string
      readonly starred_url: string
      readonly events_url: string
      readonly public_repos?: number
      readonly public_gists?: number
      readonly followers?: number
      readonly following?: number
      /** Format: date-time */
      readonly created_at?: string
      /** Format: date-time */
      readonly updated_at?: string
      readonly name?: string | null
      readonly bio?: string | null
      /** Format: email */
      readonly email?: string | null
      readonly location?: string | null
      readonly site_admin: boolean
      readonly hireable?: boolean | null
      readonly text_matches?: components['schemas']['search-result-text-matches']
      readonly blog?: string | null
      readonly company?: string | null
      /** Format: date-time */
      readonly suspended_at?: string | null
    }
    readonly 'configuration-status': {
      readonly status?: string
      readonly progress?: readonly {
        readonly status: string
        readonly key: string
      }[]
    }
    readonly 'maintenance-status': {
      readonly status?: string
      readonly scheduled_time?: string
      readonly connection_services?: readonly {
        readonly name: string
        readonly number: number
      }[]
    }
    readonly 'enterprise-settings': {
      readonly enterprise?: {
        readonly private_mode?: boolean
        readonly public_pages?: boolean
        readonly subdomain_isolation?: boolean
        readonly signup_enabled?: boolean
        readonly github_hostname?: string
        readonly identicons_host?: string
        readonly http_proxy?: string | null
        readonly auth_mode?: string
        readonly expire_sessions?: boolean
        readonly admin_password?: string | null
        readonly configuration_id?: number
        readonly configuration_run_count?: number
        readonly avatar?: {
          readonly enabled?: boolean
          readonly uri?: string
        }
        readonly customer?: {
          readonly name?: string
          readonly email?: string
          readonly uuid?: string
          readonly secret_key_data?: string
          readonly public_key_data?: string
        }
        readonly license?: {
          readonly seats?: number
          readonly evaluation?: boolean
          readonly perpetual?: boolean
          readonly unlimited_seating?: boolean
          readonly support_key?: string
          readonly ssh_allowed?: boolean
          readonly cluster_support?: boolean
          readonly expire_at?: string
        }
        readonly github_ssl?: {
          readonly enabled?: boolean
          readonly cert?: string | null
          readonly key?: string | null
        }
        readonly ldap?: {
          readonly host?: string | null
          readonly port?: number
          readonly base?: readonly unknown[]
          readonly uid?: string | null
          readonly bind_dn?: string | null
          readonly password?: string | null
          readonly method?: string
          readonly search_strategy?: string
          readonly user_groups?: readonly unknown[]
          readonly admin_group?: string | null
          readonly virtual_attribute_enabled?: boolean
          readonly recursive_group_search?: boolean
          readonly posix_support?: boolean
          readonly user_sync_emails?: boolean
          readonly user_sync_keys?: boolean
          readonly user_sync_interval?: number
          readonly team_sync_interval?: number
          readonly sync_enabled?: boolean
          readonly reconciliation?: {
            readonly user?: string | null
            readonly org?: string | null
          }
          readonly profile?: {
            readonly uid?: string
            readonly name?: string | null
            readonly mail?: string | null
            readonly key?: string | null
          }
        }
        readonly cas?: {
          readonly url?: string | null
        }
        readonly saml?: {
          readonly sso_url?: string | null
          readonly certificate?: string | null
          readonly certificate_path?: string | null
          readonly issuer?: string | null
          readonly idp_initiated_sso?: boolean
          readonly disable_admin_demote?: boolean
        }
        readonly github_oauth?: {
          readonly client_id?: string
          readonly client_secret?: string
          readonly organization_name?: string
          readonly organization_team?: string
        }
        readonly smtp?: {
          readonly enabled?: boolean
          readonly address?: string
          readonly authentication?: string
          readonly port?: string
          readonly domain?: string
          readonly username?: string
          readonly user_name?: string
          readonly enable_starttls_auto?: boolean
          readonly password?: string
          readonly 'discard-to-noreply-address'?: boolean
          readonly support_address?: string
          readonly support_address_type?: string
          readonly noreply_address?: string
        }
        readonly ntp?: {
          readonly primary_server?: string
          readonly secondary_server?: string
        }
        readonly timezone?: string | null
        readonly snmp?: {
          readonly enabled?: boolean
          readonly community?: string
        }
        readonly syslog?: {
          readonly enabled?: boolean
          readonly server?: string | null
          readonly protocol_name?: string
        }
        readonly assets?: string | null
        readonly pages?: {
          readonly enabled?: boolean
        }
        readonly collectd?: {
          readonly enabled?: boolean
          readonly server?: string | null
          readonly port?: number
          readonly encryption?: string | null
          readonly username?: string | null
          readonly password?: string | null
        }
        readonly mapping?: {
          readonly enabled?: boolean
          readonly tileserver?: string | null
          readonly basemap?: string
          readonly token?: string | null
        }
        readonly load_balancer?: string | null
      }
      readonly run_list?: readonly string[]
    }
    readonly 'ssh-key': {
      readonly key?: string
      readonly 'pretty-print'?: string
    }
    /**
     * Private User
     * @description Private User
     */
    readonly 'private-user': {
      /** @example octocat */
      readonly login: string
      /** @example 1 */
      readonly id: number
      /** @example MDQ6VXNlcjE= */
      readonly node_id: string
      /**
       * Format: uri
       * @example https://github.com/images/error/octocat_happy.gif
       */
      readonly avatar_url: string
      /** @example 41d064eb2195891e12d0413f63227ea7 */
      readonly gravatar_id: string | null
      /**
       * Format: uri
       * @example https://api.github.com/users/octocat
       */
      readonly url: string
      /**
       * Format: uri
       * @example https://github.com/octocat
       */
      readonly html_url: string
      /**
       * Format: uri
       * @example https://api.github.com/users/octocat/followers
       */
      readonly followers_url: string
      /** @example https://api.github.com/users/octocat/following{/other_user} */
      readonly following_url: string
      /** @example https://api.github.com/users/octocat/gists{/gist_id} */
      readonly gists_url: string
      /** @example https://api.github.com/users/octocat/starred{/owner}{/repo} */
      readonly starred_url: string
      /**
       * Format: uri
       * @example https://api.github.com/users/octocat/subscriptions
       */
      readonly subscriptions_url: string
      /**
       * Format: uri
       * @example https://api.github.com/users/octocat/orgs
       */
      readonly organizations_url: string
      /**
       * Format: uri
       * @example https://api.github.com/users/octocat/repos
       */
      readonly repos_url: string
      /** @example https://api.github.com/users/octocat/events{/privacy} */
      readonly events_url: string
      /**
       * Format: uri
       * @example https://api.github.com/users/octocat/received_events
       */
      readonly received_events_url: string
      /** @example User */
      readonly type: string
      readonly site_admin: boolean
      /** @example monalisa octocat */
      readonly name: string | null
      /** @example GitHub */
      readonly company: string | null
      /** @example https://github.com/blog */
      readonly blog: string | null
      /** @example San Francisco */
      readonly location: string | null
      /**
       * Format: email
       * @example octocat@github.com
       */
      readonly email: string | null
      readonly hireable: boolean | null
      /** @example There once was... */
      readonly bio: string | null
      /** @example monalisa */
      readonly twitter_username?: string | null
      /** @example 2 */
      readonly public_repos: number
      /** @example 1 */
      readonly public_gists: number
      /** @example 20 */
      readonly followers: number
      /** @example 0 */
      readonly following: number
      /**
       * Format: date-time
       * @example 2008-01-14T04:33:35Z
       */
      readonly created_at: string
      /**
       * Format: date-time
       * @example 2008-01-14T04:33:35Z
       */
      readonly updated_at: string
      /** @example 81 */
      readonly private_gists: number
      /** @example 100 */
      readonly total_private_repos: number
      /** @example 100 */
      readonly owned_private_repos: number
      /** @example 10000 */
      readonly disk_usage: number
      /** @example 8 */
      readonly collaborators: number
      /** @example true */
      readonly two_factor_authentication: boolean
      readonly plan?: {
        readonly collaborators: number
        readonly name: string
        readonly space: number
        readonly private_repos: number
      }
      /** Format: date-time */
      readonly suspended_at?: string | null
      readonly business_plus?: boolean
      readonly ldap_dn?: string
    }
    /**
     * Email
     * @description Email
     */
    readonly email: {
      /**
       * Format: email
       * @example octocat@github.com
       */
      readonly email: string
      /** @example true */
      readonly primary: boolean
      /** @example true */
      readonly verified: boolean
      /** @example public */
      readonly visibility: string | null
    }
    /**
     * GPG Key
     * @description A unique encryption key
     */
    readonly 'gpg-key': {
      /** @example 3 */
      readonly id: number
      /** @example Octocat's GPG Key */
      readonly name?: string | null
      readonly primary_key_id: number | null
      /** @example 3262EFF25BA0D270 */
      readonly key_id: string
      /** @example xsBNBFayYZ... */
      readonly public_key: string
      /**
       * @example [
       *   {
       *     "email": "octocat@users.noreply.github.com",
       *     "verified": true
       *   }
       * ]
       */
      readonly emails: readonly {
        readonly email?: string
        readonly verified?: boolean
      }[]
      /**
       * @example [
       *   {
       *     "id": 4,
       *     "primary_key_id": 3,
       *     "key_id": "4A595D4C72EE49C7",
       *     "public_key": "zsBNBFayYZ...",
       *     "emails": [],
       *     "subkeys": [],
       *     "can_sign": false,
       *     "can_encrypt_comms": true,
       *     "can_encrypt_storage": true,
       *     "can_certify": false,
       *     "created_at": "2016-03-24T11:31:04-06:00",
       *     "expires_at": null,
       *     "revoked": false
       *   }
       * ]
       */
      readonly subkeys: readonly {
        readonly id?: number
        readonly primary_key_id?: number
        readonly key_id?: string
        readonly public_key?: string
        readonly emails?: readonly unknown[]
        readonly subkeys?: readonly unknown[]
        readonly can_sign?: boolean
        readonly can_encrypt_comms?: boolean
        readonly can_encrypt_storage?: boolean
        readonly can_certify?: boolean
        readonly created_at?: string
        readonly expires_at?: string | null
        readonly raw_key?: string | null
        readonly revoked?: boolean
      }[]
      /** @example true */
      readonly can_sign: boolean
      readonly can_encrypt_comms: boolean
      readonly can_encrypt_storage: boolean
      /** @example true */
      readonly can_certify: boolean
      /**
       * Format: date-time
       * @example 2016-03-24T11:31:04-06:00
       */
      readonly created_at: string
      /** Format: date-time */
      readonly expires_at: string | null
      /** @example true */
      readonly revoked: boolean
      readonly raw_key: string | null
    }
    /**
     * Key
     * @description Key
     */
    readonly key: {
      readonly key: string
      readonly id: number
      readonly url: string
      readonly title: string
      /** Format: date-time */
      readonly created_at: string
      readonly verified: boolean
      readonly read_only: boolean
    }
    /**
     * Starred Repository
     * @description Starred Repository
     */
    readonly 'starred-repository': {
      /** Format: date-time */
      readonly starred_at: string
      readonly repo: components['schemas']['repository']
    }
    /**
     * Hovercard
     * @description Hovercard
     */
    readonly hovercard: {
      readonly contexts: readonly {
        readonly message: string
        readonly octicon: string
      }[]
    }
    /**
     * Key Simple
     * @description Key Simple
     */
    readonly 'key-simple': {
      readonly id: number
      readonly key: string
    }
  }
  readonly responses: {
    /** Resource not found */
    readonly not_found: {
      readonly content: {
        readonly 'application/json': components['schemas']['basic-error']
      }
    }
    /** Validation failed, or the endpoint has been spammed. */
    readonly validation_failed_simple: {
      readonly content: {
        readonly 'application/json': components['schemas']['validation-error-simple']
      }
    }
    /** Bad Request */
    readonly bad_request: {
      readonly content: {
        readonly 'application/json': components['schemas']['basic-error']
        readonly 'application/scim+json': components['schemas']['scim-error']
      }
    }
    /** Validation failed, or the endpoint has been spammed. */
    readonly validation_failed: {
      readonly content: {
        readonly 'application/json': components['schemas']['validation-error']
      }
    }
    /** Accepted */
    readonly accepted: {
      readonly content: {
        readonly 'application/json': { readonly [key: string]: unknown }
      }
    }
    /** Forbidden */
    readonly forbidden: {
      readonly content: {
        readonly 'application/json': components['schemas']['basic-error']
      }
    }
    /** Requires authentication */
    readonly requires_authentication: {
      readonly content: {
        readonly 'application/json': components['schemas']['basic-error']
      }
    }
    /** Not modified */
    readonly not_modified: unknown
    /** Gone */
    readonly gone: {
      readonly content: {
        readonly 'application/json': components['schemas']['basic-error']
      }
    }
    /** Response */
    readonly actions_runner_labels: {
      readonly content: {
        readonly 'application/json': {
          readonly total_count: number
          readonly labels: readonly components['schemas']['runner-label'][]
        }
      }
    }
    /** Response */
    readonly actions_runner_labels_readonly: {
      readonly content: {
        readonly 'application/json': {
          readonly total_count: number
          readonly labels: readonly components['schemas']['runner-label'][]
        }
      }
    }
    /** Service unavailable */
    readonly service_unavailable: {
      readonly content: {
        readonly 'application/json': {
          readonly code?: string
          readonly message?: string
          readonly documentation_url?: string
        }
      }
    }
    /** Response if GitHub Advanced Security is not enabled for this repository */
    readonly code_scanning_forbidden_read: {
      readonly content: {
        readonly 'application/json': components['schemas']['basic-error']
      }
    }
    /** Forbidden Gist */
    readonly forbidden_gist: {
      readonly content: {
        readonly 'application/json': {
          readonly block?: {
            readonly reason?: string
            readonly created_at?: string
            readonly html_url?: string | null
          }
          readonly message?: string
          readonly documentation_url?: string
        }
      }
    }
    /** Moved permanently */
    readonly moved_permanently: {
      readonly content: {
        readonly 'application/json': components['schemas']['basic-error']
      }
    }
    /** Conflict */
    readonly conflict: {
      readonly content: {
        readonly 'application/json': components['schemas']['basic-error']
      }
    }
    /** Temporary Redirect */
    readonly temporary_redirect: {
      readonly content: {
        readonly 'application/json': components['schemas']['basic-error']
      }
    }
    /** Internal Error */
    readonly internal_error: {
      readonly content: {
        readonly 'application/json': components['schemas']['basic-error']
      }
    }
    /** Response if the repository is archived or if GitHub Advanced Security is not enabled for this repository */
    readonly code_scanning_forbidden_write: {
      readonly content: {
        readonly 'application/json': components['schemas']['basic-error']
      }
    }
    /** Found */
    readonly found: unknown
    /** A header with no content is returned. */
    readonly no_content: unknown
  }
  readonly parameters: {
    /** @description The number of results per page (max 100). */
    readonly 'per-page': number
    /** @description Page number of the results to fetch. */
    readonly page: number
    /** @description The unique identifier of the hook. */
    readonly 'hook-id': number
    /** @description The direction to sort the results by. */
    readonly direction: 'asc' | 'desc'
    /** @description The unique identifier of the key. */
    readonly 'key-ids': string
    /** @description The unique identifier of the team. */
    readonly 'team-id': number
    /** @description The handle for the GitHub user account. */
    readonly username: string
    /** @description The organization name. The name is not case sensitive. */
    readonly org: string
    /** @description The unique identifier of the pre-receive environment. */
    readonly 'pre-receive-environment-id': number
    /** @description The unique identifier of the pre-receive hook. */
    readonly 'pre-receive-hook-id': number
    /** @description The unique identifier of the token. */
    readonly 'token-id': number
    /** @description Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors. */
    readonly cursor: string
    readonly 'delivery-id': number
    /** @description Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
    readonly since: string
    /** @description The unique identifier of the installation. */
    readonly 'installation-id': number
    /** @description The unique identifier of the grant. */
    readonly 'grant-id': number
    /** @description The client ID of the GitHub app. */
    readonly 'client-id': string
    readonly 'app-slug': string
    /** @description The client ID of the OAuth app. */
    readonly 'oauth-client-id': string
    /** @description The unique identifier of the authorization. */
    readonly 'authorization-id': number
    /** @description The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
    readonly enterprise: string
    /** @description The unique identifier of the organization. */
    readonly 'org-id': number
    /** @description Only return runner groups that are allowed to be used by this organization. */
    readonly 'visible-to-organization': string
    /** @description Unique identifier of the self-hosted runner group. */
    readonly 'runner-group-id': number
    /** @description Unique identifier of the self-hosted runner. */
    readonly 'runner-id': number
    /** @description The name of a self-hosted runner's custom label. */
    readonly 'runner-label-name': string
    /** @description A search phrase. For more information, see [Searching the audit log](https://docs.github.com/enterprise-server@3.6/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization#searching-the-audit-log). */
    readonly 'audit-log-phrase': string
    /**
     * @description The event types to include:
     *
     * - `web` - returns web (non-Git) events.
     * - `git` - returns Git events.
     * - `all` - returns both web and Git events.
     *
     * The default is `web`.
     */
    readonly 'audit-log-include': 'web' | 'git' | 'all'
    /** @description A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor. */
    readonly 'audit-log-after': string
    /** @description A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor. */
    readonly 'audit-log-before': string
    /**
     * @description The order of audit log events. To list newest events first, specify `desc`. To list oldest events first, specify `asc`.
     *
     * The default is `desc`.
     */
    readonly 'audit-log-order': 'desc' | 'asc'
    /** @description Set to `open` or `resolved` to only list secret scanning alerts in a specific state. */
    readonly 'secret-scanning-alert-state': 'open' | 'resolved'
    /**
     * @description A comma-separated list of secret types to return. By default all secret types are returned.
     * See "[Secret scanning patterns](https://docs.github.com/enterprise-server@3.6/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)"
     * for a complete list of secret types.
     */
    readonly 'secret-scanning-alert-secret-type': string
    /** @description A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`. */
    readonly 'secret-scanning-alert-resolution': string
    /** @description The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved. */
    readonly 'secret-scanning-alert-sort': 'created' | 'updated'
    /** @description A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results before this cursor. */
    readonly 'pagination-before': string
    /** @description A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results after this cursor. */
    readonly 'pagination-after': string
    /** @description The unique identifier of the gist. */
    readonly 'gist-id': string
    /** @description The unique identifier of the comment. */
    readonly 'comment-id': number
    /** @description A list of comma separated label names. Example: `bug,ui,@high` */
    readonly labels: string
    /** @description The account owner of the repository. The name is not case sensitive. */
    readonly owner: string
    /** @description The name of the repository. The name is not case sensitive. */
    readonly repo: string
    /** @description If `true`, show notifications marked as read. */
    readonly all: boolean
    /** @description If `true`, only shows notifications in which the user is directly participating or mentioned. */
    readonly participating: boolean
    /** @description Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
    readonly before: string
    /** @description The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/enterprise-server@3.6/rest/reference/activity#list-notifications-for-the-authenticated-user)). */
    readonly 'thread-id': number
    /** @description An organization ID. Only return organizations with an ID greater than this ID. */
    readonly 'since-org': number
    /** @description The unique identifier of the repository. */
    readonly 'repository-id': number
    /** @description Only return runner groups that are allowed to be used by this repository. */
    readonly 'visible-to-repository': string
    /** @description The name of the secret. */
    readonly 'secret-name': string
    /** @description The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both. */
    readonly 'tool-name': components['schemas']['code-scanning-analysis-tool-name']
    /** @description The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both. */
    readonly 'tool-guid': components['schemas']['code-scanning-analysis-tool-guid']
    /** @description The unique identifier of the group. */
    readonly 'group-id': number
    /** @description The unique identifier of the migration. */
    readonly 'migration-id': number
    /** @description The slug of the team name. */
    readonly 'team-slug': string
    /** @description The number that identifies the discussion. */
    readonly 'discussion-number': number
    /** @description The number that identifies the comment. */
    readonly 'comment-number': number
    /** @description The unique identifier of the reaction. */
    readonly 'reaction-id': number
    /** @description The unique identifier of the project. */
    readonly 'project-id': number
    /** @description The unique identifier of the card. */
    readonly 'card-id': number
    /** @description The unique identifier of the column. */
    readonly 'column-id': number
    /** @description The unique identifier of the artifact. */
    readonly 'artifact-id': number
    /** @description The unique identifier of the job. */
    readonly 'job-id': number
    /** @description Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run. */
    readonly actor: string
    /** @description Returns workflow runs associated with a branch. Use the name of the branch of the `push`. */
    readonly 'workflow-run-branch': string
    /** @description Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://docs.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)." */
    readonly event: string
    /** @description Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`. */
    readonly 'workflow-run-status':
      | 'completed'
      | 'action_required'
      | 'cancelled'
      | 'failure'
      | 'neutral'
      | 'skipped'
      | 'stale'
      | 'success'
      | 'timed_out'
      | 'in_progress'
      | 'queued'
      | 'requested'
      | 'waiting'
    /** @description Returns workflow runs created within the given date-time range. For more information on the syntax, see "[Understanding the search syntax](https://docs.github.com/enterprise-server@3.6/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)." */
    readonly created: string
    /** @description If `true` pull requests are omitted from the response (empty array). */
    readonly 'exclude-pull-requests': boolean
    /** @description Returns workflow runs with the `check_suite_id` that you specify. */
    readonly 'workflow-run-check-suite-id': number
    /** @description The unique identifier of the workflow run. */
    readonly 'run-id': number
    /** @description The attempt number of the workflow run. */
    readonly 'attempt-number': number
    /** @description The ID of the workflow. You can also pass the workflow file name as a string. */
    readonly 'workflow-id': number | string
    /** @description The unique identifier of the autolink. */
    readonly 'autolink-id': number
    /** @description The name of the branch. */
    readonly branch: string
    /** @description The unique identifier of the check run. */
    readonly 'check-run-id': number
    /** @description The unique identifier of the check suite. */
    readonly 'check-suite-id': number
    /** @description Returns check runs with the specified `name`. */
    readonly 'check-name': string
    /** @description Returns check runs with the specified `status`. */
    readonly status: 'queued' | 'in_progress' | 'completed'
    /** @description The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */
    readonly 'git-ref': components['schemas']['code-scanning-ref']
    /** @description The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation. */
    readonly 'alert-number': components['schemas']['alert-number']
    /** @description The SHA of the commit. */
    readonly 'commit-sha': string
    /** @description The full path, relative to the repository root, of the dependency manifest file. */
    readonly 'manifest-path': string
    /** @description deployment_id parameter */
    readonly 'deployment-id': number
    /** @description The name of the environment. */
    readonly 'environment-name': string
    /** @description The unique identifier of the branch policy. */
    readonly 'branch-policy-id': number
    /** @description The unique identifier of the invitation. */
    readonly 'invitation-id': number
    /** @description The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to. */
    readonly sort: 'created' | 'updated'
    /** @description The number that identifies the issue. */
    readonly 'issue-number': number
    /** @description The unique identifier of the key. */
    readonly 'key-id': number
    /** @description The number that identifies the milestone. */
    readonly 'milestone-number': number
    /** @description The number that identifies the pull request. */
    readonly 'pull-number': number
    /** @description The unique identifier of the review. */
    readonly 'review-id': number
    /** @description The unique identifier of the asset. */
    readonly 'asset-id': number
    /** @description The unique identifier of the release. */
    readonly 'release-id': number
    /** @description The unique identifier of the tag protection. */
    readonly 'tag-protection-id': number
    /** @description A repository ID. Only return repositories with an ID greater than this ID. */
    readonly 'since-repo': number
    /** @description Used for pagination: the index of the first result to return. */
    readonly 'start-index': number
    /** @description Used for pagination: the number of results to return. */
    readonly count: number
    /** @description Identifier generated by the GitHub SCIM endpoint. */
    readonly 'scim-group-id': string
    /** @description The unique identifier of the SCIM user. */
    readonly 'scim-user-id': string
    /** @description Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */
    readonly order: 'desc' | 'asc'
    /** @description The unique identifier of the GPG key. */
    readonly 'gpg-key-id': number
    /** @description A user ID. Only return users with an ID greater than this ID. */
    readonly 'since-user': number
  }
  readonly headers: {
    readonly link?: string
    readonly 'content-type'?: string
    readonly 'x-common-marker-version'?: string
    readonly 'x-rate-limit-limit'?: number
    readonly 'x-rate-limit-remaining'?: number
    readonly 'x-rate-limit-reset'?: number
    readonly location?: string
  }
}

export interface operations {
  /** Get Hypermedia links to resources accessible in GitHub's REST API */
  readonly 'meta/root': {
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['root']
        }
      }
    }
  }
  readonly 'enterprise-admin/list-global-webhooks': {
    readonly parameters: {
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['global-hook'][]
        }
      }
    }
  }
  readonly 'enterprise-admin/create-global-webhook': {
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['global-hook']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description Must be passed as "web". */
          readonly name: string
          /** @description Key/value pairs to provide settings for this webhook. */
          readonly config: {
            /** @description The URL to which the payloads will be delivered. */
            readonly url: string
            /** @description The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
            readonly content_type?: string
            /** @description If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://docs.github.com/enterprise-server@3.6/webhooks/event-payloads/#delivery-headers) header. */
            readonly secret?: string
            /** @description Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
            readonly insecure_ssl?: string
          }
          /** @description The [events](https://docs.github.com/enterprise-server@3.6/webhooks/event-payloads) that trigger this webhook. A global webhook can be triggered by `user` and `organization` events. Default: `user` and `organization`. */
          readonly events?: readonly string[]
          /**
           * @description Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
           * @default true
           */
          readonly active?: boolean
        }
      }
    }
  }
  readonly 'enterprise-admin/get-global-webhook': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the hook. */
        readonly hook_id: components['parameters']['hook-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['global-hook']
        }
      }
    }
  }
  readonly 'enterprise-admin/delete-global-webhook': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the hook. */
        readonly hook_id: components['parameters']['hook-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /** Parameters that are not provided will be overwritten with the default value or removed if no default exists. */
  readonly 'enterprise-admin/update-global-webhook': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the hook. */
        readonly hook_id: components['parameters']['hook-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['global-hook-2']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description Key/value pairs to provide settings for this webhook. */
          readonly config?: {
            /** @description The URL to which the payloads will be delivered. */
            readonly url: string
            /** @description The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
            readonly content_type?: string
            /** @description If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://docs.github.com/enterprise-server@3.6/webhooks/event-payloads/#delivery-headers) header. */
            readonly secret?: string
            /** @description Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
            readonly insecure_ssl?: string
          }
          /** @description The [events](https://docs.github.com/enterprise-server@3.6/webhooks/event-payloads) that trigger this webhook. A global webhook can be triggered by `user` and `organization` events. Default: `user` and `organization`. */
          readonly events?: readonly string[]
          /**
           * @description Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
           * @default true
           */
          readonly active?: boolean
        }
      }
    }
  }
  /** This will trigger a [ping event](https://docs.github.com/enterprise-server@3.6/webhooks/#ping-event) to be sent to the webhook. */
  readonly 'enterprise-admin/ping-global-webhook': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the hook. */
        readonly hook_id: components['parameters']['hook-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  readonly 'enterprise-admin/list-public-keys': {
    readonly parameters: {
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
        /** The direction to sort the results by. */
        readonly direction?: components['parameters']['direction']
        readonly sort?: 'created' | 'updated' | 'accessed'
        /** Only show public keys accessed after the given time. */
        readonly since?: string
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['public-key-full'][]
        }
      }
    }
  }
  readonly 'enterprise-admin/delete-public-key': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the key. */
        readonly key_ids: components['parameters']['key-ids']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /** Updates the [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team. [LDAP synchronization](https://docs.github.com/enterprise-server@3.6/admin/identity-and-access-management/using-ldap-for-enterprise-iam/using-ldap#enabling-ldap-sync) must be enabled to map LDAP entries to a team. Use the [Create a team](https://docs.github.com/enterprise-server@3.6/rest/reference/teams/#create-a-team) endpoint to create a team with LDAP mapping. */
  readonly 'enterprise-admin/update-ldap-mapping-for-team': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the team. */
        readonly team_id: components['parameters']['team-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['ldap-mapping-team']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team. */
          readonly ldap_dn: string
        }
      }
    }
  }
  /** Note that this API call does not automatically initiate an LDAP sync. Rather, if a `201` is returned, the sync job is queued successfully, and is performed when the instance is ready. */
  readonly 'enterprise-admin/sync-ldap-mapping-for-team': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the team. */
        readonly team_id: components['parameters']['team-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': {
            readonly status?: string
          }
        }
      }
    }
  }
  readonly 'enterprise-admin/update-ldap-mapping-for-user': {
    readonly parameters: {
      readonly path: {
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['ldap-mapping-user']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team. */
          readonly ldap_dn: string
        }
      }
    }
  }
  /** Note that this API call does not automatically initiate an LDAP sync. Rather, if a `201` is returned, the sync job is queued successfully, and is performed when the instance is ready. */
  readonly 'enterprise-admin/sync-ldap-mapping-for-user': {
    readonly parameters: {
      readonly path: {
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': {
            readonly status?: string
          }
        }
      }
    }
  }
  readonly 'enterprise-admin/create-org': {
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['organization-simple']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The organization's username. */
          readonly login: string
          /** @description The login of the user who will manage this organization. */
          readonly admin: string
          /** @description The organization's display name. */
          readonly profile_name?: string
        }
      }
    }
  }
  readonly 'enterprise-admin/update-org-name': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
    }
    readonly responses: {
      /** Response */
      readonly 202: {
        readonly content: {
          readonly 'application/json': {
            readonly message?: string
            readonly url?: string
          }
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The organization's new name. */
          readonly login: string
        }
      }
    }
  }
  readonly 'enterprise-admin/list-pre-receive-environments': {
    readonly parameters: {
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
        /** The direction to sort the results by. */
        readonly direction?: components['parameters']['direction']
        readonly sort?: 'created' | 'updated' | 'name'
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['pre-receive-environment'][]
        }
      }
    }
  }
  readonly 'enterprise-admin/create-pre-receive-environment': {
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['pre-receive-environment']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The new pre-receive environment's name. */
          readonly name: string
          /** @description URL from which to download a tarball of this environment. */
          readonly image_url: string
        }
      }
    }
  }
  readonly 'enterprise-admin/get-pre-receive-environment': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the pre-receive environment. */
        readonly pre_receive_environment_id: components['parameters']['pre-receive-environment-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['pre-receive-environment']
        }
      }
    }
  }
  /**
   * If you attempt to delete an environment that cannot be deleted, you will receive a `422 Unprocessable Entity` response.
   *
   * The possible error messages are:
   *
   * *   _Cannot modify or delete the default environment_
   * *   _Cannot delete environment that has hooks_
   * *   _Cannot delete environment when download is in progress_
   */
  readonly 'enterprise-admin/delete-pre-receive-environment': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the pre-receive environment. */
        readonly pre_receive_environment_id: components['parameters']['pre-receive-environment-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      /** Client Errors */
      readonly 422: {
        readonly content: {
          readonly 'application/json': {
            readonly message?: string
            readonly errors?: readonly {
              readonly resource?: string
              readonly code?: string
              readonly message?: string
            }[]
          }
        }
      }
    }
  }
  /** You cannot modify the default environment. If you attempt to modify the default environment, you will receive a `422 Unprocessable Entity` response. */
  readonly 'enterprise-admin/update-pre-receive-environment': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the pre-receive environment. */
        readonly pre_receive_environment_id: components['parameters']['pre-receive-environment-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['pre-receive-environment']
        }
      }
      /** Client Errors */
      readonly 422: {
        readonly content: {
          readonly 'application/json': {
            readonly message?: string
            readonly errors?: readonly {
              readonly resource?: string
              readonly code?: string
              readonly message?: string
            }[]
          }
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description This pre-receive environment's new name. */
          readonly name?: string
          /** @description URL from which to download a tarball of this environment. */
          readonly image_url?: string
        }
      }
    }
  }
  /**
   * Triggers a new download of the environment tarball from the environment's `image_url`. When the download is finished, the newly downloaded tarball will overwrite the existing environment.
   *
   * If a download cannot be triggered, you will receive a `422 Unprocessable Entity` response.
   *
   * The possible error messages are:
   *
   * * _Cannot modify or delete the default environment_
   * * _Can not start a new download when a download is in progress_
   */
  readonly 'enterprise-admin/start-pre-receive-environment-download': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the pre-receive environment. */
        readonly pre_receive_environment_id: components['parameters']['pre-receive-environment-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 202: {
        readonly content: {
          readonly 'application/json': components['schemas']['pre-receive-environment-download-status']
        }
      }
      /** Client Errors */
      readonly 422: {
        readonly content: {
          readonly 'application/json': {
            readonly message?: string
            readonly errors?: readonly {
              readonly resource?: string
              readonly code?: string
              readonly message?: string
            }[]
          }
        }
      }
    }
  }
  /** In addition to seeing the download status at the "[Get a pre-receive environment](#get-a-pre-receive-environment)" endpoint, there is also this separate endpoint for just the download status. */
  readonly 'enterprise-admin/get-download-status-for-pre-receive-environment': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the pre-receive environment. */
        readonly pre_receive_environment_id: components['parameters']['pre-receive-environment-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['pre-receive-environment-download-status']
        }
      }
    }
  }
  readonly 'enterprise-admin/list-pre-receive-hooks': {
    readonly parameters: {
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
        /** The direction to sort the results by. */
        readonly direction?: components['parameters']['direction']
        /** The property to sort the results by. */
        readonly sort?: 'created' | 'updated' | 'name'
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['pre-receive-hook'][]
        }
      }
    }
  }
  readonly 'enterprise-admin/create-pre-receive-hook': {
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['pre-receive-hook']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The name of the hook. */
          readonly name: string
          /** @description The script that the hook runs. */
          readonly script: string
          /** @description The GitHub repository where the script is kept. */
          readonly script_repository: { readonly [key: string]: unknown }
          /** @description The pre-receive environment where the script is executed. */
          readonly environment: { readonly [key: string]: unknown }
          /** @description The state of enforcement for this hook. default: `disabled` */
          readonly enforcement?: string
          /** @description Whether enforcement can be overridden at the org or repo level. default: `false` */
          readonly allow_downstream_configuration?: boolean
        }
      }
    }
  }
  readonly 'enterprise-admin/get-pre-receive-hook': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the pre-receive hook. */
        readonly pre_receive_hook_id: components['parameters']['pre-receive-hook-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['pre-receive-hook']
        }
      }
    }
  }
  readonly 'enterprise-admin/delete-pre-receive-hook': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the pre-receive hook. */
        readonly pre_receive_hook_id: components['parameters']['pre-receive-hook-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  readonly 'enterprise-admin/update-pre-receive-hook': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the pre-receive hook. */
        readonly pre_receive_hook_id: components['parameters']['pre-receive-hook-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['pre-receive-hook']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The name of the hook. */
          readonly name?: string
          /** @description The script that the hook runs. */
          readonly script?: string
          /** @description The GitHub repository where the script is kept. */
          readonly script_repository?: { readonly [key: string]: unknown }
          /** @description The pre-receive environment where the script is executed. */
          readonly environment?: { readonly [key: string]: unknown }
          /** @description The state of enforcement for this hook. */
          readonly enforcement?: string
          /** @description Whether enforcement can be overridden at the org or repo level. */
          readonly allow_downstream_configuration?: boolean
        }
      }
    }
  }
  /** Lists personal access tokens for all users, including admin users. */
  readonly 'enterprise-admin/list-personal-access-tokens': {
    readonly parameters: {
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['authorization'][]
        }
      }
    }
  }
  /** Deletes a personal access token. Returns a `403 - Forbidden` status when a personal access token is in use. For example, if you access this endpoint with the same personal access token that you are trying to delete, you will receive this error. */
  readonly 'enterprise-admin/delete-personal-access-token': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the token. */
        readonly token_id: components['parameters']['token-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /**
   * If an external authentication mechanism is used, the login name should match the login name in the external system. If you are using LDAP authentication, you should also [update the LDAP mapping](https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#update-ldap-mapping-for-a-user) for the user.
   *
   * The login name will be normalized to only contain alphanumeric characters or single hyphens. For example, if you send `"octo_cat"` as the login, a user named `"octo-cat"` will be created.
   *
   * If the login name or email address is already associated with an account, the server will return a `422` response.
   */
  readonly 'enterprise-admin/create-user': {
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['simple-user']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The user's username. */
          readonly login: string
          /**
           * @description **Required for built-in authentication.** The user's email
           * address. This parameter can be omitted when using CAS, LDAP, or SAML.
           * For more information, see "[About authentication for your enterprise](https://docs.github.com/enterprise-server@3.6/admin/identity-and-access-management/managing-iam-for-your-enterprise/about-authentication-for-your-enterprise)."
           */
          readonly email?: string
        }
      }
    }
  }
  /**
   * Deleting a user will delete all their repositories, gists, applications, and personal settings. [Suspending a user](https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#suspend-a-user) is often a better option.
   *
   * You can delete any user account except your own.
   */
  readonly 'enterprise-admin/delete-user': {
    readonly parameters: {
      readonly path: {
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  readonly 'enterprise-admin/update-username-for-user': {
    readonly parameters: {
      readonly path: {
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
    }
    readonly responses: {
      /** Response */
      readonly 202: {
        readonly content: {
          readonly 'application/json': {
            readonly message?: string
            readonly url?: string
          }
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The user's new username. */
          readonly login: string
        }
      }
    }
  }
  readonly 'enterprise-admin/create-impersonation-o-auth-token': {
    readonly parameters: {
      readonly path: {
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
    }
    readonly responses: {
      /** Response when getting an existing impersonation OAuth token */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['authorization']
        }
      }
      /** Response when creating a new impersonation OAuth token */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['authorization']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description A list of [scopes](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */
          readonly scopes?: readonly string[]
        }
      }
    }
  }
  readonly 'enterprise-admin/delete-impersonation-o-auth-token': {
    readonly parameters: {
      readonly path: {
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /**
   * Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app's installations, see the "[List installations for the authenticated app](https://docs.github.com/enterprise-server@3.6/rest/reference/apps#list-installations-for-the-authenticated-app)" endpoint.
   *
   * You must use a [JWT](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   */
  readonly 'apps/get-authenticated': {
    readonly parameters: {}
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['integration']
        }
      }
    }
  }
  /** Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key), and `webhook_secret`. */
  readonly 'apps/create-from-manifest': {
    readonly parameters: {
      readonly path: {
        readonly code: string
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['integration'] &
            ({
              readonly client_id: string
              readonly client_secret: string
              readonly webhook_secret: string | null
              readonly pem: string
            } & { readonly [key: string]: unknown })
        }
      }
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed_simple']
    }
  }
  /**
   * Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
   *
   * You must use a [JWT](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   */
  readonly 'apps/get-webhook-config-for-app': {
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['webhook-config']
        }
      }
    }
  }
  /**
   * Updates the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
   *
   * You must use a [JWT](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   */
  readonly 'apps/update-webhook-config-for-app': {
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['webhook-config']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          readonly url?: components['schemas']['webhook-config-url']
          readonly content_type?: components['schemas']['webhook-config-content-type']
          readonly secret?: components['schemas']['webhook-config-secret']
          readonly insecure_ssl?: components['schemas']['webhook-config-insecure-ssl']
        }
      }
    }
  }
  /**
   * Returns a list of webhook deliveries for the webhook configured for a GitHub App.
   *
   * You must use a [JWT](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   */
  readonly 'apps/list-webhook-deliveries': {
    readonly parameters: {
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors. */
        readonly cursor?: components['parameters']['cursor']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['hook-delivery-item'][]
        }
      }
      readonly 400: components['responses']['bad_request']
      readonly 422: components['responses']['validation_failed']
    }
  }
  /**
   * Returns a delivery for the webhook configured for a GitHub App.
   *
   * You must use a [JWT](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   */
  readonly 'apps/get-webhook-delivery': {
    readonly parameters: {
      readonly path: {
        readonly delivery_id: components['parameters']['delivery-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['hook-delivery']
        }
      }
      readonly 400: components['responses']['bad_request']
      readonly 422: components['responses']['validation_failed']
    }
  }
  /**
   * Redeliver a delivery for the webhook configured for a GitHub App.
   *
   * You must use a [JWT](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   */
  readonly 'apps/redeliver-webhook-delivery': {
    readonly parameters: {
      readonly path: {
        readonly delivery_id: components['parameters']['delivery-id']
      }
    }
    readonly responses: {
      readonly 202: components['responses']['accepted']
      readonly 400: components['responses']['bad_request']
      readonly 422: components['responses']['validation_failed']
    }
  }
  /**
   * You must use a [JWT](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   *
   * The permissions the installation has are included under the `permissions` key.
   */
  readonly 'apps/list-installations': {
    readonly parameters: {
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        readonly since?: components['parameters']['since']
        readonly outdated?: string
      }
    }
    readonly responses: {
      /** The permissions the installation has are included under the `permissions` key. */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['installation'][]
        }
      }
    }
  }
  /**
   * Enables an authenticated GitHub App to find an installation's information using the installation id.
   *
   * You must use a [JWT](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   */
  readonly 'apps/get-installation': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the installation. */
        readonly installation_id: components['parameters']['installation-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['installation']
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * Uninstalls a GitHub App on a user, organization, or business account. If you prefer to temporarily suspend an app's access to your account's resources, then we recommend the "[Suspend an app installation](https://docs.github.com/enterprise-server@3.6/rest/reference/apps/#suspend-an-app-installation)" endpoint.
   *
   * You must use a [JWT](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   */
  readonly 'apps/delete-installation': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the installation. */
        readonly installation_id: components['parameters']['installation-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the `repository_ids` when creating the token. When you omit `repository_ids`, the response does not contain the `repositories` key.
   *
   * You must use a [JWT](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   */
  readonly 'apps/create-installation-access-token': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the installation. */
        readonly installation_id: components['parameters']['installation-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['installation-token']
        }
      }
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description List of repository names that the token should have access to */
          readonly repositories?: readonly string[]
          /**
           * @description List of repository IDs that the token should have access to
           * @example [
           *   1
           * ]
           */
          readonly repository_ids?: readonly number[]
          readonly permissions?: components['schemas']['app-permissions']
        }
      }
    }
  }
  /**
   * Suspends a GitHub App on a user, organization, or business account, which blocks the app from accessing the account's resources. When a GitHub App is suspended, the app's access to the GitHub Enterprise Server API or webhook events is blocked for that account.
   *
   * You must use a [JWT](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   */
  readonly 'apps/suspend-installation': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the installation. */
        readonly installation_id: components['parameters']['installation-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * Removes a GitHub App installation suspension.
   *
   * You must use a [JWT](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   */
  readonly 'apps/unsuspend-installation': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the installation. */
        readonly installation_id: components['parameters']['installation-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.6/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
   *
   * You can use this API to list the set of OAuth applications that have been granted access to your account. Unlike the [list your authorizations](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations#list-your-authorizations) API, this API does not manage individual tokens. This API will return one entry for each OAuth application that has been granted access to your account, regardless of the number of tokens an application has generated for your user. The list of OAuth applications returned matches what is shown on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized). The `scopes` returned are the union of scopes authorized for the application. For example, if an application has one token with `repo` scope and another token with `user` scope, the grant will return `["repo", "user"]`.
   */
  readonly 'oauth-authorizations/list-grants': {
    readonly parameters: {
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
        /** The client ID of your GitHub app. */
        readonly client_id?: string
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['application-grant'][]
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
    }
  }
  /** **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/). */
  readonly 'oauth-authorizations/get-grant': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the grant. */
        readonly grant_id: components['parameters']['grant-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['application-grant']
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
    }
  }
  /**
   * **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.6/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
   *
   * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for your user. Once deleted, the application has no access to your account and is no longer listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
   */
  readonly 'oauth-authorizations/delete-grant': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the grant. */
        readonly grant_id: components['parameters']['grant-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
    }
  }
  /**
   * OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.6/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid OAuth `access_token` as an input parameter and the grant for the token's owner will be deleted.
   * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
   */
  readonly 'apps/delete-authorization': {
    readonly parameters: {
      readonly path: {
        /** The client ID of the GitHub app. */
        readonly client_id: components['parameters']['client-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The OAuth access token used to authenticate to the GitHub API. */
          readonly access_token: string
        }
      }
    }
  }
  /** OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.6/rest/overview/other-authentication-methods#basic-authentication) to use this endpoint, where the username is the OAuth application `client_id` and the password is its `client_secret`. Invalid tokens will return `404 NOT FOUND`. */
  readonly 'apps/check-token': {
    readonly parameters: {
      readonly path: {
        /** The client ID of the GitHub app. */
        readonly client_id: components['parameters']['client-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['authorization']
        }
      }
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The access_token of the OAuth application. */
          readonly access_token: string
        }
      }
    }
  }
  /** OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.6/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. */
  readonly 'apps/delete-token': {
    readonly parameters: {
      readonly path: {
        /** The client ID of the GitHub app. */
        readonly client_id: components['parameters']['client-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The OAuth access token used to authenticate to the GitHub API. */
          readonly access_token: string
        }
      }
    }
  }
  /** OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.6/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`. */
  readonly 'apps/reset-token': {
    readonly parameters: {
      readonly path: {
        /** The client ID of the GitHub app. */
        readonly client_id: components['parameters']['client-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['authorization']
        }
      }
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The access_token of the OAuth application. */
          readonly access_token: string
        }
      }
    }
  }
  /** Use a non-scoped user-to-server OAuth access token to create a repository scoped and/or permission scoped user-to-server OAuth access token. You can specify which repositories the token can access and which permissions are granted to the token. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.6/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`. */
  readonly 'apps/scope-token': {
    readonly parameters: {
      readonly path: {
        /** The client ID of the GitHub app. */
        readonly client_id: components['parameters']['client-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['authorization']
        }
      }
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description The OAuth access token used to authenticate to the GitHub API.
           * @example e72e16c7e42f292c6912e7710c838347ae178b4a
           */
          readonly access_token: string
          /**
           * @description The name of the user or organization to scope the user-to-server access token to. **Required** unless `target_id` is specified.
           * @example octocat
           */
          readonly target?: string
          /**
           * @description The ID of the user or organization to scope the user-to-server access token to. **Required** unless `target` is specified.
           * @example 1
           */
          readonly target_id?: number
          /** @description The list of repository names to scope the user-to-server access token to. `repositories` may not be specified if `repository_ids` is specified. */
          readonly repositories?: readonly string[]
          /**
           * @description The list of repository IDs to scope the user-to-server access token to. `repository_ids` may not be specified if `repositories` is specified.
           * @example [
           *   1
           * ]
           */
          readonly repository_ids?: readonly number[]
          readonly permissions?: components['schemas']['app-permissions']
        }
      }
    }
  }
  /**
   * **Note**: The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).
   *
   * If the GitHub App you specify is public, you can access this endpoint without authenticating. If the GitHub App you specify is private, you must authenticate with a [personal access token](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or an [installation access token](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
   */
  readonly 'apps/get-by-slug': {
    readonly parameters: {
      readonly path: {
        readonly app_slug: components['parameters']['app-slug']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['integration']
        }
      }
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
    }
  }
  /** **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/). */
  readonly 'oauth-authorizations/list-authorizations': {
    readonly parameters: {
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
        /** The client ID of your GitHub app. */
        readonly client_id?: string
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['authorization'][]
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.6/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
   *
   * **Warning:** Apps must use the [web application flow](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub Enterprise Server SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub Enterprise Server SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
   *
   * Creates OAuth tokens using [Basic Authentication](https://docs.github.com/enterprise-server@3.6/rest/overview/other-authentication-methods#basic-authentication). If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/enterprise-server@3.6/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
   *
   * To create tokens for a particular OAuth application using this endpoint, you must authenticate as the user you want to create an authorization for and provide the app's client ID and secret, found on your OAuth application's settings page. If your OAuth application intends to create multiple tokens for one user, use `fingerprint` to differentiate between them.
   *
   * You can also create tokens on GitHub Enterprise Server from the [personal access tokens settings](https://github.com/settings/tokens) page. Read more about these tokens in [the GitHub Help documentation](https://docs.github.com/articles/creating-an-access-token-for-command-line-use).
   *
   * Organizations that enforce SAML SSO require personal access tokens to be allowed. Read more about allowing tokens in [the GitHub Help documentation](https://docs.github.com/articles/about-identity-and-access-management-with-saml-single-sign-on).
   */
  readonly 'oauth-authorizations/create-authorization': {
    readonly parameters: {}
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string
        }
        readonly content: {
          readonly 'application/json': components['schemas']['authorization']
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
      readonly 410: components['responses']['gone']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description A list of scopes that this authorization is in.
           * @example [
           *   "public_repo",
           *   "user"
           * ]
           */
          readonly scopes?: readonly string[] | null
          /**
           * @description A note to remind you what the OAuth token is for.
           * @example Update all gems
           */
          readonly note?: string
          /** @description A URL to remind you what app the OAuth token is for. */
          readonly note_url?: string
          /** @description The OAuth app client key for which to create the token. */
          readonly client_id?: string
          /** @description The OAuth app client secret for which to create the token. */
          readonly client_secret?: string
          /** @description A unique string to distinguish an authorization from others created for the same client ID and user. */
          readonly fingerprint?: string
        }
      }
    }
  }
  /**
   * **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.6/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
   *
   * **Warning:** Apps must use the [web application flow](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub Enterprise Server SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub Enterprise Server SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
   *
   * Creates a new authorization for the specified OAuth application, only if an authorization for that application doesn't already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.
   *
   * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/enterprise-server@3.6/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
   *
   * **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.6/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
   */
  readonly 'oauth-authorizations/get-or-create-authorization-for-app': {
    readonly parameters: {
      readonly path: {
        /** The client ID of the OAuth app. */
        readonly client_id: components['parameters']['oauth-client-id']
      }
    }
    readonly responses: {
      /** if returning an existing token */
      readonly 200: {
        readonly headers: {
          readonly Location?: string
        }
        readonly content: {
          readonly 'application/json': components['schemas']['authorization']
        }
      }
      /** **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/). */
      readonly 201: {
        readonly headers: {
          readonly Location?: string
        }
        readonly content: {
          readonly 'application/json': components['schemas']['authorization']
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The OAuth app client secret for which to create the token. */
          readonly client_secret: string
          /**
           * @description A list of scopes that this authorization is in.
           * @example [
           *   "public_repo",
           *   "user"
           * ]
           */
          readonly scopes?: readonly string[] | null
          /**
           * @description A note to remind you what the OAuth token is for.
           * @example Update all gems
           */
          readonly note?: string
          /** @description A URL to remind you what app the OAuth token is for. */
          readonly note_url?: string
          /** @description A unique string to distinguish an authorization from others created for the same client ID and user. */
          readonly fingerprint?: string
        }
      }
    }
  }
  /**
   * **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.6/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
   *
   * **Warning:** Apps must use the [web application flow](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub Enterprise Server SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub Enterprise Server SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
   *
   * This method will create a new authorization for the specified OAuth application, only if an authorization for that application and fingerprint do not already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. `fingerprint` is a unique string to distinguish an authorization from others created for the same client ID and user. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.
   *
   * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/enterprise-server@3.6/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
   */
  readonly 'oauth-authorizations/get-or-create-authorization-for-app-and-fingerprint': {
    readonly parameters: {
      readonly path: {
        /** The client ID of the OAuth app. */
        readonly client_id: components['parameters']['oauth-client-id']
        readonly fingerprint: string
      }
    }
    readonly responses: {
      /** if returning an existing token */
      readonly 200: {
        readonly headers: {
          readonly Location?: string
        }
        readonly content: {
          readonly 'application/json': components['schemas']['authorization']
        }
      }
      /** Response if returning a new token */
      readonly 201: {
        readonly headers: {
          readonly Location?: string
        }
        readonly content: {
          readonly 'application/json': components['schemas']['authorization']
        }
      }
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The OAuth app client secret for which to create the token. */
          readonly client_secret: string
          /**
           * @description A list of scopes that this authorization is in.
           * @example [
           *   "public_repo",
           *   "user"
           * ]
           */
          readonly scopes?: readonly string[] | null
          /**
           * @description A note to remind you what the OAuth token is for.
           * @example Update all gems
           */
          readonly note?: string
          /** @description A URL to remind you what app the OAuth token is for. */
          readonly note_url?: string
        }
      }
    }
  }
  /** **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/). */
  readonly 'oauth-authorizations/get-authorization': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the authorization. */
        readonly authorization_id: components['parameters']['authorization-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['authorization']
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
    }
  }
  /** **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/). */
  readonly 'oauth-authorizations/delete-authorization': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the authorization. */
        readonly authorization_id: components['parameters']['authorization-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
    }
  }
  /**
   * **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.6/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.6/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
   *
   * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/enterprise-server@3.6/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
   *
   * You can only send one of these scope keys at a time.
   */
  readonly 'oauth-authorizations/update-authorization': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the authorization. */
        readonly authorization_id: components['parameters']['authorization-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['authorization']
        }
      }
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description A list of scopes that this authorization is in.
           * @example [
           *   "public_repo",
           *   "user"
           * ]
           */
          readonly scopes?: readonly string[] | null
          /** @description A list of scopes to add to this authorization. */
          readonly add_scopes?: readonly string[]
          /** @description A list of scopes to remove from this authorization. */
          readonly remove_scopes?: readonly string[]
          /**
           * @description A note to remind you what the OAuth token is for.
           * @example Update all gems
           */
          readonly note?: string
          /** @description A URL to remind you what app the OAuth token is for. */
          readonly note_url?: string
          /** @description A unique string to distinguish an authorization from others created for the same client ID and user. */
          readonly fingerprint?: string
        }
      }
    }
  }
  readonly 'codes-of-conduct/get-all-codes-of-conduct': {
    readonly parameters: {}
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['code-of-conduct'][]
        }
      }
      readonly 304: components['responses']['not_modified']
    }
  }
  readonly 'codes-of-conduct/get-conduct-code': {
    readonly parameters: {
      readonly path: {
        readonly key: string
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['code-of-conduct']
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 404: components['responses']['not_found']
    }
  }
  /** Lists all the emojis available to use on GitHub Enterprise Server. */
  readonly 'emojis/get': {
    readonly parameters: {}
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': { readonly [key: string]: string }
        }
      }
      readonly 304: components['responses']['not_modified']
    }
  }
  /** Gets the current message and expiration date of the global announcement banner in your enterprise. */
  readonly 'enterprise-admin/get-announcement': {
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['announcement']
        }
      }
    }
  }
  /** Removes the global announcement banner in your enterprise. */
  readonly 'enterprise-admin/remove-announcement': {
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /** Sets the message and expiration time for the global announcement banner in your enterprise. */
  readonly 'enterprise-admin/set-announcement': {
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['announcement']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': components['schemas']['announcement']
      }
    }
  }
  readonly 'enterprise-admin/get-license-information': {
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['license-info']
        }
      }
    }
  }
  readonly 'enterprise-admin/get-all-stats': {
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['enterprise-overview']
        }
      }
    }
  }
  readonly 'enterprise-admin/get-comment-stats': {
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['enterprise-comment-overview']
        }
      }
    }
  }
  readonly 'enterprise-admin/get-gist-stats': {
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['enterprise-gist-overview']
        }
      }
    }
  }
  readonly 'enterprise-admin/get-hooks-stats': {
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['enterprise-hook-overview']
        }
      }
    }
  }
  readonly 'enterprise-admin/get-issue-stats': {
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['enterprise-issue-overview']
        }
      }
    }
  }
  readonly 'enterprise-admin/get-milestone-stats': {
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['enterprise-milestone-overview']
        }
      }
    }
  }
  readonly 'enterprise-admin/get-org-stats': {
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['enterprise-organization-overview']
        }
      }
    }
  }
  readonly 'enterprise-admin/get-pages-stats': {
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['enterprise-page-overview']
        }
      }
    }
  }
  readonly 'enterprise-admin/get-pull-request-stats': {
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['enterprise-pull-request-overview']
        }
      }
    }
  }
  readonly 'enterprise-admin/get-repo-stats': {
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['enterprise-repository-overview']
        }
      }
    }
  }
  readonly 'enterprise-admin/get-user-stats': {
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['enterprise-user-overview']
        }
      }
    }
  }
  /**
   * Gets the total GitHub Actions cache usage for an enterprise.
   * The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   */
  readonly 'actions/get-actions-cache-usage-for-enterprise': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': components['schemas']['actions-cache-usage-org-enterprise']
        }
      }
    }
  }
  /**
   * Gets the GitHub Actions cache usage policy for an enterprise.
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   * GitHub Apps must have the `enterprise_administration:write` permission to use this endpoint.
   */
  readonly 'actions/get-actions-cache-usage-policy-for-enterprise': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': components['schemas']['actions-cache-usage-policy-enterprise']
        }
      }
    }
  }
  /**
   * Sets the GitHub Actions cache usage policy for an enterprise.
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   * GitHub Apps must have the `enterprise_administration:write` permission to use this endpoint.
   */
  readonly 'actions/set-actions-cache-usage-policy-for-enterprise': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': components['schemas']['actions-cache-usage-policy-enterprise']
      }
    }
  }
  /**
   * Gets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   */
  readonly 'enterprise-admin/get-github-actions-permissions-enterprise': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['actions-enterprise-permissions']
        }
      }
    }
  }
  /**
   * Sets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   */
  readonly 'enterprise-admin/set-github-actions-permissions-enterprise': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          readonly enabled_organizations: components['schemas']['enabled-organizations']
          readonly allowed_actions?: components['schemas']['allowed-actions']
        }
      }
    }
  }
  /**
   * Lists the organizations that are selected to have GitHub Actions enabled in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   */
  readonly 'enterprise-admin/list-selected-organizations-enabled-github-actions-enterprise': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': {
            readonly total_count: number
            readonly organizations: readonly components['schemas']['organization-simple'][]
          }
        }
      }
    }
  }
  /**
   * Replaces the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   */
  readonly 'enterprise-admin/set-selected-organizations-enabled-github-actions-enterprise': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description List of organization IDs to enable for GitHub Actions. */
          readonly selected_organization_ids: readonly number[]
        }
      }
    }
  }
  /**
   * Adds an organization to the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   */
  readonly 'enterprise-admin/enable-selected-organization-github-actions-enterprise': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
        /** The unique identifier of the organization. */
        readonly org_id: components['parameters']['org-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /**
   * Removes an organization from the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   */
  readonly 'enterprise-admin/disable-selected-organization-github-actions-enterprise': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
        /** The unique identifier of the organization. */
        readonly org_id: components['parameters']['org-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /**
   * Gets the selected actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   */
  readonly 'enterprise-admin/get-allowed-actions-enterprise': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['selected-actions']
        }
      }
    }
  }
  /**
   * Sets the actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   */
  readonly 'enterprise-admin/set-allowed-actions-enterprise': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': components['schemas']['selected-actions']
      }
    }
  }
  /**
   * Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an enterprise,
   * as well as whether GitHub Actions can submit approving pull request reviews. For more information, see
   * "[Enforcing a policy for workflow permissions in your enterprise](https://docs.github.com/enterprise-server@3.6/admin/policies/enforcing-policies-for-your-enterprise/enforcing-policies-for-github-actions-in-your-enterprise#enforcing-a-policy-for-workflow-permissions-in-your-enterprise)."
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint. GitHub Apps must have the `enterprise_administration:write` permission to use this endpoint.
   */
  readonly 'actions/get-github-actions-default-workflow-permissions-enterprise': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
      }
    }
    readonly responses: {
      /** Success response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['actions-get-default-workflow-permissions']
        }
      }
    }
  }
  /**
   * Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an enterprise, and sets
   * whether GitHub Actions can submit approving pull request reviews. For more information, see
   * "[Enforcing a policy for workflow permissions in your enterprise](https://docs.github.com/enterprise-server@3.6/admin/policies/enforcing-policies-for-your-enterprise/enforcing-policies-for-github-actions-in-your-enterprise#enforcing-a-policy-for-workflow-permissions-in-your-enterprise)."
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   * GitHub Apps must have the `enterprise_administration:write` permission to use this endpoint.
   */
  readonly 'actions/set-github-actions-default-workflow-permissions-enterprise': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
      }
    }
    readonly responses: {
      /** Success response */
      readonly 204: never
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': components['schemas']['actions-set-default-workflow-permissions']
      }
    }
  }
  /**
   * Lists all self-hosted runner groups for an enterprise.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   */
  readonly 'enterprise-admin/list-self-hosted-runner-groups-for-enterprise': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
        /** Only return runner groups that are allowed to be used by this organization. */
        readonly visible_to_organization?: components['parameters']['visible-to-organization']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': {
            readonly total_count: number
            readonly runner_groups: readonly components['schemas']['runner-groups-enterprise'][]
          }
        }
      }
    }
  }
  /**
   * Creates a new self-hosted runner group for an enterprise.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   */
  readonly 'enterprise-admin/create-self-hosted-runner-group-for-enterprise': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['runner-groups-enterprise']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description Name of the runner group. */
          readonly name: string
          /**
           * @description Visibility of a runner group. You can select all organizations or select individual organization.
           * @enum {string}
           */
          readonly visibility?: 'selected' | 'all'
          /** @description List of organization IDs that can access the runner group. */
          readonly selected_organization_ids?: readonly number[]
          /** @description List of runner IDs to add to the runner group. */
          readonly runners?: readonly number[]
          /**
           * @description Whether the runner group can be used by `public` repositories.
           * @default false
           */
          readonly allows_public_repositories?: boolean
          /**
           * @description If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.
           * @default false
           */
          readonly restricted_to_workflows?: boolean
          /** @description List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`. */
          readonly selected_workflows?: readonly string[]
        }
      }
    }
  }
  /**
   * Gets a specific self-hosted runner group for an enterprise.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   */
  readonly 'enterprise-admin/get-self-hosted-runner-group-for-enterprise': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
        /** Unique identifier of the self-hosted runner group. */
        readonly runner_group_id: components['parameters']['runner-group-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['runner-groups-enterprise']
        }
      }
    }
  }
  /**
   * Deletes a self-hosted runner group for an enterprise.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   */
  readonly 'enterprise-admin/delete-self-hosted-runner-group-from-enterprise': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
        /** Unique identifier of the self-hosted runner group. */
        readonly runner_group_id: components['parameters']['runner-group-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /**
   * Updates the `name` and `visibility` of a self-hosted runner group in an enterprise.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   */
  readonly 'enterprise-admin/update-self-hosted-runner-group-for-enterprise': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
        /** Unique identifier of the self-hosted runner group. */
        readonly runner_group_id: components['parameters']['runner-group-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['runner-groups-enterprise']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description Name of the runner group. */
          readonly name?: string
          /**
           * @description Visibility of a runner group. You can select all organizations or select individual organizations.
           * @default all
           * @enum {string}
           */
          readonly visibility?: 'selected' | 'all'
          /**
           * @description Whether the runner group can be used by `public` repositories.
           * @default false
           */
          readonly allows_public_repositories?: boolean
          /**
           * @description If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.
           * @default false
           */
          readonly restricted_to_workflows?: boolean
          /** @description List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`. */
          readonly selected_workflows?: readonly string[]
        }
      }
    }
  }
  /**
   * Lists the organizations with access to a self-hosted runner group.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   */
  readonly 'enterprise-admin/list-org-access-to-self-hosted-runner-group-in-enterprise': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
        /** Unique identifier of the self-hosted runner group. */
        readonly runner_group_id: components['parameters']['runner-group-id']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': {
            readonly total_count: number
            readonly organizations: readonly components['schemas']['organization-simple'][]
          }
        }
      }
    }
  }
  /**
   * Replaces the list of organizations that have access to a self-hosted runner configured in an enterprise.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   */
  readonly 'enterprise-admin/set-org-access-to-self-hosted-runner-group-in-enterprise': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
        /** Unique identifier of the self-hosted runner group. */
        readonly runner_group_id: components['parameters']['runner-group-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description List of organization IDs that can access the runner group. */
          readonly selected_organization_ids: readonly number[]
        }
      }
    }
  }
  /**
   * Adds an organization to the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise)."
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   */
  readonly 'enterprise-admin/add-org-access-to-self-hosted-runner-group-in-enterprise': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
        /** Unique identifier of the self-hosted runner group. */
        readonly runner_group_id: components['parameters']['runner-group-id']
        /** The unique identifier of the organization. */
        readonly org_id: components['parameters']['org-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /**
   * Removes an organization from the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise)."
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   */
  readonly 'enterprise-admin/remove-org-access-to-self-hosted-runner-group-in-enterprise': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
        /** Unique identifier of the self-hosted runner group. */
        readonly runner_group_id: components['parameters']['runner-group-id']
        /** The unique identifier of the organization. */
        readonly org_id: components['parameters']['org-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /**
   * Lists the self-hosted runners that are in a specific enterprise group.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   */
  readonly 'enterprise-admin/list-self-hosted-runners-in-group-for-enterprise': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
        /** Unique identifier of the self-hosted runner group. */
        readonly runner_group_id: components['parameters']['runner-group-id']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': {
            readonly total_count: number
            readonly runners: readonly components['schemas']['runner'][]
          }
        }
      }
    }
  }
  /**
   * Replaces the list of self-hosted runners that are part of an enterprise runner group.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   */
  readonly 'enterprise-admin/set-self-hosted-runners-in-group-for-enterprise': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
        /** Unique identifier of the self-hosted runner group. */
        readonly runner_group_id: components['parameters']['runner-group-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description List of runner IDs to add to the runner group. */
          readonly runners: readonly number[]
        }
      }
    }
  }
  /**
   * Adds a self-hosted runner to a runner group configured in an enterprise.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise`
   * scope to use this endpoint.
   */
  readonly 'enterprise-admin/add-self-hosted-runner-to-group-for-enterprise': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
        /** Unique identifier of the self-hosted runner group. */
        readonly runner_group_id: components['parameters']['runner-group-id']
        /** Unique identifier of the self-hosted runner. */
        readonly runner_id: components['parameters']['runner-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /**
   * Removes a self-hosted runner from a group configured in an enterprise. The runner is then returned to the default group.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   */
  readonly 'enterprise-admin/remove-self-hosted-runner-from-group-for-enterprise': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
        /** Unique identifier of the self-hosted runner group. */
        readonly runner_group_id: components['parameters']['runner-group-id']
        /** Unique identifier of the self-hosted runner. */
        readonly runner_id: components['parameters']['runner-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /**
   * Lists all self-hosted runners configured for an enterprise.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   */
  readonly 'enterprise-admin/list-self-hosted-runners-for-enterprise': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': {
            readonly total_count?: number
            readonly runners?: readonly components['schemas']['runner'][]
          }
        }
      }
    }
  }
  /**
   * Lists binaries for the runner application that you can download and run.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   */
  readonly 'enterprise-admin/list-runner-applications-for-enterprise': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['runner-application'][]
        }
      }
    }
  }
  /**
   * Returns a token that you can pass to the `config` script. The token expires after one hour.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   *
   * #### Example using registration token
   *
   * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
   *
   * ```
   * ./config.sh --url https://github.com/enterprises/octo-enterprise --token TOKEN
   * ```
   */
  readonly 'enterprise-admin/create-registration-token-for-enterprise': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['authentication-token']
        }
      }
    }
  }
  /**
   * Returns a token that you can pass to the `config` script to remove a self-hosted runner from an enterprise. The token expires after one hour.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   *
   * #### Example using remove token
   *
   * To remove your self-hosted runner from an enterprise, replace `TOKEN` with the remove token provided by this
   * endpoint.
   *
   * ```
   * ./config.sh remove --token TOKEN
   * ```
   */
  readonly 'enterprise-admin/create-remove-token-for-enterprise': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['authentication-token']
        }
      }
    }
  }
  /**
   * Gets a specific self-hosted runner configured in an enterprise.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   */
  readonly 'enterprise-admin/get-self-hosted-runner-for-enterprise': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
        /** Unique identifier of the self-hosted runner. */
        readonly runner_id: components['parameters']['runner-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['runner']
        }
      }
    }
  }
  /**
   * Forces the removal of a self-hosted runner from an enterprise. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   */
  readonly 'enterprise-admin/delete-self-hosted-runner-from-enterprise': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
        /** Unique identifier of the self-hosted runner. */
        readonly runner_id: components['parameters']['runner-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /**
   * Lists all labels for a self-hosted runner configured in an enterprise.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   */
  readonly 'enterprise-admin/list-labels-for-self-hosted-runner-for-enterprise': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
        /** Unique identifier of the self-hosted runner. */
        readonly runner_id: components['parameters']['runner-id']
      }
    }
    readonly responses: {
      readonly 200: components['responses']['actions_runner_labels']
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * Remove all previous custom labels and set the new custom labels for a specific
   * self-hosted runner configured in an enterprise.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   */
  readonly 'enterprise-admin/set-custom-labels-for-self-hosted-runner-for-enterprise': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
        /** Unique identifier of the self-hosted runner. */
        readonly runner_id: components['parameters']['runner-id']
      }
    }
    readonly responses: {
      readonly 200: components['responses']['actions_runner_labels']
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed_simple']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels. */
          readonly labels: readonly string[]
        }
      }
    }
  }
  /**
   * Add custom labels to a self-hosted runner configured in an enterprise.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   */
  readonly 'enterprise-admin/add-custom-labels-to-self-hosted-runner-for-enterprise': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
        /** Unique identifier of the self-hosted runner. */
        readonly runner_id: components['parameters']['runner-id']
      }
    }
    readonly responses: {
      readonly 200: components['responses']['actions_runner_labels']
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed_simple']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The names of the custom labels to add to the runner. */
          readonly labels: readonly string[]
        }
      }
    }
  }
  /**
   * Remove all custom labels from a self-hosted runner configured in an
   * enterprise. Returns the remaining read-only labels from the runner.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   */
  readonly 'enterprise-admin/remove-all-custom-labels-from-self-hosted-runner-for-enterprise': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
        /** Unique identifier of the self-hosted runner. */
        readonly runner_id: components['parameters']['runner-id']
      }
    }
    readonly responses: {
      readonly 200: components['responses']['actions_runner_labels_readonly']
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed_simple']
    }
  }
  /**
   * Remove a custom label from a self-hosted runner configured
   * in an enterprise. Returns the remaining labels from the runner.
   *
   * This endpoint returns a `404 Not Found` status if the custom label is not
   * present on the runner.
   *
   * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
   */
  readonly 'enterprise-admin/remove-custom-label-from-self-hosted-runner-for-enterprise': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
        /** Unique identifier of the self-hosted runner. */
        readonly runner_id: components['parameters']['runner-id']
        /** The name of a self-hosted runner's custom label. */
        readonly name: components['parameters']['runner-label-name']
      }
    }
    readonly responses: {
      readonly 200: components['responses']['actions_runner_labels']
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed_simple']
    }
  }
  /** Gets the audit log for an enterprise. To use this endpoint, you must be an enterprise admin, and you must use an access token with the `admin:enterprise` scope. */
  readonly 'enterprise-admin/get-audit-log': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
      }
      readonly query: {
        /** A search phrase. For more information, see [Searching the audit log](https://docs.github.com/enterprise-server@3.6/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization#searching-the-audit-log). */
        readonly phrase?: components['parameters']['audit-log-phrase']
        /**
         * The event types to include:
         *
         * - `web` - returns web (non-Git) events.
         * - `git` - returns Git events.
         * - `all` - returns both web and Git events.
         *
         * The default is `web`.
         */
        readonly include?: components['parameters']['audit-log-include']
        /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor. */
        readonly after?: components['parameters']['audit-log-after']
        /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor. */
        readonly before?: components['parameters']['audit-log-before']
        /**
         * The order of audit log events. To list newest events first, specify `desc`. To list oldest events first, specify `asc`.
         *
         * The default is `desc`.
         */
        readonly order?: components['parameters']['audit-log-order']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['audit-log-event'][]
        }
      }
    }
  }
  /**
   * Lists secret scanning alerts for eligible repositories in an enterprise, from newest to oldest.
   * To use this endpoint, you must be a member of the enterprise, and you must use an access token with the `repo` scope or `security_events` scope. Alerts are only returned for organizations in the enterprise for which you are an organization owner or a [security manager](https://docs.github.com/enterprise-server@3.6/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).
   */
  readonly 'secret-scanning/list-alerts-for-enterprise': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
      }
      readonly query: {
        /** Set to `open` or `resolved` to only list secret scanning alerts in a specific state. */
        readonly state?: components['parameters']['secret-scanning-alert-state']
        /**
         * A comma-separated list of secret types to return. By default all secret types are returned.
         * See "[Secret scanning patterns](https://docs.github.com/enterprise-server@3.6/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)"
         * for a complete list of secret types.
         */
        readonly secret_type?: components['parameters']['secret-scanning-alert-secret-type']
        /** A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`. */
        readonly resolution?: components['parameters']['secret-scanning-alert-resolution']
        /** The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved. */
        readonly sort?: components['parameters']['secret-scanning-alert-sort']
        /** The direction to sort the results by. */
        readonly direction?: components['parameters']['direction']
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results before this cursor. */
        readonly before?: components['parameters']['pagination-before']
        /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results after this cursor. */
        readonly after?: components['parameters']['pagination-after']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['organization-secret-scanning-alert'][]
        }
      }
      readonly 404: components['responses']['not_found']
      readonly 503: components['responses']['service_unavailable']
    }
  }
  /**
   * Gets the GitHub Advanced Security active committers for an enterprise per repository.
   *
   * Each distinct user login across all repositories is counted as a single Advanced Security seat, so the `total_advanced_security_committers` is not the sum of active_users for each repository.
   *
   * The total number of repositories with committer information is tracked by the `total_count` field.
   */
  readonly 'billing/get-github-advanced-security-billing-ghe': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Success */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['advanced-security-active-committers']
        }
      }
      readonly 403: components['responses']['code_scanning_forbidden_read']
    }
  }
  /** We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago. */
  readonly 'activity/list-public-events': {
    readonly parameters: {
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['event'][]
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 403: components['responses']['forbidden']
      readonly 503: components['responses']['service_unavailable']
    }
  }
  /**
   * GitHub Enterprise Server provides several timeline resources in [Atom](http://en.wikipedia.org/wiki/Atom_(standard)) format. The Feeds API lists all the feeds available to the authenticated user:
   *
   * *   **Timeline**: The GitHub Enterprise Server global public timeline
   * *   **User**: The public timeline for any user, using [URI template](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#hypermedia)
   * *   **Current user public**: The public timeline for the authenticated user
   * *   **Current user**: The private timeline for the authenticated user
   * *   **Current user actor**: The private timeline for activity created by the authenticated user
   * *   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.
   * *   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub Enterprise Server.
   *
   * **Note**: Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/enterprise-server@3.6/rest/overview/other-authentication-methods#basic-authentication) since current feed URIs use the older, non revocable auth tokens.
   */
  readonly 'activity/get-feeds': {
    readonly parameters: {}
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['feed']
        }
      }
    }
  }
  /** Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists: */
  readonly 'gists/list': {
    readonly parameters: {
      readonly query: {
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        readonly since?: components['parameters']['since']
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['base-gist'][]
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 403: components['responses']['forbidden']
    }
  }
  /**
   * Allows you to add a new gist with one or more files.
   *
   * **Note:** Don't name your files "gistfile" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.
   */
  readonly 'gists/create': {
    readonly parameters: {}
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string
        }
        readonly content: {
          readonly 'application/json': components['schemas']['gist-simple']
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description Description of the gist
           * @example Example Ruby script
           */
          readonly description?: string
          /**
           * @description Names and content for the files that make up the gist
           * @example {
           *   "hello.rb": {
           *     "content": "puts \"Hello, World!\""
           *   }
           * }
           */
          readonly files: {
            readonly [key: string]: {
              /** @description Content of the file */
              readonly content: string
            }
          }
          readonly public?: boolean | ('true' | 'false')
        }
      }
    }
  }
  /**
   * List public gists sorted by most recently updated to least recently updated.
   *
   * Note: With [pagination](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.
   */
  readonly 'gists/list-public': {
    readonly parameters: {
      readonly query: {
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        readonly since?: components['parameters']['since']
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['base-gist'][]
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 403: components['responses']['forbidden']
      readonly 422: components['responses']['validation_failed']
    }
  }
  /** List the authenticated user's starred gists: */
  readonly 'gists/list-starred': {
    readonly parameters: {
      readonly query: {
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        readonly since?: components['parameters']['since']
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['base-gist'][]
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
    }
  }
  readonly 'gists/get': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the gist. */
        readonly gist_id: components['parameters']['gist-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['gist-simple']
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 403: components['responses']['forbidden_gist']
      readonly 404: components['responses']['not_found']
    }
  }
  readonly 'gists/delete': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the gist. */
        readonly gist_id: components['parameters']['gist-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 304: components['responses']['not_modified']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
    }
  }
  /** Allows you to update a gist's description and to update, delete, or rename gist files. Files from the previous version of the gist that aren't explicitly changed during an edit are unchanged. */
  readonly 'gists/update': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the gist. */
        readonly gist_id: components['parameters']['gist-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['gist-simple']
        }
      }
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description The description of the gist.
           * @example Example Ruby script
           */
          readonly description?: string
          /**
           * @description The gist files to be updated, renamed, or deleted. Each `key` must match the current filename
           * (including extension) of the targeted gist file. For example: `hello.py`.
           *
           * To delete a file, set the whole file to null. For example: `hello.py : null`.
           * @example {
           *   "hello.rb": {
           *     "content": "blah",
           *     "filename": "goodbye.rb"
           *   }
           * }
           */
          readonly files?: { readonly [key: string]: { readonly [key: string]: unknown } }
        } | null
      }
    }
  }
  readonly 'gists/list-comments': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the gist. */
        readonly gist_id: components['parameters']['gist-id']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['gist-comment'][]
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
    }
  }
  readonly 'gists/create-comment': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the gist. */
        readonly gist_id: components['parameters']['gist-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string
        }
        readonly content: {
          readonly 'application/json': components['schemas']['gist-comment']
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description The comment text.
           * @example Body of the attachment
           */
          readonly body: string
        }
      }
    }
  }
  readonly 'gists/get-comment': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the gist. */
        readonly gist_id: components['parameters']['gist-id']
        /** The unique identifier of the comment. */
        readonly comment_id: components['parameters']['comment-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['gist-comment']
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 403: components['responses']['forbidden_gist']
      readonly 404: components['responses']['not_found']
    }
  }
  readonly 'gists/delete-comment': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the gist. */
        readonly gist_id: components['parameters']['gist-id']
        /** The unique identifier of the comment. */
        readonly comment_id: components['parameters']['comment-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 304: components['responses']['not_modified']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
    }
  }
  readonly 'gists/update-comment': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the gist. */
        readonly gist_id: components['parameters']['gist-id']
        /** The unique identifier of the comment. */
        readonly comment_id: components['parameters']['comment-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['gist-comment']
        }
      }
      readonly 404: components['responses']['not_found']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description The comment text.
           * @example Body of the attachment
           */
          readonly body: string
        }
      }
    }
  }
  readonly 'gists/list-commits': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the gist. */
        readonly gist_id: components['parameters']['gist-id']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {
          readonly Link?: string
        }
        readonly content: {
          readonly 'application/json': readonly components['schemas']['gist-commit'][]
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
    }
  }
  readonly 'gists/list-forks': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the gist. */
        readonly gist_id: components['parameters']['gist-id']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['gist-simple'][]
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
    }
  }
  readonly 'gists/fork': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the gist. */
        readonly gist_id: components['parameters']['gist-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string
        }
        readonly content: {
          readonly 'application/json': components['schemas']['base-gist']
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
  }
  readonly 'gists/check-is-starred': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the gist. */
        readonly gist_id: components['parameters']['gist-id']
      }
    }
    readonly responses: {
      /** Response if gist is starred */
      readonly 204: never
      readonly 304: components['responses']['not_modified']
      readonly 403: components['responses']['forbidden']
      /** Not Found if gist is not starred */
      readonly 404: {
        readonly content: {
          readonly 'application/json': { readonly [key: string]: unknown }
        }
      }
    }
  }
  /** Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#http-verbs)." */
  readonly 'gists/star': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the gist. */
        readonly gist_id: components['parameters']['gist-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 304: components['responses']['not_modified']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
    }
  }
  readonly 'gists/unstar': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the gist. */
        readonly gist_id: components['parameters']['gist-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 304: components['responses']['not_modified']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
    }
  }
  readonly 'gists/get-revision': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the gist. */
        readonly gist_id: components['parameters']['gist-id']
        readonly sha: string
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['gist-simple']
        }
      }
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
  }
  /** List all templates available to pass as an option when [creating a repository](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#create-a-repository-for-the-authenticated-user). */
  readonly 'gitignore/get-all-templates': {
    readonly parameters: {}
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly string[]
        }
      }
      readonly 304: components['responses']['not_modified']
    }
  }
  /**
   * The API also allows fetching the source of a single template.
   * Use the raw [media type](https://docs.github.com/enterprise-server@3.6/rest/overview/media-types/) to get the raw contents.
   */
  readonly 'gitignore/get-template': {
    readonly parameters: {
      readonly path: {
        readonly name: string
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['gitignore-template']
        }
      }
      readonly 304: components['responses']['not_modified']
    }
  }
  /**
   * List repositories that an app installation can access.
   *
   * You must use an [installation access token](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
   */
  readonly 'apps/list-repos-accessible-to-installation': {
    readonly parameters: {
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': {
            readonly total_count: number
            readonly repositories: readonly components['schemas']['repository'][]
            /** @example selected */
            readonly repository_selection?: string
          }
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
    }
  }
  /**
   * Revokes the installation token you're using to authenticate as an installation and access this endpoint.
   *
   * Once an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the "[Create an installation access token for an app](https://docs.github.com/enterprise-server@3.6/rest/reference/apps#create-an-installation-access-token-for-an-app)" endpoint.
   *
   * You must use an [installation access token](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
   */
  readonly 'apps/revoke-installation-access-token': {
    readonly parameters: {}
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /**
   * List issues assigned to the authenticated user across all visible repositories including owned repositories, member
   * repositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not
   * necessarily assigned to you.
   *
   *
   * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
   * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
   * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
   * request id, use the "[List pull requests](https://docs.github.com/enterprise-server@3.6/rest/reference/pulls#list-pull-requests)" endpoint.
   */
  readonly 'issues/list': {
    readonly parameters: {
      readonly query: {
        /** Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation. */
        readonly filter?: 'assigned' | 'created' | 'mentioned' | 'subscribed' | 'repos' | 'all'
        /** Indicates the state of the issues to return. */
        readonly state?: 'open' | 'closed' | 'all'
        /** A list of comma separated label names. Example: `bug,ui,@high` */
        readonly labels?: components['parameters']['labels']
        /** What to sort results by. */
        readonly sort?: 'created' | 'updated' | 'comments'
        /** The direction to sort the results by. */
        readonly direction?: components['parameters']['direction']
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        readonly since?: components['parameters']['since']
        readonly collab?: boolean
        readonly orgs?: boolean
        readonly owned?: boolean
        readonly pulls?: boolean
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['issue'][]
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
  }
  readonly 'licenses/get-all-commonly-used': {
    readonly parameters: {
      readonly query: {
        readonly featured?: boolean
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['license-simple'][]
        }
      }
      readonly 304: components['responses']['not_modified']
    }
  }
  readonly 'licenses/get': {
    readonly parameters: {
      readonly path: {
        readonly license: string
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['license']
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
    }
  }
  readonly 'markdown/render': {
    readonly parameters: {}
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {
          readonly 'Content-Length'?: string
        }
        readonly content: {
          readonly 'text/html': string
        }
      }
      readonly 304: components['responses']['not_modified']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The Markdown text to render in HTML. */
          readonly text: string
          /**
           * @description The rendering mode.
           * @default markdown
           * @example markdown
           * @enum {string}
           */
          readonly mode?: 'markdown' | 'gfm'
          /** @description The repository context to use when creating references in `gfm` mode.  For example, setting `context` to `octo-org/octo-repo` will change the text `#42` into an HTML link to issue 42 in the `octo-org/octo-repo` repository. */
          readonly context?: string
        }
      }
    }
  }
  /** You must send Markdown as plain text (using a `Content-Type` header of `text/plain` or `text/x-markdown`) to this endpoint, rather than using JSON format. In raw mode, [GitHub Flavored Markdown](https://github.github.com/gfm/) is not supported and Markdown will be rendered in plain format like a README.md file. Markdown content must be 400 KB or less. */
  readonly 'markdown/render-raw': {
    readonly parameters: {}
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'text/html': string
        }
      }
      readonly 304: components['responses']['not_modified']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'text/plain': string
        readonly 'text/x-markdown': string
      }
    }
  }
  readonly 'meta/get': {
    readonly parameters: {}
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['api-overview']
        }
      }
      readonly 304: components['responses']['not_modified']
    }
  }
  readonly 'activity/list-public-events-for-repo-network': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['event'][]
        }
      }
      readonly 301: components['responses']['moved_permanently']
      readonly 304: components['responses']['not_modified']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
    }
  }
  /** List all notifications for the current user, sorted by most recently updated. */
  readonly 'activity/list-notifications-for-authenticated-user': {
    readonly parameters: {
      readonly query: {
        /** If `true`, show notifications marked as read. */
        readonly all?: components['parameters']['all']
        /** If `true`, only shows notifications in which the user is directly participating or mentioned. */
        readonly participating?: components['parameters']['participating']
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        readonly since?: components['parameters']['since']
        /** Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        readonly before?: components['parameters']['before']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
        /** The number of results per page (max 50). */
        readonly per_page?: number
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['thread'][]
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
      readonly 422: components['responses']['validation_failed']
    }
  }
  /** Marks all notifications as "read" for the current user. If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub Enterprise Server will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List notifications for the authenticated user](https://docs.github.com/enterprise-server@3.6/rest/reference/activity#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`. */
  readonly 'activity/mark-notifications-as-read': {
    readonly parameters: {}
    readonly responses: {
      /** Response */
      readonly 202: {
        readonly content: {
          readonly 'application/json': {
            readonly message?: string
          }
        }
      }
      /** Reset Content */
      readonly 205: unknown
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * Format: date-time
           * @description Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.
           */
          readonly last_read_at?: string
          /** @description Whether the notification has been read. */
          readonly read?: boolean
        }
      }
    }
  }
  /** Gets information about a notification thread. */
  readonly 'activity/get-thread': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/enterprise-server@3.6/rest/reference/activity#list-notifications-for-the-authenticated-user)). */
        readonly thread_id: components['parameters']['thread-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['thread']
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
    }
  }
  /** Marks a thread as "read." Marking a thread as "read" is equivalent to clicking a notification in your notification inbox on GitHub Enterprise Server: https://github.com/notifications. */
  readonly 'activity/mark-thread-as-read': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/enterprise-server@3.6/rest/reference/activity#list-notifications-for-the-authenticated-user)). */
        readonly thread_id: components['parameters']['thread-id']
      }
    }
    readonly responses: {
      /** Reset Content */
      readonly 205: unknown
      readonly 304: components['responses']['not_modified']
      readonly 403: components['responses']['forbidden']
    }
  }
  /**
   * This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/enterprise-server@3.6/rest/reference/activity#get-a-repository-subscription).
   *
   * Note that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.
   */
  readonly 'activity/get-thread-subscription-for-authenticated-user': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/enterprise-server@3.6/rest/reference/activity#list-notifications-for-the-authenticated-user)). */
        readonly thread_id: components['parameters']['thread-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['thread-subscription']
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
    }
  }
  /**
   * If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.
   *
   * You can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.
   *
   * Unsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://docs.github.com/enterprise-server@3.6/rest/reference/activity#delete-a-thread-subscription) endpoint.
   */
  readonly 'activity/set-thread-subscription': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/enterprise-server@3.6/rest/reference/activity#list-notifications-for-the-authenticated-user)). */
        readonly thread_id: components['parameters']['thread-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['thread-subscription']
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description Whether to block all notifications from a thread.
           * @default false
           */
          readonly ignored?: boolean
        }
      }
    }
  }
  /** Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/enterprise-server@3.6/rest/reference/activity#set-a-thread-subscription) endpoint and set `ignore` to `true`. */
  readonly 'activity/delete-thread-subscription': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/enterprise-server@3.6/rest/reference/activity#list-notifications-for-the-authenticated-user)). */
        readonly thread_id: components['parameters']['thread-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
    }
  }
  /** Get the octocat as ASCII art */
  readonly 'meta/get-octocat': {
    readonly parameters: {
      readonly query: {
        /** The words to show in Octocat's speech bubble */
        readonly s?: string
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/octocat-stream': string
        }
      }
    }
  }
  /**
   * Lists all organizations, in the order that they were created on GitHub Enterprise Server.
   *
   * **Note:** Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of organizations.
   */
  readonly 'orgs/list': {
    readonly parameters: {
      readonly query: {
        /** An organization ID. Only return organizations with an ID greater than this ID. */
        readonly since?: components['parameters']['since-org']
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {
          readonly Link?: string
        }
        readonly content: {
          readonly 'application/json': readonly components['schemas']['organization-simple'][]
        }
      }
      readonly 304: components['responses']['not_modified']
    }
  }
  /**
   * List the custom repository roles available in this organization. In order to see custom
   * repository roles in an organization, the authenticated user must be an organization owner.
   *
   * To use this endpoint the authenticated user must be an administrator for the organization or of an repository of the organizaiton and must use an access token with `admin:org repo` scope.
   * GitHub Apps must have the `organization_custom_roles:read` organization permission to use this endpoint.
   *
   * For more information on custom repository roles, see "[Managing custom repository roles for an organization](https://docs.github.com/enterprise-server@3.6/organizations/managing-peoples-access-to-your-organization-with-roles/managing-custom-repository-roles-for-an-organization)".
   */
  readonly 'orgs/list-custom-roles': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the organization. */
        readonly organization_id: string
      }
    }
    readonly responses: {
      /** Response - list of custom role names */
      readonly 200: {
        readonly content: {
          readonly 'application/json': {
            /**
             * @description The number of custom roles in this organization
             * @example 3
             */
            readonly total_count?: number
            readonly custom_roles?: readonly components['schemas']['organization-custom-repository-role'][]
          }
        }
      }
    }
  }
  /**
   * To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).
   *
   * GitHub Apps with the `Organization plan` permission can use this endpoint to retrieve information about an organization's GitHub Enterprise Server plan. See "[Authenticating with GitHub Apps](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/authenticating-with-github-apps/)" for details. For an example response, see 'Response with GitHub Enterprise Server plan information' below."
   */
  readonly 'orgs/get': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['organization-full']
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * **Parameter Deprecation Notice:** GitHub Enterprise Server will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).
   *
   * Enables an authenticated organization owner with the `admin:org` scope to update the organization's profile and member privileges.
   */
  readonly 'orgs/update': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['organization-full']
        }
      }
      readonly 409: components['responses']['conflict']
      /** Validation failed */
      readonly 422: {
        readonly content: {
          readonly 'application/json': components['schemas']['validation-error'] | components['schemas']['validation-error-simple']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description Billing email address. This address is not publicized. */
          readonly billing_email?: string
          /** @description The company name. */
          readonly company?: string
          /** @description The publicly visible email address. */
          readonly email?: string
          /** @description The Twitter username of the company. */
          readonly twitter_username?: string
          /** @description The location. */
          readonly location?: string
          /** @description The shorthand name of the company. */
          readonly name?: string
          /** @description The description of the company. */
          readonly description?: string
          /** @description Whether an organization can use organization projects. */
          readonly has_organization_projects?: boolean
          /** @description Whether repositories that belong to the organization can use repository projects. */
          readonly has_repository_projects?: boolean
          /**
           * @description Default permission level members have for organization repositories.
           * @default read
           * @enum {string}
           */
          readonly default_repository_permission?: 'read' | 'write' | 'admin' | 'none'
          /**
           * @description Whether of non-admin organization members can create repositories. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.
           * @default true
           */
          readonly members_can_create_repositories?: boolean
          /** @description Whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation. */
          readonly members_can_create_internal_repositories?: boolean
          /** @description Whether organization members can create private repositories, which are visible to organization members with permission. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation. */
          readonly members_can_create_private_repositories?: boolean
          /** @description Whether organization members can create public repositories, which are visible to anyone. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation. */
          readonly members_can_create_public_repositories?: boolean
          /**
           * @description Specifies which types of repositories non-admin organization members can create.
           * **Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.
           * @enum {string}
           */
          readonly members_allowed_repository_creation_type?: 'all' | 'private' | 'none'
          /**
           * @description Whether organization members can create GitHub Pages sites. Existing published sites will not be impacted.
           * @default true
           */
          readonly members_can_create_pages?: boolean
          /**
           * @description Whether organization members can fork private organization repositories.
           * @default false
           */
          readonly members_can_fork_private_repositories?: boolean
          /**
           * @description Whether contributors to organization repositories are required to sign off on commits they make through GitHub's web interface.
           * @default false
           */
          readonly web_commit_signoff_required?: boolean
          /** @example "http://github.blog" */
          readonly blog?: string
        }
      }
    }
  }
  /**
   * Gets the total GitHub Actions cache usage for an organization.
   * The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
   * You must authenticate using an access token with the `read:org` scope to use this endpoint. GitHub Apps must have the `organization_admistration:read` permission to use this endpoint.
   */
  readonly 'actions/get-actions-cache-usage-for-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': components['schemas']['actions-cache-usage-org-enterprise']
        }
      }
    }
  }
  /**
   * Lists repositories and their GitHub Actions cache usage for an organization.
   * The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
   * You must authenticate using an access token with the `read:org` scope to use this endpoint. GitHub Apps must have the `organization_admistration:read` permission to use this endpoint.
   */
  readonly 'actions/get-actions-cache-usage-by-repo-for-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': {
            readonly total_count: number
            readonly repository_cache_usages: readonly components['schemas']['actions-cache-usage-by-repository'][]
          }
        }
      }
    }
  }
  /**
   * Gets the GitHub Actions permissions policy for repositories and allowed actions in an organization.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
   */
  readonly 'actions/get-github-actions-permissions-organization': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['actions-organization-permissions']
        }
      }
    }
  }
  /**
   * Sets the GitHub Actions permissions policy for repositories and allowed actions in an organization.
   *
   * If the organization belongs to an enterprise that has set restrictive permissions at the enterprise level, such as `allowed_actions` to `selected` actions, then you cannot override them for the organization.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
   */
  readonly 'actions/set-github-actions-permissions-organization': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          readonly enabled_repositories: components['schemas']['enabled-repositories']
          readonly allowed_actions?: components['schemas']['allowed-actions']
        }
      }
    }
  }
  /**
   * Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
   */
  readonly 'actions/list-selected-repositories-enabled-github-actions-organization': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': {
            readonly total_count: number
            readonly repositories: readonly components['schemas']['repository'][]
          }
        }
      }
    }
  }
  /**
   * Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
   */
  readonly 'actions/set-selected-repositories-enabled-github-actions-organization': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description List of repository IDs to enable for GitHub Actions. */
          readonly selected_repository_ids: readonly number[]
        }
      }
    }
  }
  /**
   * Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
   */
  readonly 'actions/enable-selected-repository-github-actions-organization': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The unique identifier of the repository. */
        readonly repository_id: components['parameters']['repository-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /**
   * Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
   */
  readonly 'actions/disable-selected-repository-github-actions-organization': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The unique identifier of the repository. */
        readonly repository_id: components['parameters']['repository-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /**
   * Gets the selected actions that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).""
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
   */
  readonly 'actions/get-allowed-actions-organization': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['selected-actions']
        }
      }
    }
  }
  /**
   * Sets the actions that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
   *
   * If the organization belongs to an enterprise that has `selected` actions set at the enterprise level, then you cannot override any of the enterprise's allowed actions settings.
   *
   * To use the `patterns_allowed` setting for private repositories, the organization must belong to an enterprise. If the organization does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories in the organization.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
   */
  readonly 'actions/set-allowed-actions-organization': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': components['schemas']['selected-actions']
      }
    }
  }
  /**
   * Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization,
   * as well as whether GitHub Actions can submit approving pull request reviews. For more information, see
   * "[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/enterprise-server@3.6/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization)."
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
   */
  readonly 'actions/get-github-actions-default-workflow-permissions-organization': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['actions-get-default-workflow-permissions']
        }
      }
    }
  }
  /**
   * Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization, and sets if GitHub Actions
   * can submit approving pull request reviews. For more information, see
   * "[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/enterprise-server@3.6/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization)."
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
   */
  readonly 'actions/set-github-actions-default-workflow-permissions-organization': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
    }
    readonly responses: {
      /** Success response */
      readonly 204: never
      /** Conflict response when changing a setting is prevented by the owning enterprise */
      readonly 409: unknown
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': components['schemas']['actions-set-default-workflow-permissions']
      }
    }
  }
  /**
   * Lists all self-hosted runner groups configured in an organization and inherited from an enterprise.
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   */
  readonly 'actions/list-self-hosted-runner-groups-for-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
        /** Only return runner groups that are allowed to be used by this repository. */
        readonly visible_to_repository?: components['parameters']['visible-to-repository']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': {
            readonly total_count: number
            readonly runner_groups: readonly components['schemas']['runner-groups-org'][]
          }
        }
      }
    }
  }
  /**
   * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
   *
   * Creates a new self-hosted runner group for an organization.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   */
  readonly 'actions/create-self-hosted-runner-group-for-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['runner-groups-org']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description Name of the runner group. */
          readonly name: string
          /**
           * @description Visibility of a runner group. You can select all repositories, select individual repositories, or limit access to private repositories.
           * @default all
           * @enum {string}
           */
          readonly visibility?: 'selected' | 'all' | 'private'
          /** @description List of repository IDs that can access the runner group. */
          readonly selected_repository_ids?: readonly number[]
          /** @description List of runner IDs to add to the runner group. */
          readonly runners?: readonly number[]
          /**
           * @description Whether the runner group can be used by `public` repositories.
           * @default false
           */
          readonly allows_public_repositories?: boolean
          /**
           * @description If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.
           * @default false
           */
          readonly restricted_to_workflows?: boolean
          /** @description List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`. */
          readonly selected_workflows?: readonly string[]
        }
      }
    }
  }
  /**
   * Gets a specific self-hosted runner group for an organization.
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   */
  readonly 'actions/get-self-hosted-runner-group-for-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** Unique identifier of the self-hosted runner group. */
        readonly runner_group_id: components['parameters']['runner-group-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['runner-groups-org']
        }
      }
    }
  }
  /**
   * Deletes a self-hosted runner group for an organization.
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   */
  readonly 'actions/delete-self-hosted-runner-group-from-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** Unique identifier of the self-hosted runner group. */
        readonly runner_group_id: components['parameters']['runner-group-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /**
   * Updates the `name` and `visibility` of a self-hosted runner group in an organization.
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   */
  readonly 'actions/update-self-hosted-runner-group-for-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** Unique identifier of the self-hosted runner group. */
        readonly runner_group_id: components['parameters']['runner-group-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['runner-groups-org']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description Name of the runner group. */
          readonly name: string
          /**
           * @description Visibility of a runner group. You can select all repositories, select individual repositories, or all private repositories.
           * @enum {string}
           */
          readonly visibility?: 'selected' | 'all' | 'private'
          /**
           * @description Whether the runner group can be used by `public` repositories.
           * @default false
           */
          readonly allows_public_repositories?: boolean
          /**
           * @description If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.
           * @default false
           */
          readonly restricted_to_workflows?: boolean
          /** @description List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`. */
          readonly selected_workflows?: readonly string[]
        }
      }
    }
  }
  /**
   * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
   *
   * Lists the repositories with access to a self-hosted runner group configured in an organization.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   */
  readonly 'actions/list-repo-access-to-self-hosted-runner-group-in-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** Unique identifier of the self-hosted runner group. */
        readonly runner_group_id: components['parameters']['runner-group-id']
      }
      readonly query: {
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': {
            readonly total_count: number
            readonly repositories: readonly components['schemas']['minimal-repository'][]
          }
        }
      }
    }
  }
  /**
   * Replaces the list of repositories that have access to a self-hosted runner group configured in an organization.
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   */
  readonly 'actions/set-repo-access-to-self-hosted-runner-group-in-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** Unique identifier of the self-hosted runner group. */
        readonly runner_group_id: components['parameters']['runner-group-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description List of repository IDs that can access the runner group. */
          readonly selected_repository_ids: readonly number[]
        }
      }
    }
  }
  /**
   * Adds a repository to the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization)."
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   */
  readonly 'actions/add-repo-access-to-self-hosted-runner-group-in-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** Unique identifier of the self-hosted runner group. */
        readonly runner_group_id: components['parameters']['runner-group-id']
        /** The unique identifier of the repository. */
        readonly repository_id: components['parameters']['repository-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /**
   * Removes a repository from the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization)."
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   */
  readonly 'actions/remove-repo-access-to-self-hosted-runner-group-in-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** Unique identifier of the self-hosted runner group. */
        readonly runner_group_id: components['parameters']['runner-group-id']
        /** The unique identifier of the repository. */
        readonly repository_id: components['parameters']['repository-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /**
   * Lists self-hosted runners that are in a specific organization group.
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   */
  readonly 'actions/list-self-hosted-runners-in-group-for-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** Unique identifier of the self-hosted runner group. */
        readonly runner_group_id: components['parameters']['runner-group-id']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': {
            readonly total_count: number
            readonly runners: readonly components['schemas']['runner'][]
          }
        }
      }
    }
  }
  /**
   * Replaces the list of self-hosted runners that are part of an organization runner group.
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   */
  readonly 'actions/set-self-hosted-runners-in-group-for-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** Unique identifier of the self-hosted runner group. */
        readonly runner_group_id: components['parameters']['runner-group-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description List of runner IDs to add to the runner group. */
          readonly runners: readonly number[]
        }
      }
    }
  }
  /**
   * Adds a self-hosted runner to a runner group configured in an organization.
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   */
  readonly 'actions/add-self-hosted-runner-to-group-for-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** Unique identifier of the self-hosted runner group. */
        readonly runner_group_id: components['parameters']['runner-group-id']
        /** Unique identifier of the self-hosted runner. */
        readonly runner_id: components['parameters']['runner-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /**
   * Removes a self-hosted runner from a group configured in an organization. The runner is then returned to the default group.
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   */
  readonly 'actions/remove-self-hosted-runner-from-group-for-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** Unique identifier of the self-hosted runner group. */
        readonly runner_group_id: components['parameters']['runner-group-id']
        /** Unique identifier of the self-hosted runner. */
        readonly runner_id: components['parameters']['runner-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /**
   * Lists all self-hosted runners configured in an organization.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   */
  readonly 'actions/list-self-hosted-runners-for-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': {
            readonly total_count: number
            readonly runners: readonly components['schemas']['runner'][]
          }
        }
      }
    }
  }
  /**
   * Lists binaries for the runner application that you can download and run.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   */
  readonly 'actions/list-runner-applications-for-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['runner-application'][]
        }
      }
    }
  }
  /**
   * Returns a token that you can pass to the `config` script. The token expires after one hour.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   *
   * #### Example using registration token
   *
   * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
   *
   * ```
   * ./config.sh --url https://github.com/octo-org --token TOKEN
   * ```
   */
  readonly 'actions/create-registration-token-for-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['authentication-token']
        }
      }
    }
  }
  /**
   * Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   *
   * #### Example using remove token
   *
   * To remove your self-hosted runner from an organization, replace `TOKEN` with the remove token provided by this
   * endpoint.
   *
   * ```
   * ./config.sh remove --token TOKEN
   * ```
   */
  readonly 'actions/create-remove-token-for-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['authentication-token']
        }
      }
    }
  }
  /**
   * Gets a specific self-hosted runner configured in an organization.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   */
  readonly 'actions/get-self-hosted-runner-for-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** Unique identifier of the self-hosted runner. */
        readonly runner_id: components['parameters']['runner-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['runner']
        }
      }
    }
  }
  /**
   * Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   */
  readonly 'actions/delete-self-hosted-runner-from-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** Unique identifier of the self-hosted runner. */
        readonly runner_id: components['parameters']['runner-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /**
   * Lists all labels for a self-hosted runner configured in an organization.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   */
  readonly 'actions/list-labels-for-self-hosted-runner-for-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** Unique identifier of the self-hosted runner. */
        readonly runner_id: components['parameters']['runner-id']
      }
    }
    readonly responses: {
      readonly 200: components['responses']['actions_runner_labels']
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * Remove all previous custom labels and set the new custom labels for a specific
   * self-hosted runner configured in an organization.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   */
  readonly 'actions/set-custom-labels-for-self-hosted-runner-for-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** Unique identifier of the self-hosted runner. */
        readonly runner_id: components['parameters']['runner-id']
      }
    }
    readonly responses: {
      readonly 200: components['responses']['actions_runner_labels']
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed_simple']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels. */
          readonly labels: readonly string[]
        }
      }
    }
  }
  /**
   * Add custom labels to a self-hosted runner configured in an organization.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   */
  readonly 'actions/add-custom-labels-to-self-hosted-runner-for-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** Unique identifier of the self-hosted runner. */
        readonly runner_id: components['parameters']['runner-id']
      }
    }
    readonly responses: {
      readonly 200: components['responses']['actions_runner_labels']
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed_simple']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The names of the custom labels to add to the runner. */
          readonly labels: readonly string[]
        }
      }
    }
  }
  /**
   * Remove all custom labels from a self-hosted runner configured in an
   * organization. Returns the remaining read-only labels from the runner.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   */
  readonly 'actions/remove-all-custom-labels-from-self-hosted-runner-for-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** Unique identifier of the self-hosted runner. */
        readonly runner_id: components['parameters']['runner-id']
      }
    }
    readonly responses: {
      readonly 200: components['responses']['actions_runner_labels_readonly']
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * Remove a custom label from a self-hosted runner configured
   * in an organization. Returns the remaining labels from the runner.
   *
   * This endpoint returns a `404 Not Found` status if the custom label is not
   * present on the runner.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   */
  readonly 'actions/remove-custom-label-from-self-hosted-runner-for-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** Unique identifier of the self-hosted runner. */
        readonly runner_id: components['parameters']['runner-id']
        /** The name of a self-hosted runner's custom label. */
        readonly name: components['parameters']['runner-label-name']
      }
    }
    readonly responses: {
      readonly 200: components['responses']['actions_runner_labels']
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed_simple']
    }
  }
  /** Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */
  readonly 'actions/list-org-secrets': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': {
            readonly total_count: number
            readonly secrets: readonly components['schemas']['organization-actions-secret'][]
          }
        }
      }
    }
  }
  /** Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */
  readonly 'actions/get-org-public-key': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['actions-public-key']
        }
      }
    }
  }
  /** Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */
  readonly 'actions/get-org-secret': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The name of the secret. */
        readonly secret_name: components['parameters']['secret-name']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['organization-actions-secret']
        }
      }
    }
  }
  /**
   * Creates or updates an organization secret with an encrypted value. Encrypt your secret using
   * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
   * token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to
   * use this endpoint.
   *
   * #### Example encrypting a secret using Node.js
   *
   * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
   *
   * ```
   * const sodium = require('tweetsodium');
   *
   * const key = "base64-encoded-public-key";
   * const value = "plain-text-secret";
   *
   * // Convert the message and key to Uint8Array's (Buffer implements that interface)
   * const messageBytes = Buffer.from(value);
   * const keyBytes = Buffer.from(key, 'base64');
   *
   * // Encrypt using LibSodium.
   * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
   *
   * // Base64 the encrypted secret
   * const encrypted = Buffer.from(encryptedBytes).toString('base64');
   *
   * console.log(encrypted);
   * ```
   *
   *
   * #### Example encrypting a secret using Python
   *
   * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
   *
   * ```
   * from base64 import b64encode
   * from nacl import encoding, public
   *
   * def encrypt(public_key: str, secret_value: str) -> str:
   *   """Encrypt a Unicode string using the public key."""
   *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
   *   sealed_box = public.SealedBox(public_key)
   *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
   *   return b64encode(encrypted).decode("utf-8")
   * ```
   *
   * #### Example encrypting a secret using C#
   *
   * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
   *
   * ```
   * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
   * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
   *
   * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
   *
   * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
   * ```
   *
   * #### Example encrypting a secret using Ruby
   *
   * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
   *
   * ```ruby
   * require "rbnacl"
   * require "base64"
   *
   * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
   * public_key = RbNaCl::PublicKey.new(key)
   *
   * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
   * encrypted_secret = box.encrypt("my_secret")
   *
   * # Print the base64 encoded secret
   * puts Base64.strict_encode64(encrypted_secret)
   * ```
   */
  readonly 'actions/create-or-update-org-secret': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The name of the secret. */
        readonly secret_name: components['parameters']['secret-name']
      }
    }
    readonly responses: {
      /** Response when creating a secret */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['empty-object']
        }
      }
      /** Response when updating a secret */
      readonly 204: never
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/enterprise-server@3.6/rest/reference/actions#get-an-organization-public-key) endpoint. */
          readonly encrypted_value?: string
          /** @description ID of the key you used to encrypt the secret. */
          readonly key_id?: string
          /**
           * @description Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.
           * @enum {string}
           */
          readonly visibility: 'all' | 'private' | 'selected'
          /** @description An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/enterprise-server@3.6/rest/reference/actions#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/enterprise-server@3.6/rest/reference/actions#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/enterprise-server@3.6/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints. */
          readonly selected_repository_ids?: readonly number[]
        }
      }
    }
  }
  /** Deletes a secret in an organization using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */
  readonly 'actions/delete-org-secret': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The name of the secret. */
        readonly secret_name: components['parameters']['secret-name']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /** Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */
  readonly 'actions/list-selected-repos-for-org-secret': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The name of the secret. */
        readonly secret_name: components['parameters']['secret-name']
      }
      readonly query: {
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': {
            readonly total_count: number
            readonly repositories: readonly components['schemas']['minimal-repository'][]
          }
        }
      }
    }
  }
  /** Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.6/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */
  readonly 'actions/set-selected-repos-for-org-secret': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The name of the secret. */
        readonly secret_name: components['parameters']['secret-name']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Add selected repository to an organization secret](https://docs.github.com/enterprise-server@3.6/rest/actions/secrets#add-selected-repository-to-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/enterprise-server@3.6/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints. */
          readonly selected_repository_ids: readonly number[]
        }
      }
    }
  }
  /** Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.6/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */
  readonly 'actions/add-selected-repo-to-org-secret': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The name of the secret. */
        readonly secret_name: components['parameters']['secret-name']
        readonly repository_id: number
      }
    }
    readonly responses: {
      /** No Content when repository was added to the selected list */
      readonly 204: never
      /** Conflict when visibility type is not set to selected */
      readonly 409: unknown
    }
  }
  /** Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.6/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */
  readonly 'actions/remove-selected-repo-from-org-secret': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The name of the secret. */
        readonly secret_name: components['parameters']['secret-name']
        readonly repository_id: number
      }
    }
    readonly responses: {
      /** Response when repository was removed from the selected list */
      readonly 204: never
      /** Conflict when visibility type not set to selected */
      readonly 409: unknown
    }
  }
  /**
   * Gets the audit log for an organization. For more information, see "[Reviewing the audit log for your organization](https://docs.github.com/enterprise-server@3.6/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization)."
   *
   * To use this endpoint, you must be an organization owner, and you must use an access token with the `admin:org` scope. GitHub Apps must have the `organization_administration` read permission to use this endpoint.
   *
   * By default, the response includes up to 30 events from the past three months. Use the `phrase` parameter to filter results and retrieve older events. For example, use the `phrase` parameter with the `created` qualifier to filter events based on when the events occurred. For more information, see "[Reviewing the audit log for your organization](https://docs.github.com/enterprise-server@3.6/organizations/keeping-your-organization-secure/managing-security-settings-for-your-organization/reviewing-the-audit-log-for-your-organization#searching-the-audit-log)."
   *
   * Use pagination to retrieve fewer or more than 30 events. For more information, see "[Resources in the REST API](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#pagination)."
   */
  readonly 'orgs/get-audit-log': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
      readonly query: {
        /** A search phrase. For more information, see [Searching the audit log](https://docs.github.com/enterprise-server@3.6/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization#searching-the-audit-log). */
        readonly phrase?: components['parameters']['audit-log-phrase']
        /**
         * The event types to include:
         *
         * - `web` - returns web (non-Git) events.
         * - `git` - returns Git events.
         * - `all` - returns both web and Git events.
         *
         * The default is `web`.
         */
        readonly include?: components['parameters']['audit-log-include']
        /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor. */
        readonly after?: components['parameters']['audit-log-after']
        /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor. */
        readonly before?: components['parameters']['audit-log-before']
        /**
         * The order of audit log events. To list newest events first, specify `desc`. To list oldest events first, specify `asc`.
         *
         * The default is `desc`.
         */
        readonly order?: components['parameters']['audit-log-order']
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['audit-log-event'][]
        }
      }
    }
  }
  /**
   * Lists code scanning alerts for the default branch for all eligible repositories in an organization. Eligible repositories are repositories that are owned by organizations that you own or for which you are a security manager. For more information, see "[Managing security managers in your organization](https://docs.github.com/enterprise-server@3.6/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
   *
   * To use this endpoint, you must be an owner or security manager for the organization, and you must use an access token with the `repo` scope or `security_events` scope.
   *
   * GitHub Apps must have the `security_events` read permission to use this endpoint.
   */
  readonly 'code-scanning/list-alerts-for-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
      readonly query: {
        /** The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both. */
        readonly tool_name?: components['parameters']['tool-name']
        /** The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both. */
        readonly tool_guid?: components['parameters']['tool-guid']
        /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results before this cursor. */
        readonly before?: components['parameters']['pagination-before']
        /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results after this cursor. */
        readonly after?: components['parameters']['pagination-after']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** The direction to sort the results by. */
        readonly direction?: components['parameters']['direction']
        /** If specified, only code scanning alerts with this state will be returned. */
        readonly state?: components['schemas']['code-scanning-alert-state']
        /** The property by which to sort the results. */
        readonly sort?: 'created' | 'updated'
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['code-scanning-organization-alert-items'][]
        }
      }
      readonly 403: components['responses']['code_scanning_forbidden_read']
      readonly 404: components['responses']['not_found']
      readonly 503: components['responses']['service_unavailable']
    }
  }
  /** Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint. */
  readonly 'dependabot/list-org-secrets': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': {
            readonly total_count: number
            readonly secrets: readonly components['schemas']['organization-dependabot-secret'][]
          }
        }
      }
    }
  }
  /** Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint. */
  readonly 'dependabot/get-org-public-key': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['dependabot-public-key']
        }
      }
    }
  }
  /** Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint. */
  readonly 'dependabot/get-org-secret': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The name of the secret. */
        readonly secret_name: components['parameters']['secret-name']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['organization-dependabot-secret']
        }
      }
    }
  }
  /**
   * Creates or updates an organization secret with an encrypted value. Encrypt your secret using
   * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
   * token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization
   * permission to use this endpoint.
   *
   * #### Example encrypting a secret using Node.js
   *
   * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
   *
   * ```
   * const sodium = require('tweetsodium');
   *
   * const key = "base64-encoded-public-key";
   * const value = "plain-text-secret";
   *
   * // Convert the message and key to Uint8Array's (Buffer implements that interface)
   * const messageBytes = Buffer.from(value);
   * const keyBytes = Buffer.from(key, 'base64');
   *
   * // Encrypt using LibSodium.
   * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
   *
   * // Base64 the encrypted secret
   * const encrypted = Buffer.from(encryptedBytes).toString('base64');
   *
   * console.log(encrypted);
   * ```
   *
   *
   * #### Example encrypting a secret using Python
   *
   * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
   *
   * ```
   * from base64 import b64encode
   * from nacl import encoding, public
   *
   * def encrypt(public_key: str, secret_value: str) -> str:
   *   """Encrypt a Unicode string using the public key."""
   *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
   *   sealed_box = public.SealedBox(public_key)
   *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
   *   return b64encode(encrypted).decode("utf-8")
   * ```
   *
   * #### Example encrypting a secret using C#
   *
   * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
   *
   * ```
   * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
   * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
   *
   * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
   *
   * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
   * ```
   *
   * #### Example encrypting a secret using Ruby
   *
   * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
   *
   * ```ruby
   * require "rbnacl"
   * require "base64"
   *
   * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
   * public_key = RbNaCl::PublicKey.new(key)
   *
   * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
   * encrypted_secret = box.encrypt("my_secret")
   *
   * # Print the base64 encoded secret
   * puts Base64.strict_encode64(encrypted_secret)
   * ```
   */
  readonly 'dependabot/create-or-update-org-secret': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The name of the secret. */
        readonly secret_name: components['parameters']['secret-name']
      }
    }
    readonly responses: {
      /** Response when creating a secret */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['empty-object']
        }
      }
      /** Response when updating a secret */
      readonly 204: never
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/enterprise-server@3.6/rest/reference/dependabot#get-an-organization-public-key) endpoint. */
          readonly encrypted_value?: string
          /** @description ID of the key you used to encrypt the secret. */
          readonly key_id?: string
          /**
           * @description Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.
           * @enum {string}
           */
          readonly visibility: 'all' | 'private' | 'selected'
          /** @description An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/enterprise-server@3.6/rest/reference/dependabot#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/enterprise-server@3.6/rest/reference/dependabot#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/enterprise-server@3.6/rest/reference/dependabot#remove-selected-repository-from-an-organization-secret) endpoints. */
          readonly selected_repository_ids?: readonly string[]
        }
      }
    }
  }
  /** Deletes a secret in an organization using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint. */
  readonly 'dependabot/delete-org-secret': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The name of the secret. */
        readonly secret_name: components['parameters']['secret-name']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /** Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint. */
  readonly 'dependabot/list-selected-repos-for-org-secret': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The name of the secret. */
        readonly secret_name: components['parameters']['secret-name']
      }
      readonly query: {
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': {
            readonly total_count: number
            readonly repositories: readonly components['schemas']['minimal-repository'][]
          }
        }
      }
    }
  }
  /** Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.6/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint. */
  readonly 'dependabot/set-selected-repos-for-org-secret': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The name of the secret. */
        readonly secret_name: components['parameters']['secret-name']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/enterprise-server@3.6/rest/reference/dependabot#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/enterprise-server@3.6/rest/reference/dependabot#remove-selected-repository-from-an-organization-secret) endpoints. */
          readonly selected_repository_ids: readonly number[]
        }
      }
    }
  }
  /** Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.6/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint. */
  readonly 'dependabot/add-selected-repo-to-org-secret': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The name of the secret. */
        readonly secret_name: components['parameters']['secret-name']
        readonly repository_id: number
      }
    }
    readonly responses: {
      /** No Content when repository was added to the selected list */
      readonly 204: never
      /** Conflict when visibility type is not set to selected */
      readonly 409: unknown
    }
  }
  /** Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.6/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint. */
  readonly 'dependabot/remove-selected-repo-from-org-secret': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The name of the secret. */
        readonly secret_name: components['parameters']['secret-name']
        readonly repository_id: number
      }
    }
    readonly responses: {
      /** Response when repository was removed from the selected list */
      readonly 204: never
      /** Conflict when visibility type not set to selected */
      readonly 409: unknown
    }
  }
  readonly 'activity/list-public-org-events': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['event'][]
        }
      }
    }
  }
  /**
   * Displays information about the specific group's usage.  Provides a list of the group's external members as well as a list of teams that this group is connected to.
   *
   * You can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/enterprise-server@3.6/github/getting-started-with-github/githubs-products)" in the GitHub Help documentation.
   */
  readonly 'teams/external-idp-group-info-for-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The unique identifier of the group. */
        readonly group_id: components['parameters']['group-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['external-group']
        }
      }
    }
  }
  /**
   * Lists external groups available in an organization. You can query the groups using the `display_name` parameter, only groups with a `group_name` containing the text provided in the `display_name` parameter will be returned.  You can also limit your page results using the `per_page` parameter. GitHub Enterprise Server generates a url-encoded `page` token using a cursor value for where the next page begins. For more information on cursor pagination, see "[Offset and Cursor Pagination explained](https://dev.to/jackmarchant/offset-and-cursor-pagination-explained-b89)."
   *
   * You can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/enterprise-server@3.6/github/getting-started-with-github/githubs-products)" in the GitHub Help documentation.
   */
  readonly 'teams/list-external-idp-groups-for-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page token */
        readonly page?: number
        /** Limits the list to groups containing the text in the group name */
        readonly display_name?: string
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {
          readonly Link?: string
        }
        readonly content: {
          readonly 'application/json': components['schemas']['external-groups']
        }
      }
    }
  }
  readonly 'orgs/list-webhooks': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['org-hook'][]
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /** Here's how you can create a hook that posts payloads in JSON format: */
  readonly 'orgs/create-webhook': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string
        }
        readonly content: {
          readonly 'application/json': components['schemas']['org-hook']
        }
      }
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description Must be passed as "web". */
          readonly name: string
          /** @description Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/enterprise-server@3.6/rest/reference/orgs#create-hook-config-params). */
          readonly config: {
            readonly url: components['schemas']['webhook-config-url']
            readonly content_type?: components['schemas']['webhook-config-content-type']
            readonly secret?: components['schemas']['webhook-config-secret']
            readonly insecure_ssl?: components['schemas']['webhook-config-insecure-ssl']
            /** @example "kdaigle" */
            readonly username?: string
            /** @example "password" */
            readonly password?: string
          }
          /**
           * @description Determines what [events](https://docs.github.com/enterprise-server@3.6/webhooks/event-payloads) the hook is triggered for.
           * @default [
           *   "push"
           * ]
           */
          readonly events?: readonly string[]
          /**
           * @description Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
           * @default true
           */
          readonly active?: boolean
        }
      }
    }
  }
  /** Returns a webhook configured in an organization. To get only the webhook `config` properties, see "[Get a webhook configuration for an organization](/rest/reference/orgs#get-a-webhook-configuration-for-an-organization)." */
  readonly 'orgs/get-webhook': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The unique identifier of the hook. */
        readonly hook_id: components['parameters']['hook-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['org-hook']
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  readonly 'orgs/delete-webhook': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The unique identifier of the hook. */
        readonly hook_id: components['parameters']['hook-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 404: components['responses']['not_found']
    }
  }
  /** Updates a webhook configured in an organization. When you update a webhook, the `secret` will be overwritten. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for an organization](/rest/reference/orgs#update-a-webhook-configuration-for-an-organization)." */
  readonly 'orgs/update-webhook': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The unique identifier of the hook. */
        readonly hook_id: components['parameters']['hook-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['org-hook']
        }
      }
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/enterprise-server@3.6/rest/reference/orgs#update-hook-config-params). */
          readonly config?: {
            readonly url: components['schemas']['webhook-config-url']
            readonly content_type?: components['schemas']['webhook-config-content-type']
            readonly secret?: components['schemas']['webhook-config-secret']
            readonly insecure_ssl?: components['schemas']['webhook-config-insecure-ssl']
          }
          /**
           * @description Determines what [events](https://docs.github.com/enterprise-server@3.6/webhooks/event-payloads) the hook is triggered for.
           * @default [
           *   "push"
           * ]
           */
          readonly events?: readonly string[]
          /**
           * @description Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
           * @default true
           */
          readonly active?: boolean
          /** @example "web" */
          readonly name?: string
        }
      }
    }
  }
  /**
   * Returns the webhook configuration for an organization. To get more information about the webhook, including the `active` state and `events`, use "[Get an organization webhook ](/rest/reference/orgs#get-an-organization-webhook)."
   *
   * Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:read` permission.
   */
  readonly 'orgs/get-webhook-config-for-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The unique identifier of the hook. */
        readonly hook_id: components['parameters']['hook-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['webhook-config']
        }
      }
    }
  }
  /**
   * Updates the webhook configuration for an organization. To update more information about the webhook, including the `active` state and `events`, use "[Update an organization webhook ](/rest/reference/orgs#update-an-organization-webhook)."
   *
   * Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:write` permission.
   */
  readonly 'orgs/update-webhook-config-for-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The unique identifier of the hook. */
        readonly hook_id: components['parameters']['hook-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['webhook-config']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          readonly url?: components['schemas']['webhook-config-url']
          readonly content_type?: components['schemas']['webhook-config-content-type']
          readonly secret?: components['schemas']['webhook-config-secret']
          readonly insecure_ssl?: components['schemas']['webhook-config-insecure-ssl']
        }
      }
    }
  }
  /** Returns a list of webhook deliveries for a webhook configured in an organization. */
  readonly 'orgs/list-webhook-deliveries': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The unique identifier of the hook. */
        readonly hook_id: components['parameters']['hook-id']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors. */
        readonly cursor?: components['parameters']['cursor']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['hook-delivery-item'][]
        }
      }
      readonly 400: components['responses']['bad_request']
      readonly 422: components['responses']['validation_failed']
    }
  }
  /** Returns a delivery for a webhook configured in an organization. */
  readonly 'orgs/get-webhook-delivery': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The unique identifier of the hook. */
        readonly hook_id: components['parameters']['hook-id']
        readonly delivery_id: components['parameters']['delivery-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['hook-delivery']
        }
      }
      readonly 400: components['responses']['bad_request']
      readonly 422: components['responses']['validation_failed']
    }
  }
  /** Redeliver a delivery for a webhook configured in an organization. */
  readonly 'orgs/redeliver-webhook-delivery': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The unique identifier of the hook. */
        readonly hook_id: components['parameters']['hook-id']
        readonly delivery_id: components['parameters']['delivery-id']
      }
    }
    readonly responses: {
      readonly 202: components['responses']['accepted']
      readonly 400: components['responses']['bad_request']
      readonly 422: components['responses']['validation_failed']
    }
  }
  /** This will trigger a [ping event](https://docs.github.com/enterprise-server@3.6/webhooks/#ping-event) to be sent to the hook. */
  readonly 'orgs/ping-webhook': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The unique identifier of the hook. */
        readonly hook_id: components['parameters']['hook-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * Enables an authenticated GitHub App to find the organization's installation information.
   *
   * You must use a [JWT](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   */
  readonly 'apps/get-org-installation': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['installation']
        }
      }
    }
  }
  /** Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization. You must be an organization owner with `admin:read` scope to use this endpoint. */
  readonly 'orgs/list-app-installations': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': {
            readonly total_count: number
            readonly installations: readonly components['schemas']['installation'][]
          }
        }
      }
    }
  }
  /**
   * List issues in an organization assigned to the authenticated user.
   *
   * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
   * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
   * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
   * request id, use the "[List pull requests](https://docs.github.com/enterprise-server@3.6/rest/reference/pulls#list-pull-requests)" endpoint.
   */
  readonly 'issues/list-for-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
      readonly query: {
        /** Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation. */
        readonly filter?: 'assigned' | 'created' | 'mentioned' | 'subscribed' | 'repos' | 'all'
        /** Indicates the state of the issues to return. */
        readonly state?: 'open' | 'closed' | 'all'
        /** A list of comma separated label names. Example: `bug,ui,@high` */
        readonly labels?: components['parameters']['labels']
        /** What to sort results by. */
        readonly sort?: 'created' | 'updated' | 'comments'
        /** The direction to sort the results by. */
        readonly direction?: components['parameters']['direction']
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        readonly since?: components['parameters']['since']
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['issue'][]
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /** List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned. */
  readonly 'orgs/list-members': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
      readonly query: {
        /** Filter members returned in the list. `2fa_disabled` means that only members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned. This options is only available for organization owners. */
        readonly filter?: '2fa_disabled' | 'all'
        /** Filter members returned by their role. */
        readonly role?: 'all' | 'admin' | 'member'
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['simple-user'][]
        }
      }
      readonly 422: components['responses']['validation_failed']
    }
  }
  /** Check if a user is, publicly or privately, a member of the organization. */
  readonly 'orgs/check-membership-for-user': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
    }
    readonly responses: {
      /** Response if requester is an organization member and user is a member */
      readonly 204: never
      /** Response if requester is not an organization member */
      readonly 302: never
      /** Not Found if requester is an organization member and user is not a member */
      readonly 404: unknown
    }
  }
  /** Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories. */
  readonly 'orgs/remove-member': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 403: components['responses']['forbidden']
    }
  }
  /** In order to get a user's membership with an organization, the authenticated user must be an organization member. The `state` parameter in the response can be used to identify the user's membership status. */
  readonly 'orgs/get-membership-for-user': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['org-membership']
        }
      }
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * Only authenticated organization owners can add a member to the organization or update the member's role.
   *
   * *   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://docs.github.com/enterprise-server@3.6/rest/reference/orgs#get-organization-membership-for-a-user) will be `pending` until they accept the invitation.
   *
   * *   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.
   *
   * **Rate limits**
   *
   * To prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.
   */
  readonly 'orgs/set-membership-for-user': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['org-membership']
        }
      }
      readonly 403: components['responses']['forbidden']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description The role to give the user in the organization. Can be one of:
           * \* `admin` - The user will become an owner of the organization.
           * \* `member` - The user will become a non-owner member of the organization.
           * @default member
           * @enum {string}
           */
          readonly role?: 'admin' | 'member'
        }
      }
    }
  }
  /**
   * In order to remove a user's membership with an organization, the authenticated user must be an organization owner.
   *
   * If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.
   */
  readonly 'orgs/remove-membership-for-user': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
    }
  }
  /** Lists the most recent migrations. */
  readonly 'migrations/list-for-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
        /** Exclude attributes from the API response to improve performance */
        readonly exclude?: readonly 'repositories'[]
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['migration'][]
        }
      }
    }
  }
  /** Initiates the generation of a migration archive. */
  readonly 'migrations/start-for-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['migration']
        }
      }
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description A list of arrays indicating which repositories should be migrated. */
          readonly repositories: readonly string[]
          /**
           * @description Indicates whether repositories should be locked (to prevent manipulation) while migrating data.
           * @default false
           * @example true
           */
          readonly lock_repositories?: boolean
          /**
           * @description Indicates whether metadata should be excluded and only git source should be included for the migration.
           * @default false
           */
          readonly exclude_metadata?: boolean
          /**
           * @description Indicates whether the repository git data should be excluded from the migration.
           * @default false
           */
          readonly exclude_git_data?: boolean
          /**
           * @description Indicates whether attachments should be excluded from the migration (to reduce migration archive file size).
           * @default false
           * @example true
           */
          readonly exclude_attachments?: boolean
          /**
           * @description Indicates whether releases should be excluded from the migration (to reduce migration archive file size).
           * @default false
           * @example true
           */
          readonly exclude_releases?: boolean
          /**
           * @description Indicates whether projects owned by the organization or users should be excluded. from the migration.
           * @default false
           * @example true
           */
          readonly exclude_owner_projects?: boolean
          /**
           * @description Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).
           * @default false
           * @example true
           */
          readonly org_metadata_only?: boolean
          /** @description Exclude related items from being returned in the response in order to improve performance of the request. The array can include any of: `"repositories"`. */
          readonly exclude?: readonly 'repositories'[]
        }
      }
    }
  }
  /**
   * Fetches the status of a migration.
   *
   * The `state` of a migration can be one of the following values:
   *
   * *   `pending`, which means the migration hasn't started yet.
   * *   `exporting`, which means the migration is in progress.
   * *   `exported`, which means the migration finished successfully.
   * *   `failed`, which means the migration failed.
   */
  readonly 'migrations/get-status-for-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The unique identifier of the migration. */
        readonly migration_id: components['parameters']['migration-id']
      }
      readonly query: {
        /** Exclude attributes from the API response to improve performance */
        readonly exclude?: readonly 'repositories'[]
      }
    }
    readonly responses: {
      /**
       * *   `pending`, which means the migration hasn't started yet.
       * *   `exporting`, which means the migration is in progress.
       * *   `exported`, which means the migration finished successfully.
       * *   `failed`, which means the migration failed.
       */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['migration']
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /** List all users who are outside collaborators of an organization. */
  readonly 'orgs/list-outside-collaborators': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
      readonly query: {
        /** Filter the list of outside collaborators. `2fa_disabled` means that only outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned. */
        readonly filter?: '2fa_disabled' | 'all'
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['simple-user'][]
        }
      }
    }
  }
  /** When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see "[Converting an organization member to an outside collaborator](https://docs.github.com/enterprise-server@3.6/articles/converting-an-organization-member-to-an-outside-collaborator/)". Converting an organization member to an outside collaborator may be restricted by enterprise administrators. For more information, see "[Enforcing repository management policies in your enterprise](https://docs.github.com/enterprise-server@3.6/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories)." */
  readonly 'orgs/convert-member-to-outside-collaborator': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
    }
    readonly responses: {
      /** User is getting converted asynchronously */
      readonly 202: {
        readonly content: {
          readonly 'application/json': { readonly [key: string]: unknown }
        }
      }
      /** User was converted */
      readonly 204: never
      /** Forbidden if user is the last owner of the organization, not a member of the organization, or if the enterprise enforces a policy for inviting outside collaborators. For more information, see "[Enforcing repository management policies in your enterprise](https://docs.github.com/enterprise-server@3.6/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories)." */
      readonly 403: unknown
      readonly 404: components['responses']['not_found']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description When set to `true`, the request will be performed asynchronously. Returns a 202 status code when the job is successfully queued.
           * @default false
           */
          readonly async?: boolean
        }
      }
    }
  }
  /** Removing a user from this list will remove them from all the organization's repositories. */
  readonly 'orgs/remove-outside-collaborator': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      /** Unprocessable Entity if user is a member of the organization */
      readonly 422: {
        readonly content: {
          readonly 'application/json': {
            readonly message?: string
            readonly documentation_url?: string
          }
        }
      }
    }
  }
  /** List all pre-receive hooks that are enabled or testing for this organization as well as any disabled hooks that can be configured at the organization level. Globally disabled pre-receive hooks that do not allow downstream configuration are not listed. */
  readonly 'enterprise-admin/list-pre-receive-hooks-for-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
        /** The direction to sort the results by. */
        readonly direction?: components['parameters']['direction']
        /** The sort order for the response collection. */
        readonly sort?: 'created' | 'updated' | 'name'
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['org-pre-receive-hook'][]
        }
      }
    }
  }
  readonly 'enterprise-admin/get-pre-receive-hook-for-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The unique identifier of the pre-receive hook. */
        readonly pre_receive_hook_id: components['parameters']['pre-receive-hook-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['org-pre-receive-hook']
        }
      }
    }
  }
  /** Removes any overrides for this hook at the org level for this org. */
  readonly 'enterprise-admin/remove-pre-receive-hook-enforcement-for-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The unique identifier of the pre-receive hook. */
        readonly pre_receive_hook_id: components['parameters']['pre-receive-hook-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['org-pre-receive-hook']
        }
      }
    }
  }
  /** For pre-receive hooks which are allowed to be configured at the org level, you can set `enforcement` and `allow_downstream_configuration` */
  readonly 'enterprise-admin/update-pre-receive-hook-enforcement-for-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The unique identifier of the pre-receive hook. */
        readonly pre_receive_hook_id: components['parameters']['pre-receive-hook-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['org-pre-receive-hook']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The state of enforcement for the hook on this repository. */
          readonly enforcement?: string
          /** @description Whether repositories can override enforcement. */
          readonly allow_downstream_configuration?: boolean
        }
      }
    }
  }
  /** Lists the projects in an organization. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. */
  readonly 'projects/list-for-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
      readonly query: {
        /** Indicates the state of the projects to return. */
        readonly state?: 'open' | 'closed' | 'all'
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['project'][]
        }
      }
      readonly 422: components['responses']['validation_failed_simple']
    }
  }
  /** Creates an organization project board. Returns a `410 Gone` status if projects are disabled in the organization or if the organization does not have existing classic projects. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. */
  readonly 'projects/create-for-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['project']
        }
      }
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
      readonly 410: components['responses']['gone']
      readonly 422: components['responses']['validation_failed_simple']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The name of the project. */
          readonly name: string
          /** @description The description of the project. */
          readonly body?: string
        }
      }
    }
  }
  /** Members of an organization can choose to have their membership publicized or not. */
  readonly 'orgs/list-public-members': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['simple-user'][]
        }
      }
    }
  }
  readonly 'orgs/check-public-membership-for-user': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
    }
    readonly responses: {
      /** Response if user is a public member */
      readonly 204: never
      /** Not Found if user is not a public member */
      readonly 404: unknown
    }
  }
  /**
   * The user can publicize their own membership. (A user cannot publicize the membership for another user.)
   *
   * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#http-verbs)."
   */
  readonly 'orgs/set-public-membership-for-authenticated-user': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 403: components['responses']['forbidden']
    }
  }
  readonly 'orgs/remove-public-membership-for-authenticated-user': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /** Lists repositories for the specified organization. */
  readonly 'repos/list-for-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
      readonly query: {
        /** Specifies the types of repositories you want returned. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `type` can also be `internal`. However, the `internal` value is not yet supported when a GitHub App calls this API with an installation access token. */
        readonly type?: 'all' | 'public' | 'private' | 'forks' | 'sources' | 'member' | 'internal'
        /** The property to sort the results by. */
        readonly sort?: 'created' | 'updated' | 'pushed' | 'full_name'
        /** The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`. */
        readonly direction?: 'asc' | 'desc'
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['minimal-repository'][]
        }
      }
    }
  }
  /**
   * Creates a new repository in the specified organization. The authenticated user must be a member of the organization.
   *
   * **OAuth scope requirements**
   *
   * When using [OAuth](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
   *
   * *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
   * *   `repo` scope to create a private repository
   */
  readonly 'repos/create-in-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string
        }
        readonly content: {
          readonly 'application/json': components['schemas']['repository']
        }
      }
      readonly 403: components['responses']['forbidden']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The name of the repository. */
          readonly name: string
          /** @description A short description of the repository. */
          readonly description?: string
          /** @description A URL with more information about the repository. */
          readonly homepage?: string
          /**
           * @description Whether the repository is private.
           * @default false
           */
          readonly private?: boolean
          /**
           * @description Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. Note: For GitHub Enterprise Server and GitHub AE, this endpoint will only list repositories available to all users on the enterprise. For more information, see "[Creating an internal repository](https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/about-repository-visibility#about-internal-repositories)" in the GitHub Help documentation.
           * @enum {string}
           */
          readonly visibility?: 'public' | 'private' | 'internal'
          /**
           * @description Either `true` to enable issues for this repository or `false` to disable them.
           * @default true
           */
          readonly has_issues?: boolean
          /**
           * @description Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
           * @default true
           */
          readonly has_projects?: boolean
          /**
           * @description Either `true` to enable the wiki for this repository or `false` to disable it.
           * @default true
           */
          readonly has_wiki?: boolean
          /**
           * @description Either `true` to make this repo available as a template repository or `false` to prevent it.
           * @default false
           */
          readonly is_template?: boolean
          /** @description The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization. */
          readonly team_id?: number
          /**
           * @description Pass `true` to create an initial commit with empty README.
           * @default false
           */
          readonly auto_init?: boolean
          /** @description Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, "Haskell". */
          readonly gitignore_template?: string
          /** @description Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://docs.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, "mit" or "mpl-2.0". */
          readonly license_template?: string
          /**
           * @description Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
           * @default true
           */
          readonly allow_squash_merge?: boolean
          /**
           * @description Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
           * @default true
           */
          readonly allow_merge_commit?: boolean
          /**
           * @description Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
           * @default true
           */
          readonly allow_rebase_merge?: boolean
          /**
           * @description Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
           * @default false
           */
          readonly allow_auto_merge?: boolean
          /**
           * @description Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.
           * @default false
           */
          readonly delete_branch_on_merge?: boolean
          /**
           * @deprecated
           * @description Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
           * @default false
           */
          readonly use_squash_pr_title_as_default?: boolean
          /**
           * @description The default value for a squash merge commit title:
           *
           * - `PR_TITLE` - default to the pull request's title.
           * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
           * @enum {string}
           */
          readonly squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE'
          /**
           * @description The default value for a squash merge commit message:
           *
           * - `PR_BODY` - default to the pull request's body.
           * - `COMMIT_MESSAGES` - default to the branch's commit messages.
           * - `BLANK` - default to a blank commit message.
           * @enum {string}
           */
          readonly squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK'
          /**
           * @description The default value for a merge commit title.
           *
           * - `PR_TITLE` - default to the pull request's title.
           * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
           * @enum {string}
           */
          readonly merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE'
          /**
           * @description The default value for a merge commit message.
           *
           * - `PR_TITLE` - default to the pull request's title.
           * - `PR_BODY` - default to the pull request's body.
           * - `BLANK` - default to a blank commit message.
           * @enum {string}
           */
          readonly merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK'
        }
      }
    }
  }
  /**
   * Lists secret scanning alerts for eligible repositories in an organization, from newest to oldest.
   * To use this endpoint, you must be an administrator or security manager for the organization, and you must use an access token with the `repo` scope or `security_events` scope.
   * For public repositories, you may instead use the `public_repo` scope.
   *
   * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
   */
  readonly 'secret-scanning/list-alerts-for-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
      readonly query: {
        /** Set to `open` or `resolved` to only list secret scanning alerts in a specific state. */
        readonly state?: components['parameters']['secret-scanning-alert-state']
        /**
         * A comma-separated list of secret types to return. By default all secret types are returned.
         * See "[Secret scanning patterns](https://docs.github.com/enterprise-server@3.6/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)"
         * for a complete list of secret types.
         */
        readonly secret_type?: components['parameters']['secret-scanning-alert-secret-type']
        /** A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`. */
        readonly resolution?: components['parameters']['secret-scanning-alert-resolution']
        /** The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved. */
        readonly sort?: components['parameters']['secret-scanning-alert-sort']
        /** The direction to sort the results by. */
        readonly direction?: components['parameters']['direction']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['organization-secret-scanning-alert'][]
        }
      }
      readonly 404: components['responses']['not_found']
      readonly 503: components['responses']['service_unavailable']
    }
  }
  /**
   * Gets the GitHub Advanced Security active committers for an organization per repository.
   *
   * Each distinct user login across all repositories is counted as a single Advanced Security seat, so the `total_advanced_security_committers` is not the sum of advanced_security_committers for each repository.
   *
   * If this organization defers to an enterprise for billing, the `total_advanced_security_committers` returned from the organization API may include some users that are in more than one organization, so they will only consume a single Advanced Security seat at the enterprise level.
   *
   * The total number of repositories with committer information is tracked by the `total_count` field.
   */
  readonly 'billing/get-github-advanced-security-billing-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Success */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['advanced-security-active-committers']
        }
      }
      readonly 403: components['responses']['code_scanning_forbidden_read']
    }
  }
  /** Lists all teams in an organization that are visible to the authenticated user. */
  readonly 'teams/list': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['team'][]
        }
      }
      readonly 403: components['responses']['forbidden']
    }
  }
  /**
   * To create a team, the authenticated user must be a member or owner of `{org}`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see "[Setting team creation permissions](https://docs.github.com/en/articles/setting-team-creation-permissions-in-your-organization)."
   *
   * When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of `maintainers`. For more information, see "[About teams](https://docs.github.com/en/github/setting-up-and-managing-organizations-and-teams/about-teams)".
   */
  readonly 'teams/create': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['team-full']
        }
      }
      readonly 403: components['responses']['forbidden']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The name of the team. */
          readonly name: string
          /** @description The description of the team. */
          readonly description?: string
          /** @description List GitHub IDs for organization members who will become team maintainers. */
          readonly maintainers?: readonly string[]
          /** @description The full name (e.g., "organization-name/repository-name") of repositories to add the team to. */
          readonly repo_names?: readonly string[]
          /**
           * @description The level of privacy this team should have. The options are:
           * **For a non-nested team:**
           * \* `secret` - only visible to organization owners and members of this team.
           * \* `closed` - visible to all members of this organization.
           * Default: `secret`
           * **For a parent or child team:**
           * \* `closed` - visible to all members of this organization.
           * Default for child team: `closed`
           * @enum {string}
           */
          readonly privacy?: 'secret' | 'closed'
          /**
           * @description **Deprecated**. The permission that new repositories will be added to the team with when none is specified.
           * @default pull
           * @enum {string}
           */
          readonly permission?: 'pull' | 'push'
          /** @description The ID of a team to set as the parent team. */
          readonly parent_team_id?: number
          /** @description The [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team. LDAP synchronization must be enabled to map LDAP entries to a team. Use the "[Update LDAP mapping for a team](https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#update-ldap-mapping-for-a-team)" endpoint to change the LDAP DN. For more information, see "[Using LDAP](https://docs.github.com/enterprise-server@3.6/admin/identity-and-access-management/authenticating-users-for-your-github-enterprise-server-instance/using-ldap#enabling-ldap-sync)." */
          readonly ldap_dn?: string
        }
      }
    }
  }
  /**
   * Gets a team using the team's `slug`. GitHub Enterprise Server generates the `slug` from the team `name`.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}`.
   */
  readonly 'teams/get-by-name': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The slug of the team name. */
        readonly team_slug: components['parameters']['team-slug']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['team-full']
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * To delete a team, the authenticated user must be an organization owner or team maintainer.
   *
   * If you are an organization owner, deleting a parent team will delete all of its child teams as well.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}`.
   */
  readonly 'teams/delete-in-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The slug of the team name. */
        readonly team_slug: components['parameters']['team-slug']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /**
   * To edit a team, the authenticated user must either be an organization owner or a team maintainer.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}`.
   */
  readonly 'teams/update-in-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The slug of the team name. */
        readonly team_slug: components['parameters']['team-slug']
      }
    }
    readonly responses: {
      /** Response when the updated information already exists */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['team-full']
        }
      }
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['team-full']
        }
      }
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The name of the team. */
          readonly name?: string
          /** @description The description of the team. */
          readonly description?: string
          /**
           * @description The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:
           * **For a non-nested team:**
           * \* `secret` - only visible to organization owners and members of this team.
           * \* `closed` - visible to all members of this organization.
           * **For a parent or child team:**
           * \* `closed` - visible to all members of this organization.
           * @enum {string}
           */
          readonly privacy?: 'secret' | 'closed'
          /**
           * @description **Deprecated**. The permission that new repositories will be added to the team with when none is specified.
           * @default pull
           * @enum {string}
           */
          readonly permission?: 'pull' | 'push' | 'admin'
          /** @description The ID of a team to set as the parent team. */
          readonly parent_team_id?: number | null
        }
      }
    }
  }
  /**
   * List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions`.
   */
  readonly 'teams/list-discussions-in-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The slug of the team name. */
        readonly team_slug: components['parameters']['team-slug']
      }
      readonly query: {
        /** The direction to sort the results by. */
        readonly direction?: components['parameters']['direction']
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
        /** Pinned discussions only filter */
        readonly pinned?: string
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['team-discussion'][]
        }
      }
    }
  }
  /**
   * Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions`.
   */
  readonly 'teams/create-discussion-in-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The slug of the team name. */
        readonly team_slug: components['parameters']['team-slug']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['team-discussion']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The discussion post's title. */
          readonly title: string
          /** @description The discussion post's body text. */
          readonly body: string
          /**
           * @description Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
           * @default false
           */
          readonly private?: boolean
        }
      }
    }
  }
  /**
   * Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
   */
  readonly 'teams/get-discussion-in-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The slug of the team name. */
        readonly team_slug: components['parameters']['team-slug']
        /** The number that identifies the discussion. */
        readonly discussion_number: components['parameters']['discussion-number']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['team-discussion']
        }
      }
    }
  }
  /**
   * Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
   */
  readonly 'teams/delete-discussion-in-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The slug of the team name. */
        readonly team_slug: components['parameters']['team-slug']
        /** The number that identifies the discussion. */
        readonly discussion_number: components['parameters']['discussion-number']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /**
   * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
   */
  readonly 'teams/update-discussion-in-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The slug of the team name. */
        readonly team_slug: components['parameters']['team-slug']
        /** The number that identifies the discussion. */
        readonly discussion_number: components['parameters']['discussion-number']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['team-discussion']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The discussion post's title. */
          readonly title?: string
          /** @description The discussion post's body text. */
          readonly body?: string
        }
      }
    }
  }
  /**
   * List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
   */
  readonly 'teams/list-discussion-comments-in-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The slug of the team name. */
        readonly team_slug: components['parameters']['team-slug']
        /** The number that identifies the discussion. */
        readonly discussion_number: components['parameters']['discussion-number']
      }
      readonly query: {
        /** The direction to sort the results by. */
        readonly direction?: components['parameters']['direction']
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['team-discussion-comment'][]
        }
      }
    }
  }
  /**
   * Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
   */
  readonly 'teams/create-discussion-comment-in-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The slug of the team name. */
        readonly team_slug: components['parameters']['team-slug']
        /** The number that identifies the discussion. */
        readonly discussion_number: components['parameters']['discussion-number']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['team-discussion-comment']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The discussion comment's body text. */
          readonly body: string
        }
      }
    }
  }
  /**
   * Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
   */
  readonly 'teams/get-discussion-comment-in-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The slug of the team name. */
        readonly team_slug: components['parameters']['team-slug']
        /** The number that identifies the discussion. */
        readonly discussion_number: components['parameters']['discussion-number']
        /** The number that identifies the comment. */
        readonly comment_number: components['parameters']['comment-number']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['team-discussion-comment']
        }
      }
    }
  }
  /**
   * Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
   */
  readonly 'teams/delete-discussion-comment-in-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The slug of the team name. */
        readonly team_slug: components['parameters']['team-slug']
        /** The number that identifies the discussion. */
        readonly discussion_number: components['parameters']['discussion-number']
        /** The number that identifies the comment. */
        readonly comment_number: components['parameters']['comment-number']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /**
   * Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
   */
  readonly 'teams/update-discussion-comment-in-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The slug of the team name. */
        readonly team_slug: components['parameters']['team-slug']
        /** The number that identifies the discussion. */
        readonly discussion_number: components['parameters']['discussion-number']
        /** The number that identifies the comment. */
        readonly comment_number: components['parameters']['comment-number']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['team-discussion-comment']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The discussion comment's body text. */
          readonly body: string
        }
      }
    }
  }
  /**
   * List the reactions to a [team discussion comment](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#discussion-comments/). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
   */
  readonly 'reactions/list-for-team-discussion-comment-in-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The slug of the team name. */
        readonly team_slug: components['parameters']['team-slug']
        /** The number that identifies the discussion. */
        readonly discussion_number: components['parameters']['discussion-number']
        /** The number that identifies the comment. */
        readonly comment_number: components['parameters']['comment-number']
      }
      readonly query: {
        /** Returns a single [reaction type](https://docs.github.com/enterprise-server@3.6/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment. */
        readonly content?: '+1' | '-1' | 'laugh' | 'confused' | 'heart' | 'hooray' | 'rocket' | 'eyes'
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['reaction'][]
        }
      }
    }
  }
  /**
   * Create a reaction to a [team discussion comment](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
   */
  readonly 'reactions/create-for-team-discussion-comment-in-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The slug of the team name. */
        readonly team_slug: components['parameters']['team-slug']
        /** The number that identifies the discussion. */
        readonly discussion_number: components['parameters']['discussion-number']
        /** The number that identifies the comment. */
        readonly comment_number: components['parameters']['comment-number']
      }
    }
    readonly responses: {
      /** Response when the reaction type has already been added to this team discussion comment */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['reaction']
        }
      }
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['reaction']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description The [reaction type](https://docs.github.com/enterprise-server@3.6/rest/reference/reactions#reaction-types) to add to the team discussion comment.
           * @enum {string}
           */
          readonly content: '+1' | '-1' | 'laugh' | 'confused' | 'heart' | 'hooray' | 'rocket' | 'eyes'
        }
      }
    }
  }
  /**
   * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.
   *
   * Delete a reaction to a [team discussion comment](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   */
  readonly 'reactions/delete-for-team-discussion-comment': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The slug of the team name. */
        readonly team_slug: components['parameters']['team-slug']
        /** The number that identifies the discussion. */
        readonly discussion_number: components['parameters']['discussion-number']
        /** The number that identifies the comment. */
        readonly comment_number: components['parameters']['comment-number']
        /** The unique identifier of the reaction. */
        readonly reaction_id: components['parameters']['reaction-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /**
   * List the reactions to a [team discussion](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
   */
  readonly 'reactions/list-for-team-discussion-in-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The slug of the team name. */
        readonly team_slug: components['parameters']['team-slug']
        /** The number that identifies the discussion. */
        readonly discussion_number: components['parameters']['discussion-number']
      }
      readonly query: {
        /** Returns a single [reaction type](https://docs.github.com/enterprise-server@3.6/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion. */
        readonly content?: '+1' | '-1' | 'laugh' | 'confused' | 'heart' | 'hooray' | 'rocket' | 'eyes'
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['reaction'][]
        }
      }
    }
  }
  /**
   * Create a reaction to a [team discussion](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
   */
  readonly 'reactions/create-for-team-discussion-in-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The slug of the team name. */
        readonly team_slug: components['parameters']['team-slug']
        /** The number that identifies the discussion. */
        readonly discussion_number: components['parameters']['discussion-number']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['reaction']
        }
      }
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['reaction']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description The [reaction type](https://docs.github.com/enterprise-server@3.6/rest/reference/reactions#reaction-types) to add to the team discussion.
           * @enum {string}
           */
          readonly content: '+1' | '-1' | 'laugh' | 'confused' | 'heart' | 'hooray' | 'rocket' | 'eyes'
        }
      }
    }
  }
  /**
   * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.
   *
   * Delete a reaction to a [team discussion](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   */
  readonly 'reactions/delete-for-team-discussion': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The slug of the team name. */
        readonly team_slug: components['parameters']['team-slug']
        /** The number that identifies the discussion. */
        readonly discussion_number: components['parameters']['discussion-number']
        /** The unique identifier of the reaction. */
        readonly reaction_id: components['parameters']['reaction-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /**
   * Lists a connection between a team and an external group.
   *
   * You can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/enterprise-server@3.6/github/getting-started-with-github/githubs-products)" in the GitHub Help documentation.
   */
  readonly 'teams/list-linked-external-idp-groups-to-team-for-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The slug of the team name. */
        readonly team_slug: components['parameters']['team-slug']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['external-groups']
        }
      }
    }
  }
  /**
   * Deletes a connection between a team and an external group.
   *
   * You can manage team membership with your IdP using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/enterprise-server@3.6/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   */
  readonly 'teams/unlink-external-idp-group-from-team-for-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The slug of the team name. */
        readonly team_slug: components['parameters']['team-slug']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /**
   * Creates a connection between a team and an external group.  Only one external group can be linked to a team.
   *
   * You can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/enterprise-server@3.6/github/getting-started-with-github/githubs-products)" in the GitHub Help documentation.
   */
  readonly 'teams/link-external-idp-group-to-team-for-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The slug of the team name. */
        readonly team_slug: components['parameters']['team-slug']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['external-group']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description External Group Id
           * @example 1
           */
          readonly group_id: number
        }
      }
    }
  }
  /**
   * Team members will include the members of child teams.
   *
   * To list members in a team, the team must be visible to the authenticated user.
   */
  readonly 'teams/list-members-in-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The slug of the team name. */
        readonly team_slug: components['parameters']['team-slug']
      }
      readonly query: {
        /** Filters members returned by their role in the team. */
        readonly role?: 'member' | 'maintainer' | 'all'
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['simple-user'][]
        }
      }
    }
  }
  /**
   * Team members will include the members of child teams.
   *
   * To get a user's membership with a team, the team must be visible to the authenticated user.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`.
   *
   * **Note:**
   * The response contains the `state` of the membership and the member's `role`.
   *
   * The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see see [Create a team](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#create-a-team).
   */
  readonly 'teams/get-membership-for-user-in-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The slug of the team name. */
        readonly team_slug: components['parameters']['team-slug']
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['team-membership']
        }
      }
      /** if user has no team membership */
      readonly 404: unknown
    }
  }
  /**
   * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.
   *
   * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
   *
   * An organization owner can add someone who is not part of the team's organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the "pending" state until the person accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team.
   *
   * If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/memberships/{username}`.
   */
  readonly 'teams/add-or-update-membership-for-user-in-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The slug of the team name. */
        readonly team_slug: components['parameters']['team-slug']
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['team-membership']
        }
      }
      /** Forbidden if team synchronization is set up */
      readonly 403: unknown
      /** Unprocessable Entity if you attempt to add an organization to a team */
      readonly 422: unknown
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description The role that this user should have in the team.
           * @default member
           * @enum {string}
           */
          readonly role?: 'member' | 'maintainer'
        }
      }
    }
  }
  /**
   * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
   *
   * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}`.
   */
  readonly 'teams/remove-membership-for-user-in-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The slug of the team name. */
        readonly team_slug: components['parameters']['team-slug']
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      /** Forbidden if team synchronization is set up */
      readonly 403: unknown
    }
  }
  /**
   * Lists the organization projects for a team.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects`.
   */
  readonly 'teams/list-projects-in-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The slug of the team name. */
        readonly team_slug: components['parameters']['team-slug']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['team-project'][]
        }
      }
    }
  }
  /**
   * Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
   */
  readonly 'teams/check-permissions-for-project-in-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The slug of the team name. */
        readonly team_slug: components['parameters']['team-slug']
        /** The unique identifier of the project. */
        readonly project_id: components['parameters']['project-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['team-project']
        }
      }
      /** Not Found if project is not managed by this team */
      readonly 404: unknown
    }
  }
  /**
   * Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
   */
  readonly 'teams/add-or-update-project-permissions-in-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The slug of the team name. */
        readonly team_slug: components['parameters']['team-slug']
        /** The unique identifier of the project. */
        readonly project_id: components['parameters']['project-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      /** Forbidden if the project is not owned by the organization */
      readonly 403: {
        readonly content: {
          readonly 'application/json': {
            readonly message?: string
            readonly documentation_url?: string
          }
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#http-verbs)."
           * @enum {string}
           */
          readonly permission?: 'read' | 'write' | 'admin'
        } | null
      }
    }
  }
  /**
   * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. This endpoint removes the project from the team, but does not delete the project.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
   */
  readonly 'teams/remove-project-in-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The slug of the team name. */
        readonly team_slug: components['parameters']['team-slug']
        /** The unique identifier of the project. */
        readonly project_id: components['parameters']['project-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /**
   * Lists a team's repositories visible to the authenticated user.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos`.
   */
  readonly 'teams/list-repos-in-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The slug of the team name. */
        readonly team_slug: components['parameters']['team-slug']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['minimal-repository'][]
        }
      }
    }
  }
  /**
   * Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.
   *
   * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/enterprise-server@3.6/rest/overview/media-types/) via the `application/vnd.github.v3.repository+json` accept header.
   *
   * If a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
   */
  readonly 'teams/check-permissions-for-repo-in-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The slug of the team name. */
        readonly team_slug: components['parameters']['team-slug']
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Alternative response with repository permissions */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['team-repository']
        }
      }
      /** Response if team has permission for the repository. This is the response when the repository media type hasn't been provded in the Accept header. */
      readonly 204: never
      /** Not Found if team does not have permission for the repository */
      readonly 404: unknown
    }
  }
  /**
   * To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#http-verbs)."
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
   *
   * For more information about the permission levels, see "[Repository permission levels for an organization](https://docs.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".
   */
  readonly 'teams/add-or-update-repo-permissions-in-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The slug of the team name. */
        readonly team_slug: components['parameters']['team-slug']
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description The permission to grant the team on this repository. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
           * @default push
           */
          readonly permission?: string
        }
      }
    }
  }
  /**
   * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
   */
  readonly 'teams/remove-repo-in-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The slug of the team name. */
        readonly team_slug: components['parameters']['team-slug']
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /**
   * Lists the child teams of the team specified by `{team_slug}`.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/teams`.
   */
  readonly 'teams/list-child-in-org': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
        /** The slug of the team name. */
        readonly team_slug: components['parameters']['team-slug']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** if child teams exist */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['team'][]
        }
      }
    }
  }
  readonly 'projects/get-card': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the card. */
        readonly card_id: components['parameters']['card-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['project-card']
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
    }
  }
  readonly 'projects/delete-card': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the card. */
        readonly card_id: components['parameters']['card-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      /** Forbidden */
      readonly 403: {
        readonly content: {
          readonly 'application/json': {
            readonly message?: string
            readonly documentation_url?: string
            readonly errors?: readonly string[]
          }
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  readonly 'projects/update-card': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the card. */
        readonly card_id: components['parameters']['card-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['project-card']
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed_simple']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description The project card's note
           * @example Update all gems
           */
          readonly note?: string | null
          /**
           * @description Whether or not the card is archived
           * @example false
           */
          readonly archived?: boolean
        }
      }
    }
  }
  readonly 'projects/move-card': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the card. */
        readonly card_id: components['parameters']['card-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': { readonly [key: string]: unknown }
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      /** Forbidden */
      readonly 403: {
        readonly content: {
          readonly 'application/json': {
            readonly message?: string
            readonly documentation_url?: string
            readonly errors?: readonly {
              readonly code?: string
              readonly message?: string
              readonly resource?: string
              readonly field?: string
            }[]
          }
        }
      }
      readonly 422: components['responses']['validation_failed']
      /** Response */
      readonly 503: {
        readonly content: {
          readonly 'application/json': {
            readonly code?: string
            readonly message?: string
            readonly documentation_url?: string
            readonly errors?: readonly {
              readonly code?: string
              readonly message?: string
            }[]
          }
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description The position of the card in a column. Can be one of: `top`, `bottom`, or `after:<card_id>` to place after the specified card.
           * @example bottom
           */
          readonly position: string
          /**
           * @description The unique identifier of the column the card should be moved to
           * @example 42
           */
          readonly column_id?: number
        }
      }
    }
  }
  readonly 'projects/get-column': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the column. */
        readonly column_id: components['parameters']['column-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['project-column']
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
    }
  }
  readonly 'projects/delete-column': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the column. */
        readonly column_id: components['parameters']['column-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
    }
  }
  readonly 'projects/update-column': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the column. */
        readonly column_id: components['parameters']['column-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['project-column']
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description Name of the project column
           * @example Remaining tasks
           */
          readonly name: string
        }
      }
    }
  }
  readonly 'projects/list-cards': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the column. */
        readonly column_id: components['parameters']['column-id']
      }
      readonly query: {
        /** Filters the project cards that are returned by the card's state. */
        readonly archived_state?: 'all' | 'archived' | 'not_archived'
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['project-card'][]
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
    }
  }
  readonly 'projects/create-card': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the column. */
        readonly column_id: components['parameters']['column-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['project-card']
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
      /** Validation failed */
      readonly 422: {
        readonly content: {
          readonly 'application/json': components['schemas']['validation-error'] | components['schemas']['validation-error-simple']
        }
      }
      /** Response */
      readonly 503: {
        readonly content: {
          readonly 'application/json': {
            readonly code?: string
            readonly message?: string
            readonly documentation_url?: string
            readonly errors?: readonly {
              readonly code?: string
              readonly message?: string
            }[]
          }
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json':
          | {
              /**
               * @description The project card's note
               * @example Update all gems
               */
              readonly note: string | null
            }
          | {
              /**
               * @description The unique identifier of the content associated with the card
               * @example 42
               */
              readonly content_id: number
              /**
               * @description The piece of content associated with the card
               * @example PullRequest
               */
              readonly content_type: string
            }
      }
    }
  }
  readonly 'projects/move-column': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the column. */
        readonly column_id: components['parameters']['column-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': { readonly [key: string]: unknown }
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
      readonly 422: components['responses']['validation_failed_simple']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description The position of the column in a project. Can be one of: `first`, `last`, or `after:<column_id>` to place after the specified column.
           * @example last
           */
          readonly position: string
        }
      }
    }
  }
  /** Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. */
  readonly 'projects/get': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the project. */
        readonly project_id: components['parameters']['project-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['project']
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
    }
  }
  /** Deletes a project board. Returns a `404 Not Found` status if projects are disabled. */
  readonly 'projects/delete': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the project. */
        readonly project_id: components['parameters']['project-id']
      }
    }
    readonly responses: {
      /** Delete Success */
      readonly 204: never
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      /** Forbidden */
      readonly 403: {
        readonly content: {
          readonly 'application/json': {
            readonly message?: string
            readonly documentation_url?: string
            readonly errors?: readonly string[]
          }
        }
      }
      readonly 404: components['responses']['not_found']
      readonly 410: components['responses']['gone']
    }
  }
  /** Updates a project board's information. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. */
  readonly 'projects/update': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the project. */
        readonly project_id: components['parameters']['project-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['project']
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      /** Forbidden */
      readonly 403: {
        readonly content: {
          readonly 'application/json': {
            readonly message?: string
            readonly documentation_url?: string
            readonly errors?: readonly string[]
          }
        }
      }
      /** Not Found if the authenticated user does not have access to the project */
      readonly 404: unknown
      readonly 410: components['responses']['gone']
      readonly 422: components['responses']['validation_failed_simple']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description Name of the project
           * @example Week One Sprint
           */
          readonly name?: string
          /**
           * @description Body of the project
           * @example This project represents the sprint of the first week in January
           */
          readonly body?: string | null
          /**
           * @description State of the project; either 'open' or 'closed'
           * @example open
           */
          readonly state?: string
          /**
           * @description The baseline permission that all organization members have on this project
           * @enum {string}
           */
          readonly organization_permission?: 'read' | 'write' | 'admin' | 'none'
          /** @description Whether or not this project can be seen by everyone. */
          readonly private?: boolean
        }
      }
    }
  }
  /** Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project `admin` to list collaborators. */
  readonly 'projects/list-collaborators': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the project. */
        readonly project_id: components['parameters']['project-id']
      }
      readonly query: {
        /** Filters the collaborators by their affiliation. `outside` means outside collaborators of a project that are not a member of the project's organization. `direct` means collaborators with permissions to a project, regardless of organization membership status. `all` means all collaborators the authenticated user can see. */
        readonly affiliation?: 'outside' | 'direct' | 'all'
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['simple-user'][]
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
  }
  /** Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project `admin` to add a collaborator. */
  readonly 'projects/add-collaborator': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the project. */
        readonly project_id: components['parameters']['project-id']
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description The permission to grant the collaborator.
           * @default write
           * @example write
           * @enum {string}
           */
          readonly permission?: 'read' | 'write' | 'admin'
        } | null
      }
    }
  }
  /** Removes a collaborator from an organization project. You must be an organization owner or a project `admin` to remove a collaborator. */
  readonly 'projects/remove-collaborator': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the project. */
        readonly project_id: components['parameters']['project-id']
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
  }
  /** Returns the collaborator's permission level for an organization project. Possible values for the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission level. */
  readonly 'projects/get-permission-for-user': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the project. */
        readonly project_id: components['parameters']['project-id']
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['project-collaborator-permission']
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
  }
  readonly 'projects/list-columns': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the project. */
        readonly project_id: components['parameters']['project-id']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['project-column'][]
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
    }
  }
  readonly 'projects/create-column': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the project. */
        readonly project_id: components['parameters']['project-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['project-column']
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
      readonly 422: components['responses']['validation_failed_simple']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description Name of the project column
           * @example Remaining tasks
           */
          readonly name: string
        }
      }
    }
  }
  /**
   * **Note:** Accessing this endpoint does not count against your REST API rate limit.
   *
   * **Note:** The `rate` object is deprecated. If you're writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object.
   */
  readonly 'rate-limit/get': {
    readonly parameters: {}
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': components['schemas']['rate-limit-overview']
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 404: components['responses']['not_found']
    }
  }
  /** The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network. */
  readonly 'repos/get': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['full-repository']
        }
      }
      readonly 301: components['responses']['moved_permanently']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * Deleting a repository requires admin access. If OAuth is used, the `delete_repo` scope is required.
   *
   * If an organization owner has configured the organization to prevent members from deleting organization-owned
   * repositories, you will get a `403 Forbidden` response.
   */
  readonly 'repos/delete': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 307: components['responses']['temporary_redirect']
      /** If an organization owner has configured the organization to prevent members from deleting organization-owned repositories, a member will get this response: */
      readonly 403: {
        readonly content: {
          readonly 'application/json': {
            readonly message?: string
            readonly documentation_url?: string
          }
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /** **Note**: To edit a repository's topics, use the [Replace all repository topics](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#replace-all-repository-topics) endpoint. */
  readonly 'repos/update': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['full-repository']
        }
      }
      readonly 307: components['responses']['temporary_redirect']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The name of the repository. */
          readonly name?: string
          /** @description A short description of the repository. */
          readonly description?: string
          /** @description A URL with more information about the repository. */
          readonly homepage?: string
          /**
           * @description Either `true` to make the repository private or `false` to make it public. Default: `false`.
           * **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.
           * @default false
           */
          readonly private?: boolean
          /**
           * @description Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`."
           * @enum {string}
           */
          readonly visibility?: 'public' | 'private' | 'internal'
          /**
           * @description Specify which security and analysis features to enable or disable for the repository.
           *
           * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/enterprise-server@3.6/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
           *
           * For example, to enable GitHub Advanced Security, use this data in the body of the `PATCH` request:
           * `{ "security_and_analysis": {"advanced_security": { "status": "enabled" } } }`.
           *
           * You can check which security and analysis features are currently enabled by using a `GET /repos/{owner}/{repo}` request.
           */
          readonly security_and_analysis?: {
            /** @description Use the `status` property to enable or disable GitHub Advanced Security for this repository. For more information, see "[About GitHub Advanced Security](/github/getting-started-with-github/learning-about-github/about-github-advanced-security)." */
            readonly advanced_security?: {
              /** @description Can be `enabled` or `disabled`. */
              readonly status?: string
            }
            /** @description Use the `status` property to enable or disable secret scanning for this repository. For more information, see "[About secret scanning](/code-security/secret-security/about-secret-scanning)." */
            readonly secret_scanning?: {
              /** @description Can be `enabled` or `disabled`. */
              readonly status?: string
            }
            /** @description Use the `status` property to enable or disable secret scanning push protection for this repository. For more information, see "[Protecting pushes with secret scanning](/code-security/secret-scanning/protecting-pushes-with-secret-scanning)." */
            readonly secret_scanning_push_protection?: {
              /** @description Can be `enabled` or `disabled`. */
              readonly status?: string
            }
          } | null
          /**
           * @description Either `true` to enable issues for this repository or `false` to disable them.
           * @default true
           */
          readonly has_issues?: boolean
          /**
           * @description Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
           * @default true
           */
          readonly has_projects?: boolean
          /**
           * @description Either `true` to enable the wiki for this repository or `false` to disable it.
           * @default true
           */
          readonly has_wiki?: boolean
          /**
           * @description Either `true` to make this repo available as a template repository or `false` to prevent it.
           * @default false
           */
          readonly is_template?: boolean
          /** @description Updates the default branch for this repository. */
          readonly default_branch?: string
          /**
           * @description Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
           * @default true
           */
          readonly allow_squash_merge?: boolean
          /**
           * @description Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
           * @default true
           */
          readonly allow_merge_commit?: boolean
          /**
           * @description Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
           * @default true
           */
          readonly allow_rebase_merge?: boolean
          /**
           * @description Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
           * @default false
           */
          readonly allow_auto_merge?: boolean
          /**
           * @description Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.
           * @default false
           */
          readonly delete_branch_on_merge?: boolean
          /**
           * @description Either `true` to always allow a pull request head branch that is behind its base branch to be updated even if it is not required to be up to date before merging, or false otherwise.
           * @default false
           */
          readonly allow_update_branch?: boolean
          /**
           * @deprecated
           * @description Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
           * @default false
           */
          readonly use_squash_pr_title_as_default?: boolean
          /**
           * @description The default value for a squash merge commit title:
           *
           * - `PR_TITLE` - default to the pull request's title.
           * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
           * @enum {string}
           */
          readonly squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE'
          /**
           * @description The default value for a squash merge commit message:
           *
           * - `PR_BODY` - default to the pull request's body.
           * - `COMMIT_MESSAGES` - default to the branch's commit messages.
           * - `BLANK` - default to a blank commit message.
           * @enum {string}
           */
          readonly squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK'
          /**
           * @description The default value for a merge commit title.
           *
           * - `PR_TITLE` - default to the pull request's title.
           * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
           * @enum {string}
           */
          readonly merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE'
          /**
           * @description The default value for a merge commit message.
           *
           * - `PR_TITLE` - default to the pull request's title.
           * - `PR_BODY` - default to the pull request's body.
           * - `BLANK` - default to a blank commit message.
           * @enum {string}
           */
          readonly merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK'
          /**
           * @description `true` to archive this repository. **Note**: You cannot unarchive repositories through the API.
           * @default false
           */
          readonly archived?: boolean
          /**
           * @description Either `true` to allow private forks, or `false` to prevent private forks.
           * @default false
           */
          readonly allow_forking?: boolean
          /**
           * @description Either `true` to require contributors to sign off on web-based commits, or `false` to not require contributors to sign off on web-based commits.
           * @default false
           */
          readonly web_commit_signoff_required?: boolean
        }
      }
    }
  }
  /** Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */
  readonly 'actions/list-artifacts-for-repo': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': {
            readonly total_count: number
            readonly artifacts: readonly components['schemas']['artifact'][]
          }
        }
      }
    }
  }
  /** Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */
  readonly 'actions/get-artifact': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the artifact. */
        readonly artifact_id: components['parameters']['artifact-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['artifact']
        }
      }
    }
  }
  /** Deletes an artifact for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. */
  readonly 'actions/delete-artifact': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the artifact. */
        readonly artifact_id: components['parameters']['artifact-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /**
   * Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in
   * the response header to find the URL for the download. The `:archive_format` must be `zip`. Anyone with read access to
   * the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
   * GitHub Apps must have the `actions:read` permission to use this endpoint.
   */
  readonly 'actions/download-artifact': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the artifact. */
        readonly artifact_id: components['parameters']['artifact-id']
        readonly archive_format: string
      }
    }
    readonly responses: {
      /** Response */
      readonly 302: never
      readonly 410: components['responses']['gone']
    }
  }
  /**
   * Gets GitHub Actions cache usage for a repository.
   * The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
   * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
   */
  readonly 'actions/get-actions-cache-usage': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['actions-cache-usage-by-repository']
        }
      }
    }
  }
  /**
   * Gets GitHub Actions cache usage policy for a repository.
   * You must authenticate using an access token with the `repo` scope to use this endpoint.
   * GitHub Apps must have the `actions:read` permission to use this endpoint.
   */
  readonly 'actions/get-actions-cache-usage-policy': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['actions-cache-usage-policy-for-repository']
        }
      }
    }
  }
  /**
   * Sets GitHub Actions cache usage policy for a repository.
   * You must authenticate using an access token with the `repo` scope to use this endpoint.
   * GitHub Apps must have the `actions:write` permission to use this endpoint.
   */
  readonly 'actions/set-actions-cache-usage-policy': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': components['schemas']['actions-cache-usage-policy-for-repository']
      }
    }
  }
  /** Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */
  readonly 'actions/get-job-for-workflow-run': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the job. */
        readonly job_id: components['parameters']['job-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['job']
        }
      }
    }
  }
  /**
   * Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look
   * for `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can
   * use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must
   * have the `actions:read` permission to use this endpoint.
   */
  readonly 'actions/download-job-logs-for-workflow-run': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the job. */
        readonly job_id: components['parameters']['job-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 302: never
    }
  }
  /** Re-run a job and its dependent jobs in a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. */
  readonly 'actions/re-run-job-for-workflow-run': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the job. */
        readonly job_id: components['parameters']['job-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['empty-object']
        }
      }
      readonly 403: components['responses']['forbidden']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description Whether to enable debug logging for the re-run.
           * @default false
           */
          readonly enable_debug_logging?: boolean
        } | null
      }
    }
  }
  /**
   * Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions allowed to run in the repository.
   *
   * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
   */
  readonly 'actions/get-github-actions-permissions-repository': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['actions-repository-permissions']
        }
      }
    }
  }
  /**
   * Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions in the repository.
   *
   * If the repository belongs to an organization or enterprise that has set restrictive permissions at the organization or enterprise levels, such as `allowed_actions` to `selected` actions, then you cannot override them for the repository.
   *
   * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
   */
  readonly 'actions/set-github-actions-permissions-repository': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          readonly enabled: components['schemas']['actions-enabled']
          readonly allowed_actions?: components['schemas']['allowed-actions']
        }
      }
    }
  }
  /**
   * Gets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.
   * This endpoint only applies to internal repositories. For more information, see "[Managing GitHub Actions settings for a repository](https://docs.github.com/enterprise-server@3.6/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-an-internal-repository)."
   *
   * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the
   * repository `administration` permission to use this endpoint.
   */
  readonly 'actions/get-workflow-access-to-repository': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['actions-workflow-access-to-repository']
        }
      }
    }
  }
  /**
   * Sets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.
   * This endpoint only applies to internal repositories. For more information, see "[Managing GitHub Actions settings for a repository](https://docs.github.com/enterprise-server@3.6/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-an-internal-repository)."
   *
   * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the
   * repository `administration` permission to use this endpoint.
   */
  readonly 'actions/set-workflow-access-to-repository': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': components['schemas']['actions-workflow-access-to-repository']
      }
    }
  }
  /**
   * Gets the settings for selected actions that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
   *
   * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
   */
  readonly 'actions/get-allowed-actions-repository': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['selected-actions']
        }
      }
    }
  }
  /**
   * Sets the actions that are allowed in a repository. To use this endpoint, the repository permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
   *
   * If the repository belongs to an organization or enterprise that has `selected` actions set at the organization or enterprise levels, then you cannot override any of the allowed actions settings.
   *
   * To use the `patterns_allowed` setting for private repositories, the repository must belong to an enterprise. If the repository does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories.
   *
   * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
   */
  readonly 'actions/set-allowed-actions-repository': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': components['schemas']['selected-actions']
      }
    }
  }
  /**
   * Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository,
   * as well as if GitHub Actions can submit approving pull request reviews.
   * For more information, see "[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/enterprise-server@3.6/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository)."
   *
   * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the repository `administration` permission to use this API.
   */
  readonly 'actions/get-github-actions-default-workflow-permissions-repository': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['actions-get-default-workflow-permissions']
        }
      }
    }
  }
  /**
   * Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository, and sets if GitHub Actions
   * can submit approving pull request reviews.
   * For more information, see "[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/enterprise-server@3.6/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository)."
   *
   * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the repository `administration` permission to use this API.
   */
  readonly 'actions/set-github-actions-default-workflow-permissions-repository': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Success response */
      readonly 204: never
      /** Conflict response when changing a setting is prevented by the owning organization or enterprise */
      readonly 409: unknown
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': components['schemas']['actions-set-default-workflow-permissions']
      }
    }
  }
  /** Lists all self-hosted runners configured in a repository. You must authenticate using an access token with the `repo` scope to use this endpoint. */
  readonly 'actions/list-self-hosted-runners-for-repo': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': {
            readonly total_count: number
            readonly runners: readonly components['schemas']['runner'][]
          }
        }
      }
    }
  }
  /**
   * Lists binaries for the runner application that you can download and run.
   *
   * You must authenticate using an access token with the `repo` scope to use this endpoint.
   */
  readonly 'actions/list-runner-applications-for-repo': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['runner-application'][]
        }
      }
    }
  }
  /**
   * Returns a token that you can pass to the `config` script. The token expires after one hour. You must authenticate
   * using an access token with the `repo` scope to use this endpoint.
   *
   * #### Example using registration token
   *
   * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
   *
   * ```
   * ./config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN
   * ```
   */
  readonly 'actions/create-registration-token-for-repo': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['authentication-token']
        }
      }
    }
  }
  /**
   * Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour.
   * You must authenticate using an access token with the `repo` scope to use this endpoint.
   *
   * #### Example using remove token
   *
   * To remove your self-hosted runner from a repository, replace TOKEN with the remove token provided by this endpoint.
   *
   * ```
   * ./config.sh remove --token TOKEN
   * ```
   */
  readonly 'actions/create-remove-token-for-repo': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['authentication-token']
        }
      }
    }
  }
  /**
   * Gets a specific self-hosted runner configured in a repository.
   *
   * You must authenticate using an access token with the `repo` scope to use this
   * endpoint.
   */
  readonly 'actions/get-self-hosted-runner-for-repo': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** Unique identifier of the self-hosted runner. */
        readonly runner_id: components['parameters']['runner-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['runner']
        }
      }
    }
  }
  /**
   * Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
   *
   * You must authenticate using an access token with the `repo`
   * scope to use this endpoint.
   */
  readonly 'actions/delete-self-hosted-runner-from-repo': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** Unique identifier of the self-hosted runner. */
        readonly runner_id: components['parameters']['runner-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /**
   * Lists all labels for a self-hosted runner configured in a repository.
   *
   * You must authenticate using an access token with the `repo` scope to use this
   * endpoint.
   */
  readonly 'actions/list-labels-for-self-hosted-runner-for-repo': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** Unique identifier of the self-hosted runner. */
        readonly runner_id: components['parameters']['runner-id']
      }
    }
    readonly responses: {
      readonly 200: components['responses']['actions_runner_labels']
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * Remove all previous custom labels and set the new custom labels for a specific
   * self-hosted runner configured in a repository.
   *
   * You must authenticate using an access token with the `repo` scope to use this
   * endpoint.
   */
  readonly 'actions/set-custom-labels-for-self-hosted-runner-for-repo': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** Unique identifier of the self-hosted runner. */
        readonly runner_id: components['parameters']['runner-id']
      }
    }
    readonly responses: {
      readonly 200: components['responses']['actions_runner_labels']
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed_simple']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels. */
          readonly labels: readonly string[]
        }
      }
    }
  }
  /**
   * Add custom labels to a self-hosted runner configured in a repository.
   *
   * You must authenticate using an access token with the `repo` scope to use this
   * endpoint.
   */
  readonly 'actions/add-custom-labels-to-self-hosted-runner-for-repo': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** Unique identifier of the self-hosted runner. */
        readonly runner_id: components['parameters']['runner-id']
      }
    }
    readonly responses: {
      readonly 200: components['responses']['actions_runner_labels']
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed_simple']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The names of the custom labels to add to the runner. */
          readonly labels: readonly string[]
        }
      }
    }
  }
  /**
   * Remove all custom labels from a self-hosted runner configured in a
   * repository. Returns the remaining read-only labels from the runner.
   *
   * You must authenticate using an access token with the `repo` scope to use this
   * endpoint.
   */
  readonly 'actions/remove-all-custom-labels-from-self-hosted-runner-for-repo': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** Unique identifier of the self-hosted runner. */
        readonly runner_id: components['parameters']['runner-id']
      }
    }
    readonly responses: {
      readonly 200: components['responses']['actions_runner_labels_readonly']
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * Remove a custom label from a self-hosted runner configured
   * in a repository. Returns the remaining labels from the runner.
   *
   * This endpoint returns a `404 Not Found` status if the custom label is not
   * present on the runner.
   *
   * You must authenticate using an access token with the `repo` scope to use this
   * endpoint.
   */
  readonly 'actions/remove-custom-label-from-self-hosted-runner-for-repo': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** Unique identifier of the self-hosted runner. */
        readonly runner_id: components['parameters']['runner-id']
        /** The name of a self-hosted runner's custom label. */
        readonly name: components['parameters']['runner-label-name']
      }
    }
    readonly responses: {
      readonly 200: components['responses']['actions_runner_labels']
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed_simple']
    }
  }
  /**
   * Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#parameters).
   *
   * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
   */
  readonly 'actions/list-workflow-runs-for-repo': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
      readonly query: {
        /** Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run. */
        readonly actor?: components['parameters']['actor']
        /** Returns workflow runs associated with a branch. Use the name of the branch of the `push`. */
        readonly branch?: components['parameters']['workflow-run-branch']
        /** Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://docs.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)." */
        readonly event?: components['parameters']['event']
        /** Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`. */
        readonly status?: components['parameters']['workflow-run-status']
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
        /** Returns workflow runs created within the given date-time range. For more information on the syntax, see "[Understanding the search syntax](https://docs.github.com/enterprise-server@3.6/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)." */
        readonly created?: components['parameters']['created']
        /** If `true` pull requests are omitted from the response (empty array). */
        readonly exclude_pull_requests?: components['parameters']['exclude-pull-requests']
        /** Returns workflow runs with the `check_suite_id` that you specify. */
        readonly check_suite_id?: components['parameters']['workflow-run-check-suite-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': {
            readonly total_count: number
            readonly workflow_runs: readonly components['schemas']['workflow-run'][]
          }
        }
      }
    }
  }
  /** Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */
  readonly 'actions/get-workflow-run': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the workflow run. */
        readonly run_id: components['parameters']['run-id']
      }
      readonly query: {
        /** If `true` pull requests are omitted from the response (empty array). */
        readonly exclude_pull_requests?: components['parameters']['exclude-pull-requests']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['workflow-run']
        }
      }
    }
  }
  /**
   * Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is
   * private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:write` permission to use
   * this endpoint.
   */
  readonly 'actions/delete-workflow-run': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the workflow run. */
        readonly run_id: components['parameters']['run-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /** Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */
  readonly 'actions/get-reviews-for-run': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the workflow run. */
        readonly run_id: components['parameters']['run-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['environment-approvals'][]
        }
      }
    }
  }
  /** Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */
  readonly 'actions/list-workflow-run-artifacts': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the workflow run. */
        readonly run_id: components['parameters']['run-id']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': {
            readonly total_count: number
            readonly artifacts: readonly components['schemas']['artifact'][]
          }
        }
      }
    }
  }
  /**
   * Gets a specific workflow run attempt. Anyone with read access to the repository
   * can use this endpoint. If the repository is private you must use an access token
   * with the `repo` scope. GitHub Apps must have the `actions:read` permission to
   * use this endpoint.
   */
  readonly 'actions/get-workflow-run-attempt': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the workflow run. */
        readonly run_id: components['parameters']['run-id']
        /** The attempt number of the workflow run. */
        readonly attempt_number: components['parameters']['attempt-number']
      }
      readonly query: {
        /** If `true` pull requests are omitted from the response (empty array). */
        readonly exclude_pull_requests?: components['parameters']['exclude-pull-requests']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['workflow-run']
        }
      }
    }
  }
  /** Lists jobs for a specific workflow run attempt. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#parameters). */
  readonly 'actions/list-jobs-for-workflow-run-attempt': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the workflow run. */
        readonly run_id: components['parameters']['run-id']
        /** The attempt number of the workflow run. */
        readonly attempt_number: components['parameters']['attempt-number']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': {
            readonly total_count: number
            readonly jobs: readonly components['schemas']['job'][]
          }
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * Gets a redirect URL to download an archive of log files for a specific workflow run attempt. This link expires after
   * 1 minute. Look for `Location:` in the response header to find the URL for the download. Anyone with read access to
   * the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
   * GitHub Apps must have the `actions:read` permission to use this endpoint.
   */
  readonly 'actions/download-workflow-run-attempt-logs': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the workflow run. */
        readonly run_id: components['parameters']['run-id']
        /** The attempt number of the workflow run. */
        readonly attempt_number: components['parameters']['attempt-number']
      }
    }
    readonly responses: {
      /** Response */
      readonly 302: never
    }
  }
  /** Cancels a workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. */
  readonly 'actions/cancel-workflow-run': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the workflow run. */
        readonly run_id: components['parameters']['run-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 202: {
        readonly content: {
          readonly 'application/json': components['schemas']['empty-object']
        }
      }
      readonly 409: components['responses']['conflict']
    }
  }
  /** Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#parameters). */
  readonly 'actions/list-jobs-for-workflow-run': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the workflow run. */
        readonly run_id: components['parameters']['run-id']
      }
      readonly query: {
        /** Filters jobs by their `completed_at` timestamp. `latest` returns jobs from the most recent execution of the workflow run. `all` returns all jobs for a workflow run, including from old executions of the workflow run. */
        readonly filter?: 'latest' | 'all'
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': {
            readonly total_count: number
            readonly jobs: readonly components['schemas']['job'][]
          }
        }
      }
    }
  }
  /**
   * Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for
   * `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can use
   * this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have
   * the `actions:read` permission to use this endpoint.
   */
  readonly 'actions/download-workflow-run-logs': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the workflow run. */
        readonly run_id: components['parameters']['run-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 302: never
    }
  }
  /** Deletes all logs for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. */
  readonly 'actions/delete-workflow-run-logs': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the workflow run. */
        readonly run_id: components['parameters']['run-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 403: components['responses']['forbidden']
      readonly 500: components['responses']['internal_error']
    }
  }
  /**
   * Get all deployment environments for a workflow run that are waiting for protection rules to pass.
   *
   * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
   */
  readonly 'actions/get-pending-deployments-for-run': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the workflow run. */
        readonly run_id: components['parameters']['run-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['pending-deployment'][]
        }
      }
    }
  }
  /**
   * Approve or reject pending deployments that are waiting on approval by a required reviewer.
   *
   * Required reviewers with read access to the repository contents and deployments can use this endpoint. Required reviewers must authenticate using an access token with the `repo` scope to use this endpoint.
   */
  readonly 'actions/review-pending-deployments-for-run': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the workflow run. */
        readonly run_id: components['parameters']['run-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['deployment'][]
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description The list of environment ids to approve or reject
           * @example [
           *   161171787,
           *   161171795
           * ]
           */
          readonly environment_ids: readonly number[]
          /**
           * @description Whether to approve or reject deployment to the specified environments.
           * @example approved
           * @enum {string}
           */
          readonly state: 'approved' | 'rejected'
          /**
           * @description A comment to accompany the deployment review
           * @example Ship it!
           */
          readonly comment: string
        }
      }
    }
  }
  /** Re-runs your workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. */
  readonly 'actions/re-run-workflow': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the workflow run. */
        readonly run_id: components['parameters']['run-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['empty-object']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description Whether to enable debug logging for the re-run.
           * @default false
           */
          readonly enable_debug_logging?: boolean
        } | null
      }
    }
  }
  /** Re-run all of the failed jobs and their dependent jobs in a workflow run using the `id` of the workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. */
  readonly 'actions/re-run-workflow-failed-jobs': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the workflow run. */
        readonly run_id: components['parameters']['run-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['empty-object']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description Whether to enable debug logging for the re-run.
           * @default false
           */
          readonly enable_debug_logging?: boolean
        } | null
      }
    }
  }
  /** Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint. */
  readonly 'actions/list-repo-secrets': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': {
            readonly total_count: number
            readonly secrets: readonly components['schemas']['actions-secret'][]
          }
        }
      }
    }
  }
  /** Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint. */
  readonly 'actions/get-repo-public-key': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['actions-public-key']
        }
      }
    }
  }
  /** Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint. */
  readonly 'actions/get-repo-secret': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the secret. */
        readonly secret_name: components['parameters']['secret-name']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['actions-secret']
        }
      }
    }
  }
  /**
   * Creates or updates a repository secret with an encrypted value. Encrypt your secret using
   * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
   * token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use
   * this endpoint.
   *
   * #### Example encrypting a secret using Node.js
   *
   * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
   *
   * ```
   * const sodium = require('tweetsodium');
   *
   * const key = "base64-encoded-public-key";
   * const value = "plain-text-secret";
   *
   * // Convert the message and key to Uint8Array's (Buffer implements that interface)
   * const messageBytes = Buffer.from(value);
   * const keyBytes = Buffer.from(key, 'base64');
   *
   * // Encrypt using LibSodium.
   * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
   *
   * // Base64 the encrypted secret
   * const encrypted = Buffer.from(encryptedBytes).toString('base64');
   *
   * console.log(encrypted);
   * ```
   *
   *
   * #### Example encrypting a secret using Python
   *
   * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
   *
   * ```
   * from base64 import b64encode
   * from nacl import encoding, public
   *
   * def encrypt(public_key: str, secret_value: str) -> str:
   *   """Encrypt a Unicode string using the public key."""
   *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
   *   sealed_box = public.SealedBox(public_key)
   *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
   *   return b64encode(encrypted).decode("utf-8")
   * ```
   *
   * #### Example encrypting a secret using C#
   *
   * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
   *
   * ```
   * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
   * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
   *
   * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
   *
   * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
   * ```
   *
   * #### Example encrypting a secret using Ruby
   *
   * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
   *
   * ```ruby
   * require "rbnacl"
   * require "base64"
   *
   * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
   * public_key = RbNaCl::PublicKey.new(key)
   *
   * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
   * encrypted_secret = box.encrypt("my_secret")
   *
   * # Print the base64 encoded secret
   * puts Base64.strict_encode64(encrypted_secret)
   * ```
   */
  readonly 'actions/create-or-update-repo-secret': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the secret. */
        readonly secret_name: components['parameters']['secret-name']
      }
    }
    readonly responses: {
      /** Response when creating a secret */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['empty-object']
        }
      }
      /** Response when updating a secret */
      readonly 204: never
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/enterprise-server@3.6/rest/reference/actions#get-a-repository-public-key) endpoint. */
          readonly encrypted_value?: string
          /** @description ID of the key you used to encrypt the secret. */
          readonly key_id?: string
        }
      }
    }
  }
  /** Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint. */
  readonly 'actions/delete-repo-secret': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the secret. */
        readonly secret_name: components['parameters']['secret-name']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /** Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */
  readonly 'actions/list-repo-workflows': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': {
            readonly total_count: number
            readonly workflows: readonly components['schemas']['workflow'][]
          }
        }
      }
    }
  }
  /** Gets a specific workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */
  readonly 'actions/get-workflow': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The ID of the workflow. You can also pass the workflow file name as a string. */
        readonly workflow_id: components['parameters']['workflow-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['workflow']
        }
      }
    }
  }
  /**
   * Disables a workflow and sets the `state` of the workflow to `disabled_manually`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
   *
   * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
   */
  readonly 'actions/disable-workflow': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The ID of the workflow. You can also pass the workflow file name as a string. */
        readonly workflow_id: components['parameters']['workflow-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /**
   * You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
   *
   * You must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see "[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch)."
   *
   * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. For more information, see "[Creating a personal access token for the command line](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line)."
   */
  readonly 'actions/create-workflow-dispatch': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The ID of the workflow. You can also pass the workflow file name as a string. */
        readonly workflow_id: components['parameters']['workflow-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The git reference for the workflow. The reference can be a branch or tag name. */
          readonly ref: string
          /** @description Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when `inputs` are omitted. */
          readonly inputs?: { readonly [key: string]: string }
        }
      }
    }
  }
  /**
   * Enables a workflow and sets the `state` of the workflow to `active`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
   *
   * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
   */
  readonly 'actions/enable-workflow': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The ID of the workflow. You can also pass the workflow file name as a string. */
        readonly workflow_id: components['parameters']['workflow-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /**
   * List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#parameters).
   *
   * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
   */
  readonly 'actions/list-workflow-runs': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The ID of the workflow. You can also pass the workflow file name as a string. */
        readonly workflow_id: components['parameters']['workflow-id']
      }
      readonly query: {
        /** Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run. */
        readonly actor?: components['parameters']['actor']
        /** Returns workflow runs associated with a branch. Use the name of the branch of the `push`. */
        readonly branch?: components['parameters']['workflow-run-branch']
        /** Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://docs.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)." */
        readonly event?: components['parameters']['event']
        /** Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`. */
        readonly status?: components['parameters']['workflow-run-status']
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
        /** Returns workflow runs created within the given date-time range. For more information on the syntax, see "[Understanding the search syntax](https://docs.github.com/enterprise-server@3.6/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)." */
        readonly created?: components['parameters']['created']
        /** If `true` pull requests are omitted from the response (empty array). */
        readonly exclude_pull_requests?: components['parameters']['exclude-pull-requests']
        /** Returns workflow runs with the `check_suite_id` that you specify. */
        readonly check_suite_id?: components['parameters']['workflow-run-check-suite-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': {
            readonly total_count: number
            readonly workflow_runs: readonly components['schemas']['workflow-run'][]
          }
        }
      }
    }
  }
  /** Lists the [available assignees](https://docs.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository. */
  readonly 'issues/list-assignees': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['simple-user'][]
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * Checks if a user has permission to be assigned to an issue in this repository.
   *
   * If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.
   *
   * Otherwise a `404` status code is returned.
   */
  readonly 'issues/check-user-can-be-assigned': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        readonly assignee: string
      }
    }
    readonly responses: {
      /** If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned. */
      readonly 204: never
      /** Otherwise a `404` status code is returned. */
      readonly 404: {
        readonly content: {
          readonly 'application/json': components['schemas']['basic-error']
        }
      }
    }
  }
  /**
   * This returns a list of autolinks configured for the given repository.
   *
   * Information about autolinks are only available to repository administrators.
   */
  readonly 'repos/list-autolinks': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
      readonly query: {
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['autolink'][]
        }
      }
    }
  }
  /** Users with admin access to the repository can create an autolink. */
  readonly 'repos/create-autolink': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string
        }
        readonly content: {
          readonly 'application/json': components['schemas']['autolink']
        }
      }
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The prefix appended by a number will generate a link any time it is found in an issue, pull request, or commit. */
          readonly key_prefix: string
          /** @description The URL must contain `<num>` for the reference number. */
          readonly url_template: string
          /**
           * @description Whether this autolink reference matches alphanumeric characters. If true, the `<num>` parameter of the `url_template` matches alphanumeric characters `A-Z` (case insensitive), `0-9`, and `-`. If false, this autolink reference only matches numeric characters.
           * @default true
           */
          readonly is_alphanumeric?: boolean
        }
      }
    }
  }
  /**
   * This returns a single autolink reference by ID that was configured for the given repository.
   *
   * Information about autolinks are only available to repository administrators.
   */
  readonly 'repos/get-autolink': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the autolink. */
        readonly autolink_id: components['parameters']['autolink-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['autolink']
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * This deletes a single autolink reference by ID that was configured for the given repository.
   *
   * Information about autolinks are only available to repository administrators.
   */
  readonly 'repos/delete-autolink': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the autolink. */
        readonly autolink_id: components['parameters']['autolink-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 404: components['responses']['not_found']
    }
  }
  readonly 'repos/list-branches': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
      readonly query: {
        /** Setting to `true` returns only protected branches. When set to `false`, only unprotected branches are returned. Omitting this parameter returns all branches. */
        readonly protected?: boolean
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['short-branch'][]
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  readonly 'repos/get-branch': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the branch. */
        readonly branch: components['parameters']['branch']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['branch-with-protection']
        }
      }
      readonly 301: components['responses']['moved_permanently']
      readonly 404: components['responses']['not_found']
    }
  }
  /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
  readonly 'repos/get-branch-protection': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the branch. */
        readonly branch: components['parameters']['branch']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['branch-protection']
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Protecting a branch requires admin or owner permissions to the repository.
   *
   * **Note**: Passing new arrays of `users` and `teams` replaces their previous values.
   *
   * **Note**: The list of users, apps, and teams in total is limited to 100 items.
   */
  readonly 'repos/update-branch-protection': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the branch. */
        readonly branch: components['parameters']['branch']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['protected-branch']
        }
      }
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed_simple']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description Require status checks to pass before merging. Set to `null` to disable. */
          readonly required_status_checks: {
            /** @description Require branches to be up to date before merging. */
            readonly strict: boolean
            /**
             * @deprecated
             * @description **Deprecated**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.
             */
            readonly contexts: readonly string[]
            /** @description The list of status checks to require in order to merge into this branch. */
            readonly checks?: readonly {
              /** @description The name of the required check */
              readonly context: string
              /** @description The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status. */
              readonly app_id?: number
            }[]
          } | null
          /** @description Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable. */
          readonly enforce_admins: boolean | null
          /** @description Require at least one approving review on a pull request, before merging. Set to `null` to disable. */
          readonly required_pull_request_reviews: {
            /** @description Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories. */
            readonly dismissal_restrictions?: {
              /** @description The list of user `login`s with dismissal access */
              readonly users?: readonly string[]
              /** @description The list of team `slug`s with dismissal access */
              readonly teams?: readonly string[]
              /** @description The list of app `slug`s with dismissal access */
              readonly apps?: readonly string[]
            }
            /** @description Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit. */
            readonly dismiss_stale_reviews?: boolean
            /** @description Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) review them. */
            readonly require_code_owner_reviews?: boolean
            /** @description Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers. */
            readonly required_approving_review_count?: number
            /** @description Allow specific users, teams, or apps to bypass pull request requirements. */
            readonly bypass_pull_request_allowances?: {
              /** @description The list of user `login`s allowed to bypass pull request requirements. */
              readonly users?: readonly string[]
              /** @description The list of team `slug`s allowed to bypass pull request requirements. */
              readonly teams?: readonly string[]
              /** @description The list of app `slug`s allowed to bypass pull request requirements. */
              readonly apps?: readonly string[]
            }
          } | null
          /** @description Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable. */
          readonly restrictions: {
            /** @description The list of user `login`s with push access */
            readonly users: readonly string[]
            /** @description The list of team `slug`s with push access */
            readonly teams: readonly string[]
            /** @description The list of app `slug`s with push access */
            readonly apps?: readonly string[]
          } | null
          /** @description Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see "[Requiring a linear commit history](https://docs.github.com/github/administering-a-repository/requiring-a-linear-commit-history)" in the GitHub Help documentation. */
          readonly required_linear_history?: boolean
          /** @description Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation." */
          readonly allow_force_pushes?: boolean | null
          /** @description Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation. */
          readonly allow_deletions?: boolean
          /** @description If set to `true`, the `restrictions` branch protection settings which limits who can push will also block pushes which create new branches, unless the push is initiated by a user, team, or app which has the ability to push. Set to `true` to restrict new branch creation. Default: `false`. */
          readonly block_creations?: boolean
          /** @description Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule. Set to `false` to disable. Default: `false`. */
          readonly required_conversation_resolution?: boolean
        }
      }
    }
  }
  /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
  readonly 'repos/delete-branch-protection': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the branch. */
        readonly branch: components['parameters']['branch']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 403: components['responses']['forbidden']
    }
  }
  /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
  readonly 'repos/get-admin-branch-protection': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the branch. */
        readonly branch: components['parameters']['branch']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['protected-branch-admin-enforced']
        }
      }
    }
  }
  /**
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Adding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
   */
  readonly 'repos/set-admin-branch-protection': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the branch. */
        readonly branch: components['parameters']['branch']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['protected-branch-admin-enforced']
        }
      }
    }
  }
  /**
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
   */
  readonly 'repos/delete-admin-branch-protection': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the branch. */
        readonly branch: components['parameters']['branch']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 404: components['responses']['not_found']
    }
  }
  /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
  readonly 'repos/get-pull-request-review-protection': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the branch. */
        readonly branch: components['parameters']['branch']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['protected-branch-pull-request-review']
        }
      }
    }
  }
  /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
  readonly 'repos/delete-pull-request-review-protection': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the branch. */
        readonly branch: components['parameters']['branch']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
   *
   * **Note**: Passing new arrays of `users` and `teams` replaces their previous values.
   */
  readonly 'repos/update-pull-request-review-protection': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the branch. */
        readonly branch: components['parameters']['branch']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['protected-branch-pull-request-review']
        }
      }
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories. */
          readonly dismissal_restrictions?: {
            /** @description The list of user `login`s with dismissal access */
            readonly users?: readonly string[]
            /** @description The list of team `slug`s with dismissal access */
            readonly teams?: readonly string[]
            /** @description The list of app `slug`s with dismissal access */
            readonly apps?: readonly string[]
          }
          /** @description Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit. */
          readonly dismiss_stale_reviews?: boolean
          /** @description Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) have reviewed. */
          readonly require_code_owner_reviews?: boolean
          /** @description Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers. */
          readonly required_approving_review_count?: number
          /** @description Allow specific users, teams, or apps to bypass pull request requirements. */
          readonly bypass_pull_request_allowances?: {
            /** @description The list of user `login`s allowed to bypass pull request requirements. */
            readonly users?: readonly string[]
            /** @description The list of team `slug`s allowed to bypass pull request requirements. */
            readonly teams?: readonly string[]
            /** @description The list of app `slug`s allowed to bypass pull request requirements. */
            readonly apps?: readonly string[]
          }
        }
      }
    }
  }
  /**
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://docs.github.com/articles/signing-commits-with-gpg) in GitHub Help.
   *
   * **Note**: You must enable branch protection to require signed commits.
   */
  readonly 'repos/get-commit-signature-protection': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the branch. */
        readonly branch: components['parameters']['branch']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['protected-branch-admin-enforced']
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * When authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.
   */
  readonly 'repos/create-commit-signature-protection': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the branch. */
        readonly branch: components['parameters']['branch']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['protected-branch-admin-enforced']
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.
   */
  readonly 'repos/delete-commit-signature-protection': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the branch. */
        readonly branch: components['parameters']['branch']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 404: components['responses']['not_found']
    }
  }
  /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
  readonly 'repos/get-status-checks-protection': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the branch. */
        readonly branch: components['parameters']['branch']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['status-check-policy']
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
  readonly 'repos/remove-status-check-protection': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the branch. */
        readonly branch: components['parameters']['branch']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /**
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.
   */
  readonly 'repos/update-status-check-protection': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the branch. */
        readonly branch: components['parameters']['branch']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['status-check-policy']
        }
      }
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description Require branches to be up to date before merging. */
          readonly strict?: boolean
          /**
           * @deprecated
           * @description **Deprecated**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.
           */
          readonly contexts?: readonly string[]
          /** @description The list of status checks to require in order to merge into this branch. */
          readonly checks?: readonly {
            /** @description The name of the required check */
            readonly context: string
            /** @description The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status. */
            readonly app_id?: number
          }[]
        }
      }
    }
  }
  /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
  readonly 'repos/get-all-status-check-contexts': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the branch. */
        readonly branch: components['parameters']['branch']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly string[]
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
  readonly 'repos/set-status-check-contexts': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the branch. */
        readonly branch: components['parameters']['branch']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly string[]
        }
      }
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json':
          | {
              /** @description The name of the status checks */
              readonly contexts: readonly string[]
            }
          | readonly string[]
      }
    }
  }
  /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
  readonly 'repos/add-status-check-contexts': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the branch. */
        readonly branch: components['parameters']['branch']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly string[]
        }
      }
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json':
          | {
              /** @description The name of the status checks */
              readonly contexts: readonly string[]
            }
          | readonly string[]
      }
    }
  }
  /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
  readonly 'repos/remove-status-check-contexts': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the branch. */
        readonly branch: components['parameters']['branch']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly string[]
        }
      }
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json':
          | {
              /** @description The name of the status checks */
              readonly contexts: readonly string[]
            }
          | readonly string[]
      }
    }
  }
  /**
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Lists who has access to this protected branch.
   *
   * **Note**: Users, apps, and teams `restrictions` are only available for organization-owned repositories.
   */
  readonly 'repos/get-access-restrictions': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the branch. */
        readonly branch: components['parameters']['branch']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['branch-restriction-policy']
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Disables the ability to restrict who can push to this branch.
   */
  readonly 'repos/delete-access-restrictions': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the branch. */
        readonly branch: components['parameters']['branch']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /**
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Lists the GitHub Apps that have push access to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
   */
  readonly 'repos/get-apps-with-access-to-protected-branch': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the branch. */
        readonly branch: components['parameters']['branch']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['integration'][]
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Replaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
   *
   * | Type    | Description                                                                                                                                                |
   * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
   */
  readonly 'repos/set-app-access-restrictions': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the branch. */
        readonly branch: components['parameters']['branch']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['integration'][]
        }
      }
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json':
          | {
              /** @description apps parameter */
              readonly apps: readonly string[]
            }
          | readonly string[]
      }
    }
  }
  /**
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Grants the specified apps push access for this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
   *
   * | Type    | Description                                                                                                                                                |
   * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
   */
  readonly 'repos/add-app-access-restrictions': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the branch. */
        readonly branch: components['parameters']['branch']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['integration'][]
        }
      }
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json':
          | {
              /** @description apps parameter */
              readonly apps: readonly string[]
            }
          | readonly string[]
      }
    }
  }
  /**
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Removes the ability of an app to push to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
   *
   * | Type    | Description                                                                                                                                                |
   * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
   */
  readonly 'repos/remove-app-access-restrictions': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the branch. */
        readonly branch: components['parameters']['branch']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['integration'][]
        }
      }
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json':
          | {
              /** @description apps parameter */
              readonly apps: readonly string[]
            }
          | readonly string[]
      }
    }
  }
  /**
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Lists the teams who have push access to this branch. The list includes child teams.
   */
  readonly 'repos/get-teams-with-access-to-protected-branch': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the branch. */
        readonly branch: components['parameters']['branch']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['team'][]
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Replaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams.
   *
   * | Type    | Description                                                                                                                                |
   * | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
   * | `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
   */
  readonly 'repos/set-team-access-restrictions': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the branch. */
        readonly branch: components['parameters']['branch']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['team'][]
        }
      }
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json':
          | {
              /** @description The slug values for teams */
              readonly teams: readonly string[]
            }
          | readonly string[]
      }
    }
  }
  /**
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Grants the specified teams push access for this branch. You can also give push access to child teams.
   *
   * | Type    | Description                                                                                                                                |
   * | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
   * | `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
   */
  readonly 'repos/add-team-access-restrictions': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the branch. */
        readonly branch: components['parameters']['branch']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['team'][]
        }
      }
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json':
          | {
              /** @description The slug values for teams */
              readonly teams: readonly string[]
            }
          | readonly string[]
      }
    }
  }
  /**
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Removes the ability of a team to push to this branch. You can also remove push access for child teams.
   *
   * | Type    | Description                                                                                                                                         |
   * | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `array` | Teams that should no longer have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
   */
  readonly 'repos/remove-team-access-restrictions': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the branch. */
        readonly branch: components['parameters']['branch']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['team'][]
        }
      }
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json':
          | {
              /** @description The slug values for teams */
              readonly teams: readonly string[]
            }
          | readonly string[]
      }
    }
  }
  /**
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Lists the people who have push access to this branch.
   */
  readonly 'repos/get-users-with-access-to-protected-branch': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the branch. */
        readonly branch: components['parameters']['branch']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['simple-user'][]
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Replaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.
   *
   * | Type    | Description                                                                                                                   |
   * | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
   * | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
   */
  readonly 'repos/set-user-access-restrictions': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the branch. */
        readonly branch: components['parameters']['branch']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['simple-user'][]
        }
      }
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json':
          | {
              /** @description The username for users */
              readonly users: readonly string[]
            }
          | readonly string[]
      }
    }
  }
  /**
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Grants the specified people push access for this branch.
   *
   * | Type    | Description                                                                                                                   |
   * | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
   * | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
   */
  readonly 'repos/add-user-access-restrictions': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the branch. */
        readonly branch: components['parameters']['branch']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['simple-user'][]
        }
      }
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json':
          | {
              /** @description The username for users */
              readonly users: readonly string[]
            }
          | readonly string[]
      }
    }
  }
  /**
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Removes the ability of a user to push to this branch.
   *
   * | Type    | Description                                                                                                                                   |
   * | ------- | --------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `array` | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
   */
  readonly 'repos/remove-user-access-restrictions': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the branch. */
        readonly branch: components['parameters']['branch']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['simple-user'][]
        }
      }
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json':
          | {
              /** @description The username for users */
              readonly users: readonly string[]
            }
          | readonly string[]
      }
    }
  }
  /**
   * Renames a branch in a repository.
   *
   * **Note:** Although the API responds immediately, the branch rename process might take some extra time to complete in the background. You won't be able to push to the old branch name while the rename process is in progress. For more information, see "[Renaming a branch](https://docs.github.com/enterprise-server@3.6/github/administering-a-repository/renaming-a-branch)".
   *
   * The permissions required to use this endpoint depends on whether you are renaming the default branch.
   *
   * To rename a non-default branch:
   *
   * * Users must have push access.
   * * GitHub Apps must have the `contents:write` repository permission.
   *
   * To rename the default branch:
   *
   * * Users must have admin or owner permissions.
   * * GitHub Apps must have the `administration:write` repository permission.
   */
  readonly 'repos/rename-branch': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the branch. */
        readonly branch: components['parameters']['branch']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['branch-with-protection']
        }
      }
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The new name of the branch. */
          readonly new_name: string
        }
      }
    }
  }
  /**
   * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
   *
   * Creates a new check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to create check runs.
   *
   * In a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs.
   */
  readonly 'checks/create': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['check-run']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': (
          | ({
              /** @enum {undefined} */
              readonly status: 'completed'
            } & {
              conclusion: unknown
            } & { readonly [key: string]: unknown })
          | ({
              /** @enum {undefined} */
              readonly status?: 'queued' | 'in_progress'
            } & { readonly [key: string]: unknown })
        ) & {
          /** @description The name of the check. For example, "code-coverage". */
          readonly name: string
          /** @description The SHA of the commit. */
          readonly head_sha: string
          /** @description The URL of the integrator's site that has the full details of the check. If the integrator does not provide this, then the homepage of the GitHub app is used. */
          readonly details_url?: string
          /** @description A reference for the run on the integrator's system. */
          readonly external_id?: string
          /**
           * @description The current status.
           * @default queued
           * @enum {string}
           */
          readonly status?: 'queued' | 'in_progress' | 'completed'
          /**
           * Format: date-time
           * @description The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
           */
          readonly started_at?: string
          /**
           * @description **Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check.
           * **Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.
           * @enum {string}
           */
          readonly conclusion?: 'action_required' | 'cancelled' | 'failure' | 'neutral' | 'success' | 'skipped' | 'stale' | 'timed_out'
          /**
           * Format: date-time
           * @description The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
           */
          readonly completed_at?: string
          /** @description Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run. See the [`output` object](https://docs.github.com/enterprise-server@3.6/rest/reference/checks#output-object) description. */
          readonly output?: {
            /** @description The title of the check run. */
            readonly title: string
            /** @description The summary of the check run. This parameter supports Markdown. **Maximum length**: 65535 characters. */
            readonly summary: string
            /** @description The details of the check run. This parameter supports Markdown. **Maximum length**: 65535 characters. */
            readonly text?: string
            /** @description Adds information from your analysis to specific lines of code. Annotations are visible on GitHub in the **Checks** and **Files changed** tab of the pull request. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/enterprise-server@3.6/rest/reference/checks#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about how you can view annotations on GitHub, see "[About status checks](https://docs.github.com/articles/about-status-checks#checks)". See the [`annotations` object](https://docs.github.com/enterprise-server@3.6/rest/reference/checks#annotations-object) description for details about how to use this parameter. */
            readonly annotations?: readonly {
              /** @description The path of the file to add an annotation to. For example, `assets/css/main.css`. */
              readonly path: string
              /** @description The start line of the annotation. */
              readonly start_line: number
              /** @description The end line of the annotation. */
              readonly end_line: number
              /** @description The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. */
              readonly start_column?: number
              /** @description The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. */
              readonly end_column?: number
              /**
               * @description The level of the annotation.
               * @enum {string}
               */
              readonly annotation_level: 'notice' | 'warning' | 'failure'
              /** @description A short description of the feedback for these lines of code. The maximum size is 64 KB. */
              readonly message: string
              /** @description The title that represents the annotation. The maximum size is 255 characters. */
              readonly title?: string
              /** @description Details about this annotation. The maximum size is 64 KB. */
              readonly raw_details?: string
            }[]
            /** @description Adds images to the output displayed in the GitHub pull request UI. See the [`images` object](https://docs.github.com/enterprise-server@3.6/rest/reference/checks#images-object) description for details. */
            readonly images?: readonly {
              /** @description The alternative text for the image. */
              readonly alt: string
              /** @description The full URL of the image. */
              readonly image_url: string
              /** @description A short image description. */
              readonly caption?: string
            }[]
          }
          /** @description Displays a button on GitHub that can be clicked to alert your app to do additional tasks. For example, a code linting app can display a button that automatically fixes detected errors. The button created in this object is displayed after the check run completes. When a user clicks the button, GitHub sends the [`check_run.requested_action` webhook](https://docs.github.com/enterprise-server@3.6/webhooks/event-payloads/#check_run) to your app. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. See the [`actions` object](https://docs.github.com/enterprise-server@3.6/rest/reference/checks#actions-object) description. To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/enterprise-server@3.6/rest/reference/checks#check-runs-and-requested-actions)." */
          readonly actions?: readonly {
            /** @description The text to be displayed on a button in the web UI. The maximum size is 20 characters. */
            readonly label: string
            /** @description A short explanation of what this action would do. The maximum size is 40 characters. */
            readonly description: string
            /** @description A reference for the action on the integrator's system. The maximum size is 20 characters. */
            readonly identifier: string
          }[]
        }
      }
    }
  }
  /**
   * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
   *
   * Gets a single check run using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
   */
  readonly 'checks/get': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the check run. */
        readonly check_run_id: components['parameters']['check-run-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['check-run']
        }
      }
    }
  }
  /**
   * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
   *
   * Updates a check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to edit check runs.
   */
  readonly 'checks/update': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the check run. */
        readonly check_run_id: components['parameters']['check-run-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['check-run']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': (
          | ({
              /** @enum {undefined} */
              readonly status?: 'completed'
            } & {
              conclusion: unknown
            } & { readonly [key: string]: unknown })
          | ({
              /** @enum {undefined} */
              readonly status?: 'queued' | 'in_progress'
            } & { readonly [key: string]: unknown })
        ) & {
          /** @description The name of the check. For example, "code-coverage". */
          readonly name?: string
          /** @description The URL of the integrator's site that has the full details of the check. */
          readonly details_url?: string
          /** @description A reference for the run on the integrator's system. */
          readonly external_id?: string
          /**
           * Format: date-time
           * @description This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
           */
          readonly started_at?: string
          /**
           * @description The current status.
           * @enum {string}
           */
          readonly status?: 'queued' | 'in_progress' | 'completed'
          /**
           * @description **Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check.
           * **Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.
           * @enum {string}
           */
          readonly conclusion?: 'action_required' | 'cancelled' | 'failure' | 'neutral' | 'success' | 'skipped' | 'stale' | 'timed_out'
          /**
           * Format: date-time
           * @description The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
           */
          readonly completed_at?: string
          /** @description Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run. See the [`output` object](https://docs.github.com/enterprise-server@3.6/rest/reference/checks#output-object-1) description. */
          readonly output?: {
            /** @description **Required**. */
            readonly title?: string
            /** @description Can contain Markdown. */
            readonly summary: string
            /** @description Can contain Markdown. */
            readonly text?: string
            /** @description Adds information from your analysis to specific lines of code. Annotations are visible in GitHub's pull request UI. Annotations are visible in GitHub's pull request UI. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/enterprise-server@3.6/rest/reference/checks#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about annotations in the UI, see "[About status checks](https://docs.github.com/articles/about-status-checks#checks)". See the [`annotations` object](https://docs.github.com/enterprise-server@3.6/rest/reference/checks#annotations-object-1) description for details. */
            readonly annotations?: readonly {
              /** @description The path of the file to add an annotation to. For example, `assets/css/main.css`. */
              readonly path: string
              /** @description The start line of the annotation. */
              readonly start_line: number
              /** @description The end line of the annotation. */
              readonly end_line: number
              /** @description The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. */
              readonly start_column?: number
              /** @description The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. */
              readonly end_column?: number
              /**
               * @description The level of the annotation.
               * @enum {string}
               */
              readonly annotation_level: 'notice' | 'warning' | 'failure'
              /** @description A short description of the feedback for these lines of code. The maximum size is 64 KB. */
              readonly message: string
              /** @description The title that represents the annotation. The maximum size is 255 characters. */
              readonly title?: string
              /** @description Details about this annotation. The maximum size is 64 KB. */
              readonly raw_details?: string
            }[]
            /** @description Adds images to the output displayed in the GitHub pull request UI. See the [`images` object](https://docs.github.com/enterprise-server@3.6/rest/reference/checks#annotations-object-1) description for details. */
            readonly images?: readonly {
              /** @description The alternative text for the image. */
              readonly alt: string
              /** @description The full URL of the image. */
              readonly image_url: string
              /** @description A short image description. */
              readonly caption?: string
            }[]
          }
          /** @description Possible further actions the integrator can perform, which a user may trigger. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. See the [`actions` object](https://docs.github.com/enterprise-server@3.6/rest/reference/checks#actions-object) description. To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/enterprise-server@3.6/rest/reference/checks#check-runs-and-requested-actions)." */
          readonly actions?: readonly {
            /** @description The text to be displayed on a button in the web UI. The maximum size is 20 characters. */
            readonly label: string
            /** @description A short explanation of what this action would do. The maximum size is 40 characters. */
            readonly description: string
            /** @description A reference for the action on the integrator's system. The maximum size is 20 characters. */
            readonly identifier: string
          }[]
        }
      }
    }
  }
  /** Lists annotations for a check run using the annotation `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get annotations for a check run. OAuth Apps and authenticated users must have the `repo` scope to get annotations for a check run in a private repository. */
  readonly 'checks/list-annotations': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the check run. */
        readonly check_run_id: components['parameters']['check-run-id']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['check-annotation'][]
        }
      }
    }
  }
  /**
   * Triggers GitHub to rerequest an existing check run, without pushing new code to a repository. This endpoint will trigger the [`check_run` webhook](https://docs.github.com/enterprise-server@3.6/webhooks/event-payloads/#check_run) event with the action `rerequested`. When a check run is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.
   *
   * To rerequest a check run, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.
   */
  readonly 'checks/rerequest-run': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the check run. */
        readonly check_run_id: components['parameters']['check-run-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': { readonly [key: string]: unknown }
        }
      }
      /** Forbidden if the check run is not rerequestable or doesn't belong to the authenticated GitHub App */
      readonly 403: {
        readonly content: {
          readonly 'application/json': components['schemas']['basic-error']
        }
      }
      readonly 404: components['responses']['not_found']
      /** Validation error if the check run is not rerequestable */
      readonly 422: {
        readonly content: {
          readonly 'application/json': components['schemas']['basic-error']
        }
      }
    }
  }
  /**
   * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
   *
   * By default, check suites are automatically created when you create a [check run](https://docs.github.com/enterprise-server@3.6/rest/reference/checks#check-runs). You only need to use this endpoint for manually creating check suites when you've disabled automatic creation using "[Update repository preferences for check suites](https://docs.github.com/enterprise-server@3.6/rest/reference/checks#update-repository-preferences-for-check-suites)". Your GitHub App must have the `checks:write` permission to create check suites.
   */
  readonly 'checks/create-suite': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response when the suite already exists */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['check-suite']
        }
      }
      /** Response when the suite was created */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['check-suite']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The sha of the head commit. */
          readonly head_sha: string
        }
      }
    }
  }
  /** Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/enterprise-server@3.6/rest/reference/checks#create-a-check-suite). You must have admin permissions in the repository to set preferences for check suites. */
  readonly 'checks/set-suites-preferences': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['check-suite-preference']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default. See the [`auto_trigger_checks` object](https://docs.github.com/enterprise-server@3.6/rest/reference/checks#auto_trigger_checks-object) description for details. */
          readonly auto_trigger_checks?: readonly {
            /** @description The `id` of the GitHub App. */
            readonly app_id: number
            /**
             * @description Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository, or `false` to disable them.
             * @default true
             */
            readonly setting: boolean
          }[]
        }
      }
    }
  }
  /**
   * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
   *
   * Gets a single check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
   */
  readonly 'checks/get-suite': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the check suite. */
        readonly check_suite_id: components['parameters']['check-suite-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['check-suite']
        }
      }
    }
  }
  /**
   * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
   *
   * Lists check runs for a check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
   */
  readonly 'checks/list-for-suite': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the check suite. */
        readonly check_suite_id: components['parameters']['check-suite-id']
      }
      readonly query: {
        /** Returns check runs with the specified `name`. */
        readonly check_name?: components['parameters']['check-name']
        /** Returns check runs with the specified `status`. */
        readonly status?: components['parameters']['status']
        /** Filters check runs by their `completed_at` timestamp. `latest` returns the most recent check runs. */
        readonly filter?: 'latest' | 'all'
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': {
            readonly total_count: number
            readonly check_runs: readonly components['schemas']['check-run'][]
          }
        }
      }
    }
  }
  /**
   * Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [`check_suite` webhook](https://docs.github.com/enterprise-server@3.6/webhooks/event-payloads/#check_suite) event with the action `rerequested`. When a check suite is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.
   *
   * To rerequest a check suite, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.
   */
  readonly 'checks/rerequest-suite': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the check suite. */
        readonly check_suite_id: components['parameters']['check-suite-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': { readonly [key: string]: unknown }
        }
      }
    }
  }
  /**
   * Lists code scanning alerts.
   *
   * To use this endpoint, you must use an access token with the `security_events` scope or, for alerts from public repositories only, an access token with the `public_repo` scope.
   *
   * GitHub Apps must have the `security_events` read
   * permission to use this endpoint.
   *
   * The response includes a `most_recent_instance` object.
   * This provides details of the most recent instance of this alert
   * for the default branch (or for the specified Git reference if you used `ref` in the request).
   */
  readonly 'code-scanning/list-alerts-for-repo': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
      readonly query: {
        /** The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both. */
        readonly tool_name?: components['parameters']['tool-name']
        /** The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both. */
        readonly tool_guid?: components['parameters']['tool-guid']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */
        readonly ref?: components['parameters']['git-ref']
        /** The direction to sort the results by. */
        readonly direction?: components['parameters']['direction']
        /** The property by which to sort the results. */
        readonly sort?: 'created' | 'updated'
        /** If specified, only code scanning alerts with this state will be returned. */
        readonly state?: components['schemas']['code-scanning-alert-state']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['code-scanning-alert-items'][]
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 403: components['responses']['code_scanning_forbidden_read']
      readonly 404: components['responses']['not_found']
      readonly 503: components['responses']['service_unavailable']
    }
  }
  /**
   * Gets a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint with private repos, the `public_repo` scope also grants permission to read security events on public repos only. GitHub Apps must have the `security_events` read permission to use this endpoint.
   *
   * **Deprecation notice**:
   * The instances field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The same information can now be retrieved via a GET request to the URL specified by `instances_url`.
   */
  readonly 'code-scanning/get-alert': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation. */
        readonly alert_number: components['parameters']['alert-number']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['code-scanning-alert']
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 403: components['responses']['code_scanning_forbidden_read']
      readonly 404: components['responses']['not_found']
      readonly 503: components['responses']['service_unavailable']
    }
  }
  /** Updates the status of a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint with private repositories. You can also use tokens with the `public_repo` scope for public repositories only. GitHub Apps must have the `security_events` write permission to use this endpoint. */
  readonly 'code-scanning/update-alert': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation. */
        readonly alert_number: components['parameters']['alert-number']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['code-scanning-alert']
        }
      }
      readonly 403: components['responses']['code_scanning_forbidden_write']
      readonly 404: components['responses']['not_found']
      readonly 503: components['responses']['service_unavailable']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          readonly state: components['schemas']['code-scanning-alert-set-state']
          readonly dismissed_reason?: components['schemas']['code-scanning-alert-dismissed-reason']
          readonly dismissed_comment?: components['schemas']['code-scanning-alert-dismissed-comment']
        }
      }
    }
  }
  /**
   * Lists all instances of the specified code scanning alert.
   * You must use an access token with the `security_events` scope to use this endpoint with private repos,
   * the `public_repo` scope also grants permission to read security events on public repos only.
   * GitHub Apps must have the `security_events` read permission to use this endpoint.
   */
  readonly 'code-scanning/list-alert-instances': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation. */
        readonly alert_number: components['parameters']['alert-number']
      }
      readonly query: {
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */
        readonly ref?: components['parameters']['git-ref']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['code-scanning-alert-instance'][]
        }
      }
      readonly 403: components['responses']['code_scanning_forbidden_read']
      readonly 404: components['responses']['not_found']
      readonly 503: components['responses']['service_unavailable']
    }
  }
  /**
   * Lists the details of all code scanning analyses for a repository,
   * starting with the most recent.
   * The response is paginated and you can use the `page` and `per_page` parameters
   * to list the analyses you're interested in.
   * By default 30 analyses are listed per page.
   *
   * The `rules_count` field in the response give the number of rules
   * that were run in the analysis.
   * For very old analyses this data is not available,
   * and `0` is returned in this field.
   *
   * You must use an access token with the `security_events` scope to use this endpoint with private repos,
   * the `public_repo` scope also grants permission to read security events on public repos only.
   * GitHub Apps must have the `security_events` read permission to use this endpoint.
   *
   * **Deprecation notice**:
   * The `tool_name` field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.
   */
  readonly 'code-scanning/list-recent-analyses': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
      readonly query: {
        /** The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both. */
        readonly tool_name?: components['parameters']['tool-name']
        /** The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both. */
        readonly tool_guid?: components['parameters']['tool-guid']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** The Git reference for the analyses you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */
        readonly ref?: components['schemas']['code-scanning-ref']
        /** Filter analyses belonging to the same SARIF upload. */
        readonly sarif_id?: components['schemas']['code-scanning-analysis-sarif-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['code-scanning-analysis'][]
        }
      }
      readonly 403: components['responses']['code_scanning_forbidden_read']
      readonly 404: components['responses']['not_found']
      readonly 503: components['responses']['service_unavailable']
    }
  }
  /**
   * Gets a specified code scanning analysis for a repository.
   * You must use an access token with the `security_events` scope to use this endpoint with private repos,
   * the `public_repo` scope also grants permission to read security events on public repos only.
   * GitHub Apps must have the `security_events` read permission to use this endpoint.
   *
   * The default JSON response contains fields that describe the analysis.
   * This includes the Git reference and commit SHA to which the analysis relates,
   * the datetime of the analysis, the name of the code scanning tool,
   * and the number of alerts.
   *
   * The `rules_count` field in the default response give the number of rules
   * that were run in the analysis.
   * For very old analyses this data is not available,
   * and `0` is returned in this field.
   *
   * If you use the Accept header `application/sarif+json`,
   * the response contains the analysis data that was uploaded.
   * This is formatted as
   * [SARIF version 2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html).
   */
  readonly 'code-scanning/get-analysis': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation. */
        readonly analysis_id: number
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['code-scanning-analysis']
          readonly 'application/json+sarif': { readonly [key: string]: unknown }
        }
      }
      readonly 403: components['responses']['code_scanning_forbidden_read']
      readonly 404: components['responses']['not_found']
      readonly 503: components['responses']['service_unavailable']
    }
  }
  /**
   * Deletes a specified code scanning analysis from a repository. For
   * private repositories, you must use an access token with the `repo` scope. For public repositories,
   * you must use an access token with `public_repo` scope.
   * GitHub Apps must have the `security_events` write permission to use this endpoint.
   *
   * You can delete one analysis at a time.
   * To delete a series of analyses, start with the most recent analysis and work backwards.
   * Conceptually, the process is similar to the undo function in a text editor.
   *
   * When you list the analyses for a repository,
   * one or more will be identified as deletable in the response:
   *
   * ```
   * "deletable": true
   * ```
   *
   * An analysis is deletable when it's the most recent in a set of analyses.
   * Typically, a repository will have multiple sets of analyses
   * for each enabled code scanning tool,
   * where a set is determined by a unique combination of analysis values:
   *
   * * `ref`
   * * `tool`
   * * `category`
   *
   * If you attempt to delete an analysis that is not the most recent in a set,
   * you'll get a 400 response with the message:
   *
   * ```
   * Analysis specified is not deletable.
   * ```
   *
   * The response from a successful `DELETE` operation provides you with
   * two alternative URLs for deleting the next analysis in the set:
   * `next_analysis_url` and `confirm_delete_url`.
   * Use the `next_analysis_url` URL if you want to avoid accidentally deleting the final analysis
   * in a set. This is a useful option if you want to preserve at least one analysis
   * for the specified tool in your repository.
   * Use the `confirm_delete_url` URL if you are content to remove all analyses for a tool.
   * When you delete the last analysis in a set, the value of `next_analysis_url` and `confirm_delete_url`
   * in the 200 response is `null`.
   *
   * As an example of the deletion process,
   * let's imagine that you added a workflow that configured a particular code scanning tool
   * to analyze the code in a repository. This tool has added 15 analyses:
   * 10 on the default branch, and another 5 on a topic branch.
   * You therefore have two separate sets of analyses for this tool.
   * You've now decided that you want to remove all of the analyses for the tool.
   * To do this you must make 15 separate deletion requests.
   * To start, you must find an analysis that's identified as deletable.
   * Each set of analyses always has one that's identified as deletable.
   * Having found the deletable analysis for one of the two sets,
   * delete this analysis and then continue deleting the next analysis in the set until they're all deleted.
   * Then repeat the process for the second set.
   * The procedure therefore consists of a nested loop:
   *
   * **Outer loop**:
   * * List the analyses for the repository, filtered by tool.
   * * Parse this list to find a deletable analysis. If found:
   *
   *   **Inner loop**:
   *   * Delete the identified analysis.
   *   * Parse the response for the value of `confirm_delete_url` and, if found, use this in the next iteration.
   *
   * The above process assumes that you want to remove all trace of the tool's analyses from the GitHub user interface, for the specified repository, and it therefore uses the `confirm_delete_url` value. Alternatively, you could use the `next_analysis_url` value, which would leave the last analysis in each set undeleted to avoid removing a tool's analysis entirely.
   */
  readonly 'code-scanning/delete-analysis': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation. */
        readonly analysis_id: number
      }
      readonly query: {
        /** Allow deletion if the specified analysis is the last in a set. If you attempt to delete the final analysis in a set without setting this parameter to `true`, you'll get a 400 response with the message: `Analysis is last of its type and deletion may result in the loss of historical alert data. Please specify confirm_delete.` */
        readonly confirm_delete?: string | null
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['code-scanning-analysis-deletion']
        }
      }
      readonly 400: components['responses']['bad_request']
      readonly 403: components['responses']['code_scanning_forbidden_write']
      readonly 404: components['responses']['not_found']
      readonly 503: components['responses']['service_unavailable']
    }
  }
  /**
   * Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. You must use an access token with the `security_events` scope to use this endpoint for private repositories. You can also use tokens with the `public_repo` scope for public repositories only. GitHub Apps must have the `security_events` write permission to use this endpoint.
   *
   * There are two places where you can upload code scanning results.
   *  - If you upload to a pull request, for example `--ref refs/pull/42/merge` or `--ref refs/pull/42/head`, then the results appear as alerts in a pull request check. For more information, see "[Triaging code scanning alerts in pull requests](/code-security/secure-coding/triaging-code-scanning-alerts-in-pull-requests)."
   *  - If you upload to a branch, for example `--ref refs/heads/my-branch`, then the results appear in the **Security** tab for your repository. For more information, see "[Managing code scanning alerts for your repository](/code-security/secure-coding/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository)."
   *
   * You must compress the SARIF-formatted analysis data that you want to upload, using `gzip`, and then encode it as a Base64 format string. For example:
   *
   * ```
   * gzip -c analysis-data.sarif | base64 -w0
   * ```
   *
   * SARIF upload supports a maximum of 5000 results per analysis run. Any results over this limit are ignored and any SARIF uploads with more than 25,000 results are rejected. Typically, but not necessarily, a SARIF file contains a single run of a single tool. If a code scanning tool generates too many results, you should update the analysis configuration to run only the most important rules or queries.
   *
   * The `202 Accepted`, response includes an `id` value.
   * You can use this ID to check the status of the upload by using this for the `/sarifs/{sarif_id}` endpoint.
   * For more information, see "[Get information about a SARIF upload](/rest/reference/code-scanning#get-information-about-a-sarif-upload)."
   */
  readonly 'code-scanning/upload-sarif': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 202: {
        readonly content: {
          readonly 'application/json': components['schemas']['code-scanning-sarifs-receipt']
        }
      }
      /** Bad Request if the sarif field is invalid */
      readonly 400: unknown
      readonly 403: components['responses']['code_scanning_forbidden_write']
      readonly 404: components['responses']['not_found']
      /** Payload Too Large if the sarif field is too large */
      readonly 413: unknown
      readonly 503: components['responses']['service_unavailable']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          readonly commit_sha: components['schemas']['code-scanning-analysis-commit-sha']
          readonly ref: components['schemas']['code-scanning-ref']
          readonly sarif: components['schemas']['code-scanning-analysis-sarif-file']
          /**
           * Format: uri
           * @description The base directory used in the analysis, as it appears in the SARIF file.
           * This property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.
           * @example file:///github/workspace/
           */
          readonly checkout_uri?: string
          /**
           * Format: date-time
           * @description The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
           */
          readonly started_at?: string
          /** @description The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults to "API". If the uploaded SARIF contains a tool GUID, this will be available for filtering using the `tool_guid` parameter of operations such as `GET /repos/{owner}/{repo}/code-scanning/alerts`. */
          readonly tool_name?: string
        }
      }
    }
  }
  /** Gets information about a SARIF upload, including the status and the URL of the analysis that was uploaded so that you can retrieve details of the analysis. For more information, see "[Get a code scanning analysis for a repository](/rest/reference/code-scanning#get-a-code-scanning-analysis-for-a-repository)." You must use an access token with the `security_events` scope to use this endpoint with private repos, the `public_repo` scope also grants permission to read security events on public repos only. GitHub Apps must have the `security_events` read permission to use this endpoint. */
  readonly 'code-scanning/get-sarif': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The SARIF ID obtained after uploading. */
        readonly sarif_id: string
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['code-scanning-sarifs-status']
        }
      }
      readonly 403: components['responses']['code_scanning_forbidden_read']
      /** Not Found if the sarif id does not match any upload */
      readonly 404: unknown
      readonly 503: components['responses']['service_unavailable']
    }
  }
  /**
   * List any syntax errors that are detected in the CODEOWNERS
   * file.
   *
   * For more information about the correct CODEOWNERS syntax,
   * see "[About code owners](https://docs.github.com/enterprise-server@3.6/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners)."
   */
  readonly 'repos/codeowners-errors': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
      readonly query: {
        /** A branch, tag or commit name used to determine which version of the CODEOWNERS file to use. Default: the repository's default branch (e.g. `main`) */
        readonly ref?: string
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['codeowners-errors']
        }
      }
      /** Resource not found */
      readonly 404: unknown
    }
  }
  /**
   * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
   * Organization members with write, maintain, or admin privileges on the organization-owned repository can use this endpoint.
   *
   * Team members will include the members of child teams.
   *
   * You must authenticate using an access token with the `read:org` and `repo` scopes with push access to use this
   * endpoint. GitHub Apps must have the `members` organization permission and `metadata` repository permission to use this
   * endpoint.
   */
  readonly 'repos/list-collaborators': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
      readonly query: {
        /** Filter collaborators returned by their affiliation. `outside` means all outside collaborators of an organization-owned repository. `direct` means all collaborators with permissions to an organization-owned repository, regardless of organization membership status. `all` means all collaborators the authenticated user can see. */
        readonly affiliation?: 'outside' | 'direct' | 'all'
        /** Filter collaborators by the permissions they have on the repository. If not specified, all collaborators will be returned. */
        readonly permission?: 'pull' | 'triage' | 'push' | 'maintain' | 'admin'
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['collaborator'][]
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
   *
   * Team members will include the members of child teams.
   *
   * You must authenticate using an access token with the `read:org` and `repo` scopes with push access to use this
   * endpoint. GitHub Apps must have the `members` organization permission and `metadata` repository permission to use this
   * endpoint.
   */
  readonly 'repos/check-collaborator': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
    }
    readonly responses: {
      /** Response if user is a collaborator */
      readonly 204: never
      /** Not Found if user is not a collaborator */
      readonly 404: unknown
    }
  }
  /**
   * This endpoint triggers [notifications](https://docs.github.com/enterprise-server@3.6/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
   *
   * Adding an outside collaborator may be restricted by enterprise administrators. For more information, see "[Enforcing repository management policies in your enterprise](https://docs.github.com/enterprise-server@3.6/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories)."
   *
   * For more information on permission levels, see "[Repository permission levels for an organization](https://docs.github.com/enterprise-server@3.6/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)". There are restrictions on which permissions can be granted to organization members when an organization base role is in place. In this case, the permission being given must be equal to or higher than the org base permission. Otherwise, the request will fail with:
   *
   * ```
   * Cannot assign {member} permission of {role name}
   * ```
   *
   * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#http-verbs)."
   *
   * The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [repository invitations API endpoints](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#invitations).
   *
   * **Updating an existing collaborator's permission level**
   *
   * The endpoint can also be used to change the permissions of an existing collaborator without first removing and re-adding the collaborator. To change the permissions, use the same endpoint and pass a different `permission` parameter. The response will be a `204`, with no other indication that the permission level changed.
   *
   * **Rate limits**
   *
   * You are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.
   */
  readonly 'repos/add-collaborator': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
    }
    readonly responses: {
      /** Response when a new invitation is created */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['repository-invitation']
        }
      }
      /**
       * Response when:
       * - an existing collaborator is added as a collaborator
       * - an organization member is added as an individual collaborator
       * - an existing team member (whose team is also a repository collaborator) is added as an individual collaborator
       */
      readonly 204: never
      readonly 403: components['responses']['forbidden']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description The permission to grant the collaborator. **Only valid on organization-owned repositories.**
           * @default push
           */
          readonly permission?: string
        }
      }
    }
  }
  readonly 'repos/remove-collaborator': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /** Checks the repository permission of a collaborator. The possible repository permissions are `admin`, `write`, `read`, and `none`. */
  readonly 'repos/get-collaborator-permission-level': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
    }
    readonly responses: {
      /** if user has admin permissions */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['repository-collaborator-permission']
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * Commit Comments use [these custom media types](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#custom-media-types). You can read more about the use of media types in the API [here](https://docs.github.com/enterprise-server@3.6/rest/overview/media-types/).
   *
   * Comments are ordered by ascending ID.
   */
  readonly 'repos/list-commit-comments-for-repo': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['commit-comment'][]
        }
      }
    }
  }
  readonly 'repos/get-commit-comment': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the comment. */
        readonly comment_id: components['parameters']['comment-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['commit-comment']
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  readonly 'repos/delete-commit-comment': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the comment. */
        readonly comment_id: components['parameters']['comment-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 404: components['responses']['not_found']
    }
  }
  readonly 'repos/update-commit-comment': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the comment. */
        readonly comment_id: components['parameters']['comment-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['commit-comment']
        }
      }
      readonly 404: components['responses']['not_found']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The contents of the comment */
          readonly body: string
        }
      }
    }
  }
  /** List the reactions to a [commit comment](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#comments). */
  readonly 'reactions/list-for-commit-comment': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the comment. */
        readonly comment_id: components['parameters']['comment-id']
      }
      readonly query: {
        /** Returns a single [reaction type](https://docs.github.com/enterprise-server@3.6/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a commit comment. */
        readonly content?: '+1' | '-1' | 'laugh' | 'confused' | 'heart' | 'hooray' | 'rocket' | 'eyes'
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['reaction'][]
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /** Create a reaction to a [commit comment](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#comments). A response with an HTTP `200` status means that you already added the reaction type to this commit comment. */
  readonly 'reactions/create-for-commit-comment': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the comment. */
        readonly comment_id: components['parameters']['comment-id']
      }
    }
    readonly responses: {
      /** Reaction exists */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['reaction']
        }
      }
      /** Reaction created */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['reaction']
        }
      }
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description The [reaction type](https://docs.github.com/enterprise-server@3.6/rest/reference/reactions#reaction-types) to add to the commit comment.
           * @enum {string}
           */
          readonly content: '+1' | '-1' | 'laugh' | 'confused' | 'heart' | 'hooray' | 'rocket' | 'eyes'
        }
      }
    }
  }
  /**
   * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`.
   *
   * Delete a reaction to a [commit comment](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#comments).
   */
  readonly 'reactions/delete-for-commit-comment': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the comment. */
        readonly comment_id: components['parameters']['comment-id']
        /** The unique identifier of the reaction. */
        readonly reaction_id: components['parameters']['reaction-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /**
   * **Signature verification object**
   *
   * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
   *
   * | Name | Type | Description |
   * | ---- | ---- | ----------- |
   * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
   * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
   * | `signature` | `string` | The signature that was extracted from the commit. |
   * | `payload` | `string` | The value that was signed. |
   *
   * These are the possible values for `reason` in the `verification` object:
   *
   * | Value | Description |
   * | ----- | ----------- |
   * | `expired_key` | The key that made the signature is expired. |
   * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
   * | `gpgverify_error` | There was an error communicating with the signature verification service. |
   * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
   * | `unsigned` | The object does not include a signature. |
   * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
   * | `no_user` | No user was associated with the `committer` email address in the commit. |
   * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
   * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
   * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
   * | `malformed_signature` | There was an error parsing the signature. |
   * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
   * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
   */
  readonly 'repos/list-commits': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
      readonly query: {
        /** SHA or branch to start listing commits from. Default: the repository’s default branch (usually `master`). */
        readonly sha?: string
        /** Only commits containing this file path will be returned. */
        readonly path?: string
        /** GitHub login or email address by which to filter by commit author. */
        readonly author?: string
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        readonly since?: components['parameters']['since']
        /** Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        readonly until?: string
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['commit'][]
        }
      }
      readonly 400: components['responses']['bad_request']
      readonly 404: components['responses']['not_found']
      readonly 409: components['responses']['conflict']
      readonly 500: components['responses']['internal_error']
    }
  }
  /**
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch.
   */
  readonly 'repos/list-branches-for-head-commit': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The SHA of the commit. */
        readonly commit_sha: components['parameters']['commit-sha']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['branch-short'][]
        }
      }
      readonly 422: components['responses']['validation_failed']
    }
  }
  /** Use the `:commit_sha` to specify the commit that will have its comments listed. */
  readonly 'repos/list-comments-for-commit': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The SHA of the commit. */
        readonly commit_sha: components['parameters']['commit-sha']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['commit-comment'][]
        }
      }
    }
  }
  /**
   * Create a comment for a commit using its `:commit_sha`.
   *
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
   */
  readonly 'repos/create-commit-comment': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The SHA of the commit. */
        readonly commit_sha: components['parameters']['commit-sha']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string
        }
        readonly content: {
          readonly 'application/json': components['schemas']['commit-comment']
        }
      }
      readonly 403: components['responses']['forbidden']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The contents of the comment. */
          readonly body: string
          /** @description Relative path of the file to comment on. */
          readonly path?: string
          /** @description Line index in the diff to comment on. */
          readonly position?: number
          /** @description **Deprecated**. Use **position** parameter instead. Line number in the file to comment on. */
          readonly line?: number
        }
      }
    }
  }
  /** Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, additionally returns open pull requests associated with the commit. The results may include open and closed pull requests. */
  readonly 'repos/list-pull-requests-associated-with-commit': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The SHA of the commit. */
        readonly commit_sha: components['parameters']['commit-sha']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['pull-request-simple'][]
        }
      }
    }
  }
  /**
   * Returns the contents of a single commit reference. You must have `read` access for the repository to use this endpoint.
   *
   * **Note:** If there are more than 300 files in the commit diff, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.
   *
   * You can pass the appropriate [media type](https://docs.github.com/enterprise-server@3.6/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to  fetch `diff` and `patch` formats. Diffs with binary data will have no `patch` property.
   *
   * To return only the SHA-1 hash of the commit reference, you can provide the `sha` custom [media type](https://docs.github.com/enterprise-server@3.6/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) in the `Accept` header. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.
   *
   * **Signature verification object**
   *
   * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
   *
   * | Name | Type | Description |
   * | ---- | ---- | ----------- |
   * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
   * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
   * | `signature` | `string` | The signature that was extracted from the commit. |
   * | `payload` | `string` | The value that was signed. |
   *
   * These are the possible values for `reason` in the `verification` object:
   *
   * | Value | Description |
   * | ----- | ----------- |
   * | `expired_key` | The key that made the signature is expired. |
   * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
   * | `gpgverify_error` | There was an error communicating with the signature verification service. |
   * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
   * | `unsigned` | The object does not include a signature. |
   * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
   * | `no_user` | No user was associated with the `committer` email address in the commit. |
   * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
   * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
   * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
   * | `malformed_signature` | There was an error parsing the signature. |
   * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
   * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
   */
  readonly 'repos/get-commit': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** ref parameter */
        readonly ref: string
      }
      readonly query: {
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['commit']
        }
      }
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
      readonly 500: components['responses']['internal_error']
      readonly 503: components['responses']['service_unavailable']
    }
  }
  /**
   * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
   *
   * Lists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
   */
  readonly 'checks/list-for-ref': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** ref parameter */
        readonly ref: string
      }
      readonly query: {
        /** Returns check runs with the specified `name`. */
        readonly check_name?: components['parameters']['check-name']
        /** Returns check runs with the specified `status`. */
        readonly status?: components['parameters']['status']
        /** Filters check runs by their `completed_at` timestamp. `latest` returns the most recent check runs. */
        readonly filter?: 'latest' | 'all'
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
        readonly app_id?: number
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': {
            readonly total_count: number
            readonly check_runs: readonly components['schemas']['check-run'][]
          }
        }
      }
    }
  }
  /**
   * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
   *
   * Lists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to list check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
   */
  readonly 'checks/list-suites-for-ref': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** ref parameter */
        readonly ref: string
      }
      readonly query: {
        /** Filters check suites by GitHub App `id`. */
        readonly app_id?: number
        /** Returns check runs with the specified `name`. */
        readonly check_name?: components['parameters']['check-name']
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': {
            readonly total_count: number
            readonly check_suites: readonly components['schemas']['check-suite'][]
          }
        }
      }
    }
  }
  /**
   * Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.
   *
   *
   * Additionally, a combined `state` is returned. The `state` is one of:
   *
   * *   **failure** if any of the contexts report as `error` or `failure`
   * *   **pending** if there are no statuses or a context is `pending`
   * *   **success** if the latest status for all contexts is `success`
   */
  readonly 'repos/get-combined-status-for-ref': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** ref parameter */
        readonly ref: string
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['combined-commit-status']
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.
   *
   * This resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`.
   */
  readonly 'repos/list-commit-statuses-for-ref': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** ref parameter */
        readonly ref: string
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['status'][]
        }
      }
      readonly 301: components['responses']['moved_permanently']
    }
  }
  /**
   * The `basehead` param is comprised of two parts separated by triple dots: `{base}...{head}`. Both must be branch names in `repo`. To compare branches across other repositories in the same network as `repo`, use the format `<USERNAME>:branch`.
   *
   * The response from the API is equivalent to running the `git log base..head` command; however, commits are returned in chronological order. Pass the appropriate [media type](https://docs.github.com/enterprise-server@3.6/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
   *
   * The response also includes details on the files that were changed between the two commits. This includes the status of the change (for example, if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.
   *
   * **Working with large comparisons**
   *
   * To process a response with a large number of commits, you can use (`per_page` or `page`) to paginate the results. When using paging, the list of changed files is only returned with page 1, but includes all changed files for the entire comparison. For more information on working with pagination, see "[Traversing with pagination](/rest/guides/traversing-with-pagination)."
   *
   * When calling this API without any paging parameters (`per_page` or `page`), the returned list is limited to 250 commits and the last commit in the list is the most recent of the entire comparison. When a paging parameter is specified, the first commit in the returned list of each page is the earliest.
   *
   * **Signature verification object**
   *
   * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
   *
   * | Name | Type | Description |
   * | ---- | ---- | ----------- |
   * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
   * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
   * | `signature` | `string` | The signature that was extracted from the commit. |
   * | `payload` | `string` | The value that was signed. |
   *
   * These are the possible values for `reason` in the `verification` object:
   *
   * | Value | Description |
   * | ----- | ----------- |
   * | `expired_key` | The key that made the signature is expired. |
   * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
   * | `gpgverify_error` | There was an error communicating with the signature verification service. |
   * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
   * | `unsigned` | The object does not include a signature. |
   * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
   * | `no_user` | No user was associated with the `committer` email address in the commit. |
   * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
   * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
   * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
   * | `malformed_signature` | There was an error parsing the signature. |
   * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
   * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
   */
  readonly 'repos/compare-commits': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The base branch and head branch to compare. This parameter expects the format `{base}...{head}`. */
        readonly basehead: string
      }
      readonly query: {
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['commit-comparison']
        }
      }
      readonly 404: components['responses']['not_found']
      readonly 500: components['responses']['internal_error']
      readonly 503: components['responses']['service_unavailable']
    }
  }
  /**
   * Gets the contents of a file or directory in a repository. Specify the file path or directory in `:path`. If you omit
   * `:path`, you will receive the contents of the repository's root directory. See the description below regarding what the API response includes for directories.
   *
   * Files and symlinks support [a custom media type](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#custom-media-types) for
   * retrieving the raw content or rendered HTML (when supported). All content types support [a custom media
   * type](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#custom-media-types) to ensure the content is returned in a consistent
   * object format.
   *
   * **Notes**:
   * *   To get a repository's contents recursively, you can [recursively get the tree](https://docs.github.com/enterprise-server@3.6/rest/reference/git#trees).
   * *   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees
   * API](https://docs.github.com/enterprise-server@3.6/rest/reference/git#get-a-tree).
   *  *  Download URLs expire and are meant to be used just once. To ensure the download URL does not expire, please use the contents API to obtain a fresh download URL for each download.
   * #### Size limits
   * If the requested file's size is:
   * * 1 MB or smaller: All features of this endpoint are supported.
   * * Between 1-100 MB: Only the `raw` or `object` [custom media types](https://docs.github.com/enterprise-server@3.6/rest/repos/contents#custom-media-types-for-repository-contents) are supported. Both will work as normal, except that when using the `object` media type, the `content` field will be an empty string and the `encoding` field will be `"none"`. To get the contents of these larger files, use the `raw` media type.
   *  * Greater than 100 MB: This endpoint is not supported.
   *
   * #### If the content is a directory
   * The response will be an array of objects, one object for each item in the directory.
   * When listing the contents of a directory, submodules have their "type" specified as "file". Logically, the value
   * _should_ be "submodule". This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW).
   * In the next major version of the API, the type will be returned as "submodule".
   *
   * #### If the content is a symlink
   * If the requested `:path` points to a symlink, and the symlink's target is a normal file in the repository, then the
   * API responds with the content of the file (in the format shown in the example. Otherwise, the API responds with an object
   * describing the symlink itself.
   *
   * #### If the content is a submodule
   * The `submodule_git_url` identifies the location of the submodule repository, and the `sha` identifies a specific
   * commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out
   * the submodule at that specific commit.
   *
   * If the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links["git"]`) and the
   * github.com URLs (`html_url` and `_links["html"]`) will have null values.
   */
  readonly 'repos/get-content': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** path parameter */
        readonly path: string
      }
      readonly query: {
        /** The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`) */
        readonly ref?: string
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/vnd.github.object': components['schemas']['content-tree']
          readonly 'application/json':
            | components['schemas']['content-directory']
            | components['schemas']['content-file']
            | components['schemas']['content-symlink']
            | components['schemas']['content-submodule']
        }
      }
      readonly 302: components['responses']['found']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * Creates a new file or replaces an existing file in a repository. You must authenticate using an access token with the `workflow` scope to use this endpoint.
   *
   * **Note:** If you use this endpoint and the "[Delete a file](https://docs.github.com/enterprise-server@3.6/rest/reference/repos/#delete-file)" endpoint in parallel, the concurrent requests will conflict and you will receive errors. You must use these endpoints serially instead.
   */
  readonly 'repos/create-or-update-file-contents': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** path parameter */
        readonly path: string
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['file-commit']
        }
      }
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['file-commit']
        }
      }
      readonly 404: components['responses']['not_found']
      readonly 409: components['responses']['conflict']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The commit message. */
          readonly message: string
          /** @description The new file content, using Base64 encoding. */
          readonly content: string
          /** @description **Required if you are updating a file**. The blob SHA of the file being replaced. */
          readonly sha?: string
          /** @description The branch name. Default: the repository’s default branch (usually `master`) */
          readonly branch?: string
          /** @description The person that committed the file. Default: the authenticated user. */
          readonly committer?: {
            /** @description The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted. */
            readonly name: string
            /** @description The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted. */
            readonly email: string
            /** @example "2013-01-05T13:13:22+05:00" */
            readonly date?: string
          }
          /** @description The author of the file. Default: The `committer` or the authenticated user if you omit `committer`. */
          readonly author?: {
            /** @description The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted. */
            readonly name: string
            /** @description The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted. */
            readonly email: string
            /** @example "2013-01-15T17:13:22+05:00" */
            readonly date?: string
          }
        }
      }
    }
  }
  /**
   * Deletes a file in a repository.
   *
   * You can provide an additional `committer` parameter, which is an object containing information about the committer. Or, you can provide an `author` parameter, which is an object containing information about the author.
   *
   * The `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.
   *
   * You must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.
   *
   * **Note:** If you use this endpoint and the "[Create or update file contents](https://docs.github.com/enterprise-server@3.6/rest/reference/repos/#create-or-update-file-contents)" endpoint in parallel, the concurrent requests will conflict and you will receive errors. You must use these endpoints serially instead.
   */
  readonly 'repos/delete-file': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** path parameter */
        readonly path: string
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['file-commit']
        }
      }
      readonly 404: components['responses']['not_found']
      readonly 409: components['responses']['conflict']
      readonly 422: components['responses']['validation_failed']
      readonly 503: components['responses']['service_unavailable']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The commit message. */
          readonly message: string
          /** @description The blob SHA of the file being deleted. */
          readonly sha: string
          /** @description The branch name. Default: the repository’s default branch (usually `master`) */
          readonly branch?: string
          /** @description object containing information about the committer. */
          readonly committer?: {
            /** @description The name of the author (or committer) of the commit */
            readonly name?: string
            /** @description The email of the author (or committer) of the commit */
            readonly email?: string
          }
          /** @description object containing information about the author. */
          readonly author?: {
            /** @description The name of the author (or committer) of the commit */
            readonly name?: string
            /** @description The email of the author (or committer) of the commit */
            readonly email?: string
          }
        }
      }
    }
  }
  /**
   * Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API v3 caches contributor data to improve performance.
   *
   * GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
   */
  readonly 'repos/list-contributors': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
      readonly query: {
        /** Set to `1` or `true` to include anonymous contributors in results. */
        readonly anon?: string
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** if repository contains content */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['contributor'][]
        }
      }
      /** Response if repository is empty */
      readonly 204: never
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
    }
  }
  /** Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint. */
  readonly 'dependabot/list-repo-secrets': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': {
            readonly total_count: number
            readonly secrets: readonly components['schemas']['dependabot-secret'][]
          }
        }
      }
    }
  }
  /** Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint. */
  readonly 'dependabot/get-repo-public-key': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['dependabot-public-key']
        }
      }
    }
  }
  /** Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint. */
  readonly 'dependabot/get-repo-secret': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the secret. */
        readonly secret_name: components['parameters']['secret-name']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['dependabot-secret']
        }
      }
    }
  }
  /**
   * Creates or updates a repository secret with an encrypted value. Encrypt your secret using
   * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
   * token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository
   * permission to use this endpoint.
   *
   * #### Example encrypting a secret using Node.js
   *
   * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
   *
   * ```
   * const sodium = require('tweetsodium');
   *
   * const key = "base64-encoded-public-key";
   * const value = "plain-text-secret";
   *
   * // Convert the message and key to Uint8Array's (Buffer implements that interface)
   * const messageBytes = Buffer.from(value);
   * const keyBytes = Buffer.from(key, 'base64');
   *
   * // Encrypt using LibSodium.
   * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
   *
   * // Base64 the encrypted secret
   * const encrypted = Buffer.from(encryptedBytes).toString('base64');
   *
   * console.log(encrypted);
   * ```
   *
   *
   * #### Example encrypting a secret using Python
   *
   * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
   *
   * ```
   * from base64 import b64encode
   * from nacl import encoding, public
   *
   * def encrypt(public_key: str, secret_value: str) -> str:
   *   """Encrypt a Unicode string using the public key."""
   *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
   *   sealed_box = public.SealedBox(public_key)
   *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
   *   return b64encode(encrypted).decode("utf-8")
   * ```
   *
   * #### Example encrypting a secret using C#
   *
   * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
   *
   * ```
   * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
   * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
   *
   * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
   *
   * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
   * ```
   *
   * #### Example encrypting a secret using Ruby
   *
   * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
   *
   * ```ruby
   * require "rbnacl"
   * require "base64"
   *
   * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
   * public_key = RbNaCl::PublicKey.new(key)
   *
   * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
   * encrypted_secret = box.encrypt("my_secret")
   *
   * # Print the base64 encoded secret
   * puts Base64.strict_encode64(encrypted_secret)
   * ```
   */
  readonly 'dependabot/create-or-update-repo-secret': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the secret. */
        readonly secret_name: components['parameters']['secret-name']
      }
    }
    readonly responses: {
      /** Response when creating a secret */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['empty-object']
        }
      }
      /** Response when updating a secret */
      readonly 204: never
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/enterprise-server@3.6/rest/reference/dependabot#get-a-repository-public-key) endpoint. */
          readonly encrypted_value?: string
          /** @description ID of the key you used to encrypt the secret. */
          readonly key_id?: string
        }
      }
    }
  }
  /** Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint. */
  readonly 'dependabot/delete-repo-secret': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the secret. */
        readonly secret_name: components['parameters']['secret-name']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /** Gets the diff of the dependency changes between two commits of a repository, based on the changes to the dependency manifests made in those commits. */
  readonly 'dependency-graph/diff-range': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The base and head Git revisions to compare. The Git revisions will be resolved to commit SHAs. Named revisions will be resolved to their corresponding HEAD commits, and an appropriate merge base will be determined. This parameter expects the format `{base}...{head}`. */
        readonly basehead: string
      }
      readonly query: {
        /** The full path, relative to the repository root, of the dependency manifest file. */
        readonly name?: components['parameters']['manifest-path']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': components['schemas']['dependency-graph-diff']
        }
      }
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
    }
  }
  /** Simple filtering of deployments is available via query parameters: */
  readonly 'repos/list-deployments': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
      readonly query: {
        /** The SHA recorded at creation time. */
        readonly sha?: string
        /** The name of the ref. This can be a branch, tag, or SHA. */
        readonly ref?: string
        /** The name of the task for the deployment (e.g., `deploy` or `deploy:migrations`). */
        readonly task?: string
        /** The name of the environment that was deployed to (e.g., `staging` or `production`). */
        readonly environment?: string | null
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['deployment'][]
        }
      }
    }
  }
  /**
   * Deployments offer a few configurable parameters with certain defaults.
   *
   * The `ref` parameter can be any named branch, tag, or SHA. At GitHub Enterprise Server we often deploy branches and verify them
   * before we merge a pull request.
   *
   * The `environment` parameter allows deployments to be issued to different runtime environments. Teams often have
   * multiple environments for verifying their applications, such as `production`, `staging`, and `qa`. This parameter
   * makes it easier to track which environments have requested deployments. The default environment is `production`.
   *
   * The `auto_merge` parameter is used to ensure that the requested ref is not behind the repository's default branch. If
   * the ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds,
   * the API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will
   * return a failure response.
   *
   * By default, [commit statuses](https://docs.github.com/enterprise-server@3.6/rest/commits/statuses) for every submitted context must be in a `success`
   * state. The `required_contexts` parameter allows you to specify a subset of contexts that must be `success`, or to
   * specify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do
   * not require any contexts or create any commit statuses, the deployment will always succeed.
   *
   * The `payload` parameter is available for any extra information that a deployment system might need. It is a JSON text
   * field that will be passed on when a deployment event is dispatched.
   *
   * The `task` parameter is used by the deployment system to allow different execution paths. In the web world this might
   * be `deploy:migrations` to run schema changes on the system. In the compiled world this could be a flag to compile an
   * application with debugging enabled.
   *
   * Users with `repo` or `repo_deployment` scopes can create a deployment for a given ref.
   *
   * #### Merged branch response
   * You will see this response when GitHub automatically merges the base branch into the topic branch instead of creating
   * a deployment. This auto-merge happens when:
   * *   Auto-merge option is enabled in the repository
   * *   Topic branch does not include the latest changes on the base branch, which is `master` in the response example
   * *   There are no merge conflicts
   *
   * If there are no new commits in the base branch, a new request to create a deployment should give a successful
   * response.
   *
   * #### Merge conflict response
   * This error happens when the `auto_merge` option is enabled and when the default branch (in this case `master`), can't
   * be merged into the branch that's being deployed (in this case `topic-branch`), due to merge conflicts.
   *
   * #### Failed commit status checks
   * This error happens when the `required_contexts` parameter indicates that one or more contexts need to have a `success`
   * status for the commit to be deployed, but one or more of the required contexts do not have a state of `success`.
   */
  readonly 'repos/create-deployment': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['deployment']
        }
      }
      /** Merged branch response */
      readonly 202: {
        readonly content: {
          readonly 'application/json': {
            readonly message?: string
          }
        }
      }
      /** Conflict when there is a merge conflict or the commit's status checks failed */
      readonly 409: unknown
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The ref to deploy. This can be a branch, tag, or SHA. */
          readonly ref: string
          /**
           * @description Specifies a task to execute (e.g., `deploy` or `deploy:migrations`).
           * @default deploy
           */
          readonly task?: string
          /**
           * @description Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch.
           * @default true
           */
          readonly auto_merge?: boolean
          /** @description The [status](https://docs.github.com/enterprise-server@3.6/rest/commits/statuses) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts. */
          readonly required_contexts?: readonly string[]
          readonly payload?: { readonly [key: string]: unknown } | string
          /**
           * @description Name for the target deployment environment (e.g., `production`, `staging`, `qa`).
           * @default production
           */
          readonly environment?: string
          /**
           * @description Short description of the deployment.
           * @default
           */
          readonly description?: string | null
          /**
           * @description Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`
           * @default false
           */
          readonly transient_environment?: boolean
          /** @description Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise. */
          readonly production_environment?: boolean
        }
      }
    }
  }
  readonly 'repos/get-deployment': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** deployment_id parameter */
        readonly deployment_id: components['parameters']['deployment-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['deployment']
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * If the repository only has one deployment, you can delete the deployment regardless of its status. If the repository has more than one deployment, you can only delete inactive deployments. This ensures that repositories with multiple deployments will always have an active deployment. Anyone with `repo` or `repo_deployment` scopes can delete a deployment.
   *
   * To set a deployment as inactive, you must:
   *
   * *   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment.
   * *   Mark the active deployment as inactive by adding any non-successful deployment status.
   *
   * For more information, see "[Create a deployment](https://docs.github.com/enterprise-server@3.6/rest/reference/repos/#create-a-deployment)" and "[Create a deployment status](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#create-a-deployment-status)."
   */
  readonly 'repos/delete-deployment': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** deployment_id parameter */
        readonly deployment_id: components['parameters']['deployment-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed_simple']
    }
  }
  /** Users with pull access can view deployment statuses for a deployment: */
  readonly 'repos/list-deployment-statuses': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** deployment_id parameter */
        readonly deployment_id: components['parameters']['deployment-id']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['deployment-status'][]
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * Users with `push` access can create deployment statuses for a given deployment.
   *
   * GitHub Apps require `read & write` access to "Deployments" and `read-only` access to "Repo contents" (for private repos). OAuth Apps require the `repo_deployment` scope.
   */
  readonly 'repos/create-deployment-status': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** deployment_id parameter */
        readonly deployment_id: components['parameters']['deployment-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string
        }
        readonly content: {
          readonly 'application/json': components['schemas']['deployment-status']
        }
      }
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description The state of the status. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub.
           * @enum {string}
           */
          readonly state: 'error' | 'failure' | 'inactive' | 'in_progress' | 'queued' | 'pending' | 'success'
          /**
           * @description The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. **Note:** It's recommended to use the `log_url` parameter, which replaces `target_url`.
           * @default
           */
          readonly target_url?: string
          /**
           * @description The full URL of the deployment's output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `""`
           * @default
           */
          readonly log_url?: string
          /**
           * @description A short description of the status. The maximum description length is 140 characters.
           * @default
           */
          readonly description?: string
          /**
           * @description Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`.
           * @enum {string}
           */
          readonly environment?: 'production' | 'staging' | 'qa'
          /**
           * @description Sets the URL for accessing your environment. Default: `""`
           * @default
           */
          readonly environment_url?: string
          /** @description Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status's deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true` */
          readonly auto_inactive?: boolean
        }
      }
    }
  }
  /** Users with pull access can view a deployment status for a deployment: */
  readonly 'repos/get-deployment-status': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** deployment_id parameter */
        readonly deployment_id: components['parameters']['deployment-id']
        readonly status_id: number
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['deployment-status']
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * You can use this endpoint to trigger a webhook event called `repository_dispatch` when you want activity that happens outside of GitHub Enterprise Server to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the `repository_dispatch` event occurs. For an example `repository_dispatch` webhook payload, see "[RepositoryDispatchEvent](https://docs.github.com/enterprise-server@3.6/webhooks/event-payloads/#repository_dispatch)."
   *
   * The `client_payload` parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the `client_payload` can include a message that a user would like to send using a GitHub Actions workflow. Or the `client_payload` can be used as a test to debug your workflow.
   *
   * This endpoint requires write access to the repository by providing either:
   *
   *   - Personal access tokens with `repo` scope. For more information, see "[Creating a personal access token for the command line](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line)" in the GitHub Help documentation.
   *   - GitHub Apps with both `metadata:read` and `contents:read&write` permissions.
   *
   * This input example shows how you can use the `client_payload` as a test to debug your workflow.
   */
  readonly 'repos/create-dispatch-event': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description A custom webhook event name. Must be 100 characters or fewer. */
          readonly event_type: string
          /** @description JSON payload with extra information about the webhook event that your action or workflow may use. The maximum number of top-level properties is 10. */
          readonly client_payload?: { readonly [key: string]: unknown }
        }
      }
    }
  }
  /**
   * Lists the environments for a repository.
   *
   * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
   */
  readonly 'repos/get-all-environments': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': {
            /**
             * @description The number of environments in this repository
             * @example 5
             */
            readonly total_count?: number
            readonly environments?: readonly components['schemas']['environment'][]
          }
        }
      }
    }
  }
  /**
   * **Note:** To get information about name patterns that branches must match in order to deploy to this environment, see "[Get a deployment branch policy](/rest/deployments/branch-policies#get-a-deployment-branch-policy)."
   *
   * Anyone with read access to the repository can use this endpoint. If the
   * repository is private, you must use an access token with the `repo` scope. GitHub
   * Apps must have the `actions:read` permission to use this endpoint.
   */
  readonly 'repos/get-environment': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the environment. */
        readonly environment_name: components['parameters']['environment-name']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['environment']
        }
      }
    }
  }
  /**
   * Create or update an environment with protection rules, such as required reviewers. For more information about environment protection rules, see "[Environments](/actions/reference/environments#environment-protection-rules)."
   *
   * **Note:** To create or update name patterns that branches must match in order to deploy to this environment, see "[Deployment branch policies](/rest/deployments/branch-policies)."
   *
   * **Note:** To create or update secrets for an environment, see "[Secrets](/rest/reference/actions#secrets)."
   *
   * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration:write` permission for the repository to use this endpoint.
   */
  readonly 'repos/create-or-update-environment': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the environment. */
        readonly environment_name: components['parameters']['environment-name']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['environment']
        }
      }
      /** Validation error when the environment name is invalid or when `protected_branches` and `custom_branch_policies` in `deployment_branch_policy` are set to the same value */
      readonly 422: {
        readonly content: {
          readonly 'application/json': components['schemas']['basic-error']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          readonly wait_timer?: components['schemas']['wait-timer']
          /** @description The people or teams that may review jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed. */
          readonly reviewers?:
            | readonly {
                readonly type?: components['schemas']['deployment-reviewer-type']
                /**
                 * @description The id of the user or team who can review the deployment
                 * @example 4532992
                 */
                readonly id?: number
              }[]
            | null
          readonly deployment_branch_policy?: components['schemas']['deployment-branch-policy-settings']
        } | null
      }
    }
  }
  /** You must authenticate using an access token with the repo scope to use this endpoint. */
  readonly 'repos/delete-an-environment': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the environment. */
        readonly environment_name: components['parameters']['environment-name']
      }
    }
    readonly responses: {
      /** Default response */
      readonly 204: never
    }
  }
  /**
   * Lists the deployment branch policies for an environment.
   *
   * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
   */
  readonly 'repos/list-deployment-branch-policies': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the environment. */
        readonly environment_name: components['parameters']['environment-name']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': {
            /**
             * @description The number of deployment branch policies for the environment.
             * @example 2
             */
            readonly total_count: number
            readonly branch_policies: readonly components['schemas']['deployment-branch-policy'][]
          }
        }
      }
    }
  }
  /**
   * Creates a deployment branch policy for an environment.
   *
   * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration:write` permission for the repository to use this endpoint.
   */
  readonly 'repos/create-deployment-branch-policy': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the environment. */
        readonly environment_name: components['parameters']['environment-name']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['deployment-branch-policy']
        }
      }
      /** Response if the same branch name pattern already exists */
      readonly 303: never
      /** Not Found or `deployment_branch_policy.custom_branch_policies` property for the environment is set to false */
      readonly 404: unknown
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': components['schemas']['deployment-branch-policy-name-pattern']
      }
    }
  }
  /**
   * Gets a deployment branch policy for an environment.
   *
   * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
   */
  readonly 'repos/get-deployment-branch-policy': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the environment. */
        readonly environment_name: components['parameters']['environment-name']
        /** The unique identifier of the branch policy. */
        readonly branch_policy_id: components['parameters']['branch-policy-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['deployment-branch-policy']
        }
      }
    }
  }
  /**
   * Updates a deployment branch policy for an environment.
   *
   * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration:write` permission for the repository to use this endpoint.
   */
  readonly 'repos/update-deployment-branch-policy': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the environment. */
        readonly environment_name: components['parameters']['environment-name']
        /** The unique identifier of the branch policy. */
        readonly branch_policy_id: components['parameters']['branch-policy-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['deployment-branch-policy']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': components['schemas']['deployment-branch-policy-name-pattern']
      }
    }
  }
  /**
   * Deletes a deployment branch policy for an environment.
   *
   * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration:write` permission for the repository to use this endpoint.
   */
  readonly 'repos/delete-deployment-branch-policy': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the environment. */
        readonly environment_name: components['parameters']['environment-name']
        /** The unique identifier of the branch policy. */
        readonly branch_policy_id: components['parameters']['branch-policy-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  readonly 'activity/list-repo-events': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['event'][]
        }
      }
    }
  }
  readonly 'repos/list-forks': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
      readonly query: {
        /** The sort order. `stargazers` will sort by star count. */
        readonly sort?: 'newest' | 'oldest' | 'stargazers' | 'watchers'
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['minimal-repository'][]
        }
      }
      readonly 400: components['responses']['bad_request']
    }
  }
  /**
   * Create a fork for the authenticated user.
   *
   * **Note**: Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Enterprise Server Support](https://support.github.com/contact?tags=dotcom-rest-api).
   */
  readonly 'repos/create-fork': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 202: {
        readonly content: {
          readonly 'application/json': components['schemas']['full-repository']
        }
      }
      readonly 400: components['responses']['bad_request']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description Optional parameter to specify the organization name if forking into an organization. */
          readonly organization?: string
        } | null
      }
    }
  }
  readonly 'git/create-blob': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string
        }
        readonly content: {
          readonly 'application/json': components['schemas']['short-blob']
        }
      }
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
      readonly 409: components['responses']['conflict']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The new blob's content. */
          readonly content: string
          /**
           * @description The encoding used for `content`. Currently, `"utf-8"` and `"base64"` are supported.
           * @default utf-8
           */
          readonly encoding?: string
        }
      }
    }
  }
  /**
   * The `content` in the response will always be Base64 encoded.
   *
   * _Note_: This API supports blobs up to 100 megabytes in size.
   */
  readonly 'git/get-blob': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        readonly file_sha: string
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['blob']
        }
      }
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
  }
  /**
   * Creates a new Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).
   *
   * **Signature verification object**
   *
   * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
   *
   * | Name | Type | Description |
   * | ---- | ---- | ----------- |
   * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
   * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in the table below. |
   * | `signature` | `string` | The signature that was extracted from the commit. |
   * | `payload` | `string` | The value that was signed. |
   *
   * These are the possible values for `reason` in the `verification` object:
   *
   * | Value | Description |
   * | ----- | ----------- |
   * | `expired_key` | The key that made the signature is expired. |
   * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
   * | `gpgverify_error` | There was an error communicating with the signature verification service. |
   * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
   * | `unsigned` | The object does not include a signature. |
   * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
   * | `no_user` | No user was associated with the `committer` email address in the commit. |
   * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
   * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
   * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
   * | `malformed_signature` | There was an error parsing the signature. |
   * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
   * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
   */
  readonly 'git/create-commit': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string
        }
        readonly content: {
          readonly 'application/json': components['schemas']['git-commit']
        }
      }
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The commit message */
          readonly message: string
          /** @description The SHA of the tree object this commit points to */
          readonly tree: string
          /** @description The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided. */
          readonly parents?: readonly string[]
          /** @description Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details. */
          readonly author?: {
            /** @description The name of the author (or committer) of the commit */
            readonly name: string
            /** @description The email of the author (or committer) of the commit */
            readonly email: string
            /**
             * Format: date-time
             * @description Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
             */
            readonly date?: string
          }
          /** @description Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details. */
          readonly committer?: {
            /** @description The name of the author (or committer) of the commit */
            readonly name?: string
            /** @description The email of the author (or committer) of the commit */
            readonly email?: string
            /**
             * Format: date-time
             * @description Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
             */
            readonly date?: string
          }
          /** @description The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits. */
          readonly signature?: string
        }
      }
    }
  }
  /**
   * Gets a Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).
   *
   * **Signature verification object**
   *
   * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
   *
   * | Name | Type | Description |
   * | ---- | ---- | ----------- |
   * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
   * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in the table below. |
   * | `signature` | `string` | The signature that was extracted from the commit. |
   * | `payload` | `string` | The value that was signed. |
   *
   * These are the possible values for `reason` in the `verification` object:
   *
   * | Value | Description |
   * | ----- | ----------- |
   * | `expired_key` | The key that made the signature is expired. |
   * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
   * | `gpgverify_error` | There was an error communicating with the signature verification service. |
   * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
   * | `unsigned` | The object does not include a signature. |
   * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
   * | `no_user` | No user was associated with the `committer` email address in the commit. |
   * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
   * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
   * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
   * | `malformed_signature` | There was an error parsing the signature. |
   * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
   * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
   */
  readonly 'git/get-commit': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The SHA of the commit. */
        readonly commit_sha: components['parameters']['commit-sha']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['git-commit']
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * Returns an array of references from your Git database that match the supplied name. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't exist in the repository, but existing refs start with `:ref`, they will be returned as an array.
   *
   * When you use this endpoint without providing a `:ref`, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just `heads` and `tags`.
   *
   * **Note:** You need to explicitly [request a pull request](https://docs.github.com/enterprise-server@3.6/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/enterprise-server@3.6/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
   *
   * If you request matching references for a branch named `feature` but the branch `feature` doesn't exist, the response can still include other matching head refs that start with the word `feature`, such as `featureA` and `featureB`.
   */
  readonly 'git/list-matching-refs': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** ref parameter */
        readonly ref: string
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['git-ref'][]
        }
      }
    }
  }
  /**
   * Returns a single reference from your Git database. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't match an existing ref, a `404` is returned.
   *
   * **Note:** You need to explicitly [request a pull request](https://docs.github.com/enterprise-server@3.6/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/enterprise-server@3.6/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
   */
  readonly 'git/get-ref': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** ref parameter */
        readonly ref: string
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['git-ref']
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /** Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches. */
  readonly 'git/create-ref': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string
        }
        readonly content: {
          readonly 'application/json': components['schemas']['git-ref']
        }
      }
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected. */
          readonly ref: string
          /** @description The SHA1 value for this reference. */
          readonly sha: string
          /** @example "refs/heads/newbranch" */
          readonly key?: string
        }
      }
    }
  }
  readonly 'git/delete-ref': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** ref parameter */
        readonly ref: string
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 422: components['responses']['validation_failed']
    }
  }
  readonly 'git/update-ref': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The name of the fully qualified reference to update. For example, `refs/heads/master`. If the value doesn't start with `refs` and have at least two slashes, it will be rejected. */
        readonly ref: string
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['git-ref']
        }
      }
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The SHA1 value to set this reference to */
          readonly sha: string
          /**
           * @description Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you're not overwriting work.
           * @default false
           */
          readonly force?: boolean
        }
      }
    }
  }
  /**
   * Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then [create](https://docs.github.com/enterprise-server@3.6/rest/reference/git#create-a-reference) the `refs/tags/[tag]` reference. If you want to create a lightweight tag, you only have to [create](https://docs.github.com/enterprise-server@3.6/rest/reference/git#create-a-reference) the tag reference - this call would be unnecessary.
   *
   * **Signature verification object**
   *
   * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
   *
   * | Name | Type | Description |
   * | ---- | ---- | ----------- |
   * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
   * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
   * | `signature` | `string` | The signature that was extracted from the commit. |
   * | `payload` | `string` | The value that was signed. |
   *
   * These are the possible values for `reason` in the `verification` object:
   *
   * | Value | Description |
   * | ----- | ----------- |
   * | `expired_key` | The key that made the signature is expired. |
   * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
   * | `gpgverify_error` | There was an error communicating with the signature verification service. |
   * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
   * | `unsigned` | The object does not include a signature. |
   * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
   * | `no_user` | No user was associated with the `committer` email address in the commit. |
   * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
   * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
   * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
   * | `malformed_signature` | There was an error parsing the signature. |
   * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
   * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
   */
  readonly 'git/create-tag': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string
        }
        readonly content: {
          readonly 'application/json': components['schemas']['git-tag']
        }
      }
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The tag's name. This is typically a version (e.g., "v0.0.1"). */
          readonly tag: string
          /** @description The tag message. */
          readonly message: string
          /** @description The SHA of the git object this is tagging. */
          readonly object: string
          /**
           * @description The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`.
           * @enum {string}
           */
          readonly type: 'commit' | 'tree' | 'blob'
          /** @description An object with information about the individual creating the tag. */
          readonly tagger?: {
            /** @description The name of the author of the tag */
            readonly name: string
            /** @description The email of the author of the tag */
            readonly email: string
            /**
             * Format: date-time
             * @description When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
             */
            readonly date?: string
          }
        }
      }
    }
  }
  /**
   * **Signature verification object**
   *
   * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
   *
   * | Name | Type | Description |
   * | ---- | ---- | ----------- |
   * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
   * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
   * | `signature` | `string` | The signature that was extracted from the commit. |
   * | `payload` | `string` | The value that was signed. |
   *
   * These are the possible values for `reason` in the `verification` object:
   *
   * | Value | Description |
   * | ----- | ----------- |
   * | `expired_key` | The key that made the signature is expired. |
   * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
   * | `gpgverify_error` | There was an error communicating with the signature verification service. |
   * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
   * | `unsigned` | The object does not include a signature. |
   * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
   * | `no_user` | No user was associated with the `committer` email address in the commit. |
   * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
   * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
   * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
   * | `malformed_signature` | There was an error parsing the signature. |
   * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
   * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
   */
  readonly 'git/get-tag': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        readonly tag_sha: string
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['git-tag']
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * The tree creation API accepts nested entries. If you specify both a tree and a nested path modifying that tree, this endpoint will overwrite the contents of the tree with the new path contents, and create a new tree structure.
   *
   * If you use this endpoint to add, delete, or modify the file contents in a tree, you will need to commit the tree and then update a branch to point to the commit. For more information see "[Create a commit](https://docs.github.com/enterprise-server@3.6/rest/reference/git#create-a-commit)" and "[Update a reference](https://docs.github.com/enterprise-server@3.6/rest/reference/git#update-a-reference)."
   *
   * Returns an error if you try to delete a file that does not exist.
   */
  readonly 'git/create-tree': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string
        }
        readonly content: {
          readonly 'application/json': components['schemas']['git-tree']
        }
      }
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure. */
          readonly tree: readonly {
            /** @description The file referenced in the tree. */
            readonly path?: string
            /**
             * @description The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the path of a symlink.
             * @enum {string}
             */
            readonly mode?: '100644' | '100755' | '040000' | '160000' | '120000'
            /**
             * @description Either `blob`, `tree`, or `commit`.
             * @enum {string}
             */
            readonly type?: 'blob' | 'tree' | 'commit'
            /**
             * @description The SHA1 checksum ID of the object in the tree. Also called `tree.sha`. If the value is `null` then the file will be deleted.
             *
             * **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.
             */
            readonly sha?: string | null
            /**
             * @description The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or `tree.sha`.
             *
             * **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.
             */
            readonly content?: string
          }[]
          /**
           * @description The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree` parameter will overwrite items from `base_tree` with the same `path`. If you're creating new changes on a branch, then normally you'd set `base_tree` to the SHA1 of the Git tree object of the current latest commit on the branch you're working on.
           * If not provided, GitHub will create a new Git tree object from only the entries defined in the `tree` parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit's tree and were not defined in the `tree` parameter will be listed as deleted by the new commit.
           */
          readonly base_tree?: string
        }
      }
    }
  }
  /**
   * Returns a single tree using the SHA1 value for that tree.
   *
   * If `truncated` is `true` in the response then the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time.
   *
   *
   * **Note**: The limit for the `tree` array is 100,000 entries with a maximum size of 7 MB when using the `recursive` parameter.
   */
  readonly 'git/get-tree': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        readonly tree_sha: string
      }
      readonly query: {
        /** Setting this parameter to any value returns the objects or subtrees referenced by the tree specified in `:tree_sha`. For example, setting `recursive` to any of the following will enable returning objects or subtrees: `0`, `1`, `"true"`, and `"false"`. Omit this parameter to prevent recursively returning objects or subtrees. */
        readonly recursive?: string
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['git-tree']
        }
      }
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
  }
  /** Lists webhooks for a repository. `last response` may return null if there have not been any deliveries within 30 days. */
  readonly 'repos/list-webhooks': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['hook'][]
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * Repositories can have multiple webhooks installed. Each webhook should have a unique `config`. Multiple webhooks can
   * share the same `config` as long as those webhooks do not have any `events` that overlap.
   */
  readonly 'repos/create-webhook': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string
        }
        readonly content: {
          readonly 'application/json': components['schemas']['hook']
        }
      }
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description Use `web` to create a webhook. Default: `web`. This parameter only accepts the value `web`. */
          readonly name?: string
          /** @description Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#create-hook-config-params). */
          readonly config?: {
            readonly url?: components['schemas']['webhook-config-url']
            readonly content_type?: components['schemas']['webhook-config-content-type']
            readonly secret?: components['schemas']['webhook-config-secret']
            readonly insecure_ssl?: components['schemas']['webhook-config-insecure-ssl']
            /** @example "abc" */
            readonly token?: string
            /** @example "sha256" */
            readonly digest?: string
          }
          /**
           * @description Determines what [events](https://docs.github.com/enterprise-server@3.6/webhooks/event-payloads) the hook is triggered for.
           * @default [
           *   "push"
           * ]
           */
          readonly events?: readonly string[]
          /**
           * @description Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
           * @default true
           */
          readonly active?: boolean
        } | null
      }
    }
  }
  /** Returns a webhook configured in a repository. To get only the webhook `config` properties, see "[Get a webhook configuration for a repository](/rest/reference/repos#get-a-webhook-configuration-for-a-repository)." */
  readonly 'repos/get-webhook': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the hook. */
        readonly hook_id: components['parameters']['hook-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['hook']
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  readonly 'repos/delete-webhook': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the hook. */
        readonly hook_id: components['parameters']['hook-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 404: components['responses']['not_found']
    }
  }
  /** Updates a webhook configured in a repository. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for a repository](/rest/reference/repos#update-a-webhook-configuration-for-a-repository)." */
  readonly 'repos/update-webhook': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the hook. */
        readonly hook_id: components['parameters']['hook-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['hook']
        }
      }
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#create-hook-config-params). */
          readonly config?: {
            readonly url: components['schemas']['webhook-config-url']
            readonly content_type?: components['schemas']['webhook-config-content-type']
            readonly secret?: components['schemas']['webhook-config-secret']
            readonly insecure_ssl?: components['schemas']['webhook-config-insecure-ssl']
            /** @example "bar@example.com" */
            readonly address?: string
            /** @example "The Serious Room" */
            readonly room?: string
          }
          /**
           * @description Determines what [events](https://docs.github.com/enterprise-server@3.6/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events.
           * @default [
           *   "push"
           * ]
           */
          readonly events?: readonly string[]
          /** @description Determines a list of events to be added to the list of events that the Hook triggers for. */
          readonly add_events?: readonly string[]
          /** @description Determines a list of events to be removed from the list of events that the Hook triggers for. */
          readonly remove_events?: readonly string[]
          /**
           * @description Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
           * @default true
           */
          readonly active?: boolean
        }
      }
    }
  }
  /**
   * Returns the webhook configuration for a repository. To get more information about the webhook, including the `active` state and `events`, use "[Get a repository webhook](/rest/reference/orgs#get-a-repository-webhook)."
   *
   * Access tokens must have the `read:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:read` permission.
   */
  readonly 'repos/get-webhook-config-for-repo': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the hook. */
        readonly hook_id: components['parameters']['hook-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['webhook-config']
        }
      }
    }
  }
  /**
   * Updates the webhook configuration for a repository. To update more information about the webhook, including the `active` state and `events`, use "[Update a repository webhook](/rest/reference/orgs#update-a-repository-webhook)."
   *
   * Access tokens must have the `write:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:write` permission.
   */
  readonly 'repos/update-webhook-config-for-repo': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the hook. */
        readonly hook_id: components['parameters']['hook-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['webhook-config']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          readonly url?: components['schemas']['webhook-config-url']
          readonly content_type?: components['schemas']['webhook-config-content-type']
          readonly secret?: components['schemas']['webhook-config-secret']
          readonly insecure_ssl?: components['schemas']['webhook-config-insecure-ssl']
        }
      }
    }
  }
  /** Returns a list of webhook deliveries for a webhook configured in a repository. */
  readonly 'repos/list-webhook-deliveries': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the hook. */
        readonly hook_id: components['parameters']['hook-id']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors. */
        readonly cursor?: components['parameters']['cursor']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['hook-delivery-item'][]
        }
      }
      readonly 400: components['responses']['bad_request']
      readonly 422: components['responses']['validation_failed']
    }
  }
  /** Returns a delivery for a webhook configured in a repository. */
  readonly 'repos/get-webhook-delivery': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the hook. */
        readonly hook_id: components['parameters']['hook-id']
        readonly delivery_id: components['parameters']['delivery-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['hook-delivery']
        }
      }
      readonly 400: components['responses']['bad_request']
      readonly 422: components['responses']['validation_failed']
    }
  }
  /** Redeliver a webhook delivery for a webhook configured in a repository. */
  readonly 'repos/redeliver-webhook-delivery': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the hook. */
        readonly hook_id: components['parameters']['hook-id']
        readonly delivery_id: components['parameters']['delivery-id']
      }
    }
    readonly responses: {
      readonly 202: components['responses']['accepted']
      readonly 400: components['responses']['bad_request']
      readonly 422: components['responses']['validation_failed']
    }
  }
  /** This will trigger a [ping event](https://docs.github.com/enterprise-server@3.6/webhooks/#ping-event) to be sent to the hook. */
  readonly 'repos/ping-webhook': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the hook. */
        readonly hook_id: components['parameters']['hook-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * This will trigger the hook with the latest push to the current repository if the hook is subscribed to `push` events. If the hook is not subscribed to `push` events, the server will respond with 204 but no test POST will be generated.
   *
   * **Note**: Previously `/repos/:owner/:repo/hooks/:hook_id/test`
   */
  readonly 'repos/test-push-webhook': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the hook. */
        readonly hook_id: components['parameters']['hook-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.
   *
   * You must use a [JWT](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   */
  readonly 'apps/get-repo-installation': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['installation']
        }
      }
      readonly 301: components['responses']['moved_permanently']
      readonly 404: components['responses']['not_found']
    }
  }
  /** When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations. */
  readonly 'repos/list-invitations': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['repository-invitation'][]
        }
      }
    }
  }
  readonly 'repos/delete-invitation': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the invitation. */
        readonly invitation_id: components['parameters']['invitation-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  readonly 'repos/update-invitation': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the invitation. */
        readonly invitation_id: components['parameters']['invitation-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['repository-invitation']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`.
           * @enum {string}
           */
          readonly permissions?: 'read' | 'write' | 'maintain' | 'triage' | 'admin'
        }
      }
    }
  }
  /**
   * List issues in a repository.
   *
   * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
   * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
   * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
   * request id, use the "[List pull requests](https://docs.github.com/enterprise-server@3.6/rest/reference/pulls#list-pull-requests)" endpoint.
   */
  readonly 'issues/list-for-repo': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
      readonly query: {
        /** If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned. */
        readonly milestone?: string
        /** Indicates the state of the issues to return. */
        readonly state?: 'open' | 'closed' | 'all'
        /** Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user. */
        readonly assignee?: string
        /** The user that created the issue. */
        readonly creator?: string
        /** A user that's mentioned in the issue. */
        readonly mentioned?: string
        /** A list of comma separated label names. Example: `bug,ui,@high` */
        readonly labels?: components['parameters']['labels']
        /** What to sort results by. */
        readonly sort?: 'created' | 'updated' | 'comments'
        /** The direction to sort the results by. */
        readonly direction?: components['parameters']['direction']
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        readonly since?: components['parameters']['since']
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['issue'][]
        }
      }
      readonly 301: components['responses']['moved_permanently']
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
  }
  /**
   * Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://docs.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.
   *
   * This endpoint triggers [notifications](https://docs.github.com/enterprise-server@3.6/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
   */
  readonly 'issues/create': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string
        }
        readonly content: {
          readonly 'application/json': components['schemas']['issue']
        }
      }
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
      readonly 410: components['responses']['gone']
      readonly 422: components['responses']['validation_failed']
      readonly 503: components['responses']['service_unavailable']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The title of the issue. */
          readonly title: string | number
          /** @description The contents of the issue. */
          readonly body?: string
          /** @description Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_ */
          readonly assignee?: string | null
          readonly milestone?: (string | number) | null
          /** @description Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._ */
          readonly labels?: readonly (
            | string
            | {
                readonly id?: number
                readonly name?: string
                readonly description?: string | null
                readonly color?: string | null
              }
          )[]
          /** @description Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._ */
          readonly assignees?: readonly string[]
        }
      }
    }
  }
  /** By default, Issue Comments are ordered by ascending ID. */
  readonly 'issues/list-comments-for-repo': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
      readonly query: {
        /** The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to. */
        readonly sort?: components['parameters']['sort']
        /** Either `asc` or `desc`. Ignored without the `sort` parameter. */
        readonly direction?: 'asc' | 'desc'
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        readonly since?: components['parameters']['since']
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['issue-comment'][]
        }
      }
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
  }
  readonly 'issues/get-comment': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the comment. */
        readonly comment_id: components['parameters']['comment-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['issue-comment']
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  readonly 'issues/delete-comment': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the comment. */
        readonly comment_id: components['parameters']['comment-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  readonly 'issues/update-comment': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the comment. */
        readonly comment_id: components['parameters']['comment-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['issue-comment']
        }
      }
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The contents of the comment. */
          readonly body: string
        }
      }
    }
  }
  /** List the reactions to an [issue comment](https://docs.github.com/enterprise-server@3.6/rest/reference/issues#comments). */
  readonly 'reactions/list-for-issue-comment': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the comment. */
        readonly comment_id: components['parameters']['comment-id']
      }
      readonly query: {
        /** Returns a single [reaction type](https://docs.github.com/enterprise-server@3.6/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue comment. */
        readonly content?: '+1' | '-1' | 'laugh' | 'confused' | 'heart' | 'hooray' | 'rocket' | 'eyes'
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['reaction'][]
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /** Create a reaction to an [issue comment](https://docs.github.com/enterprise-server@3.6/rest/reference/issues#comments). A response with an HTTP `200` status means that you already added the reaction type to this issue comment. */
  readonly 'reactions/create-for-issue-comment': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the comment. */
        readonly comment_id: components['parameters']['comment-id']
      }
    }
    readonly responses: {
      /** Reaction exists */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['reaction']
        }
      }
      /** Reaction created */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['reaction']
        }
      }
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description The [reaction type](https://docs.github.com/enterprise-server@3.6/rest/reference/reactions#reaction-types) to add to the issue comment.
           * @enum {string}
           */
          readonly content: '+1' | '-1' | 'laugh' | 'confused' | 'heart' | 'hooray' | 'rocket' | 'eyes'
        }
      }
    }
  }
  /**
   * **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.
   *
   * Delete a reaction to an [issue comment](https://docs.github.com/enterprise-server@3.6/rest/reference/issues#comments).
   */
  readonly 'reactions/delete-for-issue-comment': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the comment. */
        readonly comment_id: components['parameters']['comment-id']
        /** The unique identifier of the reaction. */
        readonly reaction_id: components['parameters']['reaction-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  readonly 'issues/list-events-for-repo': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['issue-event'][]
        }
      }
      readonly 422: components['responses']['validation_failed']
    }
  }
  readonly 'issues/get-event': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        readonly event_id: number
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['issue-event']
        }
      }
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
      readonly 410: components['responses']['gone']
    }
  }
  /**
   * The API returns a [`301 Moved Permanently` status](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was
   * [transferred](https://docs.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If
   * the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API
   * returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read
   * access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe
   * to the [`issues`](https://docs.github.com/enterprise-server@3.6/webhooks/event-payloads/#issues) webhook.
   *
   * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
   * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
   * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
   * request id, use the "[List pull requests](https://docs.github.com/enterprise-server@3.6/rest/reference/pulls#list-pull-requests)" endpoint.
   */
  readonly 'issues/get': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies the issue. */
        readonly issue_number: components['parameters']['issue-number']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['issue']
        }
      }
      readonly 301: components['responses']['moved_permanently']
      readonly 304: components['responses']['not_modified']
      readonly 404: components['responses']['not_found']
      readonly 410: components['responses']['gone']
    }
  }
  /** Issue owners and users with push access can edit an issue. */
  readonly 'issues/update': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies the issue. */
        readonly issue_number: components['parameters']['issue-number']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['issue']
        }
      }
      readonly 301: components['responses']['moved_permanently']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
      readonly 410: components['responses']['gone']
      readonly 422: components['responses']['validation_failed']
      readonly 503: components['responses']['service_unavailable']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The title of the issue. */
          readonly title?: (string | number) | null
          /** @description The contents of the issue. */
          readonly body?: string | null
          /** @description Login for the user that this issue should be assigned to. **This field is deprecated.** */
          readonly assignee?: string | null
          /**
           * @description State of the issue. Either `open` or `closed`.
           * @enum {string}
           */
          readonly state?: 'open' | 'closed'
          /**
           * @description The reason for the current state
           * @example not_planned
           * @enum {string|null}
           */
          readonly state_reason?: ('completed' | 'not_planned' | 'reopened') | null
          readonly milestone?: (string | number) | null
          /** @description Labels to associate with this issue. Pass one or more Labels to _replace_ the set of Labels on this Issue. Send an empty array (`[]`) to clear all Labels from the Issue. _NOTE: Only users with push access can set labels for issues. Labels are silently dropped otherwise._ */
          readonly labels?: readonly (
            | string
            | {
                readonly id?: number
                readonly name?: string
                readonly description?: string | null
                readonly color?: string | null
              }
          )[]
          /** @description Logins for Users to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this Issue. Send an empty array (`[]`) to clear all assignees from the Issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._ */
          readonly assignees?: readonly string[]
        }
      }
    }
  }
  /** Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced. */
  readonly 'issues/add-assignees': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies the issue. */
        readonly issue_number: components['parameters']['issue-number']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['issue']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._ */
          readonly assignees?: readonly string[]
        }
      }
    }
  }
  /** Removes one or more assignees from an issue. */
  readonly 'issues/remove-assignees': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies the issue. */
        readonly issue_number: components['parameters']['issue-number']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['issue']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description Usernames of assignees to remove from an issue. _NOTE: Only users with push access can remove assignees from an issue. Assignees are silently ignored otherwise._ */
          readonly assignees?: readonly string[]
        }
      }
    }
  }
  /** Issue Comments are ordered by ascending ID. */
  readonly 'issues/list-comments': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies the issue. */
        readonly issue_number: components['parameters']['issue-number']
      }
      readonly query: {
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        readonly since?: components['parameters']['since']
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['issue-comment'][]
        }
      }
      readonly 404: components['responses']['not_found']
      readonly 410: components['responses']['gone']
    }
  }
  /** This endpoint triggers [notifications](https://docs.github.com/enterprise-server@3.6/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details. */
  readonly 'issues/create-comment': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies the issue. */
        readonly issue_number: components['parameters']['issue-number']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string
        }
        readonly content: {
          readonly 'application/json': components['schemas']['issue-comment']
        }
      }
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
      readonly 410: components['responses']['gone']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The contents of the comment. */
          readonly body: string
        }
      }
    }
  }
  readonly 'issues/list-events': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies the issue. */
        readonly issue_number: components['parameters']['issue-number']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['issue-event-for-issue'][]
        }
      }
      readonly 410: components['responses']['gone']
    }
  }
  readonly 'issues/list-labels-on-issue': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies the issue. */
        readonly issue_number: components['parameters']['issue-number']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['label'][]
        }
      }
      readonly 301: components['responses']['moved_permanently']
      readonly 404: components['responses']['not_found']
      readonly 410: components['responses']['gone']
    }
  }
  /** Removes any previous labels and sets the new labels for an issue. */
  readonly 'issues/set-labels': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies the issue. */
        readonly issue_number: components['parameters']['issue-number']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['label'][]
        }
      }
      readonly 301: components['responses']['moved_permanently']
      readonly 404: components['responses']['not_found']
      readonly 410: components['responses']['gone']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json':
          | {
              /** @description The names of the labels to set for the issue. The labels you set replace any existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also add labels to the existing labels for an issue. For more information, see "[Add labels to an issue](https://docs.github.com/enterprise-server@3.6/rest/reference/issues#add-labels-to-an-issue)." */
              readonly labels?: readonly string[]
            }
          | readonly string[]
          | {
              readonly labels?: readonly {
                readonly name: string
              }[]
            }
          | readonly {
              readonly name: string
            }[]
          | string
      }
    }
  }
  readonly 'issues/add-labels': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies the issue. */
        readonly issue_number: components['parameters']['issue-number']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['label'][]
        }
      }
      readonly 301: components['responses']['moved_permanently']
      readonly 404: components['responses']['not_found']
      readonly 410: components['responses']['gone']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json':
          | {
              /** @description The names of the labels to add to the issue's existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also replace all of the labels for an issue. For more information, see "[Set labels for an issue](https://docs.github.com/enterprise-server@3.6/rest/reference/issues#set-labels-for-an-issue)." */
              readonly labels?: readonly string[]
            }
          | readonly string[]
          | {
              readonly labels?: readonly {
                readonly name: string
              }[]
            }
          | readonly {
              readonly name: string
            }[]
          | string
      }
    }
  }
  readonly 'issues/remove-all-labels': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies the issue. */
        readonly issue_number: components['parameters']['issue-number']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 301: components['responses']['moved_permanently']
      readonly 404: components['responses']['not_found']
      readonly 410: components['responses']['gone']
    }
  }
  /** Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a `404 Not Found` status if the label does not exist. */
  readonly 'issues/remove-label': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies the issue. */
        readonly issue_number: components['parameters']['issue-number']
        readonly name: string
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['label'][]
        }
      }
      readonly 301: components['responses']['moved_permanently']
      readonly 404: components['responses']['not_found']
      readonly 410: components['responses']['gone']
    }
  }
  /**
   * Users with push access can lock an issue or pull request's conversation.
   *
   * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#http-verbs)."
   */
  readonly 'issues/lock': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies the issue. */
        readonly issue_number: components['parameters']['issue-number']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
      readonly 410: components['responses']['gone']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:
           * \* `off-topic`
           * \* `too heated`
           * \* `resolved`
           * \* `spam`
           * @enum {string}
           */
          readonly lock_reason?: 'off-topic' | 'too heated' | 'resolved' | 'spam'
        } | null
      }
    }
  }
  /** Users with push access can unlock an issue's conversation. */
  readonly 'issues/unlock': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies the issue. */
        readonly issue_number: components['parameters']['issue-number']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
    }
  }
  /** List the reactions to an [issue](https://docs.github.com/enterprise-server@3.6/rest/reference/issues). */
  readonly 'reactions/list-for-issue': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies the issue. */
        readonly issue_number: components['parameters']['issue-number']
      }
      readonly query: {
        /** Returns a single [reaction type](https://docs.github.com/enterprise-server@3.6/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue. */
        readonly content?: '+1' | '-1' | 'laugh' | 'confused' | 'heart' | 'hooray' | 'rocket' | 'eyes'
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['reaction'][]
        }
      }
      readonly 404: components['responses']['not_found']
      readonly 410: components['responses']['gone']
    }
  }
  /** Create a reaction to an [issue](https://docs.github.com/enterprise-server@3.6/rest/reference/issues/). A response with an HTTP `200` status means that you already added the reaction type to this issue. */
  readonly 'reactions/create-for-issue': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies the issue. */
        readonly issue_number: components['parameters']['issue-number']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['reaction']
        }
      }
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['reaction']
        }
      }
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description The [reaction type](https://docs.github.com/enterprise-server@3.6/rest/reference/reactions#reaction-types) to add to the issue.
           * @enum {string}
           */
          readonly content: '+1' | '-1' | 'laugh' | 'confused' | 'heart' | 'hooray' | 'rocket' | 'eyes'
        }
      }
    }
  }
  /**
   * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.
   *
   * Delete a reaction to an [issue](https://docs.github.com/enterprise-server@3.6/rest/reference/issues/).
   */
  readonly 'reactions/delete-for-issue': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies the issue. */
        readonly issue_number: components['parameters']['issue-number']
        /** The unique identifier of the reaction. */
        readonly reaction_id: components['parameters']['reaction-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  readonly 'issues/list-events-for-timeline': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies the issue. */
        readonly issue_number: components['parameters']['issue-number']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['timeline-issue-events'][]
        }
      }
      readonly 404: components['responses']['not_found']
      readonly 410: components['responses']['gone']
    }
  }
  readonly 'repos/list-deploy-keys': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['deploy-key'][]
        }
      }
    }
  }
  /** You can create a read-only deploy key. */
  readonly 'repos/create-deploy-key': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string
        }
        readonly content: {
          readonly 'application/json': components['schemas']['deploy-key']
        }
      }
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description A name for the key. */
          readonly title?: string
          /** @description The contents of the key. */
          readonly key: string
          /**
           * @description If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.
           *
           * Deploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see "[Repository permission levels for an organization](https://docs.github.com/articles/repository-permission-levels-for-an-organization/)" and "[Permission levels for a user account repository](https://docs.github.com/articles/permission-levels-for-a-user-account-repository/)."
           */
          readonly read_only?: boolean
        }
      }
    }
  }
  readonly 'repos/get-deploy-key': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the key. */
        readonly key_id: components['parameters']['key-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['deploy-key']
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /** Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead. */
  readonly 'repos/delete-deploy-key': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the key. */
        readonly key_id: components['parameters']['key-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  readonly 'issues/list-labels-for-repo': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['label'][]
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  readonly 'issues/create-label': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string
        }
        readonly content: {
          readonly 'application/json': components['schemas']['label']
        }
      }
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)." */
          readonly name: string
          /** @description The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`. */
          readonly color?: string
          /** @description A short description of the label. Must be 100 characters or fewer. */
          readonly description?: string
        }
      }
    }
  }
  readonly 'issues/get-label': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        readonly name: string
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['label']
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  readonly 'issues/delete-label': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        readonly name: string
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  readonly 'issues/update-label': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        readonly name: string
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['label']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)." */
          readonly new_name?: string
          /** @description The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`. */
          readonly color?: string
          /** @description A short description of the label. Must be 100 characters or fewer. */
          readonly description?: string
        }
      }
    }
  }
  /** Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language. */
  readonly 'repos/list-languages': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['language']
        }
      }
    }
  }
  readonly 'repos/enable-lfs-for-repo': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      readonly 202: components['responses']['accepted']
      /**
       * We will return a 403 with one of the following messages:
       *
       * - Git LFS support not enabled because Git LFS is globally disabled.
       * - Git LFS support not enabled because Git LFS is disabled for the root repository in the network.
       * - Git LFS support not enabled because Git LFS is disabled for <owner>.
       */
      readonly 403: unknown
    }
  }
  readonly 'repos/disable-lfs-for-repo': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /**
   * This method returns the contents of the repository's license file, if one is detected.
   *
   * Similar to [Get repository content](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#get-repository-content), this method also supports [custom media types](https://docs.github.com/enterprise-server@3.6/rest/overview/media-types) for retrieving the raw license content or rendered license HTML.
   */
  readonly 'licenses/get-for-repo': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['license-content']
        }
      }
    }
  }
  /** Sync a branch of a forked repository to keep it up-to-date with the upstream repository. */
  readonly 'repos/merge-upstream': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** The branch has been successfully synced with the upstream repository */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['merged-upstream']
        }
      }
      /** The branch could not be synced because of a merge conflict */
      readonly 409: unknown
      /** The branch could not be synced for some other reason */
      readonly 422: unknown
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The name of the branch which should be updated to match upstream. */
          readonly branch: string
        }
      }
    }
  }
  readonly 'repos/merge': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Successful Response (The resulting merge commit) */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['commit']
        }
      }
      /** Response when already merged */
      readonly 204: never
      readonly 403: components['responses']['forbidden']
      /** Not Found when the base or head does not exist */
      readonly 404: unknown
      /** Conflict when there is a merge conflict */
      readonly 409: unknown
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The name of the base branch that the head will be merged into. */
          readonly base: string
          /** @description The head to merge. This can be a branch name or a commit SHA1. */
          readonly head: string
          /** @description Commit message to use for the merge commit. If omitted, a default message will be used. */
          readonly commit_message?: string
        }
      }
    }
  }
  readonly 'issues/list-milestones': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
      readonly query: {
        /** The state of the milestone. Either `open`, `closed`, or `all`. */
        readonly state?: 'open' | 'closed' | 'all'
        /** What to sort results by. Either `due_on` or `completeness`. */
        readonly sort?: 'due_on' | 'completeness'
        /** The direction of the sort. Either `asc` or `desc`. */
        readonly direction?: 'asc' | 'desc'
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['milestone'][]
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  readonly 'issues/create-milestone': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string
        }
        readonly content: {
          readonly 'application/json': components['schemas']['milestone']
        }
      }
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The title of the milestone. */
          readonly title: string
          /**
           * @description The state of the milestone. Either `open` or `closed`.
           * @default open
           * @enum {string}
           */
          readonly state?: 'open' | 'closed'
          /** @description A description of the milestone. */
          readonly description?: string
          /**
           * Format: date-time
           * @description The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
           */
          readonly due_on?: string
        }
      }
    }
  }
  readonly 'issues/get-milestone': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies the milestone. */
        readonly milestone_number: components['parameters']['milestone-number']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['milestone']
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  readonly 'issues/delete-milestone': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies the milestone. */
        readonly milestone_number: components['parameters']['milestone-number']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 404: components['responses']['not_found']
    }
  }
  readonly 'issues/update-milestone': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies the milestone. */
        readonly milestone_number: components['parameters']['milestone-number']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['milestone']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The title of the milestone. */
          readonly title?: string
          /**
           * @description The state of the milestone. Either `open` or `closed`.
           * @default open
           * @enum {string}
           */
          readonly state?: 'open' | 'closed'
          /** @description A description of the milestone. */
          readonly description?: string
          /**
           * Format: date-time
           * @description The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
           */
          readonly due_on?: string
        }
      }
    }
  }
  readonly 'issues/list-labels-for-milestone': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies the milestone. */
        readonly milestone_number: components['parameters']['milestone-number']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['label'][]
        }
      }
    }
  }
  /** Lists all notifications for the current user in the specified repository. */
  readonly 'activity/list-repo-notifications-for-authenticated-user': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
      readonly query: {
        /** If `true`, show notifications marked as read. */
        readonly all?: components['parameters']['all']
        /** If `true`, only shows notifications in which the user is directly participating or mentioned. */
        readonly participating?: components['parameters']['participating']
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        readonly since?: components['parameters']['since']
        /** Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        readonly before?: components['parameters']['before']
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['thread'][]
        }
      }
    }
  }
  /** Marks all notifications in a repository as "read" for the current user. If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub Enterprise Server will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List repository notifications for the authenticated user](https://docs.github.com/enterprise-server@3.6/rest/reference/activity#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`. */
  readonly 'activity/mark-repo-notifications-as-read': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 202: {
        readonly content: {
          readonly 'application/json': {
            readonly message?: string
            readonly url?: string
          }
        }
      }
      /** Reset Content */
      readonly 205: unknown
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * Format: date-time
           * @description Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.
           */
          readonly last_read_at?: string
        }
      }
    }
  }
  readonly 'repos/get-pages': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['page']
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /** Updates information for a GitHub Enterprise Server Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages). */
  readonly 'repos/update-information-about-pages-site': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 400: components['responses']['bad_request']
      readonly 409: components['responses']['conflict']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see "[Using a custom domain with GitHub Pages](https://docs.github.com/articles/using-a-custom-domain-with-github-pages/)." */
          readonly cname?: string | null
          /** @description Specify whether HTTPS should be enforced for the repository. */
          readonly https_enforced?: boolean
          /** @description Configures access controls for the GitHub Pages site. If public is set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site. This includes anyone in your Enterprise if the repository is set to `internal` visibility. This feature is only available to repositories in an organization on an Enterprise plan. */
          readonly public?: boolean
          /**
           * @description The process by which the GitHub Pages site will be built. `workflow` means that the site is built by a custom GitHub Actions workflow. `legacy` means that the site is built by GitHub when changes are pushed to a specific branch.
           * @enum {string}
           */
          readonly build_type?: 'legacy' | 'workflow'
          readonly source?:
            | ('gh-pages' | 'master' | 'master /docs')
            | {
                /** @description The repository branch used to publish your site's source files. */
                readonly branch: string
                /**
                 * @description The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`.
                 * @enum {string}
                 */
                readonly path: '/' | '/docs'
              }
        }
      }
    }
  }
  /** Configures a GitHub Enterprise Server Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages)." You must be an admin of the repository in order to use this operation. */
  readonly 'repos/create-pages-site': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['page']
        }
      }
      readonly 409: components['responses']['conflict']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description The process in which the Page will be built. Possible values are `"legacy"` and `"workflow"`.
           * @enum {string}
           */
          readonly build_type?: 'legacy' | 'workflow'
          /** @description The source branch and directory used to publish your Pages site. */
          readonly source?: {
            /** @description The repository branch used to publish your site's source files. */
            readonly branch: string
            /**
             * @description The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. Default: `/`
             * @default /
             * @enum {string}
             */
            readonly path?: '/' | '/docs'
          }
        } | null
      }
    }
  }
  /** Deletes a GitHub Pages site. You must be an admin of the repository in order to use this operation. */
  readonly 'repos/delete-pages-site': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 404: components['responses']['not_found']
      readonly 409: components['responses']['conflict']
      readonly 422: components['responses']['validation_failed']
    }
  }
  readonly 'repos/list-pages-builds': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['page-build'][]
        }
      }
    }
  }
  /**
   * You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.
   *
   * Build requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.
   */
  readonly 'repos/request-pages-build': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['page-build-status']
        }
      }
    }
  }
  readonly 'repos/get-latest-pages-build': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['page-build']
        }
      }
    }
  }
  readonly 'repos/get-pages-build': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        readonly build_id: number
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['page-build']
        }
      }
    }
  }
  /** List all pre-receive hooks that are enabled or testing for this repository as well as any disabled hooks that are allowed to be enabled at the repository level. Pre-receive hooks that are disabled at a higher level and are not configurable will not be listed. */
  readonly 'enterprise-admin/list-pre-receive-hooks-for-repo': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
        /** The direction to sort the results by. */
        readonly direction?: components['parameters']['direction']
        readonly sort?: 'created' | 'updated' | 'name'
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['repository-pre-receive-hook'][]
        }
      }
    }
  }
  readonly 'enterprise-admin/get-pre-receive-hook-for-repo': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the pre-receive hook. */
        readonly pre_receive_hook_id: components['parameters']['pre-receive-hook-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['repository-pre-receive-hook']
        }
      }
    }
  }
  /**
   * Deletes any overridden enforcement on this repository for the specified hook.
   *
   * Responds with effective values inherited from owner and/or global level.
   */
  readonly 'enterprise-admin/remove-pre-receive-hook-enforcement-for-repo': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the pre-receive hook. */
        readonly pre_receive_hook_id: components['parameters']['pre-receive-hook-id']
      }
    }
    readonly responses: {
      /** Responds with effective values inherited from owner and/or global level. */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['repository-pre-receive-hook']
        }
      }
    }
  }
  /** For pre-receive hooks which are allowed to be configured at the repo level, you can set `enforcement` */
  readonly 'enterprise-admin/update-pre-receive-hook-enforcement-for-repo': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the pre-receive hook. */
        readonly pre_receive_hook_id: components['parameters']['pre-receive-hook-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['repository-pre-receive-hook']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description The state of enforcement for the hook on this repository.
           * @enum {string}
           */
          readonly enforcement?: 'enabled' | 'disabled' | 'testing'
        }
      }
    }
  }
  /** Lists the projects in a repository. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. */
  readonly 'projects/list-for-repo': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
      readonly query: {
        /** Indicates the state of the projects to return. */
        readonly state?: 'open' | 'closed' | 'all'
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['project'][]
        }
      }
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
      readonly 410: components['responses']['gone']
      readonly 422: components['responses']['validation_failed_simple']
    }
  }
  /** Creates a repository project board. Returns a `410 Gone` status if projects are disabled in the repository or if the repository does not have existing classic projects. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. */
  readonly 'projects/create-for-repo': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['project']
        }
      }
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
      readonly 410: components['responses']['gone']
      readonly 422: components['responses']['validation_failed_simple']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The name of the project. */
          readonly name: string
          /** @description The description of the project. */
          readonly body?: string
        }
      }
    }
  }
  /** Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
  readonly 'pulls/list': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
      readonly query: {
        /** Either `open`, `closed`, or `all` to filter by state. */
        readonly state?: 'open' | 'closed' | 'all'
        /** Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`. */
        readonly head?: string
        /** Filter pulls by base branch name. Example: `gh-pages`. */
        readonly base?: string
        /** What to sort results by. `popularity` will sort by the number of comments. `long-running` will sort by date created and will limit the results to pull requests that have been open for more than a month and have had activity within the past month. */
        readonly sort?: 'created' | 'updated' | 'popularity' | 'long-running'
        /** The direction of the sort. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`. */
        readonly direction?: 'asc' | 'desc'
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['pull-request-simple'][]
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 422: components['responses']['validation_failed']
    }
  }
  /**
   * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
   *
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
   */
  readonly 'pulls/create': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string
        }
        readonly content: {
          readonly 'application/json': components['schemas']['pull-request']
        }
      }
      readonly 403: components['responses']['forbidden']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The title of the new pull request. Required unless `issue` is specified. */
          readonly title?: string
          /** @description The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`. */
          readonly head: string
          /** @description The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository. */
          readonly base: string
          /** @description The contents of the pull request. */
          readonly body?: string
          /** @description Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request. */
          readonly maintainer_can_modify?: boolean
          /** @description Indicates whether the pull request is a draft. See "[Draft Pull Requests](https://docs.github.com/en/articles/about-pull-requests#draft-pull-requests)" in the GitHub Help documentation to learn more. */
          readonly draft?: boolean
          /**
           * @description An issue in the repository to convert to a pull request. The issue title, body, and comments will become the title, body, and comments on the new pull request. Required unless `title` is specified.
           * @example 1
           */
          readonly issue?: number
        }
      }
    }
  }
  /** Lists review comments for all pull requests in a repository. By default, review comments are in ascending order by ID. */
  readonly 'pulls/list-review-comments-for-repo': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
      readonly query: {
        readonly sort?: 'created' | 'updated' | 'created_at'
        /** The direction to sort results. Ignored without `sort` parameter. */
        readonly direction?: 'asc' | 'desc'
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        readonly since?: components['parameters']['since']
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['pull-request-review-comment'][]
        }
      }
    }
  }
  /** Provides details for a review comment. */
  readonly 'pulls/get-review-comment': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the comment. */
        readonly comment_id: components['parameters']['comment-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['pull-request-review-comment']
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /** Deletes a review comment. */
  readonly 'pulls/delete-review-comment': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the comment. */
        readonly comment_id: components['parameters']['comment-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 404: components['responses']['not_found']
    }
  }
  /** Enables you to edit a review comment. */
  readonly 'pulls/update-review-comment': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the comment. */
        readonly comment_id: components['parameters']['comment-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['pull-request-review-comment']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The text of the reply to the review comment. */
          readonly body: string
        }
      }
    }
  }
  /** List the reactions to a [pull request review comment](https://docs.github.com/enterprise-server@3.6/rest/reference/pulls#review-comments). */
  readonly 'reactions/list-for-pull-request-review-comment': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the comment. */
        readonly comment_id: components['parameters']['comment-id']
      }
      readonly query: {
        /** Returns a single [reaction type](https://docs.github.com/enterprise-server@3.6/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a pull request review comment. */
        readonly content?: '+1' | '-1' | 'laugh' | 'confused' | 'heart' | 'hooray' | 'rocket' | 'eyes'
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['reaction'][]
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /** Create a reaction to a [pull request review comment](https://docs.github.com/enterprise-server@3.6/rest/reference/pulls#comments). A response with an HTTP `200` status means that you already added the reaction type to this pull request review comment. */
  readonly 'reactions/create-for-pull-request-review-comment': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the comment. */
        readonly comment_id: components['parameters']['comment-id']
      }
    }
    readonly responses: {
      /** Reaction exists */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['reaction']
        }
      }
      /** Reaction created */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['reaction']
        }
      }
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description The [reaction type](https://docs.github.com/enterprise-server@3.6/rest/reference/reactions#reaction-types) to add to the pull request review comment.
           * @enum {string}
           */
          readonly content: '+1' | '-1' | 'laugh' | 'confused' | 'heart' | 'hooray' | 'rocket' | 'eyes'
        }
      }
    }
  }
  /**
   * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.`
   *
   * Delete a reaction to a [pull request review comment](https://docs.github.com/enterprise-server@3.6/rest/reference/pulls#review-comments).
   */
  readonly 'reactions/delete-for-pull-request-comment': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the comment. */
        readonly comment_id: components['parameters']['comment-id']
        /** The unique identifier of the reaction. */
        readonly reaction_id: components['parameters']['reaction-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /**
   * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Lists details of a pull request by providing its number.
   *
   * When you get, [create](https://docs.github.com/enterprise-server@3.6/rest/reference/pulls/#create-a-pull-request), or [edit](https://docs.github.com/enterprise-server@3.6/rest/reference/pulls#update-a-pull-request) a pull request, GitHub Enterprise Server creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/enterprise-server@3.6/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
   *
   * The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub Enterprise Server has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.
   *
   * The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:
   *
   * *   If merged as a [merge commit](https://docs.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.
   * *   If merged via a [squash](https://docs.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.
   * *   If [rebased](https://docs.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.
   *
   * Pass the appropriate [media type](https://docs.github.com/enterprise-server@3.6/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
   */
  readonly 'pulls/get': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies the pull request. */
        readonly pull_number: components['parameters']['pull-number']
      }
    }
    readonly responses: {
      /** Pass the appropriate [media type](https://docs.github.com/enterprise-server@3.6/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats. */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['pull-request']
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 404: components['responses']['not_found']
      readonly 500: components['responses']['internal_error']
      readonly 503: components['responses']['service_unavailable']
    }
  }
  /**
   * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
   */
  readonly 'pulls/update': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies the pull request. */
        readonly pull_number: components['parameters']['pull-number']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['pull-request']
        }
      }
      readonly 403: components['responses']['forbidden']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The title of the pull request. */
          readonly title?: string
          /** @description The contents of the pull request. */
          readonly body?: string
          /**
           * @description State of this Pull Request. Either `open` or `closed`.
           * @enum {string}
           */
          readonly state?: 'open' | 'closed'
          /** @description The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository. */
          readonly base?: string
          /** @description Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request. */
          readonly maintainer_can_modify?: boolean
        }
      }
    }
  }
  /** Lists all review comments for a pull request. By default, review comments are in ascending order by ID. */
  readonly 'pulls/list-review-comments': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies the pull request. */
        readonly pull_number: components['parameters']['pull-number']
      }
      readonly query: {
        /** The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to. */
        readonly sort?: components['parameters']['sort']
        /** The direction to sort results. Ignored without `sort` parameter. */
        readonly direction?: 'asc' | 'desc'
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        readonly since?: components['parameters']['since']
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['pull-request-review-comment'][]
        }
      }
    }
  }
  /**
   * Creates a review comment in the pull request diff. To add a regular comment to a pull request timeline, see "[Create an issue comment](https://docs.github.com/enterprise-server@3.6/rest/reference/issues#create-an-issue-comment)." We recommend creating a review comment using `line`, `side`, and optionally `start_line` and `start_side` if your comment applies to more than one line in the pull request diff.
   *
   * The `position` parameter is deprecated. If you use `position`, the `line`, `side`, `start_line`, and `start_side` parameters are not required.
   *
   * **Note:** The position value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
   *
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
   */
  readonly 'pulls/create-review-comment': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies the pull request. */
        readonly pull_number: components['parameters']['pull-number']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string
        }
        readonly content: {
          readonly 'application/json': components['schemas']['pull-request-review-comment']
        }
      }
      readonly 403: components['responses']['forbidden']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The text of the review comment. */
          readonly body: string
          /** @description The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`. */
          readonly commit_id: string
          /** @description The relative path to the file that necessitates a comment. */
          readonly path: string
          /**
           * @deprecated
           * @description **This parameter is deprecated. Use `line` instead**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note above.
           */
          readonly position?: number
          /**
           * @description In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see "[Diff view options](https://docs.github.com/en/articles/about-comparing-branches-in-pull-requests#diff-view-options)" in the GitHub Help documentation.
           * @enum {string}
           */
          readonly side?: 'LEFT' | 'RIGHT'
          /** @description The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to. */
          readonly line: number
          /** @description **Required when using multi-line comments unless using `in_reply_to`**. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. */
          readonly start_line?: number
          /**
           * @description **Required when using multi-line comments unless using `in_reply_to`**. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. See `side` in this table for additional context.
           * @enum {string}
           */
          readonly start_side?: 'LEFT' | 'RIGHT' | 'side'
          /**
           * @description The ID of the review comment to reply to. To find the ID of a review comment with ["List review comments on a pull request"](#list-review-comments-on-a-pull-request). When specified, all parameters other than `body` in the request body are ignored.
           * @example 2
           */
          readonly in_reply_to?: number
        }
      }
    }
  }
  /**
   * Creates a reply to a review comment for a pull request. For the `comment_id`, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.
   *
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
   */
  readonly 'pulls/create-reply-for-review-comment': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies the pull request. */
        readonly pull_number: components['parameters']['pull-number']
        /** The unique identifier of the comment. */
        readonly comment_id: components['parameters']['comment-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string
        }
        readonly content: {
          readonly 'application/json': components['schemas']['pull-request-review-comment']
        }
      }
      readonly 404: components['responses']['not_found']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The text of the review comment. */
          readonly body: string
        }
      }
    }
  }
  /** Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#list-commits) endpoint. */
  readonly 'pulls/list-commits': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies the pull request. */
        readonly pull_number: components['parameters']['pull-number']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['commit'][]
        }
      }
    }
  }
  /** **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default. */
  readonly 'pulls/list-files': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies the pull request. */
        readonly pull_number: components['parameters']['pull-number']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['diff-entry'][]
        }
      }
      readonly 422: components['responses']['validation_failed']
      readonly 500: components['responses']['internal_error']
      readonly 503: components['responses']['service_unavailable']
    }
  }
  readonly 'pulls/check-if-merged': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies the pull request. */
        readonly pull_number: components['parameters']['pull-number']
      }
    }
    readonly responses: {
      /** Response if pull request has been merged */
      readonly 204: never
      /** Not Found if pull request has not been merged */
      readonly 404: unknown
    }
  }
  /** This endpoint triggers [notifications](https://docs.github.com/enterprise-server@3.6/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details. */
  readonly 'pulls/merge': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies the pull request. */
        readonly pull_number: components['parameters']['pull-number']
      }
    }
    readonly responses: {
      /** if merge was successful */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['pull-request-merge-result']
        }
      }
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
      /** Method Not Allowed if merge cannot be performed */
      readonly 405: {
        readonly content: {
          readonly 'application/json': {
            readonly message?: string
            readonly documentation_url?: string
          }
        }
      }
      /** Conflict if sha was provided and pull request head did not match */
      readonly 409: {
        readonly content: {
          readonly 'application/json': {
            readonly message?: string
            readonly documentation_url?: string
          }
        }
      }
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description Title for the automatic commit message. */
          readonly commit_title?: string
          /** @description Extra detail to append to automatic commit message. */
          readonly commit_message?: string
          /** @description SHA that pull request head must match to allow merge. */
          readonly sha?: string
          /**
           * @description Merge method to use. Possible values are `merge`, `squash` or `rebase`. Default is `merge`.
           * @enum {string}
           */
          readonly merge_method?: 'merge' | 'squash' | 'rebase'
        } | null
      }
    }
  }
  /** Gets the users or teams whose review is requested for a pull request. Once a requested reviewer submits a review, they are no longer considered a requested reviewer. Their review will instead be returned by the [List reviews for a pull request](https://docs.github.com/enterprise-server@3.6/rest/pulls/reviews#list-reviews-for-a-pull-request) operation. */
  readonly 'pulls/list-requested-reviewers': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies the pull request. */
        readonly pull_number: components['parameters']['pull-number']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': components['schemas']['pull-request-review-request']
        }
      }
    }
  }
  /** This endpoint triggers [notifications](https://docs.github.com/enterprise-server@3.6/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details. */
  readonly 'pulls/request-reviewers': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies the pull request. */
        readonly pull_number: components['parameters']['pull-number']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['pull-request-simple']
        }
      }
      readonly 403: components['responses']['forbidden']
      /** Unprocessable Entity if user is not a collaborator */
      readonly 422: unknown
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description An array of user `login`s that will be requested. */
          readonly reviewers?: readonly string[]
          /** @description An array of team `slug`s that will be requested. */
          readonly team_reviewers?: readonly string[]
        }
      }
    }
  }
  readonly 'pulls/remove-requested-reviewers': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies the pull request. */
        readonly pull_number: components['parameters']['pull-number']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['pull-request-simple']
        }
      }
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description An array of user `login`s that will be removed. */
          readonly reviewers: readonly string[]
          /** @description An array of team `slug`s that will be removed. */
          readonly team_reviewers?: readonly string[]
        }
      }
    }
  }
  /** The list of reviews returns in chronological order. */
  readonly 'pulls/list-reviews': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies the pull request. */
        readonly pull_number: components['parameters']['pull-number']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** The list of reviews returns in chronological order. */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['pull-request-review'][]
        }
      }
    }
  }
  /**
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
   *
   * Pull request reviews created in the `PENDING` state are not submitted and therefore do not include the `submitted_at` property in the response. To create a pending review for a pull request, leave the `event` parameter blank. For more information about submitting a `PENDING` review, see "[Submit a review for a pull request](https://docs.github.com/enterprise-server@3.6/rest/pulls#submit-a-review-for-a-pull-request)."
   *
   * **Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API v3 offers the `application/vnd.github.v3.diff` [media type](https://docs.github.com/enterprise-server@3.6/rest/overview/media-types#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the `Accept` header of a call to the [single pull request](https://docs.github.com/enterprise-server@3.6/rest/reference/pulls#get-a-pull-request) endpoint.
   *
   * The `position` value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
   */
  readonly 'pulls/create-review': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies the pull request. */
        readonly pull_number: components['parameters']['pull-number']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['pull-request-review']
        }
      }
      readonly 403: components['responses']['forbidden']
      readonly 422: components['responses']['validation_failed_simple']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value. */
          readonly commit_id?: string
          /** @description **Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review. */
          readonly body?: string
          /**
           * @description The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/enterprise-server@3.6/rest/pulls#submit-a-review-for-a-pull-request) when you are ready.
           * @enum {string}
           */
          readonly event?: 'APPROVE' | 'REQUEST_CHANGES' | 'COMMENT'
          /** @description Use the following table to specify the location, destination, and contents of the draft review comment. */
          readonly comments?: readonly {
            /** @description The relative path to the file that necessitates a review comment. */
            readonly path: string
            /** @description The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note below. */
            readonly position?: number
            /** @description Text of the review comment. */
            readonly body: string
            /** @example 28 */
            readonly line?: number
            /** @example RIGHT */
            readonly side?: string
            /** @example 26 */
            readonly start_line?: number
            /** @example LEFT */
            readonly start_side?: string
          }[]
        }
      }
    }
  }
  readonly 'pulls/get-review': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies the pull request. */
        readonly pull_number: components['parameters']['pull-number']
        /** The unique identifier of the review. */
        readonly review_id: components['parameters']['review-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['pull-request-review']
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /** Update the review summary comment with new text. */
  readonly 'pulls/update-review': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies the pull request. */
        readonly pull_number: components['parameters']['pull-number']
        /** The unique identifier of the review. */
        readonly review_id: components['parameters']['review-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['pull-request-review']
        }
      }
      readonly 422: components['responses']['validation_failed_simple']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The body text of the pull request review. */
          readonly body: string
        }
      }
    }
  }
  readonly 'pulls/delete-pending-review': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies the pull request. */
        readonly pull_number: components['parameters']['pull-number']
        /** The unique identifier of the review. */
        readonly review_id: components['parameters']['review-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['pull-request-review']
        }
      }
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed_simple']
    }
  }
  /** List comments for a specific pull request review. */
  readonly 'pulls/list-comments-for-review': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies the pull request. */
        readonly pull_number: components['parameters']['pull-number']
        /** The unique identifier of the review. */
        readonly review_id: components['parameters']['review-id']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['review-comment'][]
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /** **Note:** To dismiss a pull request review on a [protected branch](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#branches), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews. */
  readonly 'pulls/dismiss-review': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies the pull request. */
        readonly pull_number: components['parameters']['pull-number']
        /** The unique identifier of the review. */
        readonly review_id: components['parameters']['review-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['pull-request-review']
        }
      }
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed_simple']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The message for the pull request review dismissal */
          readonly message: string
          /**
           * @example "DISMISS"
           * @enum {string}
           */
          readonly event?: 'DISMISS'
        }
      }
    }
  }
  /** Submits a pending review for a pull request. For more information about creating a pending review for a pull request, see "[Create a review for a pull request](https://docs.github.com/enterprise-server@3.6/rest/pulls#create-a-review-for-a-pull-request)." */
  readonly 'pulls/submit-review': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies the pull request. */
        readonly pull_number: components['parameters']['pull-number']
        /** The unique identifier of the review. */
        readonly review_id: components['parameters']['review-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['pull-request-review']
        }
      }
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed_simple']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The body text of the pull request review */
          readonly body?: string
          /**
           * @description The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action.
           * @enum {string}
           */
          readonly event: 'APPROVE' | 'REQUEST_CHANGES' | 'COMMENT'
        }
      }
    }
  }
  /** Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch. */
  readonly 'pulls/update-branch': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies the pull request. */
        readonly pull_number: components['parameters']['pull-number']
      }
    }
    readonly responses: {
      /** Response */
      readonly 202: {
        readonly content: {
          readonly 'application/json': {
            readonly message?: string
            readonly url?: string
          }
        }
      }
      readonly 403: components['responses']['forbidden']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a `422 Unprocessable Entity` status. You can use the "[List commits](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#list-commits)" endpoint to find the most recent commit SHA. Default: SHA of the pull request's current HEAD ref. */
          readonly expected_head_sha?: string
        } | null
      }
    }
  }
  /**
   * Gets the preferred README for a repository.
   *
   * READMEs support [custom media types](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
   */
  readonly 'repos/get-readme': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
      readonly query: {
        /** The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`) */
        readonly ref?: string
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['content-file']
        }
      }
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
  }
  /**
   * Gets the README from a repository directory.
   *
   * READMEs support [custom media types](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
   */
  readonly 'repos/get-readme-in-directory': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The alternate path to look for a README file */
        readonly dir: string
      }
      readonly query: {
        /** The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`) */
        readonly ref?: string
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['content-file']
        }
      }
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
  }
  /**
   * This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#list-repository-tags).
   *
   * Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
   */
  readonly 'repos/list-releases': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['release'][]
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * Users with push access to the repository can create a release.
   *
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
   */
  readonly 'repos/create-release': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string
        }
        readonly content: {
          readonly 'application/json': components['schemas']['release']
        }
      }
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The name of the tag. */
          readonly tag_name: string
          /** @description Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`). */
          readonly target_commitish?: string
          /** @description The name of the release. */
          readonly name?: string
          /** @description Text describing the contents of the tag. */
          readonly body?: string
          /**
           * @description `true` to create a draft (unpublished) release, `false` to create a published one.
           * @default false
           */
          readonly draft?: boolean
          /**
           * @description `true` to identify the release as a prerelease. `false` to identify the release as a full release.
           * @default false
           */
          readonly prerelease?: boolean
          /**
           * @description Whether to automatically generate the name and body for this release. If `name` is specified, the specified name will be used; otherwise, a name will be automatically generated. If `body` is specified, the body will be pre-pended to the automatically generated notes.
           * @default false
           */
          readonly generate_release_notes?: boolean
        }
      }
    }
  }
  /** To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://docs.github.com/enterprise-server@3.6/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response. */
  readonly 'repos/get-release-asset': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the asset. */
        readonly asset_id: components['parameters']['asset-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['release-asset']
        }
      }
      readonly 302: components['responses']['found']
      readonly 404: components['responses']['not_found']
    }
  }
  readonly 'repos/delete-release-asset': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the asset. */
        readonly asset_id: components['parameters']['asset-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /** Users with push access to the repository can edit a release asset. */
  readonly 'repos/update-release-asset': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the asset. */
        readonly asset_id: components['parameters']['asset-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['release-asset']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The file name of the asset. */
          readonly name?: string
          /** @description An alternate short description of the asset. Used in place of the filename. */
          readonly label?: string
          /** @example "uploaded" */
          readonly state?: string
        }
      }
    }
  }
  /** Generate a name and body describing a [release](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#releases). The body content will be markdown formatted and contain information like the changes since last release and users who contributed. The generated release notes are not saved anywhere. They are intended to be generated and used when creating a new release. */
  readonly 'repos/generate-release-notes': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Name and body of generated release notes */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['release-notes-content']
        }
      }
      readonly 404: components['responses']['not_found']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The tag name for the release. This can be an existing tag or a new one. */
          readonly tag_name: string
          /** @description Specifies the commitish value that will be the target for the release's tag. Required if the supplied tag_name does not reference an existing tag. Ignored if the tag_name already exists. */
          readonly target_commitish?: string
          /** @description The name of the previous tag to use as the starting point for the release notes. Use to manually specify the range for the set of changes considered as part this release. */
          readonly previous_tag_name?: string
          /** @description Specifies a path to a file in the repository containing configuration settings used for generating the release notes. If unspecified, the configuration file located in the repository at '.github/release.yml' or '.github/release.yaml' will be used. If that is not present, the default configuration will be used. */
          readonly configuration_file_path?: string
        }
      }
    }
  }
  /**
   * View the latest published full release for the repository.
   *
   * The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
   */
  readonly 'repos/get-latest-release': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['release']
        }
      }
    }
  }
  /** Get a published release with the specified tag. */
  readonly 'repos/get-release-by-tag': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** tag parameter */
        readonly tag: string
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['release']
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /** **Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#hypermedia). */
  readonly 'repos/get-release': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the release. */
        readonly release_id: components['parameters']['release-id']
      }
    }
    readonly responses: {
      /** **Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#hypermedia). */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['release']
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /** Users with push access to the repository can delete a release. */
  readonly 'repos/delete-release': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the release. */
        readonly release_id: components['parameters']['release-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /** Users with push access to the repository can edit a release. */
  readonly 'repos/update-release': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the release. */
        readonly release_id: components['parameters']['release-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['release']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The name of the tag. */
          readonly tag_name?: string
          /** @description Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`). */
          readonly target_commitish?: string
          /** @description The name of the release. */
          readonly name?: string
          /** @description Text describing the contents of the tag. */
          readonly body?: string
          /** @description `true` makes the release a draft, and `false` publishes the release. */
          readonly draft?: boolean
          /** @description `true` to identify the release as a prerelease, `false` to identify the release as a full release. */
          readonly prerelease?: boolean
        }
      }
    }
  }
  readonly 'repos/list-release-assets': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the release. */
        readonly release_id: components['parameters']['release-id']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['release-asset'][]
        }
      }
    }
  }
  /**
   * This endpoint makes use of [a Hypermedia relation](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the `upload_url` returned in
   * the response of the [Create a release endpoint](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#create-a-release) to upload a release asset.
   *
   * You need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.
   *
   * Most libraries will set the required `Content-Length` header automatically. Use the required `Content-Type` header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example:
   *
   * `application/zip`
   *
   * GitHub Enterprise Server expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example,
   * you'll still need to pass your authentication to be able to upload an asset.
   *
   * When an upstream failure occurs, you will receive a `502 Bad Gateway` status. This may leave an empty asset with a state of `starter`. It can be safely deleted.
   *
   * **Notes:**
   * *   GitHub Enterprise Server renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The "[List assets for a release](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#list-assets-for-a-release)"
   * endpoint lists the renamed filenames. For more information and help, contact [GitHub Enterprise Server Support](https://support.github.com/contact?tags=dotcom-rest-api).
   * *   If you upload an asset with the same filename as another uploaded asset, you'll receive an error and must delete the old file before you can re-upload the new asset.
   */
  readonly 'repos/upload-release-asset': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the release. */
        readonly release_id: components['parameters']['release-id']
      }
      readonly query: {
        readonly name: string
        readonly label?: string
      }
    }
    readonly responses: {
      /** Response for successful upload */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['release-asset']
        }
      }
      /** Response if you upload an asset with the same filename as another uploaded asset */
      readonly 422: unknown
    }
    readonly requestBody: {
      readonly content: {
        readonly '*/*': string
      }
    }
  }
  /** List the reactions to a [release](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#releases). */
  readonly 'reactions/list-for-release': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the release. */
        readonly release_id: components['parameters']['release-id']
      }
      readonly query: {
        /** Returns a single [reaction type](https://docs.github.com/enterprise-server@3.6/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a release. */
        readonly content?: '+1' | 'laugh' | 'heart' | 'hooray' | 'rocket' | 'eyes'
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['reaction'][]
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /** Create a reaction to a [release](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#releases). A response with a `Status: 200 OK` means that you already added the reaction type to this release. */
  readonly 'reactions/create-for-release': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the release. */
        readonly release_id: components['parameters']['release-id']
      }
    }
    readonly responses: {
      /** Reaction exists */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['reaction']
        }
      }
      /** Reaction created */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['reaction']
        }
      }
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description The [reaction type](https://docs.github.com/enterprise-server@3.6/rest/reference/reactions#reaction-types) to add to the release.
           * @enum {string}
           */
          readonly content: '+1' | 'laugh' | 'heart' | 'hooray' | 'rocket' | 'eyes'
        }
      }
    }
  }
  /**
   * **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/releases/:release_id/reactions/:reaction_id`.
   *
   * Delete a reaction to a [release](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#releases).
   */
  readonly 'reactions/delete-for-release': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the release. */
        readonly release_id: components['parameters']['release-id']
        /** The unique identifier of the reaction. */
        readonly reaction_id: components['parameters']['reaction-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /** Lists the status of each repository cache replica. */
  readonly 'repos/list-cache-info': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Status information for cache replicas */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly {
            readonly host: string
            readonly location: string
            readonly git: {
              /** @enum {string} */
              readonly sync_status: 'offline' | 'inactive' | 'in_sync' | 'not_in_sync'
              /** Format: date-time */
              readonly last_sync: string
            }
          }[]
        }
      }
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * Lists secret scanning alerts for an eligible repository, from newest to oldest.
   * To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
   * For public repositories, you may instead use the `public_repo` scope.
   *
   * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
   */
  readonly 'secret-scanning/list-alerts-for-repo': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
      readonly query: {
        /** Set to `open` or `resolved` to only list secret scanning alerts in a specific state. */
        readonly state?: components['parameters']['secret-scanning-alert-state']
        /**
         * A comma-separated list of secret types to return. By default all secret types are returned.
         * See "[Secret scanning patterns](https://docs.github.com/enterprise-server@3.6/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)"
         * for a complete list of secret types.
         */
        readonly secret_type?: components['parameters']['secret-scanning-alert-secret-type']
        /** A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`. */
        readonly resolution?: components['parameters']['secret-scanning-alert-resolution']
        /** The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved. */
        readonly sort?: components['parameters']['secret-scanning-alert-sort']
        /** The direction to sort the results by. */
        readonly direction?: components['parameters']['direction']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['secret-scanning-alert'][]
        }
      }
      /** Repository is public or secret scanning is disabled for the repository */
      readonly 404: unknown
      readonly 503: components['responses']['service_unavailable']
    }
  }
  /**
   * Gets a single secret scanning alert detected in an eligible repository.
   * To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
   * For public repositories, you may instead use the `public_repo` scope.
   *
   * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
   */
  readonly 'secret-scanning/get-alert': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation. */
        readonly alert_number: components['parameters']['alert-number']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['secret-scanning-alert']
        }
      }
      readonly 304: components['responses']['not_modified']
      /** Repository is public, or secret scanning is disabled for the repository, or the resource is not found */
      readonly 404: unknown
      readonly 503: components['responses']['service_unavailable']
    }
  }
  /**
   * Updates the status of a secret scanning alert in an eligible repository.
   * To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
   * For public repositories, you may instead use the `public_repo` scope.
   *
   * GitHub Apps must have the `secret_scanning_alerts` write permission to use this endpoint.
   */
  readonly 'secret-scanning/update-alert': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation. */
        readonly alert_number: components['parameters']['alert-number']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['secret-scanning-alert']
        }
      }
      /** Repository is public, or secret scanning is disabled for the repository, or the resource is not found */
      readonly 404: unknown
      /** State does not match the resolution */
      readonly 422: unknown
      readonly 503: components['responses']['service_unavailable']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          readonly state: components['schemas']['secret-scanning-alert-state']
          readonly resolution?: components['schemas']['secret-scanning-alert-resolution']
        }
      }
    }
  }
  /**
   * Lists all locations for a given secret scanning alert for an eligible repository.
   * To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
   * For public repositories, you may instead use the `public_repo` scope.
   *
   * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
   */
  readonly 'secret-scanning/list-locations-for-alert': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation. */
        readonly alert_number: components['parameters']['alert-number']
      }
      readonly query: {
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['secret-scanning-location'][]
        }
      }
      /** Repository is public, or secret scanning is disabled for the repository, or the resource is not found */
      readonly 404: unknown
      readonly 503: components['responses']['service_unavailable']
    }
  }
  /**
   * Lists the people that have starred the repository.
   *
   * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/enterprise-server@3.6/rest/overview/media-types/) via the `Accept` header: `application/vnd.github.star+json`.
   */
  readonly 'activity/list-stargazers-for-repo': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['simple-user'][] | readonly components['schemas']['stargazer'][]
        }
      }
      readonly 422: components['responses']['validation_failed']
    }
  }
  /** Returns a weekly aggregate of the number of additions and deletions pushed to a repository. */
  readonly 'repos/get-code-frequency-stats': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Returns a weekly aggregate of the number of additions and deletions pushed to a repository. */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['code-frequency-stat'][]
        }
      }
      readonly 202: components['responses']['accepted']
      readonly 204: components['responses']['no_content']
    }
  }
  /** Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on `Sunday`. */
  readonly 'repos/get-commit-activity-stats': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['commit-activity'][]
        }
      }
      readonly 202: components['responses']['accepted']
      readonly 204: components['responses']['no_content']
    }
  }
  /**
   * Returns the `total` number of commits authored by the contributor. In addition, the response includes a Weekly Hash (`weeks` array) with the following information:
   *
   * *   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
   * *   `a` - Number of additions
   * *   `d` - Number of deletions
   * *   `c` - Number of commits
   */
  readonly 'repos/get-contributors-stats': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['contributor-activity'][]
        }
      }
      readonly 202: components['responses']['accepted']
      readonly 204: components['responses']['no_content']
    }
  }
  /**
   * Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from `all`.
   *
   * The array order is oldest week (index 0) to most recent week.
   */
  readonly 'repos/get-participation-stats': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** The array order is oldest week (index 0) to most recent week. */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['participation-stats']
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * Each array contains the day number, hour number, and number of commits:
   *
   * *   `0-6`: Sunday - Saturday
   * *   `0-23`: Hour of day
   * *   Number of commits
   *
   * For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.
   */
  readonly 'repos/get-punch-card-stats': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits. */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['code-frequency-stat'][]
        }
      }
      readonly 204: components['responses']['no_content']
    }
  }
  /**
   * Users with push access in a repository can create commit statuses for a given SHA.
   *
   * Note: there is a limit of 1000 statuses per `sha` and `context` within a repository. Attempts to create more than 1000 statuses will result in a validation error.
   */
  readonly 'repos/create-commit-status': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        readonly sha: string
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string
        }
        readonly content: {
          readonly 'application/json': components['schemas']['status']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description The state of the status.
           * @enum {string}
           */
          readonly state: 'error' | 'failure' | 'pending' | 'success'
          /**
           * @description The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.
           * For example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:
           * `http://ci.example.com/user/repo/build/sha`
           */
          readonly target_url?: string | null
          /** @description A short description of the status. */
          readonly description?: string | null
          /**
           * @description A string label to differentiate this status from the status of other systems. This field is case-insensitive.
           * @default default
           */
          readonly context?: string
        }
      }
    }
  }
  /** Lists the people watching the specified repository. */
  readonly 'activity/list-watchers-for-repo': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['simple-user'][]
        }
      }
    }
  }
  readonly 'activity/get-repo-subscription': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** if you subscribe to the repository */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['repository-subscription']
        }
      }
      readonly 403: components['responses']['forbidden']
      /** Not Found if you don't subscribe to the repository */
      readonly 404: unknown
    }
  }
  /** If you would like to watch a repository, set `subscribed` to `true`. If you would like to ignore notifications made within a repository, set `ignored` to `true`. If you would like to stop watching a repository, [delete the repository's subscription](https://docs.github.com/enterprise-server@3.6/rest/reference/activity#delete-a-repository-subscription) completely. */
  readonly 'activity/set-repo-subscription': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['repository-subscription']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description Determines if notifications should be received from this repository. */
          readonly subscribed?: boolean
          /** @description Determines if all notifications should be blocked from this repository. */
          readonly ignored?: boolean
        }
      }
    }
  }
  /** This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository's subscription manually](https://docs.github.com/enterprise-server@3.6/rest/reference/activity#set-a-repository-subscription). */
  readonly 'activity/delete-repo-subscription': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  readonly 'repos/list-tags': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['tag'][]
        }
      }
    }
  }
  /**
   * This returns the tag protection states of a repository.
   *
   * This information is only available to repository administrators.
   */
  readonly 'repos/list-tag-protection': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['tag-protection'][]
        }
      }
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * This creates a tag protection state for a repository.
   * This endpoint is only available to repository administrators.
   */
  readonly 'repos/create-tag-protection': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['tag-protection']
        }
      }
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description An optional glob pattern to match against when enforcing tag protection. */
          readonly pattern: string
        }
      }
    }
  }
  /**
   * This deletes a tag protection state for a repository.
   * This endpoint is only available to repository administrators.
   */
  readonly 'repos/delete-tag-protection': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        /** The unique identifier of the tag protection. */
        readonly tag_protection_id: components['parameters']['tag-protection-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * Gets a redirect URL to download a tar archive for a repository. If you omit `:ref`, the repository’s default branch (usually
   * `master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
   * the `Location` header to make a second `GET` request.
   * **Note**: For private repositories, these links are temporary and expire after five minutes.
   */
  readonly 'repos/download-tarball-archive': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        readonly ref: string
      }
    }
    readonly responses: {
      /** Response */
      readonly 302: never
    }
  }
  readonly 'repos/list-teams': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['team'][]
        }
      }
    }
  }
  readonly 'repos/get-all-topics': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
      readonly query: {
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['topic']
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  readonly 'repos/replace-all-topics': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['topic']
        }
      }
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed_simple']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (`[]`) to clear all topics from the repository. **Note:** Topic `names` cannot contain uppercase letters. */
          readonly names: readonly string[]
        }
      }
    }
  }
  /** A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original `owner`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://docs.github.com/articles/about-repository-transfers/). */
  readonly 'repos/transfer': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 202: {
        readonly content: {
          readonly 'application/json': components['schemas']['minimal-repository']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The username or organization name the repository will be transferred to. */
          readonly new_owner: string
          /** @description ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories. */
          readonly team_ids?: readonly number[]
        }
      }
    }
  }
  /**
   * Gets a redirect URL to download a zip archive for a repository. If you omit `:ref`, the repository’s default branch (usually
   * `master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
   * the `Location` header to make a second `GET` request.
   *
   * **Note**: For private repositories, these links are temporary and expire after five minutes. If the repository is empty, you will receive a 404 when you follow the redirect.
   */
  readonly 'repos/download-zipball-archive': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
        readonly ref: string
      }
    }
    readonly responses: {
      /** Response */
      readonly 302: never
    }
  }
  /**
   * Creates a new repository using a repository template. Use the `template_owner` and `template_repo` route parameters to specify the repository to use as the template. If the repository is not public, the authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository's information using the [Get a repository](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#get-a-repository) endpoint and check that the `is_template` key is `true`.
   *
   * **OAuth scope requirements**
   *
   * When using [OAuth](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
   *
   * *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
   * *   `repo` scope to create a private repository
   */
  readonly 'repos/create-using-template': {
    readonly parameters: {
      readonly path: {
        readonly template_owner: string
        readonly template_repo: string
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string
        }
        readonly content: {
          readonly 'application/json': components['schemas']['repository']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization. */
          readonly owner?: string
          /** @description The name of the new repository. */
          readonly name: string
          /** @description A short description of the new repository. */
          readonly description?: string
          /**
           * @description Set to `true` to include the directory structure and files from all branches in the template repository, and not just the default branch. Default: `false`.
           * @default false
           */
          readonly include_all_branches?: boolean
          /**
           * @description Either `true` to create a new private repository or `false` to create a new public one.
           * @default false
           */
          readonly private?: boolean
        }
      }
    }
  }
  /**
   * Lists all public repositories in the order that they were created.
   *
   * Note:
   * - For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise.
   * - Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of repositories.
   */
  readonly 'repos/list-public': {
    readonly parameters: {
      readonly query: {
        /** A repository ID. Only return repositories with an ID greater than this ID. */
        readonly since?: components['parameters']['since-repo']
        /** Specifies the types of repositories to return. This endpoint will only list repositories available to all users on the enterprise. */
        readonly visibility?: 'all' | 'public'
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {
          readonly Link?: string
        }
        readonly content: {
          readonly 'application/json': readonly components['schemas']['minimal-repository'][]
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 422: components['responses']['validation_failed']
    }
  }
  /** Lists all secrets available in an environment without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint. */
  readonly 'actions/list-environment-secrets': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the repository. */
        readonly repository_id: components['parameters']['repository-id']
        /** The name of the environment. */
        readonly environment_name: components['parameters']['environment-name']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': {
            readonly total_count: number
            readonly secrets: readonly components['schemas']['actions-secret'][]
          }
        }
      }
    }
  }
  /** Get the public key for an environment, which you need to encrypt environment secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint. */
  readonly 'actions/get-environment-public-key': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the repository. */
        readonly repository_id: components['parameters']['repository-id']
        /** The name of the environment. */
        readonly environment_name: components['parameters']['environment-name']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['actions-public-key']
        }
      }
    }
  }
  /** Gets a single environment secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint. */
  readonly 'actions/get-environment-secret': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the repository. */
        readonly repository_id: components['parameters']['repository-id']
        /** The name of the environment. */
        readonly environment_name: components['parameters']['environment-name']
        /** The name of the secret. */
        readonly secret_name: components['parameters']['secret-name']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['actions-secret']
        }
      }
    }
  }
  /**
   * Creates or updates an environment secret with an encrypted value. Encrypt your secret using
   * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
   * token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use
   * this endpoint.
   *
   * #### Example encrypting a secret using Node.js
   *
   * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
   *
   * ```
   * const sodium = require('tweetsodium');
   *
   * const key = "base64-encoded-public-key";
   * const value = "plain-text-secret";
   *
   * // Convert the message and key to Uint8Array's (Buffer implements that interface)
   * const messageBytes = Buffer.from(value);
   * const keyBytes = Buffer.from(key, 'base64');
   *
   * // Encrypt using LibSodium.
   * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
   *
   * // Base64 the encrypted secret
   * const encrypted = Buffer.from(encryptedBytes).toString('base64');
   *
   * console.log(encrypted);
   * ```
   *
   *
   * #### Example encrypting a secret using Python
   *
   * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
   *
   * ```
   * from base64 import b64encode
   * from nacl import encoding, public
   *
   * def encrypt(public_key: str, secret_value: str) -> str:
   *   """Encrypt a Unicode string using the public key."""
   *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
   *   sealed_box = public.SealedBox(public_key)
   *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
   *   return b64encode(encrypted).decode("utf-8")
   * ```
   *
   * #### Example encrypting a secret using C#
   *
   * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
   *
   * ```
   * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
   * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
   *
   * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
   *
   * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
   * ```
   *
   * #### Example encrypting a secret using Ruby
   *
   * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
   *
   * ```ruby
   * require "rbnacl"
   * require "base64"
   *
   * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
   * public_key = RbNaCl::PublicKey.new(key)
   *
   * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
   * encrypted_secret = box.encrypt("my_secret")
   *
   * # Print the base64 encoded secret
   * puts Base64.strict_encode64(encrypted_secret)
   * ```
   */
  readonly 'actions/create-or-update-environment-secret': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the repository. */
        readonly repository_id: components['parameters']['repository-id']
        /** The name of the environment. */
        readonly environment_name: components['parameters']['environment-name']
        /** The name of the secret. */
        readonly secret_name: components['parameters']['secret-name']
      }
    }
    readonly responses: {
      /** Response when creating a secret */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['empty-object']
        }
      }
      /** Response when updating a secret */
      readonly 204: never
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an environment public key](https://docs.github.com/enterprise-server@3.6/rest/reference/actions#get-an-environment-public-key) endpoint. */
          readonly encrypted_value: string
          /** @description ID of the key you used to encrypt the secret. */
          readonly key_id: string
        }
      }
    }
  }
  /** Deletes a secret in an environment using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint. */
  readonly 'actions/delete-environment-secret': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the repository. */
        readonly repository_id: components['parameters']['repository-id']
        /** The name of the environment. */
        readonly environment_name: components['parameters']['environment-name']
        /** The name of the secret. */
        readonly secret_name: components['parameters']['secret-name']
      }
    }
    readonly responses: {
      /** Default response */
      readonly 204: never
    }
  }
  /** **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change. */
  readonly 'enterprise-admin/list-provisioned-groups-enterprise': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
      }
      readonly query: {
        /** Used for pagination: the index of the first result to return. */
        readonly startIndex?: components['parameters']['start-index']
        /** Used for pagination: the number of results to return. */
        readonly count?: components['parameters']['count']
        /** filter results */
        readonly filter?: string
        /** attributes to exclude */
        readonly excludedAttributes?: string
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['scim-group-list-enterprise']
        }
      }
    }
  }
  /**
   * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
   *
   * Provision an enterprise group, and invite users to the group. This sends invitation emails to the email address of the invited users to join the GitHub organization that the SCIM group corresponds to.
   */
  readonly 'enterprise-admin/provision-and-invite-enterprise-group': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['scim-enterprise-group']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The SCIM schema URIs. */
          readonly schemas: readonly string[]
          /** @description The name of the SCIM group. This must match the GitHub organization that the group maps to. */
          readonly displayName: string
          readonly members?: readonly {
            /** @description The SCIM user ID for a user. */
            readonly value: string
          }[]
        }
      }
    }
  }
  /** **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change. */
  readonly 'enterprise-admin/get-provisioning-information-for-enterprise-group': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
        /** Identifier generated by the GitHub SCIM endpoint. */
        readonly scim_group_id: components['parameters']['scim-group-id']
      }
      readonly query: {
        /** Attributes to exclude. */
        readonly excludedAttributes?: string
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['scim-enterprise-group']
        }
      }
    }
  }
  /**
   * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
   *
   * Replaces an existing provisioned group’s information. You must provide all the information required for the group as if you were provisioning it for the first time. Any existing group information that you don't provide will be removed, including group membership. If you want to only update a specific attribute, use the [Update an attribute for a SCIM enterprise group](#update-an-attribute-for-a-scim-enterprise-group) endpoint instead.
   */
  readonly 'enterprise-admin/set-information-for-provisioned-enterprise-group': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
        /** Identifier generated by the GitHub SCIM endpoint. */
        readonly scim_group_id: components['parameters']['scim-group-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['scim-enterprise-group']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The SCIM schema URIs. */
          readonly schemas: readonly string[]
          /** @description The name of the SCIM group. This must match the GitHub organization that the group maps to. */
          readonly displayName: string
          readonly members?: readonly {
            /** @description The SCIM user ID for a user. */
            readonly value: string
          }[]
        }
      }
    }
  }
  /** **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change. */
  readonly 'enterprise-admin/delete-scim-group-from-enterprise': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
        /** Identifier generated by the GitHub SCIM endpoint. */
        readonly scim_group_id: components['parameters']['scim-group-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /**
   * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
   *
   * Allows you to change a provisioned group’s individual attributes. To change a group’s values, you must provide a specific Operations JSON format that contains at least one of the add, remove, or replace operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
   */
  readonly 'enterprise-admin/update-attribute-for-enterprise-group': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
        /** Identifier generated by the GitHub SCIM endpoint. */
        readonly scim_group_id: components['parameters']['scim-group-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['scim-enterprise-group']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The SCIM schema URIs. */
          readonly schemas: readonly string[]
          /** @description Array of [SCIM operations](https://tools.ietf.org/html/rfc7644#section-3.5.2). */
          readonly Operations: readonly {
            /** @enum {string} */
            readonly op: 'add' | 'Add' | 'remove' | 'Remove' | 'replace' | 'Replace'
            readonly path?: string
            /** @description Can be any value - string, number, array or object. */
            readonly value?: unknown
          }[]
        }
      }
    }
  }
  /**
   * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
   *
   * Retrieves a paginated list of all provisioned enterprise members, including pending invitations.
   *
   * When a user with a SAML-provisioned external identity leaves (or is removed from) an enterprise, the account's metadata is immediately removed. However, the returned list of user accounts might not always match the organization or enterprise member list you see on GitHub Enterprise Server. This can happen in certain cases where an external identity associated with an organization will not match an organization member:
   *   - When a user with a SCIM-provisioned external identity is removed from an enterprise, the account's metadata is preserved to allow the user to re-join the organization in the future.
   *   - When inviting a user to join an organization, you can expect to see their external identity in the results before they accept the invitation, or if the invitation is cancelled (or never accepted).
   *   - When a user is invited over SCIM, an external identity is created that matches with the invitee's email address. However, this identity is only linked to a user account when the user accepts the invitation by going through SAML SSO.
   *
   * The returned list of external identities can include an entry for a `null` user. These are unlinked SAML identities that are created when a user goes through the following Single Sign-On (SSO) process but does not sign in to their GitHub Enterprise Server account after completing SSO:
   *
   * 1. The user is granted access by the IdP and is not a member of the GitHub Enterprise Server enterprise.
   *
   * 1. The user attempts to access the GitHub Enterprise Server enterprise and initiates the SAML SSO process, and is not currently signed in to their GitHub Enterprise Server account.
   *
   * 1. After successfully authenticating with the SAML SSO IdP, the `null` external identity entry is created and the user is prompted to sign in to their GitHub Enterprise Server account:
   *    - If the user signs in, their GitHub Enterprise Server account is linked to this entry.
   *    - If the user does not sign in (or does not create a new account when prompted), they are not added to the GitHub Enterprise Server enterprise, and the external identity `null` entry remains in place.
   */
  readonly 'enterprise-admin/list-provisioned-identities-enterprise': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
      }
      readonly query: {
        /** Used for pagination: the index of the first result to return. */
        readonly startIndex?: components['parameters']['start-index']
        /** Used for pagination: the number of results to return. */
        readonly count?: components['parameters']['count']
        /** filter results */
        readonly filter?: string
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['scim-user-list-enterprise']
        }
      }
    }
  }
  /**
   * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
   *
   * Provision enterprise membership for a user, and send organization invitation emails to the email address.
   *
   * You can optionally include the groups a user will be invited to join. If you do not provide a list of `groups`, the user is provisioned for the enterprise, but no organization invitation emails will be sent.
   */
  readonly 'enterprise-admin/provision-and-invite-enterprise-user': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['scim-enterprise-user']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The SCIM schema URIs. */
          readonly schemas: readonly string[]
          /** @description The username for the user. */
          readonly userName: string
          readonly name: {
            /** @description The first name of the user. */
            readonly givenName: string
            /** @description The last name of the user. */
            readonly familyName: string
          }
          /** @description List of user emails. */
          readonly emails: readonly {
            /** @description The email address. */
            readonly value: string
            /** @description The type of email address. */
            readonly type: string
            /** @description Whether this email address is the primary address. */
            readonly primary: boolean
          }[]
          /** @description List of SCIM group IDs the user is a member of. */
          readonly groups?: readonly {
            readonly value?: string
          }[]
        }
      }
    }
  }
  /** **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change. */
  readonly 'enterprise-admin/get-provisioning-information-for-enterprise-user': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
        /** The unique identifier of the SCIM user. */
        readonly scim_user_id: components['parameters']['scim-user-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['scim-enterprise-user']
        }
      }
    }
  }
  /**
   * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
   *
   * Replaces an existing provisioned user's information. You must provide all the information required for the user as if you were provisioning them for the first time. Any existing user information that you don't provide will be removed. If you want to only update a specific attribute, use the [Update an attribute for a SCIM user](#update-an-attribute-for-an-enterprise-scim-user) endpoint instead.
   *
   * You must at least provide the required values for the user: `userName`, `name`, and `emails`.
   *
   * **Warning:** Setting `active: false` removes the user from the enterprise, deletes the external identity, and deletes the associated `{scim_user_id}`.
   */
  readonly 'enterprise-admin/set-information-for-provisioned-enterprise-user': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
        /** The unique identifier of the SCIM user. */
        readonly scim_user_id: components['parameters']['scim-user-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['scim-enterprise-user']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The SCIM schema URIs. */
          readonly schemas: readonly string[]
          /** @description The username for the user. */
          readonly userName: string
          readonly name: {
            /** @description The first name of the user. */
            readonly givenName: string
            /** @description The last name of the user. */
            readonly familyName: string
          }
          /** @description List of user emails. */
          readonly emails: readonly {
            /** @description The email address. */
            readonly value: string
            /** @description The type of email address. */
            readonly type: string
            /** @description Whether this email address is the primary address. */
            readonly primary: boolean
          }[]
          /** @description List of SCIM group IDs the user is a member of. */
          readonly groups?: readonly {
            readonly value?: string
          }[]
        }
      }
    }
  }
  /** **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change. */
  readonly 'enterprise-admin/delete-user-from-enterprise': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
        /** The unique identifier of the SCIM user. */
        readonly scim_user_id: components['parameters']['scim-user-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /**
   * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
   *
   * Allows you to change a provisioned user's individual attributes. To change a user's values, you must provide a specific `Operations` JSON format that contains at least one of the `add`, `remove`, or `replace` operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
   *
   * **Note:** Complicated SCIM `path` selectors that include filters are not supported. For example, a `path` selector defined as `"path": "emails[type eq \"work\"]"` will not work.
   *
   * **Warning:** If you set `active:false` using the `replace` operation (as shown in the JSON example below), it removes the user from the enterprise, deletes the external identity, and deletes the associated `:scim_user_id`.
   *
   * ```
   * {
   *   "Operations":[{
   *     "op":"replace",
   *     "value":{
   *       "active":false
   *     }
   *   }]
   * }
   * ```
   */
  readonly 'enterprise-admin/update-attribute-for-enterprise-user': {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components['parameters']['enterprise']
        /** The unique identifier of the SCIM user. */
        readonly scim_user_id: components['parameters']['scim-user-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['scim-enterprise-user']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The SCIM schema URIs. */
          readonly schemas: readonly string[]
          /** @description Array of [SCIM operations](https://tools.ietf.org/html/rfc7644#section-3.5.2). */
          readonly Operations: readonly { readonly [key: string]: unknown }[]
        }
      }
    }
  }
  /**
   * Searches for query terms inside of a file. This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#pagination).
   *
   * When searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.6/rest/reference/search#text-match-metadata).
   *
   * For example, if you want to find the definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery) repository, your query would look something like this:
   *
   * `q=addClass+in:file+language:js+repo:jquery/jquery`
   *
   * This query searches for the keyword `addClass` within a file's contents. The query limits the search to files where the language is JavaScript in the `jquery/jquery` repository.
   *
   * #### Considerations for code search
   *
   * Due to the complexity of searching code, there are a few restrictions on how searches are performed:
   *
   * *   Only the _default branch_ is considered. In most cases, this will be the `master` branch.
   * *   Only files smaller than 384 KB are searchable.
   * *   You must always include at least one search term when searching source code. For example, searching for [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [`amazing
   * language:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.
   */
  readonly 'search/code': {
    readonly parameters: {
      readonly query: {
        /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub Enterprise Server. The REST API supports the same qualifiers as the web interface for GitHub Enterprise Server. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@3.6/rest/reference/search#constructing-a-search-query). See "[Searching code](https://docs.github.com/enterprise-server@3.6/search-github/searching-on-github/searching-code)" for a detailed list of qualifiers. */
        readonly q: string
        /** Sorts the results of your query. Can only be `indexed`, which indicates how recently a file has been indexed by the GitHub Enterprise Server search infrastructure. Default: [best match](https://docs.github.com/enterprise-server@3.6/rest/reference/search#ranking-search-results) */
        readonly sort?: 'indexed'
        /** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */
        readonly order?: components['parameters']['order']
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': {
            readonly total_count: number
            readonly incomplete_results: boolean
            readonly items: readonly components['schemas']['code-search-result-item'][]
          }
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 403: components['responses']['forbidden']
      readonly 422: components['responses']['validation_failed']
      readonly 503: components['responses']['service_unavailable']
    }
  }
  /**
   * Find commits via various criteria on the default branch (usually `master`). This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#pagination).
   *
   * When searching for commits, you can get text match metadata for the **message** field when you provide the `text-match` media type. For more details about how to receive highlighted search results, see [Text match
   * metadata](https://docs.github.com/enterprise-server@3.6/rest/reference/search#text-match-metadata).
   *
   * For example, if you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:
   *
   * `q=repo:octocat/Spoon-Knife+css`
   */
  readonly 'search/commits': {
    readonly parameters: {
      readonly query: {
        /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub Enterprise Server. The REST API supports the same qualifiers as the web interface for GitHub Enterprise Server. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@3.6/rest/reference/search#constructing-a-search-query). See "[Searching commits](https://docs.github.com/enterprise-server@3.6/search-github/searching-on-github/searching-commits)" for a detailed list of qualifiers. */
        readonly q: string
        /** Sorts the results of your query by `author-date` or `committer-date`. Default: [best match](https://docs.github.com/enterprise-server@3.6/rest/reference/search#ranking-search-results) */
        readonly sort?: 'author-date' | 'committer-date'
        /** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */
        readonly order?: components['parameters']['order']
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': {
            readonly total_count: number
            readonly incomplete_results: boolean
            readonly items: readonly components['schemas']['commit-search-result-item'][]
          }
        }
      }
      readonly 304: components['responses']['not_modified']
    }
  }
  /**
   * Find issues by state and keyword. This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#pagination).
   *
   * When searching for issues, you can get text match metadata for the issue **title**, issue **body**, and issue **comment body** fields when you pass the `text-match` media type. For more details about how to receive highlighted
   * search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.6/rest/reference/search#text-match-metadata).
   *
   * For example, if you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.
   *
   * `q=windows+label:bug+language:python+state:open&sort=created&order=asc`
   *
   * This query searches for the keyword `windows`, within any open issue that is labeled as `bug`. The search runs across repositories whose primary language is Python. The results are sorted by creation date in ascending order, which means the oldest issues appear first in the search results.
   *
   * **Note:** For [user-to-server](https://docs.github.com/developers/apps/identifying-and-authorizing-users-for-github-apps#user-to-server-requests) GitHub App requests, you can't retrieve a combination of issues and pull requests in a single query. Requests that don't include the `is:issue` or `is:pull-request` qualifier will receive an HTTP `422 Unprocessable Entity` response. To get results for both issues and pull requests, you must send separate queries for issues and pull requests. For more information about the `is` qualifier, see "[Searching only issues or pull requests](https://docs.github.com/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests)."
   */
  readonly 'search/issues-and-pull-requests': {
    readonly parameters: {
      readonly query: {
        /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub Enterprise Server. The REST API supports the same qualifiers as the web interface for GitHub Enterprise Server. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@3.6/rest/reference/search#constructing-a-search-query). See "[Searching issues and pull requests](https://docs.github.com/enterprise-server@3.6/search-github/searching-on-github/searching-issues-and-pull-requests)" for a detailed list of qualifiers. */
        readonly q: string
        /** Sorts the results of your query by the number of `comments`, `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`, `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or `interactions`. You can also sort results by how recently the items were `created` or `updated`, Default: [best match](https://docs.github.com/enterprise-server@3.6/rest/reference/search#ranking-search-results) */
        readonly sort?:
          | 'comments'
          | 'reactions'
          | 'reactions-+1'
          | 'reactions--1'
          | 'reactions-smile'
          | 'reactions-thinking_face'
          | 'reactions-heart'
          | 'reactions-tada'
          | 'interactions'
          | 'created'
          | 'updated'
        /** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */
        readonly order?: components['parameters']['order']
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': {
            readonly total_count: number
            readonly incomplete_results: boolean
            readonly items: readonly components['schemas']['issue-search-result-item'][]
          }
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 403: components['responses']['forbidden']
      readonly 422: components['responses']['validation_failed']
      readonly 503: components['responses']['service_unavailable']
    }
  }
  /**
   * Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#pagination).
   *
   * When searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.6/rest/reference/search#text-match-metadata).
   *
   * For example, if you want to find labels in the `linguist` repository that match `bug`, `defect`, or `enhancement`. Your query might look like this:
   *
   * `q=bug+defect+enhancement&repository_id=64778136`
   *
   * The labels that best match the query appear first in the search results.
   */
  readonly 'search/labels': {
    readonly parameters: {
      readonly query: {
        /** The id of the repository. */
        readonly repository_id: number
        /** The search keywords. This endpoint does not accept qualifiers in the query. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@3.6/rest/reference/search#constructing-a-search-query). */
        readonly q: string
        /** Sorts the results of your query by when the label was `created` or `updated`. Default: [best match](https://docs.github.com/enterprise-server@3.6/rest/reference/search#ranking-search-results) */
        readonly sort?: 'created' | 'updated'
        /** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */
        readonly order?: components['parameters']['order']
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': {
            readonly total_count: number
            readonly incomplete_results: boolean
            readonly items: readonly components['schemas']['label-search-result-item'][]
          }
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
  }
  /**
   * Find repositories via various criteria. This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#pagination).
   *
   * When searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.6/rest/reference/search#text-match-metadata).
   *
   * For example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:
   *
   * `q=tetris+language:assembly&sort=stars&order=desc`
   *
   * This query searches for repositories with the word `tetris` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.
   */
  readonly 'search/repos': {
    readonly parameters: {
      readonly query: {
        /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub Enterprise Server. The REST API supports the same qualifiers as the web interface for GitHub Enterprise Server. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@3.6/rest/reference/search#constructing-a-search-query). See "[Searching for repositories](https://docs.github.com/articles/searching-for-repositories/)" for a detailed list of qualifiers. */
        readonly q: string
        /** Sorts the results of your query by number of `stars`, `forks`, or `help-wanted-issues` or how recently the items were `updated`. Default: [best match](https://docs.github.com/enterprise-server@3.6/rest/reference/search#ranking-search-results) */
        readonly sort?: 'stars' | 'forks' | 'help-wanted-issues' | 'updated'
        /** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */
        readonly order?: components['parameters']['order']
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': {
            readonly total_count: number
            readonly incomplete_results: boolean
            readonly items: readonly components['schemas']['repo-search-result-item'][]
          }
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 422: components['responses']['validation_failed']
      readonly 503: components['responses']['service_unavailable']
    }
  }
  /**
   * Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#pagination). See "[Searching topics](https://docs.github.com/articles/searching-topics/)" for a detailed list of qualifiers.
   *
   * When searching for topics, you can get text match metadata for the topic's **short\_description**, **description**, **name**, or **display\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.6/rest/reference/search#text-match-metadata).
   *
   * For example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this:
   *
   * `q=ruby+is:featured`
   *
   * This query searches for topics with the keyword `ruby` and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.
   */
  readonly 'search/topics': {
    readonly parameters: {
      readonly query: {
        /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub Enterprise Server. The REST API supports the same qualifiers as the web interface for GitHub Enterprise Server. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@3.6/rest/reference/search#constructing-a-search-query). */
        readonly q: string
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': {
            readonly total_count: number
            readonly incomplete_results: boolean
            readonly items: readonly components['schemas']['topic-search-result-item'][]
          }
        }
      }
      readonly 304: components['responses']['not_modified']
    }
  }
  /**
   * Find users via various criteria. This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#pagination).
   *
   * When searching for users, you can get text match metadata for the issue **login**, public **email**, and **name** fields when you pass the `text-match` media type. For more details about highlighting search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.6/rest/reference/search#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.6/rest/reference/search#text-match-metadata).
   *
   * For example, if you're looking for a list of popular users, you might try this query:
   *
   * `q=tom+repos:%3E42+followers:%3E1000`
   *
   * This query searches for users with the name `tom`. The results are restricted to users with more than 42 repositories and over 1,000 followers.
   */
  readonly 'search/users': {
    readonly parameters: {
      readonly query: {
        /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub Enterprise Server. The REST API supports the same qualifiers as the web interface for GitHub Enterprise Server. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@3.6/rest/reference/search#constructing-a-search-query). See "[Searching users](https://docs.github.com/enterprise-server@3.6/search-github/searching-on-github/searching-users)" for a detailed list of qualifiers. */
        readonly q: string
        /** Sorts the results of your query by number of `followers` or `repositories`, or when the person `joined` GitHub Enterprise Server. Default: [best match](https://docs.github.com/enterprise-server@3.6/rest/reference/search#ranking-search-results) */
        readonly sort?: 'followers' | 'repositories' | 'joined'
        /** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */
        readonly order?: components['parameters']['order']
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': {
            readonly total_count: number
            readonly incomplete_results: boolean
            readonly items: readonly components['schemas']['user-search-result-item'][]
          }
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 422: components['responses']['validation_failed']
      readonly 503: components['responses']['service_unavailable']
    }
  }
  /**
   * This endpoint allows you to check the status of the most recent configuration process:
   *
   * Note that you may need to wait several seconds after you start a process before you can check its status.
   *
   * The different statuses are:
   *
   * | Status        | Description                       |
   * | ------------- | --------------------------------- |
   * | `PENDING`     | The job has not started yet       |
   * | `CONFIGURING` | The job is running                |
   * | `DONE`        | The job has finished correctly    |
   * | `FAILED`      | The job has finished unexpectedly |
   */
  readonly 'enterprise-admin/get-configuration-status': {
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['configuration-status']
        }
      }
    }
  }
  /** This endpoint allows you to start a configuration process at any time for your updated settings to take effect: */
  readonly 'enterprise-admin/start-configuration-process': {
    readonly responses: {
      /** Response */
      readonly 202: unknown
    }
  }
  /** Check your installation's maintenance status: */
  readonly 'enterprise-admin/get-maintenance-status': {
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['maintenance-status']
        }
      }
    }
  }
  /** **Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode). */
  readonly 'enterprise-admin/enable-or-disable-maintenance-mode': {
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['maintenance-status']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/x-www-form-urlencoded': {
          /**
           * @description A JSON string with the attributes `enabled` and `when`.
           *
           * The possible values for `enabled` are `true` and `false`. When it's `false`, the attribute `when` is ignored and the maintenance mode is turned off. `when` defines the time period when the maintenance was enabled.
           *
           * The possible values for `when` are `now` or any date parseable by [mojombo/chronic](https://github.com/mojombo/chronic).
           */
          readonly maintenance: string
        }
      }
    }
  }
  /**
   * Gets the settings for your instance. To change settings, see the [Set settings endpoint](https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#set-settings).
   *
   * **Note:** You cannot retrieve the management console password with the Enterprise administration API.
   */
  readonly 'enterprise-admin/get-settings': {
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['enterprise-settings']
        }
      }
    }
  }
  /**
   * Applies settings on your instance. For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#get-settings).
   *
   * **Notes:**
   *
   * - The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode).
   * - You cannot set the management console password with the Enterprise administration API. Use the `ghe-set-password` utility to change the management console password. For more information, see "[Command-line utilities](https://docs.github.com/enterprise-server@3.6/admin/configuration/configuring-your-enterprise/command-line-utilities#ghe-set-password)."
   */
  readonly 'enterprise-admin/set-settings': {
    readonly responses: {
      /** Response */
      readonly 204: never
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/x-www-form-urlencoded': {
          /** @description A JSON string with the new settings. Note that you only need to pass the specific settings you want to modify. For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#get-settings). */
          readonly settings: string
        }
      }
    }
  }
  readonly 'enterprise-admin/get-all-authorized-ssh-keys': {
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['ssh-key'][]
        }
      }
    }
  }
  /** **Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode). */
  readonly 'enterprise-admin/add-authorized-ssh-key': {
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['ssh-key'][]
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/x-www-form-urlencoded': {
          /** @description The public SSH key. */
          readonly authorized_key: string
        }
      }
    }
  }
  /** **Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode). */
  readonly 'enterprise-admin/remove-authorized-ssh-key': {
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['ssh-key'][]
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/x-www-form-urlencoded': {
          /** @description The public SSH key. */
          readonly authorized_key: string
        }
      }
    }
  }
  /**
   * When you boot a GitHub instance for the first time, you can use the following endpoint to upload a license.
   *
   * Note that you need to `POST` to [`/setup/api/configure`](https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#start-a-configuration-process) to start the actual configuration process.
   *
   * When using this endpoint, your GitHub instance must have a password set. This can be accomplished two ways:
   *
   * 1.  If you're working directly with the API before accessing the web interface, you must pass in the password parameter to set your password.
   * 2.  If you set up your instance via the web interface before accessing the API, your calls to this endpoint do not need the password parameter.
   *
   * **Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode).
   */
  readonly 'enterprise-admin/create-enterprise-server-license': {
    readonly responses: {
      /** Response */
      readonly 202: unknown
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/x-www-form-urlencoded': {
          /** @description The content of your _.ghl_ license file. */
          readonly license: string
          /** @description You **must** provide a password _only if_ you are uploading your license for the first time. If you previously set a password through the web interface, you don't need this parameter. */
          readonly password?: string
          /** @description An optional JSON string containing the installation settings. For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@3.6/rest/reference/enterprise-admin#get-settings). */
          readonly settings?: string
        }
      }
    }
  }
  /**
   * This API upgrades your license and also triggers the configuration process.
   *
   * **Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode).
   */
  readonly 'enterprise-admin/upgrade-license': {
    readonly responses: {
      /** Response */
      readonly 202: unknown
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/x-www-form-urlencoded': {
          /** @description The content of your new _.ghl_ license file. */
          readonly license?: string
        }
      }
    }
  }
  /** **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#get-a-team-by-name) endpoint. */
  readonly 'teams/get-legacy': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the team. */
        readonly team_id: components['parameters']['team-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['team-full']
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#delete-a-team) endpoint.
   *
   * To delete a team, the authenticated user must be an organization owner or team maintainer.
   *
   * If you are an organization owner, deleting a parent team will delete all of its child teams as well.
   */
  readonly 'teams/delete-legacy': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the team. */
        readonly team_id: components['parameters']['team-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
  }
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#update-a-team) endpoint.
   *
   * To edit a team, the authenticated user must either be an organization owner or a team maintainer.
   *
   * **Note:** With nested teams, the `privacy` for parent teams cannot be `secret`.
   */
  readonly 'teams/update-legacy': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the team. */
        readonly team_id: components['parameters']['team-id']
      }
    }
    readonly responses: {
      /** Response when the updated information already exists */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['team-full']
        }
      }
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['team-full']
        }
      }
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The name of the team. */
          readonly name: string
          /** @description The description of the team. */
          readonly description?: string
          /**
           * @description The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:
           * **For a non-nested team:**
           * \* `secret` - only visible to organization owners and members of this team.
           * \* `closed` - visible to all members of this organization.
           * **For a parent or child team:**
           * \* `closed` - visible to all members of this organization.
           * @enum {string}
           */
          readonly privacy?: 'secret' | 'closed'
          /**
           * @description **Deprecated**. The permission that new repositories will be added to the team with when none is specified.
           * @default pull
           * @enum {string}
           */
          readonly permission?: 'pull' | 'push' | 'admin'
          /** @description The ID of a team to set as the parent team. */
          readonly parent_team_id?: number | null
        }
      }
    }
  }
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List discussions`](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#list-discussions) endpoint.
   *
   * List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   */
  readonly 'teams/list-discussions-legacy': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the team. */
        readonly team_id: components['parameters']['team-id']
      }
      readonly query: {
        /** The direction to sort the results by. */
        readonly direction?: components['parameters']['direction']
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['team-discussion'][]
        }
      }
    }
  }
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create a discussion`](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#create-a-discussion) endpoint.
   *
   * Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
   */
  readonly 'teams/create-discussion-legacy': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the team. */
        readonly team_id: components['parameters']['team-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['team-discussion']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The discussion post's title. */
          readonly title: string
          /** @description The discussion post's body text. */
          readonly body: string
          /**
           * @description Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
           * @default false
           */
          readonly private?: boolean
        }
      }
    }
  }
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#get-a-discussion) endpoint.
   *
   * Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   */
  readonly 'teams/get-discussion-legacy': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the team. */
        readonly team_id: components['parameters']['team-id']
        /** The number that identifies the discussion. */
        readonly discussion_number: components['parameters']['discussion-number']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['team-discussion']
        }
      }
    }
  }
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Delete a discussion`](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#delete-a-discussion) endpoint.
   *
   * Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   */
  readonly 'teams/delete-discussion-legacy': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the team. */
        readonly team_id: components['parameters']['team-id']
        /** The number that identifies the discussion. */
        readonly discussion_number: components['parameters']['discussion-number']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#update-a-discussion) endpoint.
   *
   * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   */
  readonly 'teams/update-discussion-legacy': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the team. */
        readonly team_id: components['parameters']['team-id']
        /** The number that identifies the discussion. */
        readonly discussion_number: components['parameters']['discussion-number']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['team-discussion']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The discussion post's title. */
          readonly title?: string
          /** @description The discussion post's body text. */
          readonly body?: string
        }
      }
    }
  }
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#list-discussion-comments) endpoint.
   *
   * List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   */
  readonly 'teams/list-discussion-comments-legacy': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the team. */
        readonly team_id: components['parameters']['team-id']
        /** The number that identifies the discussion. */
        readonly discussion_number: components['parameters']['discussion-number']
      }
      readonly query: {
        /** The direction to sort the results by. */
        readonly direction?: components['parameters']['direction']
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['team-discussion-comment'][]
        }
      }
    }
  }
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#create-a-discussion-comment) endpoint.
   *
   * Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.6/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
   */
  readonly 'teams/create-discussion-comment-legacy': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the team. */
        readonly team_id: components['parameters']['team-id']
        /** The number that identifies the discussion. */
        readonly discussion_number: components['parameters']['discussion-number']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['team-discussion-comment']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The discussion comment's body text. */
          readonly body: string
        }
      }
    }
  }
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#get-a-discussion-comment) endpoint.
   *
   * Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   */
  readonly 'teams/get-discussion-comment-legacy': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the team. */
        readonly team_id: components['parameters']['team-id']
        /** The number that identifies the discussion. */
        readonly discussion_number: components['parameters']['discussion-number']
        /** The number that identifies the comment. */
        readonly comment_number: components['parameters']['comment-number']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['team-discussion-comment']
        }
      }
    }
  }
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#delete-a-discussion-comment) endpoint.
   *
   * Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   */
  readonly 'teams/delete-discussion-comment-legacy': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the team. */
        readonly team_id: components['parameters']['team-id']
        /** The number that identifies the discussion. */
        readonly discussion_number: components['parameters']['discussion-number']
        /** The number that identifies the comment. */
        readonly comment_number: components['parameters']['comment-number']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#update-a-discussion-comment) endpoint.
   *
   * Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   */
  readonly 'teams/update-discussion-comment-legacy': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the team. */
        readonly team_id: components['parameters']['team-id']
        /** The number that identifies the discussion. */
        readonly discussion_number: components['parameters']['discussion-number']
        /** The number that identifies the comment. */
        readonly comment_number: components['parameters']['comment-number']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['team-discussion-comment']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The discussion comment's body text. */
          readonly body: string
        }
      }
    }
  }
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion comment`](https://docs.github.com/enterprise-server@3.6/rest/reference/reactions#list-reactions-for-a-team-discussion-comment) endpoint.
   *
   * List the reactions to a [team discussion comment](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#discussion-comments). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   */
  readonly 'reactions/list-for-team-discussion-comment-legacy': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the team. */
        readonly team_id: components['parameters']['team-id']
        /** The number that identifies the discussion. */
        readonly discussion_number: components['parameters']['discussion-number']
        /** The number that identifies the comment. */
        readonly comment_number: components['parameters']['comment-number']
      }
      readonly query: {
        /** Returns a single [reaction type](https://docs.github.com/enterprise-server@3.6/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment. */
        readonly content?: '+1' | '-1' | 'laugh' | 'confused' | 'heart' | 'hooray' | 'rocket' | 'eyes'
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['reaction'][]
        }
      }
    }
  }
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Create reaction for a team discussion comment](https://docs.github.com/enterprise-server@3.6/rest/reference/reactions#create-reaction-for-a-team-discussion-comment)" endpoint.
   *
   * Create a reaction to a [team discussion comment](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.
   */
  readonly 'reactions/create-for-team-discussion-comment-legacy': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the team. */
        readonly team_id: components['parameters']['team-id']
        /** The number that identifies the discussion. */
        readonly discussion_number: components['parameters']['discussion-number']
        /** The number that identifies the comment. */
        readonly comment_number: components['parameters']['comment-number']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['reaction']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description The [reaction type](https://docs.github.com/enterprise-server@3.6/rest/reference/reactions#reaction-types) to add to the team discussion comment.
           * @enum {string}
           */
          readonly content: '+1' | '-1' | 'laugh' | 'confused' | 'heart' | 'hooray' | 'rocket' | 'eyes'
        }
      }
    }
  }
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://docs.github.com/enterprise-server@3.6/rest/reference/reactions#list-reactions-for-a-team-discussion) endpoint.
   *
   * List the reactions to a [team discussion](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   */
  readonly 'reactions/list-for-team-discussion-legacy': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the team. */
        readonly team_id: components['parameters']['team-id']
        /** The number that identifies the discussion. */
        readonly discussion_number: components['parameters']['discussion-number']
      }
      readonly query: {
        /** Returns a single [reaction type](https://docs.github.com/enterprise-server@3.6/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion. */
        readonly content?: '+1' | '-1' | 'laugh' | 'confused' | 'heart' | 'hooray' | 'rocket' | 'eyes'
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['reaction'][]
        }
      }
    }
  }
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion`](https://docs.github.com/enterprise-server@3.6/rest/reference/reactions#create-reaction-for-a-team-discussion) endpoint.
   *
   * Create a reaction to a [team discussion](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion.
   */
  readonly 'reactions/create-for-team-discussion-legacy': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the team. */
        readonly team_id: components['parameters']['team-id']
        /** The number that identifies the discussion. */
        readonly discussion_number: components['parameters']['discussion-number']
      }
    }
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['reaction']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description The [reaction type](https://docs.github.com/enterprise-server@3.6/rest/reference/reactions#reaction-types) to add to the team discussion.
           * @enum {string}
           */
          readonly content: '+1' | '-1' | 'laugh' | 'confused' | 'heart' | 'hooray' | 'rocket' | 'eyes'
        }
      }
    }
  }
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team members`](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#list-team-members) endpoint.
   *
   * Team members will include the members of child teams.
   */
  readonly 'teams/list-members-legacy': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the team. */
        readonly team_id: components['parameters']['team-id']
      }
      readonly query: {
        /** Filters members returned by their role in the team. */
        readonly role?: 'member' | 'maintainer' | 'all'
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['simple-user'][]
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * The "Get team member" endpoint (described below) is deprecated.
   *
   * We recommend using the [Get team membership for a user](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.
   *
   * To list members in a team, the team must be visible to the authenticated user.
   */
  readonly 'teams/get-member-legacy': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the team. */
        readonly team_id: components['parameters']['team-id']
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
    }
    readonly responses: {
      /** if user is a member */
      readonly 204: never
      /** if user is not a member */
      readonly 404: unknown
    }
  }
  /**
   * The "Add team member" endpoint (described below) is deprecated.
   *
   * We recommend using the [Add or update team membership for a user](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.
   *
   * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they're changing. The person being added to the team must be a member of the team's organization.
   *
   * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
   *
   * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#http-verbs)."
   */
  readonly 'teams/add-member-legacy': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the team. */
        readonly team_id: components['parameters']['team-id']
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 403: components['responses']['forbidden']
      /** Not Found if team synchronization is set up */
      readonly 404: unknown
      /** Unprocessable Entity if you attempt to add an organization to a team or you attempt to add a user to a team when they are not a member of at least one other team in the same organization */
      readonly 422: unknown
    }
  }
  /**
   * The "Remove team member" endpoint (described below) is deprecated.
   *
   * We recommend using the [Remove team membership for a user](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.
   *
   * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * To remove a team member, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.
   *
   * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
   */
  readonly 'teams/remove-member-legacy': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the team. */
        readonly team_id: components['parameters']['team-id']
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      /** Not Found if team synchronization is setup */
      readonly 404: unknown
    }
  }
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#get-team-membership-for-a-user) endpoint.
   *
   * Team members will include the members of child teams.
   *
   * To get a user's membership with a team, the team must be visible to the authenticated user.
   *
   * **Note:**
   * The response contains the `state` of the membership and the member's `role`.
   *
   * The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#create-a-team).
   */
  readonly 'teams/get-membership-for-user-legacy': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the team. */
        readonly team_id: components['parameters']['team-id']
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['team-membership']
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint.
   *
   * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * If the user is already a member of the team's organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.
   *
   * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
   *
   * If the user is unaffiliated with the team's organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the "pending" state until the user accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.
   *
   * If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
   */
  readonly 'teams/add-or-update-membership-for-user-legacy': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the team. */
        readonly team_id: components['parameters']['team-id']
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['team-membership']
        }
      }
      /** Forbidden if team synchronization is set up */
      readonly 403: unknown
      readonly 404: components['responses']['not_found']
      /** Unprocessable Entity if you attempt to add an organization to a team */
      readonly 422: unknown
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description The role that this user should have in the team.
           * @default member
           * @enum {string}
           */
          readonly role?: 'member' | 'maintainer'
        }
      }
    }
  }
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#remove-team-membership-for-a-user) endpoint.
   *
   * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
   *
   * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
   */
  readonly 'teams/remove-membership-for-user-legacy': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the team. */
        readonly team_id: components['parameters']['team-id']
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      /** if team synchronization is set up */
      readonly 403: unknown
    }
  }
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team projects`](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#list-team-projects) endpoint.
   *
   * Lists the organization projects for a team.
   */
  readonly 'teams/list-projects-legacy': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the team. */
        readonly team_id: components['parameters']['team-id']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['team-project'][]
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#check-team-permissions-for-a-project) endpoint.
   *
   * Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
   */
  readonly 'teams/check-permissions-for-project-legacy': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the team. */
        readonly team_id: components['parameters']['team-id']
        /** The unique identifier of the project. */
        readonly project_id: components['parameters']['project-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['team-project']
        }
      }
      /** Not Found if project is not managed by this team */
      readonly 404: unknown
    }
  }
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team project permissions](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#add-or-update-team-project-permissions) endpoint.
   *
   * Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
   */
  readonly 'teams/add-or-update-project-permissions-legacy': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the team. */
        readonly team_id: components['parameters']['team-id']
        /** The unique identifier of the project. */
        readonly project_id: components['parameters']['project-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      /** Forbidden if the project is not owned by the organization */
      readonly 403: {
        readonly content: {
          readonly 'application/json': {
            readonly message?: string
            readonly documentation_url?: string
          }
        }
      }
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#http-verbs)."
           * @enum {string}
           */
          readonly permission?: 'read' | 'write' | 'admin'
        }
      }
    }
  }
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a project from a team](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#remove-a-project-from-a-team) endpoint.
   *
   * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.
   */
  readonly 'teams/remove-project-legacy': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the team. */
        readonly team_id: components['parameters']['team-id']
        /** The unique identifier of the project. */
        readonly project_id: components['parameters']['project-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
  }
  /** **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#list-team-repositories) endpoint. */
  readonly 'teams/list-repos-legacy': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the team. */
        readonly team_id: components['parameters']['team-id']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['minimal-repository'][]
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * **Note**: Repositories inherited through a parent team will also be checked.
   *
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#check-team-permissions-for-a-repository) endpoint.
   *
   * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/enterprise-server@3.6/rest/overview/media-types/) via the `Accept` header:
   */
  readonly 'teams/check-permissions-for-repo-legacy': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the team. */
        readonly team_id: components['parameters']['team-id']
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Alternative response with extra repository information */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['team-repository']
        }
      }
      /** Response if repository is managed by this team */
      readonly 204: never
      /** Not Found if repository is not managed by this team */
      readonly 404: unknown
    }
  }
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Add or update team repository permissions](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#add-or-update-team-repository-permissions)" endpoint.
   *
   * To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization.
   *
   * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#http-verbs)."
   */
  readonly 'teams/add-or-update-repo-permissions-legacy': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the team. */
        readonly team_id: components['parameters']['team-id']
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 403: components['responses']['forbidden']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description The permission to grant the team on this repository. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
           * @enum {string}
           */
          readonly permission?: 'pull' | 'push' | 'admin'
        }
      }
    }
  }
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#remove-a-repository-from-a-team) endpoint.
   *
   * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.
   */
  readonly 'teams/remove-repo-legacy': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the team. */
        readonly team_id: components['parameters']['team-id']
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /** **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List child teams`](https://docs.github.com/enterprise-server@3.6/rest/reference/teams#list-child-teams) endpoint. */
  readonly 'teams/list-child-legacy': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the team. */
        readonly team_id: components['parameters']['team-id']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** if child teams exist */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['team'][]
        }
      }
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
  }
  /**
   * If the authenticated user is authenticated through basic authentication or OAuth with the `user` scope, then the response lists public and private profile information.
   *
   * If the authenticated user is authenticated through OAuth without the `user` scope, then the response lists only public profile information.
   */
  readonly 'users/get-authenticated': {
    readonly parameters: {}
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['private-user'] | components['schemas']['public-user']
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
    }
  }
  /** **Note:** If your email is set to private and you send an `email` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API. */
  readonly 'users/update-authenticated': {
    readonly parameters: {}
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['private-user']
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description The new name of the user.
           * @example Omar Jahandar
           */
          readonly name?: string
          /**
           * @description The publicly visible email address of the user.
           * @example omar@example.com
           */
          readonly email?: string
          /**
           * @description The new blog URL of the user.
           * @example blog.example.com
           */
          readonly blog?: string
          /**
           * @description The new Twitter username of the user.
           * @example therealomarj
           */
          readonly twitter_username?: string | null
          /**
           * @description The new company of the user.
           * @example Acme corporation
           */
          readonly company?: string
          /**
           * @description The new location of the user.
           * @example Berlin, Germany
           */
          readonly location?: string
          /** @description The new hiring availability of the user. */
          readonly hireable?: boolean
          /** @description The new short biography of the user. */
          readonly bio?: string
        }
      }
    }
  }
  /** Lists all of your email addresses, and specifies which one is visible to the public. This endpoint is accessible with the `user:email` scope. */
  readonly 'users/list-emails-for-authenticated-user': {
    readonly parameters: {
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['email'][]
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
    }
  }
  /** This endpoint is accessible with the `user` scope. */
  readonly 'users/add-email-for-authenticated-user': {
    readonly parameters: {}
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['email'][]
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json':
          | {
              /**
               * @description Adds one or more email addresses to your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key.
               * @example []
               */
              readonly emails: readonly string[]
            }
          | readonly string[]
          | string
      }
    }
  }
  /** This endpoint is accessible with the `user` scope. */
  readonly 'users/delete-email-for-authenticated-user': {
    readonly parameters: {}
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json':
          | {
              /** @description Email addresses associated with the GitHub user account. */
              readonly emails: readonly string[]
            }
          | readonly string[]
          | string
      }
    }
  }
  /** Lists the people following the authenticated user. */
  readonly 'users/list-followers-for-authenticated-user': {
    readonly parameters: {
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['simple-user'][]
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
    }
  }
  /** Lists the people who the authenticated user follows. */
  readonly 'users/list-followed-by-authenticated-user': {
    readonly parameters: {
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['simple-user'][]
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
    }
  }
  readonly 'users/check-person-is-followed-by-authenticated': {
    readonly parameters: {
      readonly path: {
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
    }
    readonly responses: {
      /** if the person is followed by the authenticated user */
      readonly 204: never
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
      /** if the person is not followed by the authenticated user */
      readonly 404: {
        readonly content: {
          readonly 'application/json': components['schemas']['basic-error']
        }
      }
    }
  }
  /**
   * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#http-verbs)."
   *
   * Following a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.
   */
  readonly 'users/follow': {
    readonly parameters: {
      readonly path: {
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
    }
  }
  /** Unfollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope. */
  readonly 'users/unfollow': {
    readonly parameters: {
      readonly path: {
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
    }
  }
  /** Lists the current user's GPG keys. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */
  readonly 'users/list-gpg-keys-for-authenticated-user': {
    readonly parameters: {
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['gpg-key'][]
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
    }
  }
  /** Adds a GPG key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:gpg_key` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */
  readonly 'users/create-gpg-key-for-authenticated-user': {
    readonly parameters: {}
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['gpg-key']
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description A descriptive name for the new key. */
          readonly name?: string
          /** @description A GPG key in ASCII-armored format. */
          readonly armored_public_key: string
        }
      }
    }
  }
  /** View extended details for a single GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */
  readonly 'users/get-gpg-key-for-authenticated-user': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the GPG key. */
        readonly gpg_key_id: components['parameters']['gpg-key-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['gpg-key']
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
    }
  }
  /** Removes a GPG key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:gpg_key` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */
  readonly 'users/delete-gpg-key-for-authenticated-user': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the GPG key. */
        readonly gpg_key_id: components['parameters']['gpg-key-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
  }
  /**
   * Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
   *
   * You must use a [user-to-server OAuth access token](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
   *
   * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
   *
   * You can find the permissions for the installation under the `permissions` key.
   */
  readonly 'apps/list-installations-for-authenticated-user': {
    readonly parameters: {
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** You can find the permissions for the installation under the `permissions` key. */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': {
            readonly total_count: number
            readonly installations: readonly components['schemas']['installation'][]
          }
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
    }
  }
  /**
   * List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.
   *
   * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
   *
   * You must use a [user-to-server OAuth access token](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
   *
   * The access the user has to each repository is included in the hash under the `permissions` key.
   */
  readonly 'apps/list-installation-repos-for-authenticated-user': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the installation. */
        readonly installation_id: components['parameters']['installation-id']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** The access the user has to each repository is included in the hash under the `permissions` key. */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': {
            readonly total_count: number
            readonly repository_selection?: string
            readonly repositories: readonly components['schemas']['repository'][]
          }
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * Add a single repository to an installation. The authenticated user must have admin access to the repository.
   *
   * You must use a personal access token (which you can create via the [command line](https://docs.github.com/enterprise-server@3.6/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/enterprise-server@3.6/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
   */
  readonly 'apps/add-repo-to-installation-for-authenticated-user': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the installation. */
        readonly installation_id: components['parameters']['installation-id']
        /** The unique identifier of the repository. */
        readonly repository_id: components['parameters']['repository-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 304: components['responses']['not_modified']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * Remove a single repository from an installation. The authenticated user must have admin access to the repository.
   *
   * You must use a personal access token (which you can create via the [command line](https://docs.github.com/enterprise-server@3.6/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/enterprise-server@3.6/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
   */
  readonly 'apps/remove-repo-from-installation-for-authenticated-user': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the installation. */
        readonly installation_id: components['parameters']['installation-id']
        /** The unique identifier of the repository. */
        readonly repository_id: components['parameters']['repository-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 304: components['responses']['not_modified']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * List issues across owned and member repositories assigned to the authenticated user.
   *
   * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
   * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
   * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
   * request id, use the "[List pull requests](https://docs.github.com/enterprise-server@3.6/rest/reference/pulls#list-pull-requests)" endpoint.
   */
  readonly 'issues/list-for-authenticated-user': {
    readonly parameters: {
      readonly query: {
        /** Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation. */
        readonly filter?: 'assigned' | 'created' | 'mentioned' | 'subscribed' | 'repos' | 'all'
        /** Indicates the state of the issues to return. */
        readonly state?: 'open' | 'closed' | 'all'
        /** A list of comma separated label names. Example: `bug,ui,@high` */
        readonly labels?: components['parameters']['labels']
        /** What to sort results by. */
        readonly sort?: 'created' | 'updated' | 'comments'
        /** The direction to sort the results by. */
        readonly direction?: components['parameters']['direction']
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        readonly since?: components['parameters']['since']
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['issue'][]
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 404: components['responses']['not_found']
    }
  }
  /** Lists the public SSH keys for the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */
  readonly 'users/list-public-ssh-keys-for-authenticated-user': {
    readonly parameters: {
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['key'][]
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
    }
  }
  /** Adds a public SSH key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:public_key` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */
  readonly 'users/create-public-ssh-key-for-authenticated-user': {
    readonly parameters: {}
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['key']
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description A descriptive name for the new key.
           * @example Personal MacBook Air
           */
          readonly title?: string
          /** @description The public SSH key to add to your GitHub account. */
          readonly key: string
        }
      }
    }
  }
  /** View extended details for a single public SSH key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */
  readonly 'users/get-public-ssh-key-for-authenticated-user': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the key. */
        readonly key_id: components['parameters']['key-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['key']
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
    }
  }
  /** Removes a public SSH key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:public_key` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */
  readonly 'users/delete-public-ssh-key-for-authenticated-user': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the key. */
        readonly key_id: components['parameters']['key-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
    }
  }
  readonly 'orgs/list-memberships-for-authenticated-user': {
    readonly parameters: {
      readonly query: {
        /** Indicates the state of the memberships to return. If not specified, the API returns both active and pending memberships. */
        readonly state?: 'active' | 'pending'
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['org-membership'][]
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
      readonly 422: components['responses']['validation_failed']
    }
  }
  readonly 'orgs/get-membership-for-authenticated-user': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['org-membership']
        }
      }
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
    }
  }
  readonly 'orgs/update-membership-for-authenticated-user': {
    readonly parameters: {
      readonly path: {
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['org-membership']
        }
      }
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description The state that the membership should be in. Only `"active"` will be accepted.
           * @enum {string}
           */
          readonly state: 'active'
        }
      }
    }
  }
  /** Lists all migrations a user has started. */
  readonly 'migrations/list-for-authenticated-user': {
    readonly parameters: {
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['migration'][]
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
    }
  }
  /** Initiates the generation of a user migration archive. */
  readonly 'migrations/start-for-authenticated-user': {
    readonly parameters: {}
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['migration']
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description Lock the repositories being migrated at the start of the migration
           * @example true
           */
          readonly lock_repositories?: boolean
          /**
           * @description Indicates whether metadata should be excluded and only git source should be included for the migration.
           * @example true
           */
          readonly exclude_metadata?: boolean
          /**
           * @description Indicates whether the repository git data should be excluded from the migration.
           * @example true
           */
          readonly exclude_git_data?: boolean
          /**
           * @description Do not include attachments in the migration
           * @example true
           */
          readonly exclude_attachments?: boolean
          /**
           * @description Do not include releases in the migration
           * @example true
           */
          readonly exclude_releases?: boolean
          /**
           * @description Indicates whether projects owned by the organization or users should be excluded.
           * @example true
           */
          readonly exclude_owner_projects?: boolean
          /**
           * @description Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).
           * @default false
           * @example true
           */
          readonly org_metadata_only?: boolean
          /**
           * @description Exclude attributes from the API response to improve performance
           * @example [
           *   "repositories"
           * ]
           */
          readonly exclude?: readonly 'repositories'[]
          readonly repositories: readonly string[]
        }
      }
    }
  }
  /**
   * Fetches the URL to download the migration archive as a `tar.gz` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:
   *
   * *   attachments
   * *   bases
   * *   commit\_comments
   * *   issue\_comments
   * *   issue\_events
   * *   issues
   * *   milestones
   * *   organizations
   * *   projects
   * *   protected\_branches
   * *   pull\_request\_reviews
   * *   pull\_requests
   * *   releases
   * *   repositories
   * *   review\_comments
   * *   schema
   * *   users
   *
   * The archive will also contain an `attachments` directory that includes all attachment files uploaded to GitHub.com and a `repositories` directory that contains the repository's Git data.
   */
  readonly 'migrations/get-archive-for-authenticated-user': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the migration. */
        readonly migration_id: components['parameters']['migration-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 302: never
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
    }
  }
  /** Lists all the repositories for this user migration. */
  readonly 'migrations/list-repos-for-authenticated-user': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the migration. */
        readonly migration_id: components['parameters']['migration-id']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['minimal-repository'][]
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * List organizations for the authenticated user.
   *
   * **OAuth scope requirements**
   *
   * This only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope. OAuth requests with insufficient scope receive a `403 Forbidden` response.
   */
  readonly 'orgs/list-for-authenticated-user': {
    readonly parameters: {
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['organization-simple'][]
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
    }
  }
  /** Creates a user project board. Returns a `410 Gone` status if the user does not have existing classic projects. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. */
  readonly 'projects/create-for-authenticated-user': {
    readonly parameters: {}
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly content: {
          readonly 'application/json': components['schemas']['project']
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
      readonly 422: components['responses']['validation_failed_simple']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description Name of the project
           * @example Week One Sprint
           */
          readonly name: string
          /**
           * @description Body of the project
           * @example This project represents the sprint of the first week in January
           */
          readonly body?: string | null
        }
      }
    }
  }
  /** Lists your publicly visible email address, which you can set with the [Set primary email visibility for the authenticated user](https://docs.github.com/enterprise-server@3.6/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user) endpoint. This endpoint is accessible with the `user:email` scope. */
  readonly 'users/list-public-emails-for-authenticated-user': {
    readonly parameters: {
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['email'][]
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * Lists repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
   *
   * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
   */
  readonly 'repos/list-for-authenticated-user': {
    readonly parameters: {
      readonly query: {
        /** Limit results to repositories with the specified visibility. */
        readonly visibility?: 'all' | 'public' | 'private'
        /**
         * Comma-separated list of values. Can include:
         * \* `owner`: Repositories that are owned by the authenticated user.
         * \* `collaborator`: Repositories that the user has been added to as a collaborator.
         * \* `organization_member`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.
         */
        readonly affiliation?: string
        /** Limit results to repositories of the specified type. Will cause a `422` error if used in the same request as **visibility** or **affiliation**. */
        readonly type?: 'all' | 'owner' | 'public' | 'private' | 'member'
        /** The property to sort the results by. */
        readonly sort?: 'created' | 'updated' | 'pushed' | 'full_name'
        /** The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`. */
        readonly direction?: 'asc' | 'desc'
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        readonly since?: components['parameters']['since']
        /** Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        readonly before?: components['parameters']['before']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['repository'][]
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
      readonly 422: components['responses']['validation_failed']
    }
  }
  /**
   * Creates a new repository for the authenticated user.
   *
   * **OAuth scope requirements**
   *
   * When using [OAuth](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
   *
   * *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
   * *   `repo` scope to create a private repository.
   */
  readonly 'repos/create-for-authenticated-user': {
    readonly parameters: {}
    readonly responses: {
      /** Response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string
        }
        readonly content: {
          readonly 'application/json': components['schemas']['repository']
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 400: components['responses']['bad_request']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /**
           * @description The name of the repository.
           * @example Team Environment
           */
          readonly name: string
          /** @description A short description of the repository. */
          readonly description?: string
          /** @description A URL with more information about the repository. */
          readonly homepage?: string
          /**
           * @description Whether the repository is private.
           * @default false
           */
          readonly private?: boolean
          /**
           * @description Whether issues are enabled.
           * @default true
           * @example true
           */
          readonly has_issues?: boolean
          /**
           * @description Whether projects are enabled.
           * @default true
           * @example true
           */
          readonly has_projects?: boolean
          /**
           * @description Whether the wiki is enabled.
           * @default true
           * @example true
           */
          readonly has_wiki?: boolean
          /** @description The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization. */
          readonly team_id?: number
          /**
           * @description Whether the repository is initialized with a minimal README.
           * @default false
           */
          readonly auto_init?: boolean
          /**
           * @description The desired language or platform to apply to the .gitignore.
           * @example Haskell
           */
          readonly gitignore_template?: string
          /**
           * @description The license keyword of the open source license for this repository.
           * @example mit
           */
          readonly license_template?: string
          /**
           * @description Whether to allow squash merges for pull requests.
           * @default true
           * @example true
           */
          readonly allow_squash_merge?: boolean
          /**
           * @description Whether to allow merge commits for pull requests.
           * @default true
           * @example true
           */
          readonly allow_merge_commit?: boolean
          /**
           * @description Whether to allow rebase merges for pull requests.
           * @default true
           * @example true
           */
          readonly allow_rebase_merge?: boolean
          /**
           * @description Whether to allow Auto-merge to be used on pull requests.
           * @default false
           * @example false
           */
          readonly allow_auto_merge?: boolean
          /**
           * @description Whether to delete head branches when pull requests are merged
           * @default false
           * @example false
           */
          readonly delete_branch_on_merge?: boolean
          /**
           * @description The default value for a squash merge commit title:
           *
           * - `PR_TITLE` - default to the pull request's title.
           * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
           * @enum {string}
           */
          readonly squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE'
          /**
           * @description The default value for a squash merge commit message:
           *
           * - `PR_BODY` - default to the pull request's body.
           * - `COMMIT_MESSAGES` - default to the branch's commit messages.
           * - `BLANK` - default to a blank commit message.
           * @enum {string}
           */
          readonly squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK'
          /**
           * @description The default value for a merge commit title.
           *
           * - `PR_TITLE` - default to the pull request's title.
           * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
           * @enum {string}
           */
          readonly merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE'
          /**
           * @description The default value for a merge commit message.
           *
           * - `PR_TITLE` - default to the pull request's title.
           * - `PR_BODY` - default to the pull request's body.
           * - `BLANK` - default to a blank commit message.
           * @enum {string}
           */
          readonly merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK'
          /**
           * @description Whether downloads are enabled.
           * @default true
           * @example true
           */
          readonly has_downloads?: boolean
          /**
           * @description Whether this repository acts as a template that can be used to generate new repositories.
           * @default false
           * @example true
           */
          readonly is_template?: boolean
        }
      }
    }
  }
  /** When authenticating as a user, this endpoint will list all currently open repository invitations for that user. */
  readonly 'repos/list-invitations-for-authenticated-user': {
    readonly parameters: {
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['repository-invitation'][]
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
    }
  }
  readonly 'repos/decline-invitation-for-authenticated-user': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the invitation. */
        readonly invitation_id: components['parameters']['invitation-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 304: components['responses']['not_modified']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
      readonly 409: components['responses']['conflict']
    }
  }
  readonly 'repos/accept-invitation-for-authenticated-user': {
    readonly parameters: {
      readonly path: {
        /** The unique identifier of the invitation. */
        readonly invitation_id: components['parameters']['invitation-id']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 304: components['responses']['not_modified']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
      readonly 409: components['responses']['conflict']
    }
  }
  /**
   * Lists repositories the authenticated user has starred.
   *
   * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/enterprise-server@3.6/rest/overview/media-types/) via the `Accept` header: `application/vnd.github.star+json`.
   */
  readonly 'activity/list-repos-starred-by-authenticated-user': {
    readonly parameters: {
      readonly query: {
        /** The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to. */
        readonly sort?: components['parameters']['sort']
        /** The direction to sort the results by. */
        readonly direction?: components['parameters']['direction']
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['repository'][]
          readonly 'application/vnd.github.v3.star+json': readonly components['schemas']['starred-repository'][]
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
    }
  }
  readonly 'activity/check-repo-is-starred-by-authenticated-user': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response if this repository is starred by you */
      readonly 204: never
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
      /** Not Found if this repository is not starred by you */
      readonly 404: {
        readonly content: {
          readonly 'application/json': components['schemas']['basic-error']
        }
      }
    }
  }
  /** Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#http-verbs)." */
  readonly 'activity/star-repo-for-authenticated-user': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
    }
  }
  readonly 'activity/unstar-repo-for-authenticated-user': {
    readonly parameters: {
      readonly path: {
        /** The account owner of the repository. The name is not case sensitive. */
        readonly owner: components['parameters']['owner']
        /** The name of the repository. The name is not case sensitive. */
        readonly repo: components['parameters']['repo']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
    }
  }
  /** Lists repositories the authenticated user is watching. */
  readonly 'activity/list-watched-repos-for-authenticated-user': {
    readonly parameters: {
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['minimal-repository'][]
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 401: components['responses']['requires_authentication']
      readonly 403: components['responses']['forbidden']
    }
  }
  /** List all of the teams across all of the organizations to which the authenticated user belongs. This method requires `user`, `repo`, or `read:org` [scope](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://docs.github.com/enterprise-server@3.6/apps/building-oauth-apps/). */
  readonly 'teams/list-for-authenticated-user': {
    readonly parameters: {
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['team-full'][]
        }
      }
      readonly 304: components['responses']['not_modified']
      readonly 403: components['responses']['forbidden']
      readonly 404: components['responses']['not_found']
    }
  }
  /**
   * Lists all users, in the order that they signed up on GitHub Enterprise Server. This list includes personal user accounts and organization accounts.
   *
   * Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of users.
   */
  readonly 'users/list': {
    readonly parameters: {
      readonly query: {
        /** A user ID. Only return users with an ID greater than this ID. */
        readonly since?: components['parameters']['since-user']
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {
          readonly Link?: string
        }
        readonly content: {
          readonly 'application/json': readonly components['schemas']['simple-user'][]
        }
      }
      readonly 304: components['responses']['not_modified']
    }
  }
  /**
   * Provides publicly available information about someone with a GitHub account.
   *
   * GitHub Apps with the `Plan` user permission can use this endpoint to retrieve information about a user's GitHub Enterprise Server plan. The GitHub App must be authenticated as a user. See "[Identifying and authorizing users for GitHub Apps](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/)" for details about authentication. For an example response, see 'Response with GitHub Enterprise Server plan information' below"
   *
   * The `email` key in the following response is the publicly visible email address from your GitHub Enterprise Server [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub Enterprise Server. For more information, see [Authentication](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#authentication).
   *
   * The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see "[Emails API](https://docs.github.com/enterprise-server@3.6/rest/reference/users#emails)".
   */
  readonly 'users/get-by-username': {
    readonly parameters: {
      readonly path: {
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['private-user'] | components['schemas']['public-user']
        }
      }
      readonly 404: components['responses']['not_found']
    }
  }
  /** If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events. */
  readonly 'activity/list-events-for-authenticated-user': {
    readonly parameters: {
      readonly path: {
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['event'][]
        }
      }
    }
  }
  /** This is the user's organization dashboard. You must be authenticated as the user to view this. */
  readonly 'activity/list-org-events-for-authenticated-user': {
    readonly parameters: {
      readonly path: {
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
        /** The organization name. The name is not case sensitive. */
        readonly org: components['parameters']['org']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['event'][]
        }
      }
    }
  }
  readonly 'activity/list-public-events-for-user': {
    readonly parameters: {
      readonly path: {
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['event'][]
        }
      }
    }
  }
  /** Lists the people following the specified user. */
  readonly 'users/list-followers-for-user': {
    readonly parameters: {
      readonly path: {
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['simple-user'][]
        }
      }
    }
  }
  /** Lists the people who the specified user follows. */
  readonly 'users/list-following-for-user': {
    readonly parameters: {
      readonly path: {
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['simple-user'][]
        }
      }
    }
  }
  readonly 'users/check-following-for-user': {
    readonly parameters: {
      readonly path: {
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
        readonly target_user: string
      }
    }
    readonly responses: {
      /** if the user follows the target user */
      readonly 204: never
      /** if the user does not follow the target user */
      readonly 404: unknown
    }
  }
  /** Lists public gists for the specified user: */
  readonly 'gists/list-for-user': {
    readonly parameters: {
      readonly path: {
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
      readonly query: {
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        readonly since?: components['parameters']['since']
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['base-gist'][]
        }
      }
      readonly 422: components['responses']['validation_failed']
    }
  }
  /** Lists the GPG keys for a user. This information is accessible by anyone. */
  readonly 'users/list-gpg-keys-for-user': {
    readonly parameters: {
      readonly path: {
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['gpg-key'][]
        }
      }
    }
  }
  /**
   * Provides hovercard information when authenticated through basic auth or OAuth with the `repo` scope. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.
   *
   * The `subject_type` and `subject_id` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository via cURL, it would look like this:
   *
   * ```shell
   *  curl -u username:token
   *   https://api.github.com/users/octocat/hovercard?subject_type=repository&subject_id=1300192
   * ```
   */
  readonly 'users/get-context-for-user': {
    readonly parameters: {
      readonly path: {
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
      readonly query: {
        /** Identifies which additional information you'd like to receive about the person's hovercard. Can be `organization`, `repository`, `issue`, `pull_request`. **Required** when using `subject_id`. */
        readonly subject_type?: 'organization' | 'repository' | 'issue' | 'pull_request'
        /** Uses the ID for the `subject_type` you specified. **Required** when using `subject_type`. */
        readonly subject_id?: string
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['hovercard']
        }
      }
      readonly 404: components['responses']['not_found']
      readonly 422: components['responses']['validation_failed']
    }
  }
  /**
   * Enables an authenticated GitHub App to find the user’s installation information.
   *
   * You must use a [JWT](https://docs.github.com/enterprise-server@3.6/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   */
  readonly 'apps/get-user-installation': {
    readonly parameters: {
      readonly path: {
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['installation']
        }
      }
    }
  }
  /** Lists the _verified_ public SSH keys for a user. This is accessible by anyone. */
  readonly 'users/list-public-keys-for-user': {
    readonly parameters: {
      readonly path: {
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['key-simple'][]
        }
      }
    }
  }
  /**
   * List [public organization memberships](https://docs.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.
   *
   * This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/enterprise-server@3.6/rest/reference/orgs#list-organizations-for-the-authenticated-user) API instead.
   */
  readonly 'orgs/list-for-user': {
    readonly parameters: {
      readonly path: {
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['organization-simple'][]
        }
      }
    }
  }
  readonly 'projects/list-for-user': {
    readonly parameters: {
      readonly path: {
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
      readonly query: {
        /** Indicates the state of the projects to return. */
        readonly state?: 'open' | 'closed' | 'all'
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['project'][]
        }
      }
      readonly 422: components['responses']['validation_failed']
    }
  }
  /** These are events that you've received by watching repos and following users. If you are authenticated as the given user, you will see private events. Otherwise, you'll only see public events. */
  readonly 'activity/list-received-events-for-user': {
    readonly parameters: {
      readonly path: {
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['event'][]
        }
      }
    }
  }
  readonly 'activity/list-received-public-events-for-user': {
    readonly parameters: {
      readonly path: {
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['event'][]
        }
      }
    }
  }
  /** Lists public repositories for the specified user. Note: For GitHub AE, this endpoint will list internal repositories for the specified user. */
  readonly 'repos/list-for-user': {
    readonly parameters: {
      readonly path: {
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
      readonly query: {
        /** Limit results to repositories of the specified type. */
        readonly type?: 'all' | 'owner' | 'member'
        /** The property to sort the results by. */
        readonly sort?: 'created' | 'updated' | 'pushed' | 'full_name'
        /** The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`. */
        readonly direction?: 'asc' | 'desc'
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['minimal-repository'][]
        }
      }
    }
  }
  /** Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#http-verbs)." */
  readonly 'enterprise-admin/promote-user-to-be-site-administrator': {
    readonly parameters: {
      readonly path: {
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /** You can demote any user account except your own. */
  readonly 'enterprise-admin/demote-site-administrator': {
    readonly parameters: {
      readonly path: {
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
  }
  /**
   * Lists repositories a user has starred.
   *
   * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/enterprise-server@3.6/rest/overview/media-types/) via the `Accept` header: `application/vnd.github.star+json`.
   */
  readonly 'activity/list-repos-starred-by-user': {
    readonly parameters: {
      readonly path: {
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
      readonly query: {
        /** The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to. */
        readonly sort?: components['parameters']['sort']
        /** The direction to sort the results by. */
        readonly direction?: components['parameters']['direction']
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['starred-repository'][] | readonly components['schemas']['repository'][]
        }
      }
    }
  }
  /** Lists repositories a user is watching. */
  readonly 'activity/list-repos-watched-by-user': {
    readonly parameters: {
      readonly path: {
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
      readonly query: {
        /** The number of results per page (max 100). */
        readonly per_page?: components['parameters']['per-page']
        /** Page number of the results to fetch. */
        readonly page?: components['parameters']['page']
      }
    }
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly headers: {}
        readonly content: {
          readonly 'application/json': readonly components['schemas']['minimal-repository'][]
        }
      }
    }
  }
  /**
   * If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://docs.github.com/enterprise-server@3.6/admin/identity-and-access-management/using-ldap-for-enterprise-iam/using-ldap), Active Directory LDAP-authenticated users cannot be suspended through this API. If you attempt to suspend an Active Directory LDAP-authenticated user through this API, it will return a `403` response.
   *
   * You can suspend any user account except your own.
   *
   * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.6/rest/overview/resources-in-the-rest-api#http-verbs)."
   */
  readonly 'enterprise-admin/suspend-user': {
    readonly parameters: {
      readonly path: {
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The reason the user is being suspended. This message will be logged in the [audit log](https://docs.github.com/enterprise-server@3.6/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/about-the-audit-log-for-your-enterprise). If you don't provide a `reason`, it will default to "Suspended via API by _SITE\_ADMINISTRATOR_", where _SITE\_ADMINISTRATOR_ is the person who performed the action. */
          readonly reason?: string
        } | null
      }
    }
  }
  /** If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://docs.github.com/enterprise-server@3.6/admin/identity-and-access-management/using-ldap-for-enterprise-iam/using-ldap), this API is disabled and will return a `403` response. Active Directory LDAP-authenticated users cannot be unsuspended using the API. */
  readonly 'enterprise-admin/unsuspend-user': {
    readonly parameters: {
      readonly path: {
        /** The handle for the GitHub user account. */
        readonly username: components['parameters']['username']
      }
    }
    readonly responses: {
      /** Response */
      readonly 204: never
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': {
          /** @description The reason the user is being unsuspended. This message will be logged in the [audit log](https://docs.github.com/enterprise-server@3.6/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/about-the-audit-log-for-your-enterprise). If you don't provide a `reason`, it will default to "Unsuspended via API by _SITE\_ADMINISTRATOR_", where _SITE\_ADMINISTRATOR_ is the person who performed the action. */
          readonly reason?: string
        } | null
      }
    }
  }
  /** Get a random sentence from the Zen of GitHub */
  readonly 'meta/get-zen': {
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly 'text/plain': string
        }
      }
    }
  }
}

export interface external {}
