/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  readonly '/pet': {
    /** Update an existing pet by Id */
    readonly put: operations['updatePet']
    /** Add a new pet to the store */
    readonly post: operations['addPet']
  }
  readonly '/pet/findByStatus': {
    /** Multiple status values can be provided with comma separated strings */
    readonly get: operations['findPetsByStatus']
  }
  readonly '/pet/findByTags': {
    /** Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing. */
    readonly get: operations['findPetsByTags']
  }
  readonly '/pet/{petId}': {
    /** Returns a single pet */
    readonly get: operations['getPetById']
    readonly post: operations['updatePetWithForm']
    /** delete a pet */
    readonly delete: operations['deletePet']
  }
  readonly '/pet/{petId}/uploadImage': {
    readonly post: operations['uploadFile']
  }
  readonly '/store/inventory': {
    /** Returns a map of status codes to quantities */
    readonly get: operations['getInventory']
  }
  readonly '/store/order': {
    /** Place a new order in the store */
    readonly post: operations['placeOrder']
  }
  readonly '/store/order/{orderId}': {
    /** For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions. */
    readonly get: operations['getOrderById']
    /** For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors */
    readonly delete: operations['deleteOrder']
  }
  readonly '/user': {
    /** This can only be done by the logged in user. */
    readonly post: operations['createUser']
  }
  readonly '/user/createWithList': {
    /** Creates list of users with given input array */
    readonly post: operations['createUsersWithListInput']
  }
  readonly '/user/login': {
    readonly get: operations['loginUser']
  }
  readonly '/user/logout': {
    readonly get: operations['logoutUser']
  }
  readonly '/user/{username}': {
    readonly get: operations['getUserByName']
    /** This can only be done by the logged in user. */
    readonly put: operations['updateUser']
    /** This can only be done by the logged in user. */
    readonly delete: operations['deleteUser']
  }
}

export interface components {
  readonly schemas: {
    readonly Order: {
      /**
       * Format: int64
       * @example 10
       */
      readonly id?: number
      /**
       * Format: int64
       * @example 198772
       */
      readonly petId?: number
      /**
       * Format: int32
       * @example 7
       */
      readonly quantity?: number
      /** Format: date-time */
      readonly shipDate?: string
      /**
       * @description Order Status
       * @example approved
       * @enum {string}
       */
      readonly status?: 'placed' | 'approved' | 'delivered'
      readonly complete?: boolean
    }
    readonly Customer: {
      /**
       * Format: int64
       * @example 100000
       */
      readonly id?: number
      /** @example fehguy */
      readonly username?: string
      readonly address?: readonly components['schemas']['Address'][]
    }
    readonly Address: {
      /** @example 437 Lytton */
      readonly street?: string
      /** @example Palo Alto */
      readonly city?: string
      /** @example CA */
      readonly state?: string
      /** @example 94301 */
      readonly zip?: string
    }
    readonly Category: {
      /**
       * Format: int64
       * @example 1
       */
      readonly id?: number
      /** @example Dogs */
      readonly name?: string
    }
    readonly User: {
      /**
       * Format: int64
       * @example 10
       */
      readonly id?: number
      /** @example theUser */
      readonly username?: string
      /** @example John */
      readonly firstName?: string
      /** @example James */
      readonly lastName?: string
      /** @example john@email.com */
      readonly email?: string
      /** @example 12345 */
      readonly password?: string
      /** @example 12345 */
      readonly phone?: string
      /**
       * Format: int32
       * @description User Status
       * @example 1
       */
      readonly userStatus?: number
    }
    readonly Tag: {
      /** Format: int64 */
      readonly id?: number
      readonly name?: string
    }
    readonly Pet: {
      /**
       * Format: int64
       * @example 10
       */
      readonly id?: number
      /** @example doggie */
      readonly name: string
      readonly category?: components['schemas']['Category']
      readonly photoUrls: readonly string[]
      readonly tags?: readonly components['schemas']['Tag'][]
      /**
       * @description pet status in the store
       * @enum {string}
       */
      readonly status?: 'available' | 'pending' | 'sold'
    }
    readonly ApiResponse: {
      /** Format: int32 */
      readonly code?: number
      readonly type?: string
      readonly message?: string
    }
  }
  readonly requestBodies: {
    /** Pet object that needs to be added to the store */
    Pet: {
      readonly content: {
        readonly 'application/json': components['schemas']['Pet']
        readonly 'application/xml': components['schemas']['Pet']
      }
    }
    /** List of user object */
    UserArray: {
      readonly content: {
        readonly 'application/json': readonly components['schemas']['User'][]
      }
    }
  }
}

export interface operations {
  /** Update an existing pet by Id */
  readonly updatePet: {
    readonly responses: {
      /** Successful operation */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['Pet']
          readonly 'application/xml': components['schemas']['Pet']
        }
      }
      /** Invalid ID supplied */
      readonly 400: unknown
      /** Pet not found */
      readonly 404: unknown
      /** Validation exception */
      readonly 405: unknown
    }
    /** Update an existent pet in the store */
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': components['schemas']['Pet']
        readonly 'application/xml': components['schemas']['Pet']
        readonly 'application/x-www-form-urlencoded': components['schemas']['Pet']
      }
    }
  }
  /** Add a new pet to the store */
  readonly addPet: {
    readonly responses: {
      /** Successful operation */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['Pet']
          readonly 'application/xml': components['schemas']['Pet']
        }
      }
      /** Invalid input */
      readonly 405: unknown
    }
    /** Create a new pet in the store */
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': components['schemas']['Pet']
        readonly 'application/xml': components['schemas']['Pet']
        readonly 'application/x-www-form-urlencoded': components['schemas']['Pet']
      }
    }
  }
  /** Multiple status values can be provided with comma separated strings */
  readonly findPetsByStatus: {
    readonly parameters: {
      readonly query: {
        /** Status values that need to be considered for filter */
        readonly status?: 'available' | 'pending' | 'sold'
      }
    }
    readonly responses: {
      /** successful operation */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['Pet'][]
          readonly 'application/xml': readonly components['schemas']['Pet'][]
        }
      }
      /** Invalid status value */
      readonly 400: unknown
    }
  }
  /** Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing. */
  readonly findPetsByTags: {
    readonly parameters: {
      readonly query: {
        /** Tags to filter by */
        readonly tags?: readonly string[]
      }
    }
    readonly responses: {
      /** successful operation */
      readonly 200: {
        readonly content: {
          readonly 'application/json': readonly components['schemas']['Pet'][]
          readonly 'application/xml': readonly components['schemas']['Pet'][]
        }
      }
      /** Invalid tag value */
      readonly 400: unknown
    }
  }
  /** Returns a single pet */
  readonly getPetById: {
    readonly parameters: {
      readonly path: {
        /** ID of pet to return */
        readonly petId: number
      }
    }
    readonly responses: {
      /** successful operation */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['Pet']
          readonly 'application/xml': components['schemas']['Pet']
        }
      }
      /** Invalid ID supplied */
      readonly 400: unknown
      /** Pet not found */
      readonly 404: unknown
    }
  }
  readonly updatePetWithForm: {
    readonly parameters: {
      readonly path: {
        /** ID of pet that needs to be updated */
        readonly petId: number
      }
      readonly query: {
        /** Name of pet that needs to be updated */
        readonly name?: string
        /** Status of pet that needs to be updated */
        readonly status?: string
      }
    }
    readonly responses: {
      /** Invalid input */
      readonly 405: unknown
    }
  }
  /** delete a pet */
  readonly deletePet: {
    readonly parameters: {
      readonly header: {
        readonly api_key?: string
      }
      readonly path: {
        /** Pet id to delete */
        readonly petId: number
      }
    }
    readonly responses: {
      /** Invalid pet value */
      readonly 400: unknown
    }
  }
  readonly uploadFile: {
    readonly parameters: {
      readonly path: {
        /** ID of pet to update */
        readonly petId: number
      }
      readonly query: {
        /** Additional Metadata */
        readonly additionalMetadata?: string
      }
    }
    readonly responses: {
      /** successful operation */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['ApiResponse']
        }
      }
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/octet-stream': string
      }
    }
  }
  /** Returns a map of status codes to quantities */
  readonly getInventory: {
    readonly responses: {
      /** successful operation */
      readonly 200: {
        readonly content: {
          readonly 'application/json': { readonly [key: string]: number }
        }
      }
    }
  }
  /** Place a new order in the store */
  readonly placeOrder: {
    readonly responses: {
      /** successful operation */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['Order']
        }
      }
      /** Invalid input */
      readonly 405: unknown
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': components['schemas']['Order']
        readonly 'application/xml': components['schemas']['Order']
        readonly 'application/x-www-form-urlencoded': components['schemas']['Order']
      }
    }
  }
  /** For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions. */
  readonly getOrderById: {
    readonly parameters: {
      readonly path: {
        /** ID of order that needs to be fetched */
        readonly orderId: number
      }
    }
    readonly responses: {
      /** successful operation */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['Order']
          readonly 'application/xml': components['schemas']['Order']
        }
      }
      /** Invalid ID supplied */
      readonly 400: unknown
      /** Order not found */
      readonly 404: unknown
    }
  }
  /** For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors */
  readonly deleteOrder: {
    readonly parameters: {
      readonly path: {
        /** ID of the order that needs to be deleted */
        readonly orderId: number
      }
    }
    readonly responses: {
      /** Invalid ID supplied */
      readonly 400: unknown
      /** Order not found */
      readonly 404: unknown
    }
  }
  /** This can only be done by the logged in user. */
  readonly createUser: {
    readonly responses: {
      /** successful operation */
      readonly default: {
        readonly content: {
          readonly 'application/json': components['schemas']['User']
          readonly 'application/xml': components['schemas']['User']
        }
      }
    }
    /** Created user object */
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': components['schemas']['User']
        readonly 'application/xml': components['schemas']['User']
        readonly 'application/x-www-form-urlencoded': components['schemas']['User']
      }
    }
  }
  /** Creates list of users with given input array */
  readonly createUsersWithListInput: {
    readonly responses: {
      /** Successful operation */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['User']
          readonly 'application/xml': components['schemas']['User']
        }
      }
      /** successful operation */
      readonly default: unknown
    }
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': readonly components['schemas']['User'][]
      }
    }
  }
  readonly loginUser: {
    readonly parameters: {
      readonly query: {
        /** The user name for login */
        readonly username?: string
        /** The password for login in clear text */
        readonly password?: string
      }
    }
    readonly responses: {
      /** successful operation */
      readonly 200: {
        readonly headers: {
          /** calls per hour allowed by the user */
          readonly 'X-Rate-Limit'?: number
          /** date in UTC when token expires */
          readonly 'X-Expires-After'?: string
        }
        readonly content: {
          readonly 'application/xml': string
          readonly 'application/json': string
        }
      }
      /** Invalid username/password supplied */
      readonly 400: unknown
    }
  }
  readonly logoutUser: {
    readonly parameters: {}
    readonly responses: {
      /** successful operation */
      readonly default: unknown
    }
  }
  readonly getUserByName: {
    readonly parameters: {
      readonly path: {
        /** The name that needs to be fetched. Use user1 for testing. */
        readonly username: string
      }
    }
    readonly responses: {
      /** successful operation */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['User']
          readonly 'application/xml': components['schemas']['User']
        }
      }
      /** Invalid username supplied */
      readonly 400: unknown
      /** User not found */
      readonly 404: unknown
    }
  }
  /** This can only be done by the logged in user. */
  readonly updateUser: {
    readonly parameters: {
      readonly path: {
        /** name that need to be deleted */
        readonly username: string
      }
    }
    readonly responses: {
      /** successful operation */
      readonly default: unknown
    }
    /** Update an existent user in the store */
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': components['schemas']['User']
        readonly 'application/xml': components['schemas']['User']
        readonly 'application/x-www-form-urlencoded': components['schemas']['User']
      }
    }
  }
  /** This can only be done by the logged in user. */
  readonly deleteUser: {
    readonly parameters: {
      readonly path: {
        /** The name that needs to be deleted */
        readonly username: string
      }
    }
    readonly responses: {
      /** Invalid username supplied */
      readonly 400: unknown
      /** User not found */
      readonly 404: unknown
    }
  }
}

export interface external {}
