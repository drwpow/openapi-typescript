/**
 * This file was auto-generated by swagger-to-ts.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    /**
     * Get Hypermedia links to resources accessible in GitHub's REST API
     */
    get: {
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": {
            current_user_url: string;
            current_user_authorizations_html_url: string;
            authorizations_url: string;
            code_search_url: string;
            commit_search_url: string;
            emails_url: string;
            emojis_url: string;
            events_url: string;
            feeds_url: string;
            followers_url: string;
            following_url: string;
            gists_url: string;
            hub_url: string;
            issue_search_url: string;
            issues_url: string;
            keys_url: string;
            label_search_url: string;
            notifications_url: string;
            organization_url: string;
            organization_repositories_url: string;
            organization_teams_url: string;
            public_gists_url: string;
            rate_limit_url: string;
            repository_url: string;
            repository_search_url: string;
            current_user_repositories_url: string;
            starred_url: string;
            starred_gists_url: string;
            topic_search_url?: string;
            user_url: string;
            user_organizations_url: string;
            user_repositories_url: string;
            user_search_url: string;
          };
        };
      };
    };
  };
  "/app": {
    /**
     * Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app's installations, see the "[List installations for the authenticated app](https://developer.github.com/v3/apps/#list-installations-for-the-authenticated-app)" endpoint.
     *
     * You must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     */
    get: {
      parameters: {};
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["integration"];
        };
      };
    };
  };
  "/app-manifests/{code}/conversions": {
    /**
     * Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://developer.github.com/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key), and `webhook_secret`.
     */
    post: {
      parameters: {
        path: {
          code: string;
        };
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["integration"] & {
            client_id: string;
            client_secret: string;
            webhook_secret: string;
            pem: string;
            [key: string]: any;
          };
        };
        "404": any;
        "422": any;
      };
    };
  };
  "/app/installations": {
    /**
     * You must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     *
     * The permissions the installation has are included under the `permissions` key.
     */
    get: {
      parameters: {
        undefined: {};
        query: {
          outdated?: string;
        };
      };
      responses: {
        /**
         * The permissions the installation has are included under the `permissions` key.
         */
        "200": {
          "application/json": components["schemas"]["installation"][];
        };
      };
    };
  };
  "/app/installations/{installation_id}": {
    /**
     * Enables an authenticated GitHub App to find an installation's information using the installation id. The installation's account type (`target_type`) will be either an organization or a user account, depending which account the repository belongs to.
     *
     * You must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["installation"];
        };
        "404": any;
        "415": any;
      };
    };
    /**
     * Uninstalls a GitHub App on a user, organization, or business account. If you prefer to temporarily suspend an app's access to your account's resources, then we recommend the "[Suspend an app installation](https://developer.github.com/v3/apps/#suspend-an-app-installation)" endpoint.
     *
     * You must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "404": any;
      };
    };
  };
  "/app/installations/{installation_id}/access_tokens": {
    /**
     * Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the `repository_ids` when creating the token. When you omit `repository_ids`, the response does not contain the `repositories` key.
     *
     * You must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["installation-token"];
        };
        "401": any;
        "403": any;
        "404": any;
        "415": any;
        "422": any;
      };
    };
  };
  "/app/installations/{installation_id}/suspended": {
    /**
     * **Note:** Suspending a GitHub App installation is currently in beta and subject to change. Before you can suspend a GitHub App, the app owner must enable suspending installations for the app by opting-in to the beta. For more information, see "[Suspending a GitHub App installation](https://developer.github.com/apps/managing-github-apps/suspending-a-github-app-installation/)."
     *
     * Suspends a GitHub App on a user, organization, or business account, which blocks the app from accessing the account's resources. When a GitHub App is suspended, the app's access to the GitHub API or webhook events is blocked for that account.
     *
     * To suspend a GitHub App, you must be an account owner or have admin permissions in the repository or organization where the app is installed.
     *
     * You must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "404": any;
      };
    };
    /**
     * **Note:** Suspending a GitHub App installation is currently in beta and subject to change. Before you can suspend a GitHub App, the app owner must enable suspending installations for the app by opting-in to the beta. For more information, see "[Suspending a GitHub App installation](https://developer.github.com/apps/managing-github-apps/suspending-a-github-app-installation/)."
     *
     * Removes a GitHub App installation suspension.
     *
     * To unsuspend a GitHub App, you must be an account owner or have admin permissions in the repository or organization where the app is installed and suspended.
     *
     * You must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "404": any;
      };
    };
  };
  "/applications/grants": {
    /**
     * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
     *
     * You can use this API to list the set of OAuth applications that have been granted access to your account. Unlike the [list your authorizations](https://developer.github.com/v3/oauth_authorizations/#list-your-authorizations) API, this API does not manage individual tokens. This API will return one entry for each OAuth application that has been granted access to your account, regardless of the number of tokens an application has generated for your user. The list of OAuth applications returned matches what is shown on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized). The `scopes` returned are the union of scopes authorized for the application. For example, if an application has one token with `repo` scope and another token with `user` scope, the grant will return `["repo", "user"]`.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["application-grant"][];
        };
        "304": any;
        "401": any;
        "403": any;
        "404": any;
      };
    };
  };
  "/applications/grants/{grant_id}": {
    /**
     * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["application-grant"];
        };
        "304": any;
        "401": any;
        "403": any;
      };
    };
    /**
     * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
     *
     * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for your user. Once deleted, the application has no access to your account and is no longer listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "304": any;
        "401": any;
        "403": any;
      };
    };
  };
  "/applications/{client_id}/grant": {
    /**
     * OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://developer.github.com/v3/auth#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid OAuth `access_token` as an input parameter and the grant for the token's owner will be deleted.
     * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "422": any;
      };
    };
  };
  "/applications/{client_id}/grants/{access_token}": {
    /**
     * **Deprecation Notice:** GitHub will replace and discontinue OAuth endpoints containing `access_token` in the path parameter. We are introducing new endpoints that allow you to securely manage tokens for OAuth Apps by using `access_token` as an input parameter. The OAuth Application API will be removed on May 5, 2021. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
     *
     * OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://developer.github.com/v3/auth#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid token as `:access_token` and the grant for the token's owner will be deleted.
     *
     * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the Applications settings page under "Authorized OAuth Apps" on GitHub](https://github.com/settings/applications#authorized).
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/applications/{client_id}/token": {
    /**
     * OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://developer.github.com/v3/auth#basic-authentication) to use this endpoint, where the username is the OAuth application `client_id` and the password is its `client_secret`. Invalid tokens will return `404 NOT FOUND`.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["authorization"];
        };
        "404": any;
        "422": any;
      };
    };
    /**
     * OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. You must use [Basic Authentication](https://developer.github.com/v3/auth#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
     */
    patch: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["authorization"];
        };
        "422": any;
      };
    };
    /**
     * OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://developer.github.com/v3/auth#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "422": any;
      };
    };
  };
  "/applications/{client_id}/tokens/{access_token}": {
    /**
     * **Deprecation Notice:** GitHub will replace and discontinue OAuth endpoints containing `access_token` in the path parameter. We are introducing new endpoints that allow you to securely manage tokens for OAuth Apps by using `access_token` as an input parameter. The OAuth Application API will be removed on May 5, 2021. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
     *
     * OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://developer.github.com/v3/auth#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["authorization"];
        };
        "404": any;
      };
    };
    /**
     * **Deprecation Notice:** GitHub will replace and discontinue OAuth endpoints containing `access_token` in the path parameter. We are introducing new endpoints that allow you to securely manage tokens for OAuth Apps by using `access_token` as an input parameter. The OAuth Application API will be removed on May 5, 2021. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
     *
     * OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. You must use [Basic Authentication](https://developer.github.com/v3/auth#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["authorization"];
        };
      };
    };
    /**
     * **Deprecation Notice:** GitHub will replace and discontinue OAuth endpoints containing `access_token` in the path parameter. We are introducing new endpoints that allow you to securely manage tokens for OAuth Apps by using `access_token` as an input parameter. The OAuth Application API will be removed on May 5, 2021. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
     *
     * OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://developer.github.com/v3/auth#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/apps/{app_slug}": {
    /**
     * **Note**: The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).
     *
     * If the GitHub App you specify is public, you can access this endpoint without authenticating. If the GitHub App you specify is private, you must authenticate with a [personal access token](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or an [installation access token](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["integration"];
        };
        "403": any;
        "404": any;
        "415": any;
      };
    };
  };
  "/authorizations": {
    /**
     * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["authorization"][];
        };
        "304": any;
        "401": any;
        "403": any;
        "404": any;
      };
    };
    /**
     * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
     *
     * **Warning:** Apps must use the [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
     *
     * Creates OAuth tokens using [Basic Authentication](https://developer.github.com/v3/auth#basic-authentication). If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://developer.github.com/v3/auth/#working-with-two-factor-authentication)."
     *
     * To create tokens for a particular OAuth application using this endpoint, you must authenticate as the user you want to create an authorization for and provide the app's client ID and secret, found on your OAuth application's settings page. If your OAuth application intends to create multiple tokens for one user, use `fingerprint` to differentiate between them.
     *
     * You can also create tokens on GitHub from the [personal access tokens settings](https://github.com/settings/tokens) page. Read more about these tokens in [the GitHub Help documentation](https://help.github.com/articles/creating-an-access-token-for-command-line-use).
     *
     * Organizations that enforce SAML SSO require personal access tokens to be allowed. Read more about allowing tokens in [the GitHub Help documentation](https://help.github.com/articles/about-identity-and-access-management-with-saml-single-sign-on).
     */
    post: {
      parameters: {};
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["authorization"];
        };
        "304": any;
        "401": any;
        "403": any;
        "410": any;
        "422": any;
      };
    };
  };
  "/authorizations/clients/{client_id}": {
    /**
     * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
     *
     * **Warning:** Apps must use the [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
     *
     * Creates a new authorization for the specified OAuth application, only if an authorization for that application doesn't already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.
     *
     * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://developer.github.com/v3/auth/#working-with-two-factor-authentication)."
     *
     * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Response if returning an existing token
         */
        "200": {
          "application/json": components["schemas"]["authorization"];
        };
        /**
         * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
         */
        "201": {
          "application/json": components["schemas"]["authorization"];
        };
        "304": any;
        "401": any;
        "403": any;
        "422": any;
      };
    };
  };
  "/authorizations/clients/{client_id}/{fingerprint}": {
    /**
     * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
     *
     * **Warning:** Apps must use the [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
     *
     * This method will create a new authorization for the specified OAuth application, only if an authorization for that application and fingerprint do not already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. `fingerprint` is a unique string to distinguish an authorization from others created for the same client ID and user. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.
     *
     * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://developer.github.com/v3/auth/#working-with-two-factor-authentication)."
     */
    put: {
      parameters: {
        undefined: {};
        path: {
          fingerprint: string;
        };
      };
      responses: {
        /**
         * Response if returning an existing token
         */
        "200": {
          "application/json": components["schemas"]["authorization"];
        };
        /**
         * Response if returning a new token
         */
        "201": {
          "application/json": components["schemas"]["authorization"];
        };
        "422": any;
      };
    };
  };
  "/authorizations/{authorization_id}": {
    /**
     * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["authorization"];
        };
        "304": any;
        "401": any;
        "403": any;
      };
    };
    /**
     * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
     *
     * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://developer.github.com/v3/auth/#working-with-two-factor-authentication)."
     *
     * You can only send one of these scope keys at a time.
     */
    patch: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["authorization"];
        };
        "422": any;
      };
    };
    /**
     * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "304": any;
        "401": any;
        "403": any;
      };
    };
  };
  "/codes_of_conduct": {
    get: {
      parameters: {};
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["code-of-conduct"][];
        };
        "304": any;
        "415": any;
      };
    };
  };
  "/codes_of_conduct/{key}": {
    get: {
      parameters: {
        path: {
          key: string;
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["code-of-conduct"];
        };
        "304": any;
        "404": any;
        "415": any;
      };
    };
  };
  "/content_references/{content_reference_id}/attachments": {
    /**
     * Creates an attachment under a content reference URL in the body or comment of an issue or pull request. Use the `id` of the content reference from the [`content_reference` event](https://developer.github.com/webhooks/event-payloads/#content_reference) to create an attachment.
     *
     * The app must create a content attachment within six hours of the content reference URL being posted. See "[Using content attachments](https://developer.github.com/apps/using-content-attachments/)" for details about content attachments.
     *
     * You must use an [installation access token](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
     */
    post: {
      parameters: {
        path: {
          content_reference_id: number;
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["content-reference-attachment"];
        };
        "304": any;
        "403": any;
        "404": any;
        "410": any;
        "415": any;
        "422": any;
      };
    };
  };
  "/emojis": {
    /**
     * Lists all the emojis available to use on GitHub.
     */
    get: {
      parameters: {};
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": { [key: string]: string };
        };
        "304": any;
      };
    };
  };
  "/enterprises/{enterprise}/actions/runner-groups": {
    /**
     * Lists all self-hosted runner groups for an enterprise.
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": {
            total_count?: number;
            runner_groups?: components["schemas"]["runner-groups-enterprise"][];
          };
        };
      };
    };
    /**
     * Creates a new self-hosted runner group for an enterprise.
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["runner-groups-enterprise"];
        };
      };
    };
  };
  "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}": {
    /**
     * Gets a specific self-hosted runner group for an enterprise.
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["runner-groups-enterprise"];
        };
      };
    };
    /**
     * Updates the `name` and `visibility` of a self-hosted runner group in an enterprise.
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    patch: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["runner-groups-enterprise"];
        };
      };
    };
    /**
     * Deletes a self-hosted runner group for an enterprise.
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations": {
    /**
     * Lists the organizations with access to a self-hosted runner group.
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": {
            total_count?: number;
            organizations?: components["schemas"]["organization-simple"][];
          };
        };
      };
    };
    /**
     * Replaces the list of organizations that have access to a self-hosted runner configured in an enterprise.
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}": {
    /**
     * Adds an organization to the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise)."
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
    /**
     * Removes an organization from the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise)."
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners": {
    /**
     * Lists the self-hosted runners that are in a specific enterprise group.
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": {
            total_count?: number;
            runners?: components["schemas"]["runner"][];
          };
        };
      };
    };
    /**
     * Replaces the list of self-hosted runners that that are part of an enterprise runner group.
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}": {
    /**
     * Adds a self-hosted runner to a runner group configured in an enterprise.
     *
     * You must authenticate using an access token with the `admin:enterprise`
     * scope to use this endpoint.
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
    /**
     * Removes a self-hosted runner from a group configured in an enterprise. The runner is then returned to the default group.
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/enterprises/{enterprise}/actions/runners": {
    /**
     * Lists all self-hosted runners configured for an enterprise.
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": {
            total_count?: number;
            runners?: components["schemas"]["runner"][];
          };
        };
      };
    };
  };
  "/enterprises/{enterprise}/actions/runners/downloads": {
    /**
     * Lists binaries for the runner application that you can download and run.
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["runner-application"][];
        };
      };
    };
  };
  "/enterprises/{enterprise}/actions/runners/registration-token": {
    /**
     * Returns a token that you can pass to the `config` script. The token expires after one hour.
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     *
     * #### Example using registration token
     *
     * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
     *
     * ```
     * ./config.sh --url https://github.com/enterpises/octo-enterprise --token TOKEN
     * ```
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["authentication-token"];
        };
      };
    };
  };
  "/enterprises/{enterprise}/actions/runners/remove-token": {
    /**
     * Returns a token that you can pass to the `config` script to remove a self-hosted runner from an enterprise. The token expires after one hour.
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     *
     * #### Example using remove token
     *
     * To remove your self-hosted runner from an enterprise, replace `TOKEN` with the remove token provided by this
     * endpoint.
     *
     * ```
     * ./config.sh remove --token TOKEN
     * ```
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["authentication-token"];
        };
      };
    };
  };
  "/enterprises/{enterprise}/actions/runners/{runner_id}": {
    /**
     * Gets a specific self-hosted runner configured in an enterprise.
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["runner"];
        };
      };
    };
    /**
     * Forces the removal of a self-hosted runner from an enterprise. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/enterprises/{enterprise}/settings/billing/actions": {
    /**
     * Gets the summary of the free and paid GitHub Actions minutes used.
     *
     * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
     *
     * The authenticated user must be an enterprise admin.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["actions-billing-usage"];
        };
      };
    };
  };
  "/enterprises/{enterprise}/settings/billing/packages": {
    /**
     * Gets the free and paid storage used for GitHub Packages in gigabytes.
     *
     * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
     *
     * The authenticated user must be an enterprise admin.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["packages-billing-usage"];
        };
      };
    };
  };
  "/enterprises/{enterprise}/settings/billing/shared-storage": {
    /**
     * Gets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.
     *
     * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
     *
     * The authenticated user must be an enterprise admin.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["combined-billing-usage"];
        };
      };
    };
  };
  "/events": {
    /**
     * We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["event"][];
        };
        "304": any;
        "403": any;
        "503": any;
      };
    };
  };
  "/feeds": {
    /**
     * GitHub provides several timeline resources in [Atom](http://en.wikipedia.org/wiki/Atom_(standard)) format. The Feeds API lists all the feeds available to the authenticated user:
     *
     * *   **Timeline**: The GitHub global public timeline
     * *   **User**: The public timeline for any user, using [URI template](https://developer.github.com/v3/#hypermedia)
     * *   **Current user public**: The public timeline for the authenticated user
     * *   **Current user**: The private timeline for the authenticated user
     * *   **Current user actor**: The private timeline for activity created by the authenticated user
     * *   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.
     * *   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub.
     *
     * **Note**: Private feeds are only returned when [authenticating via Basic Auth](https://developer.github.com/v3/#basic-authentication) since current feed URIs use the older, non revocable auth tokens.
     */
    get: {
      parameters: {};
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["feed"];
        };
      };
    };
  };
  "/gists": {
    /**
     * Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists:
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["base-gist"][];
        };
        "304": any;
        "403": any;
      };
    };
    /**
     * Allows you to add a new gist with one or more files.
     *
     * **Note:** Don't name your files "gistfile" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.
     */
    post: {
      parameters: {};
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["gist-full"];
        };
        "304": any;
        "403": any;
        "404": any;
        "422": any;
      };
    };
  };
  "/gists/public": {
    /**
     * List public gists sorted by most recently updated to least recently updated.
     *
     * Note: With [pagination](https://developer.github.com/v3/#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["base-gist"][];
        };
        "304": any;
        "403": any;
        "422": any;
      };
    };
  };
  "/gists/starred": {
    /**
     * List the authenticated user's starred gists:
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["base-gist"][];
        };
        "304": any;
        "401": any;
        "403": any;
      };
    };
  };
  "/gists/{gist_id}": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["gist-full"];
        };
        "304": any;
        "403": any;
        "404": any;
      };
    };
    /**
     * Allows you to update or delete a gist file and rename gist files. Files from the previous version of the gist that aren't explicitly changed during an edit are unchanged.
     */
    patch: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["gist-full"];
        };
        "404": any;
        "422": any;
      };
    };
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "304": any;
        "403": any;
        "404": any;
      };
    };
  };
  "/gists/{gist_id}/comments": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["gist-comment"][];
        };
        "304": any;
        "403": any;
        "404": any;
      };
    };
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["gist-comment"];
        };
        "304": any;
        "403": any;
        "404": any;
      };
    };
  };
  "/gists/{gist_id}/comments/{comment_id}": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["gist-comment"];
        };
        "304": any;
        "403": any;
        "404": any;
      };
    };
    patch: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["gist-comment"];
        };
        "404": any;
      };
    };
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "304": any;
        "403": any;
        "404": any;
      };
    };
  };
  "/gists/{gist_id}/commits": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["gist-commit"][];
        };
        "304": any;
        "403": any;
        "404": any;
      };
    };
  };
  "/gists/{gist_id}/forks": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["gist-full"][];
        };
        "304": any;
        "403": any;
        "404": any;
      };
    };
    /**
     * **Note**: This was previously `/gists/:gist_id/fork`.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["base-gist"];
        };
        "304": any;
        "403": any;
        "404": any;
        "422": any;
      };
    };
  };
  "/gists/{gist_id}/star": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Response if gist is starred
         */
        "204": any;
        "304": any;
        "403": any;
        /**
         * Response if gist is not starred
         */
        "404": {
          "application/json": { [key: string]: any };
        };
      };
    };
    /**
     * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://developer.github.com/v3/#http-verbs)."
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "304": any;
        "403": any;
        "404": any;
      };
    };
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "304": any;
        "403": any;
        "404": any;
      };
    };
  };
  "/gists/{gist_id}/{sha}": {
    get: {
      parameters: {
        undefined: {};
        path: {
          sha: string;
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["gist-full"];
        };
        "403": any;
        "404": any;
        "422": any;
      };
    };
  };
  "/gitignore/templates": {
    /**
     * List all templates available to pass as an option when [creating a repository](https://developer.github.com/v3/repos/#create-a-repository-for-the-authenticated-user).
     */
    get: {
      parameters: {};
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": string[];
        };
        "304": any;
      };
    };
  };
  "/gitignore/templates/{name}": {
    /**
     * The API also allows fetching the source of a single template.
     * Use the raw [media type](https://developer.github.com/v3/media/) to get the raw contents.
     */
    get: {
      parameters: {
        path: {
          name: string;
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["gitignore-template"];
        };
        "304": any;
      };
    };
  };
  "/installation/repositories": {
    /**
     * List repositories that an app installation can access.
     *
     * You must use an [installation access token](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": {
            total_count?: number;
            repositories?: components["schemas"]["repository"][];
            repository_selection?: string;
          };
        };
        "304": any;
        "401": any;
        "403": any;
      };
    };
  };
  "/installation/token": {
    /**
     * Revokes the installation token you're using to authenticate as an installation and access this endpoint.
     *
     * Once an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the "[Create an installation access token for an app](https://developer.github.com/v3/apps/#create-an-installation-access-token-for-an-app)" endpoint.
     *
     * You must use an [installation access token](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
     */
    delete: {
      parameters: {};
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/issues": {
    /**
     * List issues assigned to the authenticated user across all visible repositories including owned repositories, member
     * repositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not
     * necessarily assigned to you. See the [Parameters table](https://developer.github.com/v3/issues/#parameters) for more
     * information.
     *
     *
     * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
     * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
     * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
     * request id, use the "[List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests)" endpoint.
     */
    get: {
      parameters: {
        query: {
          /**
           * Indicates which sorts of issues to return. Can be one of:
           * \* `assigned`: Issues assigned to you
           * \* `created`: Issues created by you
           * \* `mentioned`: Issues mentioning you
           * \* `subscribed`: Issues you're subscribed to updates for
           * \* `all`: All issues the authenticated user can see, regardless of participation or creation
           */
          filter?: "assigned" | "created" | "mentioned" | "subscribed" | "all";
          /**
           * Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
           */
          state?: "open" | "closed" | "all";
          /**
           * What to sort results by. Can be either `created`, `updated`, `comments`.
           */
          sort?: "created" | "updated" | "comments";
          collab?: boolean;
          orgs?: boolean;
          owned?: boolean;
          pulls?: boolean;
        };
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["issue"][];
        };
        "304": any;
        "404": any;
        "422": any;
      };
    };
  };
  "/licenses": {
    get: {
      parameters: {
        query: {
          featured?: boolean;
        };
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["license-simple"][];
        };
        "304": any;
      };
    };
  };
  "/licenses/{license}": {
    get: {
      parameters: {
        path: {
          license: string;
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["license"];
        };
        "304": any;
        "403": any;
        "404": any;
      };
    };
  };
  "/markdown": {
    post: {
      parameters: {};
      responses: {
        /**
         * response
         */
        "200": any;
        "304": any;
      };
    };
  };
  "/markdown/raw": {
    /**
     * You must send Markdown as plain text (using a `Content-Type` header of `text/plain` or `text/x-markdown`) to this endpoint, rather than using JSON format. In raw mode, [GitHub Flavored Markdown](https://github.github.com/gfm/) is not supported and Markdown will be rendered in plain format like a README.md file. Markdown content must be 400 KB or less.
     */
    post: {
      parameters: {};
      responses: {
        /**
         * response
         */
        "200": {
          "text/html": string;
        };
        "304": any;
      };
    };
  };
  "/marketplace_listing/accounts/{account_id}": {
    /**
     * Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
     *
     * GitHub Apps must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://developer.github.com/v3/auth/#basic-authentication) with their client ID and client secret to access this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["marketplace-purchase"];
        };
        "401": any;
        /**
         * Response when the account has not purchased the listing
         */
        "404": {
          "application/json": components["schemas"]["basic-error"];
        };
      };
    };
  };
  "/marketplace_listing/plans": {
    /**
     * Lists all plans that are part of your GitHub Marketplace listing.
     *
     * GitHub Apps must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://developer.github.com/v3/auth/#basic-authentication) with their client ID and client secret to access this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["marketplace-listing-plan"][];
        };
        "401": any;
        "404": any;
      };
    };
  };
  "/marketplace_listing/plans/{plan_id}/accounts": {
    /**
     * Returns user and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
     *
     * GitHub Apps must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://developer.github.com/v3/auth/#basic-authentication) with their client ID and client secret to access this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
        query: {
          /**
           * To return the oldest accounts first, set to `asc`. Can be one of `asc` or `desc`. Ignored without the `sort` parameter.
           */
          direction?: "asc" | "desc";
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["marketplace-purchase"][];
        };
        "401": any;
        "404": any;
        "422": any;
      };
    };
  };
  "/marketplace_listing/stubbed/accounts/{account_id}": {
    /**
     * Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
     *
     * GitHub Apps must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://developer.github.com/v3/auth/#basic-authentication) with their client ID and client secret to access this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["marketplace-purchase"];
        };
        "401": any;
        /**
         * Response when the account has not purchased the listing
         */
        "404": any;
      };
    };
  };
  "/marketplace_listing/stubbed/plans": {
    /**
     * Lists all plans that are part of your GitHub Marketplace listing.
     *
     * GitHub Apps must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://developer.github.com/v3/auth/#basic-authentication) with their client ID and client secret to access this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["marketplace-listing-plan"][];
        };
        "401": any;
      };
    };
  };
  "/marketplace_listing/stubbed/plans/{plan_id}/accounts": {
    /**
     * Returns repository and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
     *
     * GitHub Apps must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://developer.github.com/v3/auth/#basic-authentication) with their client ID and client secret to access this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
        query: {
          /**
           * To return the oldest accounts first, set to `asc`. Can be one of `asc` or `desc`. Ignored without the `sort` parameter.
           */
          direction?: "asc" | "desc";
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["marketplace-purchase"][];
        };
        "401": any;
      };
    };
  };
  "/meta": {
    /**
     * This endpoint provides a list of GitHub's IP addresses. For more information, see "[About GitHub's IP addresses](https://help.github.com/articles/about-github-s-ip-addresses/)."
     */
    get: {
      parameters: {};
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["api-overview"];
        };
        "304": any;
      };
    };
  };
  "/networks/{owner}/{repo}/events": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["event"][];
        };
        "301": any;
        "304": any;
        "403": any;
        "404": any;
      };
    };
  };
  "/notifications": {
    /**
     * List all notifications for the current user, sorted by most recently updated.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["thread"][];
        };
        "304": any;
        "401": any;
        "403": any;
        "422": any;
      };
    };
    /**
     * Marks all notifications as "read" removes it from the [default view on GitHub](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List notifications for the authenticated user](https://developer.github.com/v3/activity/notifications/#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
     */
    put: {
      parameters: {};
      responses: {
        /**
         * response
         */
        "202": {
          "application/json": { message?: string };
        };
        /**
         * response
         */
        "205": any;
        "304": any;
        "401": any;
        "403": any;
      };
    };
  };
  "/notifications/threads/{thread_id}": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["thread"];
        };
        "304": any;
        "401": any;
        "403": any;
      };
    };
    patch: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "205": any;
        "304": any;
        "403": any;
      };
    };
  };
  "/notifications/threads/{thread_id}/subscription": {
    /**
     * This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://developer.github.com/v3/activity/watching/#get-a-repository-subscription).
     *
     * Note that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["thread-subscription"];
        };
        "304": any;
        "401": any;
        "403": any;
      };
    };
    /**
     * If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.
     *
     * You can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.
     *
     * Unsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://developer.github.com/v3/activity/notifications/#delete-a-thread-subscription) endpoint.
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["thread-subscription"];
        };
        "304": any;
        "401": any;
        "403": any;
      };
    };
    /**
     * Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://developer.github.com/v3/activity/notifications/#set-a-thread-subscription) endpoint and set `ignore` to `true`.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "304": any;
        "401": any;
        "403": any;
      };
    };
  };
  "/octocat": {
    /**
     * Get the octocat as ASCII art
     */
    get: {
      parameters: {
        query: {
          /**
           * The words to show in Octocat's speech bubble
           */
          s?: string;
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/octocat-stream": string;
        };
      };
    };
  };
  "/organizations": {
    /**
     * Lists all organizations, in the order that they were created on GitHub.
     *
     * **Note:** Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://developer.github.com/v3/#link-header) to get the URL for the next page of organizations.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["organization-simple"][];
        };
        "304": any;
      };
    };
  };
  "/orgs/{org}": {
    /**
     * To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://help.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).
     *
     * GitHub Apps with the `Organization plan` permission can use this endpoint to retrieve information about an organization's GitHub plan. See "[Authenticating with GitHub Apps](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/)" for details. For an example response, see "[Response with GitHub plan information](https://developer.github.com/v3/orgs/#response-with-github-plan-information)."
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["organization-full"];
        };
        "404": any;
      };
    };
    /**
     * **Parameter Deprecation Notice:** GitHub will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).
     *
     * Enables an authenticated organization owner with the `admin:org` scope to update the organization's profile and member privileges.
     */
    patch: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["organization-full"];
        };
        "409": any;
        "415": any;
        /**
         * Validation Failed
         */
        "422": {
          "application/json":
            | components["schemas"]["validation-error"]
            | components["schemas"]["validation-error-simple"];
        };
      };
    };
  };
  "/orgs/{org}/actions/runner-groups": {
    /**
     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
     *
     * Lists all self-hosted runner groups configured in an organization and inherited from an enterprise.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": {
            total_count?: number;
            runner_groups?: components["schemas"]["runner-groups-org"][];
          };
        };
      };
    };
    /**
     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
     *
     * Creates a new self-hosted runner group for an organization.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["runner-groups-org"];
        };
      };
    };
  };
  "/orgs/{org}/actions/runner-groups/{runner_group_id}": {
    /**
     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
     *
     * Gets a specific self-hosted runner group for an organization.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["runner-groups-org"];
        };
      };
    };
    /**
     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
     *
     * Updates the `name` and `visibility` of a self-hosted runner group in an organization.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    patch: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["runner-groups-org"];
        };
      };
    };
    /**
     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
     *
     * Deletes a self-hosted runner group for an organization.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories": {
    /**
     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
     *
     * Lists the repositories with access to a self-hosted runner group configured in an organization.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": {
            total_count?: number;
            repositories?: components["schemas"]["repository"][];
          };
        };
      };
    };
    /**
     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
     *
     * Replaces the list of repositories that have access to a self-hosted runner group configured in an organization.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}": {
    /**
     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
     *
     *
     * Adds a repository to the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization)."
     *
     * You must authenticate using an access token with the `admin:org`
     * scope to use this endpoint.
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
    /**
     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
     *
     *
     * Removes a repository from the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization)."
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners": {
    /**
     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
     *
     * Lists self-hosted runners that are in a specific organization group.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": {
            total_count?: number;
            runners?: components["schemas"]["runner"][];
          };
        };
      };
    };
    /**
     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
     *
     * Replaces the list of self-hosted runners that are part of an organization runner group.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}": {
    /**
     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
     *
     *
     * Adds a self-hosted runner to a runner group configured in an organization.
     *
     * You must authenticate using an access token with the `admin:org`
     * scope to use this endpoint.
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
    /**
     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
     *
     *
     * Removes a self-hosted runner from a group configured in an organization. The runner is then returned to the default group.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/orgs/{org}/actions/runners": {
    /**
     * Lists all self-hosted runners configured in an organization.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": {
            total_count?: number;
            runners?: components["schemas"]["runner"][];
          };
        };
      };
    };
  };
  "/orgs/{org}/actions/runners/downloads": {
    /**
     * Lists binaries for the runner application that you can download and run.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["runner-application"][];
        };
      };
    };
  };
  "/orgs/{org}/actions/runners/registration-token": {
    /**
     * Returns a token that you can pass to the `config` script. The token expires after one hour.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     *
     * #### Example using registration token
     *
     * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
     *
     * ```
     * ./config.sh --url https://github.com/octo-org --token TOKEN
     * ```
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["authentication-token"];
        };
      };
    };
  };
  "/orgs/{org}/actions/runners/remove-token": {
    /**
     * Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     *
     * #### Example using remove token
     *
     * To remove your self-hosted runner from an organization, replace `TOKEN` with the remove token provided by this
     * endpoint.
     *
     * ```
     * ./config.sh remove --token TOKEN
     * ```
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["authentication-token"];
        };
      };
    };
  };
  "/orgs/{org}/actions/runners/{runner_id}": {
    /**
     * Gets a specific self-hosted runner configured in an organization.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["runner"];
        };
      };
    };
    /**
     * Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/orgs/{org}/actions/secrets": {
    /**
     * Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": {
            total_count?: number;
            secrets?: components["schemas"]["organization-actions-secret"][];
          };
        };
      };
    };
  };
  "/orgs/{org}/actions/secrets/public-key": {
    /**
     * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["actions-public-key"];
        };
      };
    };
  };
  "/orgs/{org}/actions/secrets/{secret_name}": {
    /**
     * Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["organization-actions-secret"];
        };
      };
    };
    /**
     * Creates or updates an organization secret with an encrypted value. Encrypt your secret using
     * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
     * token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to
     * use this endpoint.
     *
     * #### Example encrypting a secret using Node.js
     *
     * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
     *
     * ```
     * const sodium = require('tweetsodium');
     *
     * const key = "base64-encoded-public-key";
     * const value = "plain-text-secret";
     *
     * // Convert the message and key to Uint8Array's (Buffer implements that interface)
     * const messageBytes = Buffer.from(value);
     * const keyBytes = Buffer.from(key, 'base64');
     *
     * // Encrypt using LibSodium.
     * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
     *
     * // Base64 the encrypted secret
     * const encrypted = Buffer.from(encryptedBytes).toString('base64');
     *
     * console.log(encrypted);
     * ```
     *
     *
     * #### Example encrypting a secret using Python
     *
     * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/stable/public/#nacl-public-sealedbox) with Python 3.
     *
     * ```
     * from base64 import b64encode
     * from nacl import encoding, public
     *
     * def encrypt(public_key: str, secret_value: str) -> str:
     *   """Encrypt a Unicode string using the public key."""
     *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
     *   sealed_box = public.SealedBox(public_key)
     *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
     *   return b64encode(encrypted).decode("utf-8")
     * ```
     *
     * #### Example encrypting a secret using C#
     *
     * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
     *
     * ```
     * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
     * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
     *
     * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
     *
     * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
     * ```
     *
     * #### Example encrypting a secret using Ruby
     *
     * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
     *
     * ```ruby
     * require "rbnacl"
     * require "base64"
     *
     * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
     * public_key = RbNaCl::PublicKey.new(key)
     *
     * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
     * encrypted_secret = box.encrypt("my_secret")
     *
     * # Print the base64 encoded secret
     * puts Base64.strict_encode64(encrypted_secret)
     * ```
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Response when creating a secret
         */
        "201": any;
        /**
         * Response when updating a secret
         */
        "204": any;
      };
    };
    /**
     * Deletes a secret in an organization using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/orgs/{org}/actions/secrets/{secret_name}/repositories": {
    /**
     * Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": {
            total_count?: number;
            repositories?: components["schemas"]["minimal-repository"][];
          };
        };
      };
    };
    /**
     * Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://developer.github.com/v3/actions/secrets/#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}": {
    /**
     * Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://developer.github.com/v3/actions/secrets/#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
     */
    put: {
      parameters: {
        undefined: {};
        path: {
          repository_id: number;
        };
      };
      responses: {
        /**
         * Response when repository was added to the selected list
         */
        "204": any;
        /**
         * Response when visibility type is not set to selected
         */
        "409": any;
      };
    };
    /**
     * Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://developer.github.com/v3/actions/secrets/#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
     */
    delete: {
      parameters: {
        undefined: {};
        path: {
          repository_id: number;
        };
      };
      responses: {
        /**
         * Response when repository was removed from the selected list
         */
        "204": any;
        /**
         * Response when visibility type not set to selected
         */
        "409": any;
      };
    };
  };
  "/orgs/{org}/blocks": {
    /**
     * List the users blocked by an organization.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["simple-user"][];
        };
        "415": any;
      };
    };
  };
  "/orgs/{org}/blocks/{username}": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * If the user is blocked:
         */
        "204": any;
        /**
         * If the user is not blocked:
         */
        "404": {
          "application/json": components["schemas"]["basic-error"];
        };
      };
    };
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "422": any;
      };
    };
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/orgs/{org}/credential-authorizations": {
    /**
     * Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products).
     *
     * An authenticated organization owner with the `read:org` scope can list all credential authorizations for an organization that uses SAML single sign-on (SSO). The credentials are either personal access tokens or SSH keys that organization members have authorized for the organization. For more information, see [About authentication with SAML single sign-on](https://help.github.com/en/articles/about-authentication-with-saml-single-sign-on).
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["credential-authorization"][];
        };
      };
    };
  };
  "/orgs/{org}/credential-authorizations/{credential_id}": {
    /**
     * Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products).
     *
     * An authenticated organization owner with the `admin:org` scope can remove a credential authorization for an organization that uses SAML SSO. Once you remove someone's credential authorization, they will need to create a new personal access token or SSH key and authorize it for the organization they want to access.
     */
    delete: {
      parameters: {
        undefined: {};
        path: {
          credential_id: number;
        };
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "404": any;
      };
    };
  };
  "/orgs/{org}/events": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["event"][];
        };
      };
    };
  };
  "/orgs/{org}/hooks": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["org-hook"][];
        };
        "404": any;
      };
    };
    /**
     * Here's how you can create a hook that posts payloads in JSON format:
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["org-hook"];
        };
        "404": any;
        "422": any;
      };
    };
  };
  "/orgs/{org}/hooks/{hook_id}": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["org-hook"];
        };
        "404": any;
      };
    };
    patch: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["org-hook"];
        };
        "404": any;
        "422": any;
      };
    };
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "404": any;
      };
    };
  };
  "/orgs/{org}/hooks/{hook_id}/pings": {
    /**
     * This will trigger a [ping event](https://developer.github.com/webhooks/#ping-event) to be sent to the hook.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "404": any;
      };
    };
  };
  "/orgs/{org}/installation": {
    /**
     * Enables an authenticated GitHub App to find the organization's installation information.
     *
     * You must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["installation"];
        };
      };
    };
  };
  "/orgs/{org}/installations": {
    /**
     * Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization. You must be an organization owner with `admin:read` scope to use this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": {
            total_count?: number;
            installations?: components["schemas"]["installation"][];
          };
        };
      };
    };
  };
  "/orgs/{org}/interaction-limits": {
    /**
     * Shows which group of GitHub users can interact with this organization and when the restriction expires. If there are no restrictions, you will see an empty response.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["interaction-limit"];
        };
      };
    };
    /**
     * Temporarily restricts interactions to certain GitHub users in any public repository in the given organization. You must be an organization owner to set these restrictions.
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["interaction-limit"];
        };
        "422": any;
      };
    };
    /**
     * Removes all interaction restrictions from public repositories in the given organization. You must be an organization owner to remove restrictions.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/orgs/{org}/invitations": {
    /**
     * The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["organization-invitation"][];
        };
        "404": any;
      };
    };
    /**
     * Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner.
     *
     * This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)" for details.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["organization-invitation"];
        };
        "404": any;
        "422": any;
      };
    };
  };
  "/orgs/{org}/invitations/{invitation_id}/teams": {
    /**
     * List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["team"][];
        };
        "404": any;
      };
    };
  };
  "/orgs/{org}/issues": {
    /**
     * List issues in an organization assigned to the authenticated user.
     *
     * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
     * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
     * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
     * request id, use the "[List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests)" endpoint.
     */
    get: {
      parameters: {
        undefined: {};
        query: {
          /**
           * Indicates which sorts of issues to return. Can be one of:
           * \* `assigned`: Issues assigned to you
           * \* `created`: Issues created by you
           * \* `mentioned`: Issues mentioning you
           * \* `subscribed`: Issues you're subscribed to updates for
           * \* `all`: All issues the authenticated user can see, regardless of participation or creation
           */
          filter?: "assigned" | "created" | "mentioned" | "subscribed" | "all";
          /**
           * Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
           */
          state?: "open" | "closed" | "all";
          /**
           * What to sort results by. Can be either `created`, `updated`, `comments`.
           */
          sort?: "created" | "updated" | "comments";
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["issue"][];
        };
        "404": any;
      };
    };
  };
  "/orgs/{org}/members": {
    /**
     * List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.
     */
    get: {
      parameters: {
        undefined: {};
        query: {
          /**
           * Filter members returned in the list. Can be one of:
           * \* `2fa_disabled` - Members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled. Available for organization owners.
           * \* `all` - All members the authenticated user can see.
           */
          filter?: "2fa_disabled" | "all";
          /**
           * Filter members returned by their role. Can be one of:
           * \* `all` - All members of the organization, regardless of role.
           * \* `admin` - Organization owners.
           * \* `member` - Non-owner organization members.
           */
          role?: "all" | "admin" | "member";
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["simple-user"][];
        };
        /**
         * Response if requester is not an organization member
         */
        "302": any;
        "422": any;
      };
    };
  };
  "/orgs/{org}/members/{username}": {
    /**
     * Check if a user is, publicly or privately, a member of the organization.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Response if requester is an organization member and user is a member
         */
        "204": any;
        /**
         * Response if requester is not an organization member
         */
        "302": any;
        /**
         * Response if requester is an organization member and user is not a member
         */
        "404": any;
      };
    };
    /**
     * Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "403": any;
      };
    };
  };
  "/orgs/{org}/memberships/{username}": {
    /**
     * In order to get a user's membership with an organization, the authenticated user must be an organization member.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["org-membership"];
        };
        "403": any;
        "404": any;
      };
    };
    /**
     * Only authenticated organization owners can add a member to the organization or update the member's role.
     *
     * *   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://developer.github.com/v3/orgs/members/#get-organization-membership-for-a-user) will be `pending` until they accept the invitation.
     *
     * *   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.
     *
     * **Rate limits**
     *
     * To prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["org-membership"];
        };
        "403": any;
        "422": any;
      };
    };
    /**
     * In order to remove a user's membership with an organization, the authenticated user must be an organization owner.
     *
     * If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "403": any;
        "404": any;
      };
    };
  };
  "/orgs/{org}/migrations": {
    /**
     * Lists the most recent migrations.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["migration"][];
        };
      };
    };
    /**
     * Initiates the generation of a migration archive.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["migration"];
        };
        "404": any;
        "422": any;
      };
    };
  };
  "/orgs/{org}/migrations/{migration_id}": {
    /**
     * Fetches the status of a migration.
     *
     * The `state` of a migration can be one of the following values:
     *
     * *   `pending`, which means the migration hasn't started yet.
     * *   `exporting`, which means the migration is in progress.
     * *   `exported`, which means the migration finished successfully.
     * *   `failed`, which means the migration failed.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * *   `pending`, which means the migration hasn't started yet.
         * *   `exporting`, which means the migration is in progress.
         * *   `exported`, which means the migration finished successfully.
         * *   `failed`, which means the migration failed.
         */
        "200": {
          "application/json": components["schemas"]["migration"];
        };
        "404": any;
      };
    };
  };
  "/orgs/{org}/migrations/{migration_id}/archive": {
    /**
     * Fetches the URL to a migration archive.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "302": any;
        "404": any;
      };
    };
    /**
     * Deletes a previous migration archive. Migration archives are automatically deleted after seven days.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "404": any;
      };
    };
  };
  "/orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock": {
    /**
     * Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://developer.github.com/v3/repos/#delete-a-repository) when the migration is complete and you no longer need the source data.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "404": any;
      };
    };
  };
  "/orgs/{org}/migrations/{migration_id}/repositories": {
    /**
     * List all the repositories for this organization migration.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["minimal-repository"][];
        };
        "404": any;
      };
    };
  };
  "/orgs/{org}/outside_collaborators": {
    /**
     * List all users who are outside collaborators of an organization.
     */
    get: {
      parameters: {
        undefined: {};
        query: {
          /**
           * Filter the list of outside collaborators. Can be one of:
           * \* `2fa_disabled`: Outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled.
           * \* `all`: All outside collaborators.
           */
          filter?: "2fa_disabled" | "all";
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["simple-user"][];
        };
      };
    };
  };
  "/orgs/{org}/outside_collaborators/{username}": {
    /**
     * When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see "[Converting an organization member to an outside collaborator](https://help.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)".
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * User is getting converted asynchronously
         */
        "202": any;
        /**
         * User was converted
         */
        "204": any;
        /**
         * response
         */
        "403": {
          "application/json": { message?: string; documentation_url?: string };
        };
        "404": any;
      };
    };
    /**
     * Removing a user from this list will remove them from all the organization's repositories.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        /**
         * Response if user is a member of the organization
         */
        "422": {
          "application/json": { message?: string; documentation_url?: string };
        };
      };
    };
  };
  "/orgs/{org}/projects": {
    /**
     * Lists the projects in an organization. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
     */
    get: {
      parameters: {
        undefined: {};
        query: {
          /**
           * Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.
           */
          state?: "open" | "closed" | "all";
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["project"][];
        };
        "422": any;
      };
    };
    /**
     * Creates an organization project board. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["project"];
        };
        "401": any;
        "403": any;
        "404": any;
        "410": any;
        "422": any;
      };
    };
  };
  "/orgs/{org}/public_members": {
    /**
     * Members of an organization can choose to have their membership publicized or not.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["simple-user"][];
        };
      };
    };
  };
  "/orgs/{org}/public_members/{username}": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Response if user is a public member
         */
        "204": any;
        /**
         * Response if user is not a public member
         */
        "404": any;
      };
    };
    /**
     * The user can publicize their own membership. (A user cannot publicize the membership for another user.)
     *
     * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://developer.github.com/v3/#http-verbs)."
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "403": any;
      };
    };
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/orgs/{org}/repos": {
    /**
     * Lists repositories for the specified organization.
     */
    get: {
      parameters: {
        undefined: {};
        query: {
          /**
           * Specifies the types of repositories you want returned. Can be one of `all`, `public`, `private`, `forks`, `sources`, `member`, `internal`. Default: `all`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `type` can also be `internal`.
           */
          type?:
            | "all"
            | "public"
            | "private"
            | "forks"
            | "sources"
            | "member"
            | "internal";
          /**
           * Can be one of `created`, `updated`, `pushed`, `full_name`.
           */
          sort?: "created" | "updated" | "pushed" | "full_name";
          /**
           * Can be one of `asc` or `desc`. Default: when using `full_name`: `asc`, otherwise `desc`
           */
          direction?: "asc" | "desc";
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["minimal-repository"][];
        };
      };
    };
    /**
     * Creates a new repository in the specified organization. The authenticated user must be a member of the organization.
     *
     * **OAuth scope requirements**
     *
     * When using [OAuth](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
     *
     * *   `public_repo` scope or `repo` scope to create a public repository
     * *   `repo` scope to create a private repository
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["repository"];
        };
        "403": any;
        "422": any;
      };
    };
  };
  "/orgs/{org}/settings/billing/actions": {
    /**
     * Gets the summary of the free and paid GitHub Actions minutes used.
     *
     * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
     *
     * Access tokens must have the `read:org` scope.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["actions-billing-usage"];
        };
      };
    };
  };
  "/orgs/{org}/settings/billing/packages": {
    /**
     * Gets the free and paid storage usued for GitHub Packages in gigabytes.
     *
     * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
     *
     * Access tokens must have the `read:org` scope.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["packages-billing-usage"];
        };
      };
    };
  };
  "/orgs/{org}/settings/billing/shared-storage": {
    /**
     * Gets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.
     *
     * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
     *
     * Access tokens must have the `read:org` scope.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["combined-billing-usage"];
        };
      };
    };
  };
  "/orgs/{org}/team-sync/groups": {
    /**
     * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * List IdP groups available in an organization. You can limit your page results using the `per_page` parameter. GitHub generates a url-encoded `page` token using a cursor value for where the next page begins. For more information on cursor pagination, see "[Offset and Cursor Pagination explained](https://dev.to/jackmarchant/offset-and-cursor-pagination-explained-b89)."
     *
     * The `per_page` parameter provides pagination for a list of IdP groups the authenticated user can access in an organization. For example, if the user `octocat` wants to see two groups per page in `octo-org` via cURL, it would look like this:
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["group-mapping"];
        };
      };
    };
  };
  "/orgs/{org}/teams": {
    /**
     * Lists all teams in an organization that are visible to the authenticated user.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["team"][];
        };
        "403": any;
      };
    };
    /**
     * To create a team, the authenticated user must be a member or owner of `{org}`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see "[Setting team creation permissions](https://help.github.com/en/articles/setting-team-creation-permissions-in-your-organization)."
     *
     * When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of `maintainers`. For more information, see "[About teams](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/about-teams)".
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["team-full"];
        };
        "403": any;
        "422": any;
      };
    };
  };
  "/orgs/{org}/teams/{team_slug}": {
    /**
     * Gets a team using the team's `slug`. GitHub generates the `slug` from the team `name`.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}`.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["team-full"];
        };
        "404": any;
      };
    };
    /**
     * To edit a team, the authenticated user must either be an organization owner or a team maintainer.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}`.
     */
    patch: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["team-full"];
        };
      };
    };
    /**
     * To delete a team, the authenticated user must be an organization owner or team maintainer.
     *
     * If you are an organization owner, deleting a parent team will delete all of its child teams as well.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}`.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/orgs/{org}/teams/{team_slug}/discussions": {
    /**
     * List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions`.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["team-discussion"][];
        };
      };
    };
    /**
     * Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)" for details.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions`.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["team-discussion"];
        };
      };
    };
  };
  "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}": {
    /**
     * Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["team-discussion"];
        };
      };
    };
    /**
     * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
     */
    patch: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["team-discussion"];
        };
      };
    };
    /**
     * Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments": {
    /**
     * List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["team-discussion-comment"][];
        };
      };
    };
    /**
     * Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)" for details.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["team-discussion-comment"];
        };
      };
    };
  };
  "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}": {
    /**
     * Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["team-discussion-comment"];
        };
      };
    };
    /**
     * Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
     */
    patch: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["team-discussion-comment"];
        };
      };
    };
    /**
     * Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions": {
    /**
     * List the reactions to a [team discussion comment](https://developer.github.com/v3/teams/discussion_comments/). OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
     */
    get: {
      parameters: {
        undefined: {};
        query: {
          /**
           * Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a team discussion comment.
           */
          content?:
            | "+1"
            | "-1"
            | "laugh"
            | "confused"
            | "heart"
            | "hooray"
            | "rocket"
            | "eyes";
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["reaction"][];
        };
      };
    };
    /**
     * Create a reaction to a [team discussion comment](https://developer.github.com/v3/teams/discussion_comments/). OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion comment.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["reaction"];
        };
      };
    };
  };
  "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}": {
    /**
     * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.
     *
     * Delete a reaction to a [team discussion comment](https://developer.github.com/v3/teams/discussion_comments/). OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions": {
    /**
     * List the reactions to a [team discussion](https://developer.github.com/v3/teams/discussions/). OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
     */
    get: {
      parameters: {
        undefined: {};
        query: {
          /**
           * Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a team discussion.
           */
          content?:
            | "+1"
            | "-1"
            | "laugh"
            | "confused"
            | "heart"
            | "hooray"
            | "rocket"
            | "eyes";
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["reaction"][];
        };
      };
    };
    /**
     * Create a reaction to a [team discussion](https://developer.github.com/v3/teams/discussions/). OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["reaction"];
        };
      };
    };
  };
  "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}": {
    /**
     * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.
     *
     * Delete a reaction to a [team discussion](https://developer.github.com/v3/teams/discussions/). OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/orgs/{org}/teams/{team_slug}/invitations": {
    /**
     * The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/invitations`.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["organization-invitation"][];
        };
      };
    };
  };
  "/orgs/{org}/teams/{team_slug}/members": {
    /**
     * Team members will include the members of child teams.
     *
     * To list members in a team, the team must be visible to the authenticated user.
     */
    get: {
      parameters: {
        undefined: {};
        query: {
          /**
           * Filters members returned by their role in the team. Can be one of:
           * \* `member` - normal members of the team.
           * \* `maintainer` - team maintainers.
           * \* `all` - all members of the team.
           */
          role?: "member" | "maintainer" | "all";
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["simple-user"][];
        };
      };
    };
  };
  "/orgs/{org}/teams/{team_slug}/memberships/{username}": {
    /**
     * Team members will include the members of child teams.
     *
     * To get a user's membership with a team, the team must be visible to the authenticated user.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`.
     *
     * **Note:** The `role` for organization owners returns as `maintainer`. For more information about `maintainer` roles, see [Create a team](https://developer.github.com/v3/teams/#create-a-team).
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["team-membership"];
        };
        /**
         * Response if user has no team membership
         */
        "404": any;
      };
    };
    /**
     * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.
     *
     * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
     *
     * An organization owner can add someone who is not part of the team's organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the "pending" state until the person accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team.
     *
     * If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/memberships/{username}`.
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["team-membership"];
        };
        /**
         * Response if team synchronization is set up
         */
        "403": any;
        /**
         * Response if you attempt to add an organization to a team
         */
        "422": {
          "application/json": {
            message?: string;
            errors?: { code?: string; field?: string; resource?: string }[];
          };
        };
      };
    };
    /**
     * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
     *
     * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}`.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        /**
         * Response if team synchronization is set up
         */
        "403": any;
      };
    };
  };
  "/orgs/{org}/teams/{team_slug}/projects": {
    /**
     * Lists the organization projects for a team.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects`.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["team-project"][];
        };
      };
    };
  };
  "/orgs/{org}/teams/{team_slug}/projects/{project_id}": {
    /**
     * Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["team-project"];
        };
        /**
         * Response if project is not managed by this team
         */
        "404": any;
      };
    };
    /**
     * Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        /**
         * Response if the project is not owned by the organization
         */
        "403": {
          "application/json": { message?: string; documentation_url?: string };
        };
      };
    };
    /**
     * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. This endpoint removes the project from the team, but does not delete the project.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/orgs/{org}/teams/{team_slug}/repos": {
    /**
     * Lists a team's repositories visible to the authenticated user.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos`.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["minimal-repository"][];
        };
      };
    };
  };
  "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}": {
    /**
     * Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.
     *
     * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://developer.github.com/v3/media/) via the `application/vnd.github.v3.repository+json` accept header.
     *
     * If a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Alternative response with repository permissions
         */
        "200": {
          "application/vnd.github.v3.repository+json": components["schemas"]["team-repository"];
        };
        /**
         * Response if team has permission for the repository
         */
        "204": any;
        /**
         * Response if team does not have permission for the repository
         */
        "404": any;
      };
    };
    /**
     * To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://developer.github.com/v3/#http-verbs)."
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
     *
     * For more information about the permission levels, see "[Repository permission levels for an organization](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
    /**
     * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/orgs/{org}/teams/{team_slug}/team-sync/group-mappings": {
    /**
     * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * List IdP groups connected to a team on GitHub.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/team-sync/group-mappings`.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["group-mapping"];
        };
      };
    };
    /**
     * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Creates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty `groups` array will remove all connections for a team.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/team-sync/group-mappings`.
     */
    patch: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["group-mapping"];
        };
      };
    };
  };
  "/orgs/{org}/teams/{team_slug}/teams": {
    /**
     * Lists the child teams of the team specified by `{team_slug}`.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/teams`.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Response if child teams exist
         */
        "200": {
          "application/json": components["schemas"]["team"][];
        };
      };
    };
  };
  "/projects/columns/cards/{card_id}": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["project-card"];
        };
        "304": any;
        "401": any;
        "403": any;
        "404": any;
      };
    };
    patch: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["project-card"];
        };
        "304": any;
        "401": any;
        "403": any;
        "404": any;
        "422": any;
      };
    };
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "304": any;
        "401": any;
        /**
         * Forbidden
         */
        "403": {
          "application/json": {
            message?: string;
            documentation_url?: string;
            errors?: string[];
          };
        };
        "404": any;
      };
    };
  };
  "/projects/columns/cards/{card_id}/moves": {
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": { [key: string]: any };
        };
        "304": any;
        "401": any;
        /**
         * Forbidden
         */
        "403": {
          "application/json": {
            message?: string;
            documentation_url?: string;
            errors?: {
              code?: string;
              message?: string;
              resource?: string;
              field?: string;
            }[];
          };
        };
        "422": any;
        /**
         * Service Unavailable
         */
        "503": {
          "application/json": {
            code?: string;
            message?: string;
            documentation_url?: string;
            errors?: { code?: string; message?: string }[];
          };
        };
      };
    };
  };
  "/projects/columns/{column_id}": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["project-column"];
        };
        "304": any;
        "401": any;
        "403": any;
        "404": any;
      };
    };
    patch: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["project-column"];
        };
        "304": any;
        "401": any;
        "403": any;
      };
    };
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "304": any;
        "401": any;
        "403": any;
      };
    };
  };
  "/projects/columns/{column_id}/cards": {
    get: {
      parameters: {
        undefined: {};
        query: {
          /**
           * Filters the project cards that are returned by the card's state. Can be one of `all`,`archived`, or `not_archived`.
           */
          archived_state?: "all" | "archived" | "not_archived";
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["project-card"][];
        };
        "304": any;
        "401": any;
        "403": any;
      };
    };
    /**
     * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key.
     *
     * Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests)" endpoint.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["project-card"];
        };
        "304": any;
        "401": any;
        "403": any;
        /**
         * Validation Failed
         */
        "422": {
          "application/json":
            | components["schemas"]["validation-error"]
            | components["schemas"]["validation-error-simple"];
        };
        /**
         * Service Unavailable
         */
        "503": {
          "application/json": {
            code?: string;
            message?: string;
            documentation_url?: string;
            errors?: { code?: string; message?: string }[];
          };
        };
      };
    };
  };
  "/projects/columns/{column_id}/moves": {
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": { [key: string]: any };
        };
        "304": any;
        "401": any;
        "403": any;
        "422": any;
      };
    };
  };
  "/projects/{project_id}": {
    /**
     * Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["project"];
        };
        "304": any;
        "401": any;
        "403": any;
      };
    };
    /**
     * Updates a project board's information. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
     */
    patch: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["project"];
        };
        "304": any;
        "401": any;
        /**
         * Forbidden
         */
        "403": {
          "application/json": {
            message?: string;
            documentation_url?: string;
            errors?: string[];
          };
        };
        /**
         * Response if the authenticated user does not have access to the project
         */
        "404": any;
        "410": any;
        "422": any;
      };
    };
    /**
     * Deletes a project board. Returns a `404 Not Found` status if projects are disabled.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Delete Success
         */
        "204": any;
        "304": any;
        "401": any;
        /**
         * Forbidden
         */
        "403": {
          "application/json": {
            message?: string;
            documentation_url?: string;
            errors?: string[];
          };
        };
        "404": any;
        "410": any;
      };
    };
  };
  "/projects/{project_id}/collaborators": {
    /**
     * Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project `admin` to list collaborators.
     */
    get: {
      parameters: {
        undefined: {};
        query: {
          /**
           * Filters the collaborators by their affiliation. Can be one of:
           * \* `outside`: Outside collaborators of a project that are not a member of the project's organization.
           * \* `direct`: Collaborators with permissions to a project, regardless of organization membership status.
           * \* `all`: All collaborators the authenticated user can see.
           */
          affiliation?: "outside" | "direct" | "all";
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["simple-user"][];
        };
        "304": any;
        "401": any;
        "403": any;
        "404": any;
        "415": any;
        "422": any;
      };
    };
  };
  "/projects/{project_id}/collaborators/{username}": {
    /**
     * Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project `admin` to add a collaborator.
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "304": any;
        "401": any;
        "403": any;
        "404": any;
        "415": any;
        "422": any;
      };
    };
    /**
     * Removes a collaborator from an organization project. You must be an organization owner or a project `admin` to remove a collaborator.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "304": any;
        "401": any;
        "403": any;
        "404": any;
        "415": any;
        "422": any;
      };
    };
  };
  "/projects/{project_id}/collaborators/{username}/permission": {
    /**
     * Returns the collaborator's permission level for an organization project. Possible values for the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission level.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["repository-collaborator-permission"];
        };
        "304": any;
        "401": any;
        "403": any;
        "404": any;
        "415": any;
        "422": any;
      };
    };
  };
  "/projects/{project_id}/columns": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["project-column"][];
        };
        "304": any;
        "401": any;
        "403": any;
      };
    };
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["project-column"];
        };
        "304": any;
        "401": any;
        "403": any;
        "422": any;
      };
    };
  };
  "/rate_limit": {
    /**
     * **Note:** Accessing this endpoint does not count against your REST API rate limit.
     *
     * **Note:** The `rate` object is deprecated. If you're writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object.
     */
    get: {
      parameters: {};
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["rate-limit-overview"];
        };
        "304": any;
        "404": any;
      };
    };
  };
  "/reactions/{reaction_id}": {
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Reactions API. We recommend migrating your existing code to use the new delete reactions endpoints. For more information, see this [blog post](https://developer.github.com/changes/2020-02-26-new-delete-reactions-endpoints/).
     *
     * OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), when deleting a [team discussion](https://developer.github.com/v3/teams/discussions/) or [team discussion comment](https://developer.github.com/v3/teams/discussion_comments/).
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "304": any;
        "401": any;
        "403": any;
        "410": any;
        "415": any;
      };
    };
  };
  "/repos/{owner}/{repo}": {
    /**
     * When you pass the `scarlet-witch-preview` media type, requests to get a repository will also return the repository's code of conduct if it can be detected from the repository's code of conduct file.
     *
     * The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["full-repository"];
        };
        "301": any;
        "403": any;
        "404": any;
      };
    };
    /**
     * **Note**: To edit a repository's topics, use the [Replace all repository topics](https://developer.github.com/v3/repos/#replace-all-repository-topics) endpoint.
     */
    patch: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["full-repository"];
        };
        "403": any;
        "404": any;
        "422": any;
      };
    };
    /**
     * Deleting a repository requires admin access. If OAuth is used, the `delete_repo` scope is required.
     *
     * If an organization owner has configured the organization to prevent members from deleting organization-owned
     * repositories, you will get a `403 Forbidden` response.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        /**
         * If an organization owner has configured the organization to prevent members from deleting organization-owned repositories, a member will get this response:
         */
        "403": {
          "application/json": { message?: string; documentation_url?: string };
        };
        "404": any;
      };
    };
  };
  "/repos/{owner}/{repo}/actions/artifacts": {
    /**
     * Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": {
            total_count?: number;
            artifacts?: components["schemas"]["artifact"][];
          };
        };
      };
    };
  };
  "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}": {
    /**
     * Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["artifact"];
        };
      };
    };
    /**
     * Deletes an artifact for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}": {
    /**
     * Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in
     * the response header to find the URL for the download. The `:archive_format` must be `zip`. Anyone with read access to
     * the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
     * GitHub Apps must have the `actions:read` permission to use this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
        path: {
          archive_format: string;
        };
      };
      responses: {
        /**
         * response
         */
        "302": any;
      };
    };
  };
  "/repos/{owner}/{repo}/actions/jobs/{job_id}": {
    /**
     * Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "202": {
          "application/json": components["schemas"]["job"];
        };
      };
    };
  };
  "/repos/{owner}/{repo}/actions/jobs/{job_id}/logs": {
    /**
     * Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look
     * for `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can
     * use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must
     * have the `actions:read` permission to use this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "302": any;
      };
    };
  };
  "/repos/{owner}/{repo}/actions/runners": {
    /**
     * Lists all self-hosted runners configured in a repository. You must authenticate using an access token with the `repo` scope to use this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": {
            total_count?: number;
            runners?: components["schemas"]["runner"][];
          };
        };
      };
    };
  };
  "/repos/{owner}/{repo}/actions/runners/downloads": {
    /**
     * Lists binaries for the runner application that you can download and run.
     *
     * You must authenticate using an access token with the `repo` scope to use this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["runner-application"][];
        };
      };
    };
  };
  "/repos/{owner}/{repo}/actions/runners/registration-token": {
    /**
     * Returns a token that you can pass to the `config` script. The token expires after one hour. You must authenticate
     * using an access token with the `repo` scope to use this endpoint.
     *
     * #### Example using registration token
     *
     * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
     *
     * ```
     * ./config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN
     * ```
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["authentication-token"];
        };
      };
    };
  };
  "/repos/{owner}/{repo}/actions/runners/remove-token": {
    /**
     * Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour.
     * You must authenticate using an access token with the `repo` scope to use this endpoint.
     *
     * #### Example using remove token
     *
     * To remove your self-hosted runner from a repository, replace TOKEN with the remove token provided by this endpoint.
     *
     * ```
     * ./config.sh remove --token TOKEN
     * ```
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["authentication-token"];
        };
      };
    };
  };
  "/repos/{owner}/{repo}/actions/runners/{runner_id}": {
    /**
     * Gets a specific self-hosted runner configured in a repository.
     *
     * You must authenticate using an access token with the `repo` scope to use this
     * endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["runner"];
        };
      };
    };
    /**
     * Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
     *
     * You must authenticate using an access token with the `repo`
     * scope to use this endpoint.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/repos/{owner}/{repo}/actions/runs": {
    /**
     * Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://developer.github.com/v3/#parameters).
     *
     * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": {
            total_count?: number;
            workflow_runs?: components["schemas"]["workflow-run"][];
          };
        };
      };
    };
  };
  "/repos/{owner}/{repo}/actions/runs/{run_id}": {
    /**
     * Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["workflow-run"];
        };
      };
    };
    /**
     * Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is
     * private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:write` permission to use
     * this endpoint.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts": {
    /**
     * Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": {
            total_count?: number;
            artifacts?: components["schemas"]["artifact"][];
          };
        };
      };
    };
  };
  "/repos/{owner}/{repo}/actions/runs/{run_id}/cancel": {
    /**
     * Cancels a workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "202": any;
      };
    };
  };
  "/repos/{owner}/{repo}/actions/runs/{run_id}/jobs": {
    /**
     * Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://developer.github.com/v3/#parameters).
     */
    get: {
      parameters: {
        undefined: {};
        query: {
          /**
           * Filters jobs by their `completed_at` timestamp. Can be one of:
           * \* `latest`: Returns jobs from the most recent execution of the workflow run.
           * \* `all`: Returns all jobs for a workflow run, including from old executions of the workflow run.
           */
          filter?: "latest" | "all";
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": {
            total_count?: number;
            jobs?: components["schemas"]["job"][];
          };
        };
      };
    };
  };
  "/repos/{owner}/{repo}/actions/runs/{run_id}/logs": {
    /**
     * Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for
     * `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can use
     * this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have
     * the `actions:read` permission to use this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "302": any;
      };
    };
    /**
     * Deletes all logs for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/repos/{owner}/{repo}/actions/runs/{run_id}/rerun": {
    /**
     * Re-runs your workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": any;
      };
    };
  };
  "/repos/{owner}/{repo}/actions/runs/{run_id}/timing": {
    /**
     * **Warning:** This GitHub Actions usage endpoint is currently in public beta and subject to change. For more information, see "[GitHub Actions API workflow usage](https://developer.github.com/changes/2020-05-15-actions-api-workflow-usage)."
     *
     * Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
     *
     * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["workflow-run-usage"];
        };
      };
    };
  };
  "/repos/{owner}/{repo}/actions/secrets": {
    /**
     * Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": {
            total_count?: number;
            secrets?: components["schemas"]["actions-secret"][];
          };
        };
      };
    };
  };
  "/repos/{owner}/{repo}/actions/secrets/public-key": {
    /**
     * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["actions-public-key"];
        };
      };
    };
  };
  "/repos/{owner}/{repo}/actions/secrets/{secret_name}": {
    /**
     * Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["actions-secret"];
        };
      };
    };
    /**
     * Creates or updates a repository secret with an encrypted value. Encrypt your secret using
     * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
     * token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use
     * this endpoint.
     *
     * #### Example encrypting a secret using Node.js
     *
     * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
     *
     * ```
     * const sodium = require('tweetsodium');
     *
     * const key = "base64-encoded-public-key";
     * const value = "plain-text-secret";
     *
     * // Convert the message and key to Uint8Array's (Buffer implements that interface)
     * const messageBytes = Buffer.from(value);
     * const keyBytes = Buffer.from(key, 'base64');
     *
     * // Encrypt using LibSodium.
     * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
     *
     * // Base64 the encrypted secret
     * const encrypted = Buffer.from(encryptedBytes).toString('base64');
     *
     * console.log(encrypted);
     * ```
     *
     *
     * #### Example encrypting a secret using Python
     *
     * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/stable/public/#nacl-public-sealedbox) with Python 3.
     *
     * ```
     * from base64 import b64encode
     * from nacl import encoding, public
     *
     * def encrypt(public_key: str, secret_value: str) -> str:
     *   """Encrypt a Unicode string using the public key."""
     *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
     *   sealed_box = public.SealedBox(public_key)
     *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
     *   return b64encode(encrypted).decode("utf-8")
     * ```
     *
     * #### Example encrypting a secret using C#
     *
     * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
     *
     * ```
     * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
     * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
     *
     * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
     *
     * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
     * ```
     *
     * #### Example encrypting a secret using Ruby
     *
     * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
     *
     * ```ruby
     * require "rbnacl"
     * require "base64"
     *
     * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
     * public_key = RbNaCl::PublicKey.new(key)
     *
     * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
     * encrypted_secret = box.encrypt("my_secret")
     *
     * # Print the base64 encoded secret
     * puts Base64.strict_encode64(encrypted_secret)
     * ```
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Response when creating a secret
         */
        "201": any;
        /**
         * Response when updating a secret
         */
        "204": any;
      };
    };
    /**
     * Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/repos/{owner}/{repo}/actions/workflows": {
    /**
     * Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": {
            total_count?: number;
            workflows?: components["schemas"]["workflow"][];
          };
        };
      };
    };
  };
  "/repos/{owner}/{repo}/actions/workflows/{workflow_id}": {
    /**
     * Gets a specific workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["workflow"];
        };
      };
    };
  };
  "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable": {
    /**
     * Disables a workflow and sets the `state` of the workflow to `disabled_manually`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
     *
     * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches": {
    /**
     * You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
     *
     * You must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see "[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch)."
     *
     * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. For more information, see "[Creating a personal access token for the command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line)."
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable": {
    /**
     * Enables a workflow and sets the `state` of the workflow to `active`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
     *
     * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs": {
    /**
     * List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://developer.github.com/v3/#parameters).
     *
     * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": {
            total_count?: number;
            workflow_runs?: components["schemas"]["workflow-run"][];
          };
        };
      };
    };
  };
  "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing": {
    /**
     * **Warning:** This GitHub Actions usage endpoint is currently in public beta and subject to change. For more information, see "[GitHub Actions API workflow usage](https://developer.github.com/changes/2020-05-15-actions-api-workflow-usage)."
     *
     * Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
     *
     * You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["workflow-usage"];
        };
      };
    };
  };
  "/repos/{owner}/{repo}/assignees": {
    /**
     * Lists the [available assignees](https://help.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["simple-user"][];
        };
        "404": any;
      };
    };
  };
  "/repos/{owner}/{repo}/assignees/{assignee}": {
    /**
     * Checks if a user has permission to be assigned to an issue in this repository.
     *
     * If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.
     *
     * Otherwise a `404` status code is returned.
     */
    get: {
      parameters: {
        undefined: {};
        path: {
          assignee: string;
        };
      };
      responses: {
        /**
         * If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.
         */
        "204": any;
        /**
         * Otherwise a `404` status code is returned.
         */
        "404": {
          "application/json": components["schemas"]["basic-error"];
        };
      };
    };
  };
  "/repos/{owner}/{repo}/automated-security-fixes": {
    /**
     * Enables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring automated security fixes](https://help.github.com/en/articles/configuring-automated-security-fixes)".
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
    /**
     * Disables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring automated security fixes](https://help.github.com/en/articles/configuring-automated-security-fixes)".
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/repos/{owner}/{repo}/branches": {
    get: {
      parameters: {
        undefined: {};
        query: {
          /**
           * Setting to `true` returns only protected branches. When set to `false`, only unprotected branches are returned. Omitting this parameter returns all branches.
           */
          protected?: boolean;
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["short-branch"][];
        };
        "404": any;
      };
    };
  };
  "/repos/{owner}/{repo}/branches/{branch}": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["branch-with-protection"];
        };
        "404": any;
        "415": any;
      };
    };
  };
  "/repos/{owner}/{repo}/branches/{branch}/protection": {
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["branch-protection"];
        };
        "404": any;
      };
    };
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Protecting a branch requires admin or owner permissions to the repository.
     *
     * **Note**: Passing new arrays of `users` and `teams` replaces their previous values.
     *
     * **Note**: The list of users, apps, and teams in total is limited to 100 items.
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["protected-branch"];
        };
        "403": any;
        "404": any;
        "415": any;
        "422": any;
      };
    };
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "403": any;
      };
    };
  };
  "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins": {
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["protected-branch-admin-enforced"];
        };
      };
    };
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Adding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["protected-branch-admin-enforced"];
        };
      };
    };
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * No Content
         */
        "204": any;
        "404": any;
      };
    };
  };
  "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews": {
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/vnd.github.luke-cage-preview+json": components["schemas"]["protected-branch-pull-request-review"];
        };
      };
    };
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
     *
     * **Note**: Passing new arrays of `users` and `teams` replaces their previous values.
     */
    patch: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["protected-branch-pull-request-review"];
        };
        "422": any;
      };
    };
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * No Content
         */
        "204": any;
        "404": any;
      };
    };
  };
  "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures": {
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://help.github.com/articles/signing-commits-with-gpg) in GitHub Help.
     *
     * **Note**: You must enable branch protection to require signed commits.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["protected-branch-admin-enforced"];
        };
        "404": any;
      };
    };
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * When authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["protected-branch-admin-enforced"];
        };
        "404": any;
      };
    };
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * No Content
         */
        "204": any;
        "404": any;
      };
    };
  };
  "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks": {
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["status-check-policy"];
        };
        "404": any;
      };
    };
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.
     */
    patch: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["status-check-policy"];
        };
        "404": any;
        "422": any;
      };
    };
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * No Content
         */
        "204": any;
      };
    };
  };
  "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts": {
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": string[];
        };
        "404": any;
      };
    };
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": string[];
        };
        "403": any;
        "404": any;
        "422": any;
      };
    };
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": string[];
        };
        "404": any;
        "422": any;
      };
    };
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": string[];
        };
        "404": any;
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions": {
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Lists who has access to this protected branch.
     *
     * **Note**: Users, apps, and teams `restrictions` are only available for organization-owned repositories.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["branch-restriction-policy"];
        };
        "404": any;
      };
    };
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Disables the ability to restrict who can push to this branch.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * No Content
         */
        "204": any;
      };
    };
  };
  "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps": {
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Lists the GitHub Apps that have push access to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["integration"][];
        };
        "404": any;
      };
    };
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Grants the specified apps push access for this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
     *
     * | Type    | Description                                                                                                                                                |
     * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["integration"][];
        };
        "422": any;
      };
    };
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Replaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
     *
     * | Type    | Description                                                                                                                                                |
     * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["integration"][];
        };
        "422": any;
      };
    };
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Removes the ability of an app to push to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
     *
     * | Type    | Description                                                                                                                                                |
     * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["integration"][];
        };
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams": {
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Lists the teams who have push access to this branch. The list includes child teams.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["team"][];
        };
        "404": any;
      };
    };
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Grants the specified teams push access for this branch. You can also give push access to child teams.
     *
     * | Type    | Description                                                                                                                                |
     * | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
     * | `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["team"][];
        };
        "422": any;
      };
    };
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Replaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams.
     *
     * | Type    | Description                                                                                                                                |
     * | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
     * | `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["team"][];
        };
        "422": any;
      };
    };
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Removes the ability of a team to push to this branch. You can also remove push access for child teams.
     *
     * | Type    | Description                                                                                                                                         |
     * | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `array` | Teams that should no longer have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["team"][];
        };
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users": {
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Lists the people who have push access to this branch.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["simple-user"][];
        };
        "404": any;
      };
    };
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Grants the specified people push access for this branch.
     *
     * | Type    | Description                                                                                                                   |
     * | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
     * | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["simple-user"][];
        };
        "422": any;
      };
    };
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Replaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.
     *
     * | Type    | Description                                                                                                                   |
     * | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
     * | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["simple-user"][];
        };
        "422": any;
      };
    };
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Removes the ability of a user to push to this branch.
     *
     * | Type    | Description                                                                                                                                   |
     * | ------- | --------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `array` | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["simple-user"][];
        };
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/check-runs": {
    /**
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
     *
     * Creates a new check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to create check runs.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["check-run"];
        };
      };
    };
  };
  "/repos/{owner}/{repo}/check-runs/{check_run_id}": {
    /**
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
     *
     * Gets a single check run using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["check-run"];
        };
      };
    };
    /**
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
     *
     * Updates a check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to edit check runs.
     */
    patch: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["check-run"];
        };
      };
    };
  };
  "/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations": {
    /**
     * Lists annotations for a check run using the annotation `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get annotations for a check run. OAuth Apps and authenticated users must have the `repo` scope to get annotations for a check run in a private repository.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["check-annotation"][];
        };
      };
    };
  };
  "/repos/{owner}/{repo}/check-suites": {
    /**
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
     *
     * By default, check suites are automatically created when you create a [check run](https://developer.github.com/v3/checks/runs/). You only need to use this endpoint for manually creating check suites when you've disabled automatic creation using "[Update repository preferences for check suites](https://developer.github.com/v3/checks/suites/#update-repository-preferences-for-check-suites)". Your GitHub App must have the `checks:write` permission to create check suites.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["check-suite"];
        };
      };
    };
  };
  "/repos/{owner}/{repo}/check-suites/preferences": {
    /**
     * Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://developer.github.com/v3/checks/suites/#create-a-check-suite). You must have admin permissions in the repository to set preferences for check suites.
     */
    patch: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["check-suite-preference"];
        };
      };
    };
  };
  "/repos/{owner}/{repo}/check-suites/{check_suite_id}": {
    /**
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
     *
     * Gets a single check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["check-suite"];
        };
      };
    };
  };
  "/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs": {
    /**
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
     *
     * Lists check runs for a check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
     */
    get: {
      parameters: {
        undefined: {};
        query: {
          /**
           * Filters check runs by their `completed_at` timestamp. Can be one of `latest` (returning the most recent check runs) or `all`.
           */
          filter?: "latest" | "all";
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": {
            total_count?: number;
            check_runs?: components["schemas"]["check-run"][];
          };
        };
      };
    };
  };
  "/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest": {
    /**
     * Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [`check_suite` webhook](https://developer.github.com/webhooks/event-payloads/#check_suite) event with the action `rerequested`. When a check suite is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.
     *
     * To rerequest a check suite, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": any;
      };
    };
  };
  "/repos/{owner}/{repo}/code-scanning/alerts": {
    /**
     * Lists all open code scanning alerts for the default branch (usually `master`) and protected branches in a repository. For private repos, you must use an access token with the `repo` scope. For public repos, you must use an access token with `public_repo` and `repo:security_events` scopes. GitHub Apps must have the `security_events` read permission to use this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
        query: {
          /**
           * Set to `open`, `fixed`, or `dismissed` to list code scanning alerts in a specific state.
           */
          state?: components["schemas"]["code-scanning-alert-state"];
          /**
           * Set a full Git reference to list alerts for a specific branch. The `ref` must be formatted as `refs/heads/<branch name>`.
           */
          ref?: components["schemas"]["code-scanning-alert-ref"];
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["code-scanning-alert-code-scanning-alert-items"][];
        };
        /**
         * Response if the ref doesn't match an existing ref
         */
        "404": any;
        "503": any;
      };
    };
  };
  "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}": {
    /**
     * Gets a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint.
     *
     * The security `alert_number` is found at the end of the security alert's URL. For example, the security alert ID for `https://github.com/Octo-org/octo-repo/security/code-scanning/88` is `88`.
     */
    get: {
      parameters: {
        undefined: {};
        path: {
          alert_number: number;
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["code-scanning-alert-code-scanning-alert"];
        };
        "404": any;
        "503": any;
      };
    };
    /**
     * Updates the status of a single code scanning alert. For private repos, you must use an access token with the `repo` scope. For public repos, you must use an access token with `public_repo` and `repo:security_events` scopes.
     * GitHub Apps must have the `security_events` write permission to use this endpoint.
     */
    patch: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["code-scanning-alert-code-scanning-alert"];
        };
        /**
         * When code scanning isn't available you can try again at a later time
         */
        "503": any;
      };
    };
  };
  "/repos/{owner}/{repo}/code-scanning/analyses": {
    /**
     * List the details of recent code scanning analyses for a repository. For private repos, you must use an access token with the `repo` scope. For public repos, you must use an access token with `public_repo` and `repo:security_events` scopes. GitHub Apps must have the `security_events` read permission to use this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
        query: {
          /**
           * Set a full Git reference to list alerts for a specific branch. The `ref` must be formatted as `refs/heads/<branch name>`.
           */
          ref?: components["schemas"]["code-scanning-analysis-ref"];
          /**
           * Set a single code scanning tool name to filter alerts by tool.
           */
          tool_name?: components["schemas"]["code-scanning-analysis-tool-name"];
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["code-scanning-analysis-code-scanning-analysis"][];
        };
      };
    };
  };
  "/repos/{owner}/{repo}/code-scanning/sarifs": {
    /**
     * Upload a SARIF file containing the results of a code scanning analysis to make the results available in a repository.
     * For private repos, you must use an access token with the `repo` scope. For public repos, you must use an access token with `public_repo` and `repo:security_events` scopes. GitHub Apps must have the `security_events` write permission to use this endpoint.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "202": any;
        /**
         * Response if `commit_sha` or `ref` cannot be found
         */
        "404": any;
      };
    };
  };
  "/repos/{owner}/{repo}/collaborators": {
    /**
     * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
     *
     * Team members will include the members of child teams.
     */
    get: {
      parameters: {
        undefined: {};
        query: {
          /**
           * Filter collaborators returned by their affiliation. Can be one of:
           * \* `outside`: All outside collaborators of an organization-owned repository.
           * \* `direct`: All collaborators with permissions to an organization-owned repository, regardless of organization membership status.
           * \* `all`: All collaborators the authenticated user can see.
           */
          affiliation?: "outside" | "direct" | "all";
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["collaborator"][];
        };
        "404": any;
      };
    };
  };
  "/repos/{owner}/{repo}/collaborators/{username}": {
    /**
     * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
     *
     * Team members will include the members of child teams.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Response if user is a collaborator
         */
        "204": any;
        /**
         * Response if user is not a collaborator
         */
        "404": any;
      };
    };
    /**
     * This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)" for details.
     *
     * For more information the permission levels, see "[Repository permission levels for an organization](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".
     *
     * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://developer.github.com/v3/#http-verbs)."
     *
     * The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [repository invitations API endpoints](https://developer.github.com/v3/repos/invitations/).
     *
     * **Rate limits**
     *
     * To prevent abuse, you are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Response when a new invitation is created
         */
        "201": {
          "application/json": components["schemas"]["repository-invitation"];
        };
        /**
         * Response when person is already a collaborator
         */
        "204": any;
        "403": any;
        "422": any;
      };
    };
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/repos/{owner}/{repo}/collaborators/{username}/permission": {
    /**
     * Checks the repository permission of a collaborator. The possible repository permissions are `admin`, `write`, `read`, and `none`.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Response if user has admin permissions
         */
        "200": {
          "application/json": components["schemas"]["repository-collaborator-permission"];
        };
        "404": any;
      };
    };
  };
  "/repos/{owner}/{repo}/comments": {
    /**
     * Commit Comments use [these custom media types](https://developer.github.com/v3/repos/comments/#custom-media-types). You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).
     *
     * Comments are ordered by ascending ID.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["commit-comment"][];
        };
      };
    };
  };
  "/repos/{owner}/{repo}/comments/{comment_id}": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["commit-comment"];
        };
        "404": any;
      };
    };
    patch: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["commit-comment"];
        };
        "404": any;
      };
    };
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "404": any;
      };
    };
  };
  "/repos/{owner}/{repo}/comments/{comment_id}/reactions": {
    /**
     * List the reactions to a [commit comment](https://developer.github.com/v3/repos/comments/).
     */
    get: {
      parameters: {
        undefined: {};
        query: {
          /**
           * Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a commit comment.
           */
          content?:
            | "+1"
            | "-1"
            | "laugh"
            | "confused"
            | "heart"
            | "hooray"
            | "rocket"
            | "eyes";
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["reaction"][];
        };
        "404": any;
        "415": any;
      };
    };
    /**
     * Create a reaction to a [commit comment](https://developer.github.com/v3/repos/comments/). A response with a `Status: 200 OK` means that you already added the reaction type to this commit comment.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Reaction exists
         */
        "200": {
          "application/json": components["schemas"]["reaction"];
        };
        /**
         * Reaction created
         */
        "201": {
          "application/json": components["schemas"]["reaction"];
        };
        "415": any;
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}": {
    /**
     * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`.
     *
     * Delete a reaction to a [commit comment](https://developer.github.com/v3/repos/comments/).
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/repos/{owner}/{repo}/commits": {
    /**
     * **Signature verification object**
     * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
     * | Name | Type | Description |
     * | ---- | ---- | ----------- |
     * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
     * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
     * | `signature` | `string` | The signature that was extracted from the commit. |
     * | `payload` | `string` | The value that was signed. |
     * These are the possible values for `reason` in the `verification` object:
     * | Value | Description |
     * | ----- | ----------- |
     * | `expired_key` | The key that made the signature is expired. |
     * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
     * | `gpgverify_error` | There was an error communicating with the signature verification service. |
     * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
     * | `unsigned` | The object does not include a signature. |
     * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
     * | `no_user` | No user was associated with the `committer` email address in the commit. |
     * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
     * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
     * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
     * | `malformed_signature` | There was an error parsing the signature. |
     * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
     * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
     */
    get: {
      parameters: {
        undefined: {};
        query: {
          /**
           * SHA or branch to start listing commits from. Default: the repository’s default branch (usually `master`).
           */
          sha?: string;
          /**
           * Only commits containing this file path will be returned.
           */
          path?: string;
          /**
           * GitHub login or email address by which to filter by commit author.
           */
          author?: string;
          /**
           * Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
           */
          until?: string;
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["simple-commit"][];
        };
        "400": any;
        "404": any;
        "409": any;
        "500": any;
      };
    };
  };
  "/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head": {
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["branch-short"][];
        };
        "415": any;
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/commits/{commit_sha}/comments": {
    /**
     * Use the `:commit_sha` to specify the commit that will have its comments listed.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["commit-comment"][];
        };
      };
    };
    /**
     * Create a comment for a commit using its `:commit_sha`.
     *
     * This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)" for details.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["commit-comment"];
        };
        "403": any;
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/commits/{commit_sha}/pulls": {
    /**
     * Lists all pull requests containing the provided commit SHA, which can be from any point in the commit history. The results will include open and closed pull requests. Additional preview headers may be required to see certain details for associated pull requests, such as whether a pull request is in a draft state. For more information about previews that might affect this endpoint, see the [List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests) endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["pull-request-simple"][];
        };
        "415": any;
      };
    };
  };
  "/repos/{owner}/{repo}/commits/{ref}": {
    /**
     * Returns the contents of a single commit reference. You must have `read` access for the repository to use this endpoint.
     * **Note:** If there are more than 300 files in the commit diff, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.
     * You can pass the appropriate [media type](https://developer.github.com/v3/media/#commits-commit-comparison-and-pull-requests) to  fetch `diff` and `patch` formats. Diffs with binary data will have no `patch` property.
     * To return only the SHA-1 hash of the commit reference, you can provide the `sha` custom [media type](https://developer.github.com/v3/media/#commits-commit-comparison-and-pull-requests) in the `Accept` header. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.
     * **Signature verification object**
     * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
     * | Name | Type | Description |
     * | ---- | ---- | ----------- |
     * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
     * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
     * | `signature` | `string` | The signature that was extracted from the commit. |
     * | `payload` | `string` | The value that was signed. |
     * These are the possible values for `reason` in the `verification` object:
     * | Value | Description |
     * | ----- | ----------- |
     * | `expired_key` | The key that made the signature is expired. |
     * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
     * | `gpgverify_error` | There was an error communicating with the signature verification service. |
     * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
     * | `unsigned` | The object does not include a signature. |
     * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
     * | `no_user` | No user was associated with the `committer` email address in the commit. |
     * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
     * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
     * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
     * | `malformed_signature` | There was an error parsing the signature. |
     * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
     * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
     */
    get: {
      parameters: {
        undefined: {};
        path: {
          /**
           * ref+ parameter
           */
          ref: string;
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["commit"];
        };
        "404": any;
        "422": any;
        "500": any;
      };
    };
  };
  "/repos/{owner}/{repo}/commits/{ref}/check-runs": {
    /**
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
     *
     * Lists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
     */
    get: {
      parameters: {
        undefined: {};
        path: {
          /**
           * ref+ parameter
           */
          ref: string;
        };
        query: {
          /**
           * Filters check runs by their `completed_at` timestamp. Can be one of `latest` (returning the most recent check runs) or `all`.
           */
          filter?: "latest" | "all";
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": {
            total_count?: number;
            check_runs?: components["schemas"]["check-run"][];
          };
        };
      };
    };
  };
  "/repos/{owner}/{repo}/commits/{ref}/check-suites": {
    /**
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
     *
     * Lists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to list check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
     */
    get: {
      parameters: {
        undefined: {};
        path: {
          /**
           * ref+ parameter
           */
          ref: string;
        };
        query: {
          /**
           * Filters check suites by GitHub App `id`.
           */
          app_id?: number;
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": {
            total_count?: number;
            check_suites?: components["schemas"]["check-suite"][];
          };
        };
      };
    };
  };
  "/repos/{owner}/{repo}/commits/{ref}/status": {
    /**
     * Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.
     *
     * The most recent status for each context is returned, up to 100. This field [paginates](https://developer.github.com/v3/#pagination) if there are over 100 contexts.
     *
     * Additionally, a combined `state` is returned. The `state` is one of:
     *
     * *   **failure** if any of the contexts report as `error` or `failure`
     * *   **pending** if there are no statuses or a context is `pending`
     * *   **success** if the latest status for all contexts is `success`
     */
    get: {
      parameters: {
        undefined: {};
        path: {
          /**
           * ref+ parameter
           */
          ref: string;
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["combined-commit-status"];
        };
        "404": any;
      };
    };
  };
  "/repos/{owner}/{repo}/commits/{ref}/statuses": {
    /**
     * Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.
     *
     * This resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`.
     */
    get: {
      parameters: {
        undefined: {};
        path: {
          /**
           * ref+ parameter
           */
          ref: string;
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["status"][];
        };
        "301": any;
      };
    };
  };
  "/repos/{owner}/{repo}/community/code_of_conduct": {
    /**
     * This method returns the contents of the repository's code of conduct file, if one is detected.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["code-of-conduct"];
        };
      };
    };
  };
  "/repos/{owner}/{repo}/community/profile": {
    /**
     * This endpoint will return all community profile metrics, including an overall health score, repository description, the presence of documentation, detected code of conduct, detected license, and the presence of ISSUE\_TEMPLATE, PULL\_REQUEST\_TEMPLATE, README, and CONTRIBUTING files.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["community-profile"];
        };
      };
    };
  };
  "/repos/{owner}/{repo}/compare/{base}...{head}": {
    /**
     * Both `:base` and `:head` must be branch names in `:repo`. To compare branches across other repositories in the same network as `:repo`, use the format `<USERNAME>:branch`.
     * The response from the API is equivalent to running the `git log base..head` command; however, commits are returned in chronological order. Pass the appropriate [media type](https://developer.github.com/v3/media/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
     * The response also includes details on the files that were changed between the two commits. This includes the status of the change (for example, if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.
     * **Working with large comparisons**
     * The response will include a comparison of up to 250 commits. If you are working with a larger commit range, you can use the [List commits](https://developer.github.com/v3/repos/commits/#list-commits) to enumerate all commits in the range.
     * For comparisons with extremely large diffs, you may receive an error response indicating that the diff took too long
     * to generate. You can typically resolve this error by using a smaller commit range.
     * **Signature verification object**
     * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
     * | Name | Type | Description |
     * | ---- | ---- | ----------- |
     * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
     * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
     * | `signature` | `string` | The signature that was extracted from the commit. |
     * | `payload` | `string` | The value that was signed. |
     * These are the possible values for `reason` in the `verification` object:
     * | Value | Description |
     * | ----- | ----------- |
     * | `expired_key` | The key that made the signature is expired. |
     * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
     * | `gpgverify_error` | There was an error communicating with the signature verification service. |
     * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
     * | `unsigned` | The object does not include a signature. |
     * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
     * | `no_user` | No user was associated with the `committer` email address in the commit. |
     * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
     * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
     * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
     * | `malformed_signature` | There was an error parsing the signature. |
     * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
     * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
     */
    get: {
      parameters: {
        undefined: {};
        path: {
          base: string;
          head: string;
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["commit-comparison"];
        };
        "404": any;
        "500": any;
      };
    };
  };
  "/repos/{owner}/{repo}/contents/{path}": {
    /**
     * Gets the contents of a file or directory in a repository. Specify the file path or directory in `:path`. If you omit
     * `:path`, you will receive the contents of all files in the repository.
     *
     * Files and symlinks support [a custom media type](https://developer.github.com/v3/repos/contents/#custom-media-types) for
     * retrieving the raw content or rendered HTML (when supported). All content types support [a custom media
     * type](https://developer.github.com/v3/repos/contents/#custom-media-types) to ensure the content is returned in a consistent
     * object format.
     *
     * **Note**:
     * *   To get a repository's contents recursively, you can [recursively get the tree](https://developer.github.com/v3/git/trees/).
     * *   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees
     * API](https://developer.github.com/v3/git/trees/#get-a-tree).
     * *   This API supports files up to 1 megabyte in size.
     *
     * #### If the content is a directory
     * The response will be an array of objects, one object for each item in the directory.
     * When listing the contents of a directory, submodules have their "type" specified as "file". Logically, the value
     * _should_ be "submodule". This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW).
     * In the next major version of the API, the type will be returned as "submodule".
     *
     * #### If the content is a symlink
     * If the requested `:path` points to a symlink, and the symlink's target is a normal file in the repository, then the
     * API responds with the content of the file (in the format shown in the example. Otherwise, the API responds with an object
     * describing the symlink itself.
     *
     * #### If the content is a submodule
     * The `submodule_git_url` identifies the location of the submodule repository, and the `sha` identifies a specific
     * commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out
     * the submodule at that specific commit.
     *
     * If the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links["git"]`) and the
     * github.com URLs (`html_url` and `_links["html"]`) will have null values.
     */
    get: {
      parameters: {
        undefined: {};
        path: {
          /**
           * path+ parameter
           */
          path: string;
        };
        query: {
          /**
           * The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)
           */
          ref?: string;
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/vnd.github.v3.object": components["schemas"]["content-tree"];
          "application/json":
            | components["schemas"]["content-directory"]
            | components["schemas"]["content-file"]
            | components["schemas"]["content-symlink"]
            | components["schemas"]["content-submodule"];
        };
        "302": any;
        "403": any;
        "404": any;
      };
    };
    /**
     * Creates a new file or replaces an existing file in a repository.
     */
    put: {
      parameters: {
        undefined: {};
        path: {
          /**
           * path+ parameter
           */
          path: string;
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["file-commit"];
        };
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["file-commit"];
        };
        "404": any;
        "409": any;
        "422": any;
      };
    };
    /**
     * Deletes a file in a repository.
     *
     * You can provide an additional `committer` parameter, which is an object containing information about the committer. Or, you can provide an `author` parameter, which is an object containing information about the author.
     *
     * The `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.
     *
     * You must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.
     */
    delete: {
      parameters: {
        undefined: {};
        path: {
          /**
           * path+ parameter
           */
          path: string;
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["file-commit"];
        };
        "404": any;
        "409": any;
        "422": any;
        "503": any;
      };
    };
  };
  "/repos/{owner}/{repo}/contributors": {
    /**
     * Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API v3 caches contributor data to improve performance.
     *
     * GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
     */
    get: {
      parameters: {
        undefined: {};
        query: {
          /**
           * Set to `1` or `true` to include anonymous contributors in results.
           */
          anon?: string;
        };
      };
      responses: {
        /**
         * Response if repository contains content
         */
        "200": {
          "application/json": components["schemas"]["contributor"][];
        };
        /**
         * Response if repository is empty
         */
        "204": any;
        "403": any;
        "404": any;
      };
    };
  };
  "/repos/{owner}/{repo}/deployments": {
    /**
     * Simple filtering of deployments is available via query parameters:
     */
    get: {
      parameters: {
        undefined: {};
        query: {
          /**
           * The SHA recorded at creation time.
           */
          sha?: string;
          /**
           * The name of the ref. This can be a branch, tag, or SHA.
           */
          ref?: string;
          /**
           * The name of the task for the deployment (e.g., `deploy` or `deploy:migrations`).
           */
          task?: string;
          /**
           * The name of the environment that was deployed to (e.g., `staging` or `production`).
           */
          environment?: string;
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["deployment"][];
        };
      };
    };
    /**
     * Deployments offer a few configurable parameters with certain defaults.
     *
     * The `ref` parameter can be any named branch, tag, or SHA. At GitHub we often deploy branches and verify them
     * before we merge a pull request.
     *
     * The `environment` parameter allows deployments to be issued to different runtime environments. Teams often have
     * multiple environments for verifying their applications, such as `production`, `staging`, and `qa`. This parameter
     * makes it easier to track which environments have requested deployments. The default environment is `production`.
     *
     * The `auto_merge` parameter is used to ensure that the requested ref is not behind the repository's default branch. If
     * the ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds,
     * the API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will
     * return a failure response.
     *
     * By default, [commit statuses](https://developer.github.com/v3/repos/statuses) for every submitted context must be in a `success`
     * state. The `required_contexts` parameter allows you to specify a subset of contexts that must be `success`, or to
     * specify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do
     * not require any contexts or create any commit statuses, the deployment will always succeed.
     *
     * The `payload` parameter is available for any extra information that a deployment system might need. It is a JSON text
     * field that will be passed on when a deployment event is dispatched.
     *
     * The `task` parameter is used by the deployment system to allow different execution paths. In the web world this might
     * be `deploy:migrations` to run schema changes on the system. In the compiled world this could be a flag to compile an
     * application with debugging enabled.
     *
     * Users with `repo` or `repo_deployment` scopes can create a deployment for a given ref.
     *
     * #### Merged branch response
     * You will see this response when GitHub automatically merges the base branch into the topic branch instead of creating
     * a deployment. This auto-merge happens when:
     * *   Auto-merge option is enabled in the repository
     * *   Topic branch does not include the latest changes on the base branch, which is `master` in the response example
     * *   There are no merge conflicts
     *
     * If there are no new commits in the base branch, a new request to create a deployment should give a successful
     * response.
     *
     * #### Merge conflict response
     * This error happens when the `auto_merge` option is enabled and when the default branch (in this case `master`), can't
     * be merged into the branch that's being deployed (in this case `topic-branch`), due to merge conflicts.
     *
     * #### Failed commit status checks
     * This error happens when the `required_contexts` parameter indicates that one or more contexts need to have a `success`
     * status for the commit to be deployed, but one or more of the required contexts do not have a state of `success`.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["deployment"];
        };
        /**
         * Merged branch response
         */
        "202": {
          "application/json": { message?: string };
        };
        /**
         * response
         */
        "409": {
          "application/json": { message?: string; documentation_url?: string };
        };
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/deployments/{deployment_id}": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["deployment"];
        };
        "404": any;
      };
    };
    /**
     * To ensure there can always be an active deployment, you can only delete an _inactive_ deployment. Anyone with `repo` or `repo_deployment` scopes can delete an inactive deployment.
     *
     * To set a deployment as inactive, you must:
     *
     * *   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment.
     * *   Mark the active deployment as inactive by adding any non-successful deployment status.
     *
     * For more information, see "[Create a deployment](https://developer.github.com/v3/repos/deployments/#create-a-deployment)" and "[Create a deployment status](https://developer.github.com/v3/repos/deployments/#create-a-deployment-status)."
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "404": any;
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses": {
    /**
     * Users with pull access can view deployment statuses for a deployment:
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["deployment-status"][];
        };
        "404": any;
      };
    };
    /**
     * Users with `push` access can create deployment statuses for a given deployment.
     *
     * GitHub Apps require `read & write` access to "Deployments" and `read-only` access to "Repo contents" (for private repos). OAuth Apps require the `repo_deployment` scope.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["deployment-status"];
        };
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}": {
    /**
     * Users with pull access can view a deployment status for a deployment:
     */
    get: {
      parameters: {
        undefined: {};
        path: {
          status_id: number;
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["deployment-status"];
        };
        "404": any;
        "415": any;
      };
    };
  };
  "/repos/{owner}/{repo}/dispatches": {
    /**
     * You can use this endpoint to trigger a webhook event called `repository_dispatch` when you want activity that happens outside of GitHub to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the `repository_dispatch` event occurs. For an example `repository_dispatch` webhook payload, see "[RepositoryDispatchEvent](https://developer.github.com/webhooks/event-payloads/#repository_dispatch)."
     *
     * The `client_payload` parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the `client_payload` can include a message that a user would like to send using a GitHub Actions workflow. Or the `client_payload` can be used as a test to debug your workflow. For a test example, see the [input example](https://developer.github.com/v3/repos/#example-4).
     *
     * To give you write access to the repository, you must use a personal access token with the `repo` scope. For more information, see "[Creating a personal access token for the command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line)" in the GitHub Help documentation.
     *
     * This input example shows how you can use the `client_payload` as a test to debug your workflow.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/events": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["event"][];
        };
      };
    };
  };
  "/repos/{owner}/{repo}/forks": {
    get: {
      parameters: {
        undefined: {};
        query: {
          /**
           * The sort order. Can be either `newest`, `oldest`, or `stargazers`.
           */
          sort?: "newest" | "oldest" | "stargazers";
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["minimal-repository"][];
        };
        "400": any;
      };
    };
    /**
     * Create a fork for the authenticated user.
     *
     * **Note**: Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Support](https://github.com/contact) or [GitHub Premium Support](https://premium.githubsupport.com).
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "202": {
          "application/json": components["schemas"]["repository"];
        };
        "400": any;
        "403": any;
        "404": any;
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/git/blobs": {
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["short-blob"];
        };
        "403": any;
        "404": any;
        "409": any;
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/git/blobs/{file_sha}": {
    /**
     * The `content` in the response will always be Base64 encoded.
     *
     * _Note_: This API supports blobs up to 100 megabytes in size.
     */
    get: {
      parameters: {
        undefined: {};
        path: {
          file_sha: string;
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["blob"];
        };
        "403": any;
        "404": any;
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/git/commits": {
    /**
     * Creates a new Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).
     * **Signature verification object**
     * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
     * | Name | Type | Description |
     * | ---- | ---- | ----------- |
     * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
     * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
     * | `signature` | `string` | The signature that was extracted from the commit. |
     * | `payload` | `string` | The value that was signed. |
     * These are the possible values for `reason` in the `verification` object:
     * | Value | Description |
     * | ----- | ----------- |
     * | `expired_key` | The key that made the signature is expired. |
     * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
     * | `gpgverify_error` | There was an error communicating with the signature verification service. |
     * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
     * | `unsigned` | The object does not include a signature. |
     * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
     * | `no_user` | No user was associated with the `committer` email address in the commit. |
     * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
     * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
     * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
     * | `malformed_signature` | There was an error parsing the signature. |
     * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
     * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["git-commit"];
        };
        "404": any;
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/git/commits/{commit_sha}": {
    /**
     * Gets a Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).
     * **Signature verification object**
     * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
     * | Name | Type | Description |
     * | ---- | ---- | ----------- |
     * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
     * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
     * | `signature` | `string` | The signature that was extracted from the commit. |
     * | `payload` | `string` | The value that was signed. |
     * These are the possible values for `reason` in the `verification` object:
     * | Value | Description |
     * | ----- | ----------- |
     * | `expired_key` | The key that made the signature is expired. |
     * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
     * | `gpgverify_error` | There was an error communicating with the signature verification service. |
     * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
     * | `unsigned` | The object does not include a signature. |
     * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
     * | `no_user` | No user was associated with the `committer` email address in the commit. |
     * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
     * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
     * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
     * | `malformed_signature` | There was an error parsing the signature. |
     * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
     * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["git-commit"];
        };
        "404": any;
      };
    };
  };
  "/repos/{owner}/{repo}/git/matching-refs/{ref}": {
    /**
     * Returns an array of references from your Git database that match the supplied name. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't exist in the repository, but existing refs start with `:ref`, they will be returned as an array.
     *
     * When you use this endpoint without providing a `:ref`, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just `heads` and `tags`.
     *
     * **Note:** You need to explicitly [request a pull request](https://developer.github.com/v3/pulls/#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://developer.github.com/v3/git/#checking-mergeability-of-pull-requests)".
     *
     * If you request matching references for a branch named `feature` but the branch `feature` doesn't exist, the response can still include other matching head refs that start with the word `feature`, such as `featureA` and `featureB`.
     */
    get: {
      parameters: {
        undefined: {};
        path: {
          /**
           * ref+ parameter
           */
          ref: string;
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["git-ref"][];
        };
      };
    };
  };
  "/repos/{owner}/{repo}/git/ref/{ref}": {
    /**
     * Returns a single reference from your Git database. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't match an existing ref, a `404` is returned.
     *
     * **Note:** You need to explicitly [request a pull request](https://developer.github.com/v3/pulls/#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://developer.github.com/v3/git/#checking-mergeability-of-pull-requests)".
     */
    get: {
      parameters: {
        undefined: {};
        path: {
          /**
           * ref+ parameter
           */
          ref: string;
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["git-ref"];
        };
        "404": any;
      };
    };
  };
  "/repos/{owner}/{repo}/git/refs": {
    /**
     * Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["git-ref"];
        };
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/git/refs/{ref}": {
    patch: {
      parameters: {
        undefined: {};
        path: {
          /**
           * ref+ parameter
           */
          ref: string;
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["git-ref"];
        };
        "422": any;
      };
    };
    delete: {
      parameters: {
        undefined: {};
        path: {
          /**
           * ref+ parameter
           */
          ref: string;
        };
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/git/tags": {
    /**
     * Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then [create](https://developer.github.com/v3/git/refs/#create-a-reference) the `refs/tags/[tag]` reference. If you want to create a lightweight tag, you only have to [create](https://developer.github.com/v3/git/refs/#create-a-reference) the tag reference - this call would be unnecessary.
     * **Signature verification object**
     * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
     * | Name | Type | Description |
     * | ---- | ---- | ----------- |
     * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
     * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
     * | `signature` | `string` | The signature that was extracted from the commit. |
     * | `payload` | `string` | The value that was signed. |
     * These are the possible values for `reason` in the `verification` object:
     * | Value | Description |
     * | ----- | ----------- |
     * | `expired_key` | The key that made the signature is expired. |
     * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
     * | `gpgverify_error` | There was an error communicating with the signature verification service. |
     * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
     * | `unsigned` | The object does not include a signature. |
     * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
     * | `no_user` | No user was associated with the `committer` email address in the commit. |
     * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
     * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
     * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
     * | `malformed_signature` | There was an error parsing the signature. |
     * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
     * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["git-tag"];
        };
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/git/tags/{tag_sha}": {
    /**
     * **Signature verification object**
     * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
     * | Name | Type | Description |
     * | ---- | ---- | ----------- |
     * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
     * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
     * | `signature` | `string` | The signature that was extracted from the commit. |
     * | `payload` | `string` | The value that was signed. |
     * These are the possible values for `reason` in the `verification` object:
     * | Value | Description |
     * | ----- | ----------- |
     * | `expired_key` | The key that made the signature is expired. |
     * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
     * | `gpgverify_error` | There was an error communicating with the signature verification service. |
     * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
     * | `unsigned` | The object does not include a signature. |
     * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
     * | `no_user` | No user was associated with the `committer` email address in the commit. |
     * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
     * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
     * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
     * | `malformed_signature` | There was an error parsing the signature. |
     * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
     * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
     */
    get: {
      parameters: {
        undefined: {};
        path: {
          tag_sha: string;
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["git-tag"];
        };
        "404": any;
      };
    };
  };
  "/repos/{owner}/{repo}/git/trees": {
    /**
     * The tree creation API accepts nested entries. If you specify both a tree and a nested path modifying that tree, this endpoint will overwrite the contents of the tree with the new path contents, and create a new tree structure.
     *
     * If you use this endpoint to add, delete, or modify the file contents in a tree, you will need to commit the tree and then update a branch to point to the commit. For more information see "[Create a commit](https://developer.github.com/v3/git/commits/#create-a-commit)" and "[Update a reference](https://developer.github.com/v3/git/refs/#update-a-reference)."
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["git-tree"];
        };
        "403": any;
        "404": any;
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/git/trees/{tree_sha}": {
    /**
     * Returns a single tree using the SHA1 value for that tree.
     *
     * If `truncated` is `true` in the response then the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time.
     */
    get: {
      parameters: {
        undefined: {};
        path: {
          tree_sha: string;
        };
        query: {
          /**
           * Setting this parameter to any value returns the objects or subtrees referenced by the tree specified in `:tree_sha`. For example, setting `recursive` to any of the following will enable returning objects or subtrees: `0`, `1`, `"true"`, and `"false"`. Omit this parameter to prevent recursively returning objects or subtrees.
           */
          recursive?: string;
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["git-tree"];
        };
        "404": any;
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/hooks": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["hook"][];
        };
        "404": any;
      };
    };
    /**
     * Repositories can have multiple webhooks installed. Each webhook should have a unique `config`. Multiple webhooks can
     * share the same `config` as long as those webhooks do not have any `events` that overlap.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["hook"];
        };
        "403": any;
        "404": any;
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/hooks/{hook_id}": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["hook"];
        };
        "404": any;
      };
    };
    patch: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["hook"];
        };
        "404": any;
        "422": any;
      };
    };
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "404": any;
      };
    };
  };
  "/repos/{owner}/{repo}/hooks/{hook_id}/pings": {
    /**
     * This will trigger a [ping event](https://developer.github.com/webhooks/#ping-event) to be sent to the hook.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "404": any;
      };
    };
  };
  "/repos/{owner}/{repo}/hooks/{hook_id}/tests": {
    /**
     * This will trigger the hook with the latest push to the current repository if the hook is subscribed to `push` events. If the hook is not subscribed to `push` events, the server will respond with 204 but no test POST will be generated.
     *
     * **Note**: Previously `/repos/:owner/:repo/hooks/:hook_id/test`
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "404": any;
      };
    };
  };
  "/repos/{owner}/{repo}/import": {
    /**
     * View the progress of an import.
     *
     * **Import status**
     *
     * This section includes details about the possible values of the `status` field of the Import Progress response.
     *
     * An import that does not have errors will progress through these steps:
     *
     * *   `detecting` - the "detection" step of the import is in progress because the request did not include a `vcs` parameter. The import is identifying the type of source control present at the URL.
     * *   `importing` - the "raw" step of the import is in progress. This is where commit data is fetched from the original repository. The import progress response will include `commit_count` (the total number of raw commits that will be imported) and `percent` (0 - 100, the current progress through the import).
     * *   `mapping` - the "rewrite" step of the import is in progress. This is where SVN branches are converted to Git branches, and where author updates are applied. The import progress response does not include progress information.
     * *   `pushing` - the "push" step of the import is in progress. This is where the importer updates the repository on GitHub. The import progress response will include `push_percent`, which is the percent value reported by `git push` when it is "Writing objects".
     * *   `complete` - the import is complete, and the repository is ready on GitHub.
     *
     * If there are problems, you will see one of these in the `status` field:
     *
     * *   `auth_failed` - the import requires authentication in order to connect to the original repository. To update authentication for the import, please see the [Update an import](https://developer.github.com/v3/migrations/source_imports/#update-an-import) section.
     * *   `error` - the import encountered an error. The import progress response will include the `failed_step` and an error message. Contact [GitHub Support](https://github.com/contact) or [GitHub Premium Support](https://premium.githubsupport.com) for more information.
     * *   `detection_needs_auth` - the importer requires authentication for the originating repository to continue detection. To update authentication for the import, please see the [Update an import](https://developer.github.com/v3/migrations/source_imports/#update-an-import) section.
     * *   `detection_found_nothing` - the importer didn't recognize any source control at the URL. To resolve, [Cancel the import](https://developer.github.com/v3/migrations/source_imports/#cancel-an-import) and [retry](https://developer.github.com/v3/migrations/source_imports/#start-an-import) with the correct URL.
     * *   `detection_found_multiple` - the importer found several projects or repositories at the provided URL. When this is the case, the Import Progress response will also include a `project_choices` field with the possible project choices as values. To update project choice, please see the [Update an import](https://developer.github.com/v3/migrations/source_imports/#update-an-import) section.
     *
     * **The project_choices field**
     *
     * When multiple projects are found at the provided URL, the response hash will include a `project_choices` field, the value of which is an array of hashes each representing a project choice. The exact key/value pairs of the project hashes will differ depending on the version control type.
     *
     * **Git LFS related fields**
     *
     * This section includes details about Git LFS related fields that may be present in the Import Progress response.
     *
     * *   `use_lfs` - describes whether the import has been opted in or out of using Git LFS. The value can be `opt_in`, `opt_out`, or `undecided` if no action has been taken.
     * *   `has_large_files` - the boolean value describing whether files larger than 100MB were found during the `importing` step.
     * *   `large_files_size` - the total size in gigabytes of files larger than 100MB found in the originating repository.
     * *   `large_files_count` - the total number of files larger than 100MB found in the originating repository. To see a list of these files, make a "Get Large Files" request.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["import"];
        };
        "404": any;
      };
    };
    /**
     * Start a source import to a GitHub repository using GitHub Importer.
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["import"];
        };
        "404": any;
        "422": any;
      };
    };
    /**
     * An import can be updated with credentials or a project choice by passing in the appropriate parameters in this API
     * request. If no parameters are provided, the import will be restarted.
     */
    patch: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["import"];
        };
      };
    };
    /**
     * Stop an import for a repository.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/repos/{owner}/{repo}/import/authors": {
    /**
     * Each type of source control system represents authors in a different way. For example, a Git commit author has a display name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author information valid, but the author might not be correct. For example, it will change the bare Subversion username `hubot` into something like `hubot <hubot@12341234-abab-fefe-8787-fedcba987654>`.
     *
     * This endpoint and the [Map a commit author](https://developer.github.com/v3/migrations/source_imports/#map-a-commit-author) endpoint allow you to provide correct Git author information.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["porter-author"][];
        };
        "404": any;
      };
    };
  };
  "/repos/{owner}/{repo}/import/authors/{author_id}": {
    /**
     * Update an author's identity for the import. Your application can continue updating authors any time before you push new commits to the repository.
     */
    patch: {
      parameters: {
        undefined: {};
        path: {
          author_id: number;
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["porter-author"];
        };
        "404": any;
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/import/large_files": {
    /**
     * List files larger than 100MB found during the import
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["porter-large-file"][];
        };
      };
    };
  };
  "/repos/{owner}/{repo}/import/lfs": {
    /**
     * You can import repositories from Subversion, Mercurial, and TFS that include files larger than 100MB. This ability is powered by [Git LFS](https://git-lfs.github.com). You can learn more about our LFS feature and working with large files [on our help site](https://help.github.com/articles/versioning-large-files/).
     */
    patch: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["import"];
        };
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/installation": {
    /**
     * Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.
     *
     * You must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["installation"];
        };
        "301": any;
        "404": any;
      };
    };
  };
  "/repos/{owner}/{repo}/interaction-limits": {
    /**
     * Shows which group of GitHub users can interact with this repository and when the restriction expires. If there are no restrictions, you will see an empty response.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["interaction-limit"];
        };
      };
    };
    /**
     * Temporarily restricts interactions to certain GitHub users within the given repository. You must have owner or admin access to set restrictions.
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["interaction-limit"];
        };
      };
    };
    /**
     * Removes all interaction restrictions from the given repository. You must have owner or admin access to remove restrictions.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/repos/{owner}/{repo}/invitations": {
    /**
     * When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["repository-invitation"][];
        };
      };
    };
  };
  "/repos/{owner}/{repo}/invitations/{invitation_id}": {
    patch: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["repository-invitation"];
        };
      };
    };
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/repos/{owner}/{repo}/issues": {
    /**
     * List issues in a repository.
     *
     * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
     * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
     * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
     * request id, use the "[List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests)" endpoint.
     */
    get: {
      parameters: {
        undefined: {};
        query: {
          /**
           * If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned.
           */
          milestone?: string;
          /**
           * Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
           */
          state?: "open" | "closed" | "all";
          /**
           * Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user.
           */
          assignee?: string;
          /**
           * The user that created the issue.
           */
          creator?: string;
          /**
           * A user that's mentioned in the issue.
           */
          mentioned?: string;
          /**
           * What to sort results by. Can be either `created`, `updated`, `comments`.
           */
          sort?: "created" | "updated" | "comments";
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["issue-simple"][];
        };
        "301": any;
        "404": any;
        "422": any;
      };
    };
    /**
     * Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://help.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.
     *
     * This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)" for details.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["issue"];
        };
        "403": any;
        "404": any;
        "410": any;
        "422": any;
        "503": any;
      };
    };
  };
  "/repos/{owner}/{repo}/issues/comments": {
    /**
     * By default, Issue Comments are ordered by ascending ID.
     */
    get: {
      parameters: {
        undefined: {};
        query: {
          /**
           * Either `asc` or `desc`. Ignored without the `sort` parameter.
           */
          direction?: "asc" | "desc";
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["issue-comment"][];
        };
        "404": any;
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/issues/comments/{comment_id}": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["issue-comment"];
        };
        "404": any;
      };
    };
    patch: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["issue-comment"];
        };
        "422": any;
      };
    };
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions": {
    /**
     * List the reactions to an [issue comment](https://developer.github.com/v3/issues/comments/).
     */
    get: {
      parameters: {
        undefined: {};
        query: {
          /**
           * Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to an issue comment.
           */
          content?:
            | "+1"
            | "-1"
            | "laugh"
            | "confused"
            | "heart"
            | "hooray"
            | "rocket"
            | "eyes";
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["reaction"][];
        };
        "404": any;
        "415": any;
      };
    };
    /**
     * Create a reaction to an [issue comment](https://developer.github.com/v3/issues/comments/). A response with a `Status: 200 OK` means that you already added the reaction type to this issue comment.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Reaction exists
         */
        "200": {
          "application/json": components["schemas"]["reaction"];
        };
        /**
         * Reaction created
         */
        "201": {
          "application/json": components["schemas"]["reaction"];
        };
        "415": any;
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}": {
    /**
     * **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.
     *
     * Delete a reaction to an [issue comment](https://developer.github.com/v3/issues/comments/).
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/repos/{owner}/{repo}/issues/events": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["issue-event"][];
        };
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/issues/events/{event_id}": {
    get: {
      parameters: {
        undefined: {};
        path: {
          event_id: number;
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["issue-event"];
        };
        "403": any;
        "404": any;
        "410": any;
      };
    };
  };
  "/repos/{owner}/{repo}/issues/{issue_number}": {
    /**
     * The API returns a [`301 Moved Permanently` status](https://developer.github.com/v3/#http-redirects) if the issue was
     * [transferred](https://help.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If
     * the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API
     * returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read
     * access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe
     * to the [`issues`](https://developer.github.com/webhooks/event-payloads/#issues) webhook.
     *
     * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
     * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
     * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
     * request id, use the "[List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests)" endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["issue"];
        };
        "301": any;
        "304": any;
        "404": any;
        "410": any;
      };
    };
    /**
     * Issue owners and users with push access can edit an issue.
     */
    patch: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["issue"];
        };
        "301": any;
        "403": any;
        "404": any;
        "410": any;
        "422": any;
        "503": any;
      };
    };
  };
  "/repos/{owner}/{repo}/issues/{issue_number}/assignees": {
    /**
     * Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["issue-simple"];
        };
      };
    };
    /**
     * Removes one or more assignees from an issue.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["issue-simple"];
        };
      };
    };
  };
  "/repos/{owner}/{repo}/issues/{issue_number}/comments": {
    /**
     * Issue Comments are ordered by ascending ID.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["issue-comment"][];
        };
        "404": any;
        "410": any;
      };
    };
    /**
     * This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)" for details.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["issue-comment"];
        };
        "403": any;
        "404": any;
        "410": any;
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/issues/{issue_number}/events": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["issue-event-for-issue"][];
        };
        "410": any;
      };
    };
  };
  "/repos/{owner}/{repo}/issues/{issue_number}/labels": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["label"][];
        };
        "410": any;
      };
    };
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["label"][];
        };
        "410": any;
        "422": any;
      };
    };
    /**
     * Removes any previous labels and sets the new labels for an issue.
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["label"][];
        };
        "410": any;
        "422": any;
      };
    };
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "410": any;
      };
    };
  };
  "/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}": {
    /**
     * Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a `404 Not Found` status if the label does not exist.
     */
    delete: {
      parameters: {
        undefined: {};
        path: {
          name: string;
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["label"][];
        };
        "404": any;
        "410": any;
      };
    };
  };
  "/repos/{owner}/{repo}/issues/{issue_number}/lock": {
    /**
     * Users with push access can lock an issue or pull request's conversation.
     *
     * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://developer.github.com/v3/#http-verbs)."
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "403": any;
        "404": any;
        "410": any;
        "422": any;
      };
    };
    /**
     * Users with push access can unlock an issue's conversation.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "403": any;
        "404": any;
      };
    };
  };
  "/repos/{owner}/{repo}/issues/{issue_number}/reactions": {
    /**
     * List the reactions to an [issue](https://developer.github.com/v3/issues/).
     */
    get: {
      parameters: {
        undefined: {};
        query: {
          /**
           * Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to an issue.
           */
          content?:
            | "+1"
            | "-1"
            | "laugh"
            | "confused"
            | "heart"
            | "hooray"
            | "rocket"
            | "eyes";
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["reaction"][];
        };
        "404": any;
        "410": any;
        "415": any;
      };
    };
    /**
     * Create a reaction to an [issue](https://developer.github.com/v3/issues/). A response with a `Status: 200 OK` means that you already added the reaction type to this issue.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["reaction"];
        };
        "415": any;
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}": {
    /**
     * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.
     *
     * Delete a reaction to an [issue](https://developer.github.com/v3/issues/).
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/repos/{owner}/{repo}/issues/{issue_number}/timeline": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["issue-event-for-issue"][];
        };
        "404": any;
        "410": any;
        "415": any;
      };
    };
  };
  "/repos/{owner}/{repo}/keys": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["deploy-key"][];
        };
      };
    };
    /**
     * You can create a read-only deploy key.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["deploy-key"];
        };
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/keys/{key_id}": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["deploy-key"];
        };
        "404": any;
      };
    };
    /**
     * Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/repos/{owner}/{repo}/labels": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["label"][];
        };
        "404": any;
      };
    };
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["label"];
        };
        "404": any;
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/labels/{name}": {
    get: {
      parameters: {
        undefined: {};
        path: {
          name: string;
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["label"];
        };
        "404": any;
      };
    };
    patch: {
      parameters: {
        undefined: {};
        path: {
          name: string;
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["label"];
        };
      };
    };
    delete: {
      parameters: {
        undefined: {};
        path: {
          name: string;
        };
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/repos/{owner}/{repo}/languages": {
    /**
     * Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["language"];
        };
      };
    };
  };
  "/repos/{owner}/{repo}/license": {
    /**
     * This method returns the contents of the repository's license file, if one is detected.
     *
     * Similar to [Get repository content](https://developer.github.com/v3/repos/contents/#get-repository-content), this method also supports [custom media types](https://developer.github.com/v3/repos/contents/#custom-media-types) for retrieving the raw license content or rendered license HTML.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["license-content"];
        };
      };
    };
  };
  "/repos/{owner}/{repo}/merges": {
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Successful Response (The resulting merge commit)
         */
        "201": {
          "application/json": components["schemas"]["commit"];
        };
        "403": any;
        /**
         * response
         */
        "404": {
          "application/json": { message?: string; documentation_url?: string };
        };
        /**
         * Merge conflict response
         */
        "409": {
          "application/json": { message?: string; documentation_url?: string };
        };
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/milestones": {
    get: {
      parameters: {
        undefined: {};
        query: {
          /**
           * The state of the milestone. Either `open`, `closed`, or `all`.
           */
          state?: "open" | "closed" | "all";
          /**
           * What to sort results by. Either `due_on` or `completeness`.
           */
          sort?: "due_on" | "completeness";
          /**
           * The direction of the sort. Either `asc` or `desc`.
           */
          direction?: "asc" | "desc";
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["milestone"][];
        };
        "404": any;
      };
    };
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["milestone"];
        };
        "404": any;
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/milestones/{milestone_number}": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["milestone"];
        };
        "404": any;
      };
    };
    patch: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["milestone"];
        };
      };
    };
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "404": any;
      };
    };
  };
  "/repos/{owner}/{repo}/milestones/{milestone_number}/labels": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["label"][];
        };
      };
    };
  };
  "/repos/{owner}/{repo}/notifications": {
    /**
     * List all notifications for the current user.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["thread"][];
        };
      };
    };
    /**
     * Marks all notifications in a repository as "read" removes them from the [default view on GitHub](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List repository notifications for the authenticated user](https://developer.github.com/v3/activity/notifications/#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "202": any;
      };
    };
  };
  "/repos/{owner}/{repo}/pages": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["page"];
        };
        "404": any;
      };
    };
    /**
     * Configures a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages)."
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["page"];
        };
        "409": any;
        "415": any;
        "422": any;
      };
    };
    /**
     * Updates information for a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages).
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "400": any;
        "422": any;
      };
    };
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "404": any;
        "415": any;
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/pages/builds": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["page-build"][];
        };
      };
    };
    /**
     * You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.
     *
     * Build requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["page-build-status"];
        };
      };
    };
  };
  "/repos/{owner}/{repo}/pages/builds/latest": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["page-build"];
        };
      };
    };
  };
  "/repos/{owner}/{repo}/pages/builds/{build_id}": {
    get: {
      parameters: {
        undefined: {};
        path: {
          build_id: number;
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["page-build"];
        };
      };
    };
  };
  "/repos/{owner}/{repo}/projects": {
    /**
     * Lists the projects in a repository. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
     */
    get: {
      parameters: {
        undefined: {};
        query: {
          /**
           * Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.
           */
          state?: "open" | "closed" | "all";
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["project"][];
        };
        "401": any;
        "403": any;
        "404": any;
        "410": any;
        "422": any;
      };
    };
    /**
     * Creates a repository project board. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["project"];
        };
        "401": any;
        "403": any;
        "404": any;
        "410": any;
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/pulls": {
    /**
     * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     */
    get: {
      parameters: {
        undefined: {};
        query: {
          /**
           * Either `open`, `closed`, or `all` to filter by state.
           */
          state?: "open" | "closed" | "all";
          /**
           * Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`.
           */
          head?: string;
          /**
           * Filter pulls by base branch name. Example: `gh-pages`.
           */
          base?: string;
          /**
           * What to sort results by. Can be either `created`, `updated`, `popularity` (comment count) or `long-running` (age, filtering by pulls updated in the last month).
           */
          sort?: "created" | "updated" | "popularity" | "long-running";
          /**
           * The direction of the sort. Can be either `asc` or `desc`. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`.
           */
          direction?: "asc" | "desc";
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["pull-request-simple"][];
        };
        "304": any;
        "422": any;
      };
    };
    /**
     * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
     *
     * You can create a new pull request.
     *
     * This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)" for details.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["pull-request"];
        };
        "403": any;
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/pulls/comments": {
    /**
     * **Note:** Multi-line comments on pull requests are currently in public beta and subject to change.
     *
     * Lists review comments for all pull requests in a repository. By default, review comments are in ascending order by ID.
     *
     * **Multi-line comment summary**
     *
     * **Note:** New parameters and response fields are available for developers to preview. During the preview period, these response fields may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2019-10-03-multi-line-comments) for full details.
     *
     * Use the `comfort-fade` preview header and the `line` parameter to show multi-line comment-supported fields in the response.
     *
     * If you use the `comfort-fade` preview header, your response will show:
     *
     * *   For multi-line comments, values for `start_line`, `original_start_line`, `start_side`, `line`, `original_line`, and `side`.
     * *   For single-line comments, values for `line`, `original_line`, and `side` and a `null` value for `start_line`, `original_start_line`, and `start_side`.
     *
     * If you don't use the `comfort-fade` preview header, multi-line and single-line comments will appear the same way in the response with a single `position` attribute. Your response will show:
     *
     * *   For multi-line comments, the last line of the comment range for the `position` attribute.
     * *   For single-line comments, the diff-positioned way of referencing comments for the `position` attribute. For more information, see `position` in the [input parameters](https://developer.github.com/v3/pulls/comments/#parameters-2) table.
     *
     * The `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.
     */
    get: {
      parameters: {
        undefined: {};
        query: {
          /**
           * Can be either `asc` or `desc`. Ignored without `sort` parameter.
           */
          direction?: "asc" | "desc";
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["pull-request-review-comment"][];
        };
      };
    };
  };
  "/repos/{owner}/{repo}/pulls/comments/{comment_id}": {
    /**
     * **Note:** Multi-line comments on pull requests are currently in public beta and subject to change.
     *
     * Provides details for a review comment.
     *
     * **Multi-line comment summary**
     *
     * **Note:** New parameters and response fields are available for developers to preview. During the preview period, these response fields may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2019-10-03-multi-line-comments) for full details.
     *
     * Use the `comfort-fade` preview header and the `line` parameter to show multi-line comment-supported fields in the response.
     *
     * If you use the `comfort-fade` preview header, your response will show:
     *
     * *   For multi-line comments, values for `start_line`, `original_start_line`, `start_side`, `line`, `original_line`, and `side`.
     * *   For single-line comments, values for `line`, `original_line`, and `side` and a `null` value for `start_line`, `original_start_line`, and `start_side`.
     *
     * If you don't use the `comfort-fade` preview header, multi-line and single-line comments will appear the same way in the response with a single `position` attribute. Your response will show:
     *
     * *   For multi-line comments, the last line of the comment range for the `position` attribute.
     * *   For single-line comments, the diff-positioned way of referencing comments for the `position` attribute. For more information, see `position` in the [input parameters](https://developer.github.com/v3/pulls/comments/#parameters-2) table.
     *
     * The `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["pull-request-review-comment"];
        };
        "404": any;
      };
    };
    /**
     * **Note:** Multi-line comments on pull requests are currently in public beta and subject to change.
     *
     * Enables you to edit a review comment.
     *
     * **Multi-line comment summary**
     *
     * **Note:** New parameters and response fields are available for developers to preview. During the preview period, these response fields may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2019-10-03-multi-line-comments) for full details.
     *
     * Use the `comfort-fade` preview header and the `line` parameter to show multi-line comment-supported fields in the response.
     *
     * If you use the `comfort-fade` preview header, your response will show:
     *
     * *   For multi-line comments, values for `start_line`, `original_start_line`, `start_side`, `line`, `original_line`, and `side`.
     * *   For single-line comments, values for `line`, `original_line`, and `side` and a `null` value for `start_line`, `original_start_line`, and `start_side`.
     *
     * If you don't use the `comfort-fade` preview header, multi-line and single-line comments will appear the same way in the response with a single `position` attribute. Your response will show:
     *
     * *   For multi-line comments, the last line of the comment range for the `position` attribute.
     * *   For single-line comments, the diff-positioned way of referencing comments for the `position` attribute. For more information, see `position` in the [input parameters](https://developer.github.com/v3/pulls/comments/#parameters-2) table.
     */
    patch: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["pull-request-review-comment"];
        };
      };
    };
    /**
     * Deletes a review comment.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "404": any;
      };
    };
  };
  "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions": {
    /**
     * List the reactions to a [pull request review comment](https://developer.github.com/v3/pulls/comments/).
     */
    get: {
      parameters: {
        undefined: {};
        query: {
          /**
           * Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a pull request review comment.
           */
          content?:
            | "+1"
            | "-1"
            | "laugh"
            | "confused"
            | "heart"
            | "hooray"
            | "rocket"
            | "eyes";
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["reaction"][];
        };
        "404": any;
        "415": any;
      };
    };
    /**
     * Create a reaction to a [pull request review comment](https://developer.github.com/v3/pulls/comments/). A response with a `Status: 200 OK` means that you already added the reaction type to this pull request review comment.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Reaction exists
         */
        "200": {
          "application/json": components["schemas"]["reaction"];
        };
        /**
         * Reaction created
         */
        "201": {
          "application/json": components["schemas"]["reaction"];
        };
        "415": any;
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}": {
    /**
     * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.`
     *
     * Delete a reaction to a [pull request review comment](https://developer.github.com/v3/pulls/comments/).
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/repos/{owner}/{repo}/pulls/{pull_number}": {
    /**
     * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Lists details of a pull request by providing its number.
     *
     * When you get, [create](https://developer.github.com/v3/pulls/#create-a-pull-request), or [edit](https://developer.github.com/v3/pulls/#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see "[Checking mergeability of pull requests](https://developer.github.com/v3/git/#checking-mergeability-of-pull-requests)".
     *
     * The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.
     *
     * The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:
     *
     * *   If merged as a [merge commit](https://help.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.
     * *   If merged via a [squash](https://help.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.
     * *   If [rebased](https://help.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.
     *
     * Pass the appropriate [media type](https://developer.github.com/v3/media/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Pass the appropriate [media type](https://developer.github.com/v3/media/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
         */
        "200": {
          "application/json": components["schemas"]["pull-request"];
        };
        "304": any;
        "404": any;
        "500": any;
      };
    };
    /**
     * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
     */
    patch: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["pull-request"];
        };
        "403": any;
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/pulls/{pull_number}/comments": {
    /**
     * **Note:** Multi-line comments on pull requests are currently in public beta and subject to change.
     *
     * Lists all review comments for a pull request. By default, review comments are in ascending order by ID.
     *
     * **Multi-line comment summary**
     *
     * **Note:** New parameters and response fields are available for developers to preview. During the preview period, these response fields may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2019-10-03-multi-line-comments) for full details.
     *
     * Use the `comfort-fade` preview header and the `line` parameter to show multi-line comment-supported fields in the response.
     *
     * If you use the `comfort-fade` preview header, your response will show:
     *
     * *   For multi-line comments, values for `start_line`, `original_start_line`, `start_side`, `line`, `original_line`, and `side`.
     * *   For single-line comments, values for `line`, `original_line`, and `side` and a `null` value for `start_line`, `original_start_line`, and `start_side`.
     *
     * If you don't use the `comfort-fade` preview header, multi-line and single-line comments will appear the same way in the response with a single `position` attribute. Your response will show:
     *
     * *   For multi-line comments, the last line of the comment range for the `position` attribute.
     * *   For single-line comments, the diff-positioned way of referencing comments for the `position` attribute. For more information, see `position` in the [input parameters](https://developer.github.com/v3/pulls/comments/#parameters-2) table.
     *
     * The `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.
     */
    get: {
      parameters: {
        undefined: {};
        query: {
          /**
           * Can be either `asc` or `desc`. Ignored without `sort` parameter.
           */
          direction?: "asc" | "desc";
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["pull-request-review-comment"][];
        };
      };
    };
    /**
     * **Note:** Multi-line comments on pull requests are currently in public beta and subject to change.
     *
     * Creates a review comment in the pull request diff. To add a regular comment to a pull request timeline, see "[Create an issue comment](https://developer.github.com/v3/issues/comments/#create-an-issue-comment)." We recommend creating a review comment using `line`, `side`, and optionally `start_line` and `start_side` if your comment applies to more than one line in the pull request diff.
     *
     * You can still create a review comment using the `position` parameter. When you use `position`, the `line`, `side`, `start_line`, and `start_side` parameters are not required. For more information, see [Multi-line comment summary](https://developer.github.com/v3/pulls/comments/#multi-line-comment-summary-3).
     *
     * **Note:** The position value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
     *
     * This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)" for details.
     *
     * **Multi-line comment summary**
     *
     * **Note:** New parameters and response fields are available for developers to preview. During the preview period, these response fields may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2019-10-03-multi-line-comments) for full details.
     *
     * Use the `comfort-fade` preview header and the `line` parameter to show multi-line comment-supported fields in the response.
     *
     * If you use the `comfort-fade` preview header, your response will show:
     *
     * *   For multi-line comments, values for `start_line`, `original_start_line`, `start_side`, `line`, `original_line`, and `side`.
     * *   For single-line comments, values for `line`, `original_line`, and `side` and a `null` value for `start_line`, `original_start_line`, and `start_side`.
     *
     * If you don't use the `comfort-fade` preview header, multi-line and single-line comments will appear the same way in the response with a single `position` attribute. Your response will show:
     *
     * *   For multi-line comments, the last line of the comment range for the `position` attribute.
     * *   For single-line comments, the diff-positioned way of referencing comments for the `position` attribute. For more information, see `position` in the [input parameters](https://developer.github.com/v3/pulls/comments/#parameters-2) table.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["pull-request-review-comment"];
        };
        "403": any;
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies": {
    /**
     * Creates a reply to a review comment for a pull request. For the `comment_id`, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.
     *
     * This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)" for details.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["pull-request-review-comment"];
        };
        "404": any;
      };
    };
  };
  "/repos/{owner}/{repo}/pulls/{pull_number}/commits": {
    /**
     * Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [List commits](https://developer.github.com/v3/repos/commits/#list-commits) endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["simple-commit"][];
        };
      };
    };
  };
  "/repos/{owner}/{repo}/pulls/{pull_number}/files": {
    /**
     * **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["diff-entry"][];
        };
        "422": any;
        "500": any;
      };
    };
  };
  "/repos/{owner}/{repo}/pulls/{pull_number}/merge": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Response if pull request has been merged
         */
        "204": any;
        /**
         * Response if pull request has not been merged
         */
        "404": any;
      };
    };
    /**
     * This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)" for details.
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Response if merge was successful
         */
        "200": {
          "application/json": components["schemas"]["pull-request-merge-result"];
        };
        "403": any;
        "404": any;
        /**
         * Response if merge cannot be performed
         */
        "405": {
          "application/json": { message?: string; documentation_url?: string };
        };
        /**
         * Response if sha was provided and pull request head did not match
         */
        "409": {
          "application/json": { message?: string; documentation_url?: string };
        };
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["pull-request-review-request"];
        };
      };
    };
    /**
     * This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)" for details.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["pull-request-simple"];
        };
        "403": any;
        /**
         * Response if user is not a collaborator
         */
        "422": any;
      };
    };
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": any;
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/pulls/{pull_number}/reviews": {
    /**
     * The list of reviews returns in chronological order.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * The list of reviews returns in chronological order.
         */
        "200": {
          "application/json": components["schemas"]["pull-request-review"][];
        };
      };
    };
    /**
     * This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)" for details.
     *
     * Pull request reviews created in the `PENDING` state do not include the `submitted_at` property in the response.
     *
     * **Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API v3 offers the `application/vnd.github.v3.diff` [media type](https://developer.github.com/v3/media/#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the `Accept` header of a call to the [single pull request](https://developer.github.com/v3/pulls/#get-a-pull-request) endpoint.
     *
     * The `position` value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["pull-request-review"];
        };
        "403": any;
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["pull-request-review"];
        };
        "404": any;
      };
    };
    /**
     * Update the review summary comment with new text.
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["pull-request-review"];
        };
        "422": any;
      };
    };
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["pull-request-review"];
        };
        "404": any;
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments": {
    /**
     * List comments for a specific pull request review.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["review-comment"][];
        };
        "404": any;
      };
    };
  };
  "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals": {
    /**
     * **Note:** To dismiss a pull request review on a [protected branch](https://developer.github.com/v3/repos/branches/), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews.
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["pull-request-review"];
        };
        "404": any;
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events": {
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["pull-request-review"];
        };
        "403": any;
        "404": any;
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/pulls/{pull_number}/update-branch": {
    /**
     * Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "202": {
          "application/json": { message?: string; url?: string };
        };
        "403": any;
        "415": any;
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/readme": {
    /**
     * Gets the preferred README for a repository.
     *
     * READMEs support [custom media types](https://developer.github.com/v3/repos/contents/#custom-media-types) for retrieving the raw content or rendered HTML.
     */
    get: {
      parameters: {
        undefined: {};
        query: {
          /**
           * The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)
           */
          ref?: string;
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["content-file"];
        };
        "404": any;
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/releases": {
    /**
     * This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://developer.github.com/v3/repos/#list-repository-tags).
     *
     * Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["release"][];
        };
        "404": any;
      };
    };
    /**
     * Users with push access to the repository can create a release.
     *
     * This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)" for details.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["release"];
        };
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/releases/assets/{asset_id}": {
    /**
     * To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://developer.github.com/v3/media/#media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://developer.github.com/v3/media/#media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response.
         */
        "200": {
          "application/json": components["schemas"]["release-asset"];
        };
        "302": any;
        "404": any;
        "415": any;
      };
    };
    /**
     * Users with push access to the repository can edit a release asset.
     */
    patch: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["release-asset"];
        };
      };
    };
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/repos/{owner}/{repo}/releases/latest": {
    /**
     * View the latest published full release for the repository.
     *
     * The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["release"];
        };
      };
    };
  };
  "/repos/{owner}/{repo}/releases/tags/{tag}": {
    /**
     * Get a published release with the specified tag.
     */
    get: {
      parameters: {
        undefined: {};
        path: {
          /**
           * tag+ parameter
           */
          tag: string;
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["release"];
        };
        "404": any;
      };
    };
  };
  "/repos/{owner}/{repo}/releases/{release_id}": {
    /**
     * **Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://developer.github.com/v3/#hypermedia).
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * **Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://developer.github.com/v3/#hypermedia).
         */
        "200": {
          "application/json": components["schemas"]["release"];
        };
        "404": any;
      };
    };
    /**
     * Users with push access to the repository can edit a release.
     */
    patch: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["release"];
        };
      };
    };
    /**
     * Users with push access to the repository can delete a release.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/repos/{owner}/{repo}/releases/{release_id}/assets": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["release-asset"][];
        };
      };
    };
    /**
     * This endpoint makes use of [a Hypermedia relation](https://developer.github.com/v3/#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the `upload_url` returned in
     * the response of the [Create a release endpoint](https://developer.github.com/v3/repos/releases/#create-a-release) to upload a release asset.
     *
     * You need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.
     *
     * Most libraries will set the required `Content-Length` header automatically. Use the required `Content-Type` header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example:
     *
     * `application/zip`
     *
     * GitHub expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example,
     * you'll still need to pass your authentication to be able to upload an asset.
     *
     * When an upstream failure occurs, you will receive a `502 Bad Gateway` status. This may leave an empty asset with a state of `starter`. It can be safely deleted.
     *
     * **Notes:**
     * *   GitHub renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The "[List assets for a release](https://developer.github.com/v3/repos/releases/#list-assets-for-a-release)"
     * endpoint lists the renamed filenames. For more information and help, contact [GitHub Support](https://github.com/contact).
     * *   If you upload an asset with the same filename as another uploaded asset, you'll receive an error and must delete the old file before you can re-upload the new asset.
     */
    post: {
      parameters: {
        undefined: {};
        query: {
          name?: string;
          label?: string;
        };
      };
      responses: {
        /**
         * Response for successful upload
         */
        "201": {
          "application/json": components["schemas"]["release-asset"];
        };
      };
    };
  };
  "/repos/{owner}/{repo}/stargazers": {
    /**
     * Lists the people that have starred the repository.
     *
     * You can also find out _when_ stars were created by passing the following custom [media type](https://developer.github.com/v3/media/) via the `Accept` header:
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["simple-user"][];
          "application/vnd.github.v3.star+json": components["schemas"]["stargazer"][];
        };
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/stats/code_frequency": {
    /**
     * Returns a weekly aggregate of the number of additions and deletions pushed to a repository.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Returns a weekly aggregate of the number of additions and deletions pushed to a repository.
         */
        "200": {
          "application/json": components["schemas"]["code-frequency-stat"][];
        };
      };
    };
  };
  "/repos/{owner}/{repo}/stats/commit_activity": {
    /**
     * Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on `Sunday`.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["commit-activity"][];
        };
      };
    };
  };
  "/repos/{owner}/{repo}/stats/contributors": {
    /**
     * Returns the `total` number of commits authored by the contributor. In addition, the response includes a Weekly Hash (`weeks` array) with the following information:
     *
     * *   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
     * *   `a` - Number of additions
     * *   `d` - Number of deletions
     * *   `c` - Number of commits
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * *   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
         * *   `a` - Number of additions
         * *   `d` - Number of deletions
         * *   `c` - Number of commits
         */
        "200": {
          "application/json": components["schemas"]["contributor-activity"][];
        };
      };
    };
  };
  "/repos/{owner}/{repo}/stats/participation": {
    /**
     * Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from `all`.
     *
     * The array order is oldest week (index 0) to most recent week.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * The array order is oldest week (index 0) to most recent week.
         */
        "200": {
          "application/json": components["schemas"]["participation-stats"];
        };
        "404": any;
      };
    };
  };
  "/repos/{owner}/{repo}/stats/punch_card": {
    /**
     * Each array contains the day number, hour number, and number of commits:
     *
     * *   `0-6`: Sunday - Saturday
     * *   `0-23`: Hour of day
     * *   Number of commits
     *
     * For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.
         */
        "200": {
          "application/json": components["schemas"]["code-frequency-stat"][];
        };
      };
    };
  };
  "/repos/{owner}/{repo}/statuses/{sha}": {
    /**
     * Users with push access in a repository can create commit statuses for a given SHA.
     *
     * Note: there is a limit of 1000 statuses per `sha` and `context` within a repository. Attempts to create more than 1000 statuses will result in a validation error.
     */
    post: {
      parameters: {
        undefined: {};
        path: {
          sha: string;
        };
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["status"];
        };
      };
    };
  };
  "/repos/{owner}/{repo}/subscribers": {
    /**
     * Lists the people watching the specified repository.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["simple-user"][];
        };
      };
    };
  };
  "/repos/{owner}/{repo}/subscription": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Response if you subscribe to the repository
         */
        "200": {
          "application/json": components["schemas"]["repository-subscription"];
        };
        "403": any;
        /**
         * Response if you don't subscribe to the repository
         */
        "404": any;
      };
    };
    /**
     * If you would like to watch a repository, set `subscribed` to `true`. If you would like to ignore notifications made within a repository, set `ignored` to `true`. If you would like to stop watching a repository, [delete the repository's subscription](https://developer.github.com/v3/activity/watching/#delete-a-repository-subscription) completely.
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["repository-subscription"];
        };
      };
    };
    /**
     * This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository's subscription manually](https://developer.github.com/v3/activity/watching/#set-a-repository-subscription).
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/repos/{owner}/{repo}/tags": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["tag"][];
        };
      };
    };
  };
  "/repos/{owner}/{repo}/tarball/{ref}": {
    /**
     * Gets a redirect URL to download a tar archive for a repository. If you omit `:ref`, the repository’s default branch (usually
     * `master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
     * the `Location` header to make a second `GET` request.
     * **Note**: For private repositories, these links are temporary and expire after five minutes.
     */
    get: {
      parameters: {
        undefined: {};
        path: {
          ref: string;
        };
      };
      responses: {
        /**
         * response
         */
        "302": any;
      };
    };
  };
  "/repos/{owner}/{repo}/teams": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["team"][];
        };
      };
    };
  };
  "/repos/{owner}/{repo}/topics": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["topic"];
        };
        "404": any;
        "415": any;
      };
    };
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["topic"];
        };
        "404": any;
        "415": any;
        "422": any;
      };
    };
  };
  "/repos/{owner}/{repo}/traffic/clones": {
    /**
     * Get the total number of clones and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["clone-traffic"];
        };
        "403": any;
      };
    };
  };
  "/repos/{owner}/{repo}/traffic/popular/paths": {
    /**
     * Get the top 10 popular contents over the last 14 days.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["content-traffic"][];
        };
        "403": any;
      };
    };
  };
  "/repos/{owner}/{repo}/traffic/popular/referrers": {
    /**
     * Get the top 10 referrers over the last 14 days.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["referrer-traffic"][];
        };
        "403": any;
      };
    };
  };
  "/repos/{owner}/{repo}/traffic/views": {
    /**
     * Get the total number of views and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["view-traffic"];
        };
        "403": any;
      };
    };
  };
  "/repos/{owner}/{repo}/transfer": {
    /**
     * A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original `owner`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://help.github.com/articles/about-repository-transfers/).
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "202": {
          "application/json": components["schemas"]["repository"];
        };
      };
    };
  };
  "/repos/{owner}/{repo}/vulnerability-alerts": {
    /**
     * Shows whether dependency alerts are enabled or disabled for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)".
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Response if repository is enabled with vulnerability alerts
         */
        "204": any;
        /**
         * Response if repository is not enabled with vulnerability alerts
         */
        "404": any;
      };
    };
    /**
     * Enables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)".
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
    /**
     * Disables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)".
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/repos/{owner}/{repo}/zipball/{ref}": {
    /**
     * Gets a redirect URL to download a zip archive for a repository. If you omit `:ref`, the repository’s default branch (usually
     * `master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
     * the `Location` header to make a second `GET` request.
     * **Note**: For private repositories, these links are temporary and expire after five minutes.
     */
    get: {
      parameters: {
        undefined: {};
        path: {
          ref: string;
        };
      };
      responses: {
        /**
         * response
         */
        "302": any;
      };
    };
  };
  "/repos/{template_owner}/{template_repo}/generate": {
    /**
     * Creates a new repository using a repository template. Use the `template_owner` and `template_repo` route parameters to specify the repository to use as the template. The authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository's information using the [Get a repository](https://developer.github.com/v3/repos/#get-a-repository) endpoint and check that the `is_template` key is `true`.
     *
     * **OAuth scope requirements**
     *
     * When using [OAuth](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
     *
     * *   `public_repo` scope or `repo` scope to create a public repository
     * *   `repo` scope to create a private repository
     */
    post: {
      parameters: {
        path: {
          template_owner: string;
          template_repo: string;
        };
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["repository"];
        };
      };
    };
  };
  "/repositories": {
    /**
     * Lists all public repositories in the order that they were created.
     *
     * Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://developer.github.com/v3/#link-header) to get the URL for the next page of repositories.
     */
    get: {
      parameters: {
        undefined: {};
        query: {
          visibility?: string;
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["minimal-repository"][];
        };
        "304": any;
        "422": any;
      };
    };
  };
  "/scim/v2/enterprises/{enterprise}/Groups": {
    /**
     * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["scim-group-list-enterprise"];
        };
      };
    };
    /**
     * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
     *
     * Provision an enterprise group, and invite users to the group. This sends invitation emails to the email address of the invited users to join the GitHub organization that the SCIM group corresponds to.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["scim-enterprise-group"];
        };
      };
    };
  };
  "/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}": {
    /**
     * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["scim-enterprise-group"];
        };
      };
    };
    /**
     * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
     *
     * Replaces an existing provisioned group’s information. You must provide all the information required for the group as if you were provisioning it for the first time. Any existing group information that you don't provide will be removed, including group membership. If you want to only update a specific attribute, use the [Update an attribute for a SCIM enterprise group](#update-an-attribute-for-a-scim-enterprise-group) endpoint instead.
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["scim-enterprise-group"];
        };
      };
    };
    /**
     * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
     *
     * Allows you to change a provisioned group’s individual attributes. To change a group’s values, you must provide a specific Operations JSON format that contains at least one of the add, remove, or replace operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
     */
    patch: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["scim-enterprise-group"];
        };
      };
    };
    /**
     * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/scim/v2/enterprises/{enterprise}/Users": {
    /**
     * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
     *
     * Retrieves a paginated list of all provisioned enterprise members, including pending invitations.
     *
     * When a user with a SAML-provisioned external identity leaves (or is removed from) an enterprise, the account's metadata is immediately removed. However, the returned list of user accounts might not always match the organization or enterprise member list you see on GitHub. This can happen in certain cases where an external identity associated with an organization will not match an organization member:
     *   - When a user with a SCIM-provisioned external identity is removed from an enterprise, the account's metadata is preserved to allow the user to re-join the organization in the future.
     *   - When inviting a user to join an organization, you can expect to see their external identity in the results before they accept the invitation, or if the invitation is cancelled (or never accepted).
     *   - When a user is invited over SCIM, an external identity is created that matches with the invitee's email address. However, this identity is only linked to a user account when the user accepts the invitation by going through SAML SSO.
     *
     * The returned list of external identities can include an entry for a `null` user. These are unlinked SAML identities that are created when a user goes through the following Single Sign-On (SSO) process but does not sign in to their GitHub account after completing SSO:
     *
     * 1. The user is granted access by the IdP and is not a member of the GitHub enterprise.
     *
     * 1. The user attempts to access the GitHub enterprise and initiates the SAML SSO process, and is not currently signed in to their GitHub account.
     *
     * 1. After successfully authenticating with the SAML SSO IdP, the `null` external identity entry is created and the user is prompted to sign in to their GitHub account:
     *    - If the user signs in, their GitHub account is linked to this entry.
     *    - If the user does not sign in (or does not create a new account when prompted), they are not added to the GitHub enterprise, and the external identity `null` entry remains in place.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["scim-user-list-enterprise"];
        };
      };
    };
    /**
     * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
     *
     * Provision enterprise membership for a user, and send organization invitation emails to the email address.
     *
     * You can optionally include the groups a user will be invited to join. If you do not provide a list of `groups`, the user is provisioned for the enterprise, but no organization invitation emails will be sent.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["scim-enterprise-user"];
        };
      };
    };
  };
  "/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}": {
    /**
     * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["scim-enterprise-user"];
        };
      };
    };
    /**
     * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
     *
     * Replaces an existing provisioned user's information. You must provide all the information required for the user as if you were provisioning them for the first time. Any existing user information that you don't provide will be removed. If you want to only update a specific attribute, use the [Update an attribute for a SCIM user](#update-an-attribute-for-an-enterprise-scim-user) endpoint instead.
     *
     * You must at least provide the required values for the user: `userName`, `name`, and `emails`.
     *
     * **Warning:** Setting `active: false` removes the user from the enterprise, deletes the external identity, and deletes the associated `{scim_user_id}`.
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["scim-enterprise-user"];
        };
      };
    };
    /**
     * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
     *
     * Allows you to change a provisioned user's individual attributes. To change a user's values, you must provide a specific `Operations` JSON format that contains at least one of the `add`, `remove`, or `replace` operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
     *
     * **Note:** Complicated SCIM `path` selectors that include filters are not supported. For example, a `path` selector defined as `"path": "emails[type eq \"work\"]"` will not work.
     *
     * **Warning:** If you set `active:false` using the `replace` operation (as shown in the JSON example below), it removes the user from the enterprise, deletes the external identity, and deletes the associated `:scim_user_id`.
     *
     * ```
     * {
     *   "Operations":[{
     *     "op":"replace",
     *     "value":{
     *       "active":false
     *     }
     *   }]
     * }
     * ```
     */
    patch: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["scim-enterprise-user"];
        };
      };
    };
    /**
     * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/scim/v2/organizations/{org}/Users": {
    /**
     * Retrieves a paginated list of all provisioned organization members, including pending invitations. If you provide the `filter` parameter, the resources for all matching provisions members are returned.
     *
     * When a user with a SAML-provisioned external identity leaves (or is removed from) an organization, the account's metadata is immediately removed. However, the returned list of user accounts might not always match the organization or enterprise member list you see on GitHub. This can happen in certain cases where an external identity associated with an organization will not match an organization member:
     *   - When a user with a SCIM-provisioned external identity is removed from an organization, the account's metadata is preserved to allow the user to re-join the organization in the future.
     *   - When inviting a user to join an organization, you can expect to see their external identity in the results before they accept the invitation, or if the invitation is cancelled (or never accepted).
     *   - When a user is invited over SCIM, an external identity is created that matches with the invitee's email address. However, this identity is only linked to a user account when the user accepts the invitation by going through SAML SSO.
     *
     * The returned list of external identities can include an entry for a `null` user. These are unlinked SAML identities that are created when a user goes through the following Single Sign-On (SSO) process but does not sign in to their GitHub account after completing SSO:
     *
     * 1. The user is granted access by the IdP and is not a member of the GitHub organization.
     *
     * 1. The user attempts to access the GitHub organization and initiates the SAML SSO process, and is not currently signed in to their GitHub account.
     *
     * 1. After successfully authenticating with the SAML SSO IdP, the `null` external identity entry is created and the user is prompted to sign in to their GitHub account:
     *    - If the user signs in, their GitHub account is linked to this entry.
     *    - If the user does not sign in (or does not create a new account when prompted), they are not added to the GitHub organization, and the external identity `null` entry remains in place.
     */
    get: {
      parameters: {
        undefined: {};
        query: {
          /**
           * Used for pagination: the index of the first result to return.
           */
          startIndex?: number;
          /**
           * Used for pagination: the number of results to return.
           */
          count?: number;
          /**
           * Filters results using the equals query parameter operator (`eq`). You can filter results that are equal to `id`, `userName`, `emails`, and `external_id`. For example, to search for an identity with the `userName` Octocat, you would use this query:
           *
           * `?filter=userName%20eq%20\"Octocat\"`.
           *
           * To filter results for for the identity with the email `octocat@github.com`, you would use this query:
           *
           * `?filter=emails%20eq%20\"octocat@github.com\"`.
           */
          filter?: string;
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/scim+json": components["schemas"]["scim-user-list"];
        };
        "304": any;
        "400": any;
        "403": any;
        "404": any;
      };
    };
    /**
     * Provision organization membership for a user, and send an activation email to the email address.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/scim+json": components["schemas"]["scim-user"];
        };
        "304": any;
        "400": any;
        "403": any;
        "404": any;
        "409": any;
        "500": any;
      };
    };
  };
  "/scim/v2/organizations/{org}/Users/{scim_user_id}": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/scim+json": components["schemas"]["scim-user"];
        };
        "304": any;
        "403": any;
        "404": any;
      };
    };
    /**
     * Replaces an existing provisioned user's information. You must provide all the information required for the user as if you were provisioning them for the first time. Any existing user information that you don't provide will be removed. If you want to only update a specific attribute, use the [Update an attribute for a SCIM user](https://developer.github.com/v3/scim/#update-an-attribute-for-a-scim-user) endpoint instead.
     *
     * You must at least provide the required values for the user: `userName`, `name`, and `emails`.
     *
     * **Warning:** Setting `active: false` removes the user from the organization, deletes the external identity, and deletes the associated `{scim_user_id}`.
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/scim+json": components["schemas"]["scim-user"];
        };
        "304": any;
        "403": any;
        "404": any;
      };
    };
    /**
     * Allows you to change a provisioned user's individual attributes. To change a user's values, you must provide a specific `Operations` JSON format that contains at least one of the `add`, `remove`, or `replace` operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
     *
     * **Note:** Complicated SCIM `path` selectors that include filters are not supported. For example, a `path` selector defined as `"path": "emails[type eq \"work\"]"` will not work.
     *
     * **Warning:** If you set `active:false` using the `replace` operation (as shown in the JSON example below), it removes the user from the organization, deletes the external identity, and deletes the associated `:scim_user_id`.
     *
     * ```
     * {
     *   "Operations":[{
     *     "op":"replace",
     *     "value":{
     *       "active":false
     *     }
     *   }]
     * }
     * ```
     */
    patch: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/scim+json": components["schemas"]["scim-user"];
        };
        "304": any;
        "400": any;
        "403": any;
        "404": any;
        /**
         * Too many requests
         */
        "429": {
          "application/json": components["schemas"]["basic-error"];
        };
      };
    };
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "304": any;
        "403": any;
        "404": any;
      };
    };
  };
  "/search/code": {
    /**
     * Searches for query terms inside of a file. This method returns up to 100 results [per page](https://developer.github.com/v3/#pagination).
     *
     * When searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://developer.github.com/v3/search/#text-match-metadata).
     *
     * For example, if you want to find the definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery) repository, your query would look something like this:
     *
     * `q=addClass+in:file+language:js+repo:jquery/jquery`
     *
     * This query searches for the keyword `addClass` within a file's contents. The query limits the search to files where the language is JavaScript in the `jquery/jquery` repository.
     *
     * #### Considerations for code search
     *
     * Due to the complexity of searching code, there are a few restrictions on how searches are performed:
     *
     * *   Only the _default branch_ is considered. In most cases, this will be the `master` branch.
     * *   Only files smaller than 384 KB are searchable.
     * *   You must always include at least one search term when searching source code. For example, searching for [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [`amazing
     * language:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.
     */
    get: {
      parameters: {
        query: {
          /**
           * The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query). See "[Searching code](https://help.github.com/articles/searching-code/)" for a detailed list of qualifiers.
           */
          q: string;
          /**
           * Sorts the results of your query. Can only be `indexed`, which indicates how recently a file has been indexed by the GitHub search infrastructure. Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)
           */
          sort?: "indexed";
        };
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": {
            total_count?: number;
            incomplete_results?: boolean;
            items?: components["schemas"]["code-search-result-item"][];
          };
        };
        "304": any;
        "403": any;
        "422": any;
        "503": any;
      };
    };
  };
  "/search/commits": {
    /**
     * Find commits via various criteria on the default branch (usually `master`). This method returns up to 100 results [per page](https://developer.github.com/v3/#pagination).
     *
     * When searching for commits, you can get text match metadata for the **message** field when you provide the `text-match` media type. For more details about how to receive highlighted search results, see [Text match
     * metadata](https://developer.github.com/v3/search/#text-match-metadata).
     *
     * For example, if you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:
     *
     * `q=repo:octocat/Spoon-Knife+css`
     */
    get: {
      parameters: {
        query: {
          /**
           * The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query). See "[Searching commits](https://help.github.com/articles/searching-commits/)" for a detailed list of qualifiers.
           */
          q: string;
          /**
           * Sorts the results of your query by `author-date` or `committer-date`. Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)
           */
          sort?: "author-date" | "committer-date";
        };
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": {
            total_count?: number;
            incomplete_results?: boolean;
            items?: components["schemas"]["commit-search-result-item"][];
          };
        };
        "304": any;
        "415": any;
      };
    };
  };
  "/search/issues": {
    /**
     * Find issues by state and keyword. This method returns up to 100 results [per page](https://developer.github.com/v3/#pagination).
     *
     * When searching for issues, you can get text match metadata for the issue **title**, issue **body**, and issue **comment body** fields when you pass the `text-match` media type. For more details about how to receive highlighted
     * search results, see [Text match metadata](https://developer.github.com/v3/search/#text-match-metadata).
     *
     * For example, if you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.
     *
     * `q=windows+label:bug+language:python+state:open&sort=created&order=asc`
     *
     * This query searches for the keyword `windows`, within any open issue that is labeled as `bug`. The search runs across repositories whose primary language is Python. The results are sorted by creation date in ascending order, whick means the oldest issues appear first in the search results.
     */
    get: {
      parameters: {
        query: {
          /**
           * The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query). See "[Searching issues and pull requests](https://help.github.com/articles/searching-issues-and-pull-requests/)" for a detailed list of qualifiers.
           */
          q: string;
          /**
           * Sorts the results of your query by the number of `comments`, `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`, `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or `interactions`. You can also sort results by how recently the items were `created` or `updated`, Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)
           */
          sort?:
            | "comments"
            | "reactions"
            | "reactions-+1"
            | "reactions--1"
            | "reactions-smile"
            | "reactions-thinking_face"
            | "reactions-heart"
            | "reactions-tada"
            | "interactions"
            | "created"
            | "updated";
        };
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": {
            total_count?: number;
            incomplete_results?: boolean;
            items?: components["schemas"]["issue-search-result-item"][];
          };
        };
        "304": any;
        "403": any;
        "422": any;
        "503": any;
      };
    };
  };
  "/search/labels": {
    /**
     * Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://developer.github.com/v3/#pagination).
     *
     * When searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://developer.github.com/v3/search/#text-match-metadata).
     *
     * For example, if you want to find labels in the `linguist` repository that match `bug`, `defect`, or `enhancement`. Your query might look like this:
     *
     * `q=bug+defect+enhancement&repository_id=64778136`
     *
     * The labels that best match the query appear first in the search results.
     */
    get: {
      parameters: {
        query: {
          /**
           * The id of the repository.
           */
          repository_id: number;
          /**
           * The search keywords. This endpoint does not accept qualifiers in the query. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query).
           */
          q: string;
          /**
           * Sorts the results of your query by when the label was `created` or `updated`. Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)
           */
          sort?: "created" | "updated";
        };
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": {
            total_count?: number;
            incomplete_results?: boolean;
            items?: components["schemas"]["label-search-result-item"][];
          };
        };
        "304": any;
        "403": any;
        "404": any;
        "422": any;
      };
    };
  };
  "/search/repositories": {
    /**
     * Find repositories via various criteria. This method returns up to 100 results [per page](https://developer.github.com/v3/#pagination).
     *
     * When searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://developer.github.com/v3/search/#text-match-metadata).
     *
     * For example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:
     *
     * `q=tetris+language:assembly&sort=stars&order=desc`
     *
     * This query searches for repositories with the word `tetris` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.
     *
     * When you include the `mercy` preview header, you can also search for multiple topics by adding more `topic:` instances. For example, your query might look like this:
     *
     * `q=topic:ruby+topic:rails`
     */
    get: {
      parameters: {
        query: {
          /**
           * The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query). See "[Searching for repositories](https://help.github.com/articles/searching-for-repositories/)" for a detailed list of qualifiers.
           */
          q: string;
          /**
           * Sorts the results of your query by number of `stars`, `forks`, or `help-wanted-issues` or how recently the items were `updated`. Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)
           */
          sort?: "stars" | "forks" | "help-wanted-issues" | "updated";
        };
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": {
            total_count?: number;
            incomplete_results?: boolean;
            items?: components["schemas"]["repo-search-result-item"][];
          };
        };
        "304": any;
        "422": any;
        "503": any;
      };
    };
  };
  "/search/topics": {
    /**
     * Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://developer.github.com/v3/#pagination). See "[Searching topics](https://help.github.com/articles/searching-topics/)" for a detailed list of qualifiers.
     *
     * When searching for topics, you can get text match metadata for the topic's **short\_description**, **description**, **name**, or **display\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://developer.github.com/v3/search/#text-match-metadata).
     *
     * For example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this:
     *
     * `q=ruby+is:featured`
     *
     * This query searches for topics with the keyword `ruby` and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.
     */
    get: {
      parameters: {
        query: {
          /**
           * The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query).
           */
          q: string;
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": {
            total_count?: number;
            incomplete_results?: boolean;
            items?: components["schemas"]["topic-search-result-item"][];
          };
        };
        "304": any;
        "415": any;
      };
    };
  };
  "/search/users": {
    /**
     * Find users via various criteria. This method returns up to 100 results [per page](https://developer.github.com/v3/#pagination).
     *
     * When searching for users, you can get text match metadata for the issue **login**, **email**, and **name** fields when you pass the `text-match` media type. For more details about highlighting search results, see [Text match metadata](https://developer.github.com/v3/search/#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://developer.github.com/v3/search/#text-match-metadata).
     *
     * For example, if you're looking for a list of popular users, you might try this query:
     *
     * `q=tom+repos:%3E42+followers:%3E1000`
     *
     * This query searches for users with the name `tom`. The results are restricted to users with more than 42 repositories and over 1,000 followers.
     */
    get: {
      parameters: {
        query: {
          /**
           * The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query). See "[Searching users](https://help.github.com/articles/searching-users/)" for a detailed list of qualifiers.
           */
          q: string;
          /**
           * Sorts the results of your query by number of `followers` or `repositories`, or when the person `joined` GitHub. Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)
           */
          sort?: "followers" | "repositories" | "joined";
        };
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": {
            total_count?: number;
            incomplete_results?: boolean;
            items?: components["schemas"]["user-search-result-item"][];
          };
        };
        "304": any;
        "422": any;
        "503": any;
      };
    };
  };
  "/teams/{team_id}": {
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://developer.github.com/v3/teams/#get-a-team-by-name) endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["team-full"];
        };
        "404": any;
      };
    };
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://developer.github.com/v3/teams/#update-a-team) endpoint.
     *
     * To edit a team, the authenticated user must either be an organization owner or a team maintainer.
     *
     * **Note:** With nested teams, the `privacy` for parent teams cannot be `secret`.
     */
    patch: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["team-full"];
        };
        "403": any;
        "404": any;
        "422": any;
      };
    };
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://developer.github.com/v3/teams/#delete-a-team) endpoint.
     *
     * To delete a team, the authenticated user must be an organization owner or team maintainer.
     *
     * If you are an organization owner, deleting a parent team will delete all of its child teams as well.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "404": any;
        "422": any;
      };
    };
  };
  "/teams/{team_id}/discussions": {
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List discussions`](https://developer.github.com/v3/teams/discussions/#list-discussions) endpoint.
     *
     * List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["team-discussion"][];
        };
      };
    };
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create a discussion`](https://developer.github.com/v3/teams/discussions/#create-a-discussion) endpoint.
     *
     * Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)" for details.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["team-discussion"];
        };
      };
    };
  };
  "/teams/{team_id}/discussions/{discussion_number}": {
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://developer.github.com/v3/teams/discussions/#get-a-discussion) endpoint.
     *
     * Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["team-discussion"];
        };
      };
    };
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://developer.github.com/v3/teams/discussions/#update-a-discussion) endpoint.
     *
     * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     */
    patch: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["team-discussion"];
        };
      };
    };
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Delete a discussion`](https://developer.github.com/v3/teams/discussions/#delete-a-discussion) endpoint.
     *
     * Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/teams/{team_id}/discussions/{discussion_number}/comments": {
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://developer.github.com/v3/teams/discussion_comments/#list-discussion-comments) endpoint.
     *
     * List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["team-discussion-comment"][];
        };
      };
    };
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://developer.github.com/v3/teams/discussion_comments/#create-a-discussion-comment) endpoint.
     *
     * Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)" for details.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["team-discussion-comment"];
        };
      };
    };
  };
  "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}": {
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://developer.github.com/v3/teams/discussion_comments/#get-a-discussion-comment) endpoint.
     *
     * Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["team-discussion-comment"];
        };
      };
    };
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://developer.github.com/v3/teams/discussion_comments/#update-a-discussion-comment) endpoint.
     *
     * Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     */
    patch: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["team-discussion-comment"];
        };
      };
    };
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://developer.github.com/v3/teams/discussion_comments/#delete-a-discussion-comment) endpoint.
     *
     * Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions": {
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion comment`](https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-comment) endpoint.
     *
     * List the reactions to a [team discussion comment](https://developer.github.com/v3/teams/discussion_comments/). OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     */
    get: {
      parameters: {
        undefined: {};
        query: {
          /**
           * Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a team discussion comment.
           */
          content?:
            | "+1"
            | "-1"
            | "laugh"
            | "confused"
            | "heart"
            | "hooray"
            | "rocket"
            | "eyes";
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["reaction"][];
        };
      };
    };
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion comment`](https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-comment) endpoint.
     *
     * Create a reaction to a [team discussion comment](https://developer.github.com/v3/teams/discussion_comments/). OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion comment.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["reaction"];
        };
      };
    };
  };
  "/teams/{team_id}/discussions/{discussion_number}/reactions": {
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion) endpoint.
     *
     * List the reactions to a [team discussion](https://developer.github.com/v3/teams/discussions/). OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     */
    get: {
      parameters: {
        undefined: {};
        query: {
          /**
           * Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a team discussion.
           */
          content?:
            | "+1"
            | "-1"
            | "laugh"
            | "confused"
            | "heart"
            | "hooray"
            | "rocket"
            | "eyes";
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["reaction"][];
        };
      };
    };
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion`](https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion) endpoint.
     *
     * Create a reaction to a [team discussion](https://developer.github.com/v3/teams/discussions/). OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion.
     */
    post: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["reaction"];
        };
      };
    };
  };
  "/teams/{team_id}/invitations": {
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List pending team invitations`](https://developer.github.com/v3/teams/members/#list-pending-team-invitations) endpoint.
     *
     * The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["organization-invitation"][];
        };
      };
    };
  };
  "/teams/{team_id}/members": {
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team members`](https://developer.github.com/v3/teams/members/#list-team-members) endpoint.
     *
     * Team members will include the members of child teams.
     */
    get: {
      parameters: {
        undefined: {};
        query: {
          /**
           * Filters members returned by their role in the team. Can be one of:
           * \* `member` - normal members of the team.
           * \* `maintainer` - team maintainers.
           * \* `all` - all members of the team.
           */
          role?: "member" | "maintainer" | "all";
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["simple-user"][];
        };
        "404": any;
      };
    };
  };
  "/teams/{team_id}/members/{username}": {
    /**
     * The "Get team member" endpoint (described below) is deprecated.
     *
     * We recommend using the [Get team membership for a user](https://developer.github.com/v3/teams/members/#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.
     *
     * To list members in a team, the team must be visible to the authenticated user.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Response if user is a member
         */
        "204": any;
        /**
         * Response if user is not a member
         */
        "404": any;
      };
    };
    /**
     * The "Add team member" endpoint (described below) is deprecated.
     *
     * We recommend using the [Add or update team membership for a user](https://developer.github.com/v3/teams/members/#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.
     *
     * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they're changing. The person being added to the team must be a member of the team's organization.
     *
     * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
     *
     * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://developer.github.com/v3/#http-verbs)."
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "403": any;
        /**
         * Response if team synchronization is set up
         */
        "404": any;
        /**
         * response
         */
        "422": {
          "application/json": {
            message?: string;
            errors?: { code?: string; field?: string; resource?: string }[];
            documentation_url?: string;
          };
        };
      };
    };
    /**
     * The "Remove team member" endpoint (described below) is deprecated.
     *
     * We recommend using the [Remove team membership for a user](https://developer.github.com/v3/teams/members/#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.
     *
     * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * To remove a team member, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.
     *
     * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        /**
         * Response if team synchronization is setup
         */
        "404": any;
      };
    };
  };
  "/teams/{team_id}/memberships/{username}": {
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://developer.github.com/v3/teams/members/#get-team-membership-for-a-user) endpoint.
     *
     * Team members will include the members of child teams.
     *
     * To get a user's membership with a team, the team must be visible to the authenticated user.
     *
     * **Note:** The `role` for organization owners returns as `maintainer`. For more information about `maintainer` roles, see [Create a team](https://developer.github.com/v3/teams/#create-a-team).
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["team-membership"];
        };
        "404": any;
      };
    };
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://developer.github.com/v3/teams/members/#add-or-update-team-membership-for-a-user) endpoint.
     *
     * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * If the user is already a member of the team's organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.
     *
     * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
     *
     * If the user is unaffiliated with the team's organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the "pending" state until the user accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.
     *
     * If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["team-membership"];
        };
        /**
         * Response if team synchronization is set up
         */
        "403": any;
        "404": any;
        /**
         * Response if you attempt to add an organization to a team
         */
        "422": {
          "application/json": {
            message?: string;
            errors?: { code?: string; field?: string; resource?: string }[];
            documentation_url?: string;
          };
        };
      };
    };
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://developer.github.com/v3/teams/members/#remove-team-membership-for-a-user) endpoint.
     *
     * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
     *
     * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        /**
         * Response if team synchronization is set up
         */
        "403": any;
      };
    };
  };
  "/teams/{team_id}/projects": {
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team projects`](https://developer.github.com/v3/teams/#list-team-projects) endpoint.
     *
     * Lists the organization projects for a team.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["team-project"][];
        };
        "404": any;
        "415": any;
      };
    };
  };
  "/teams/{team_id}/projects/{project_id}": {
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://developer.github.com/v3/teams/#check-team-permissions-for-a-project) endpoint.
     *
     * Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["team-project"];
        };
        /**
         * Response if project is not managed by this team
         */
        "404": any;
        "415": any;
      };
    };
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team project permissions](https://developer.github.com/v3/teams/#add-or-update-team-project-permissions) endpoint.
     *
     * Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        /**
         * Response if the project is not owned by the organization
         */
        "403": {
          "application/json": { message?: string; documentation_url?: string };
        };
        "404": any;
        "415": any;
        "422": any;
      };
    };
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a project from a team](https://developer.github.com/v3/teams/#remove-a-project-from-a-team) endpoint.
     *
     * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "404": any;
        "415": any;
        "422": any;
      };
    };
  };
  "/teams/{team_id}/repos": {
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://developer.github.com/v3/teams/#list-team-repositories) endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["minimal-repository"][];
        };
        "404": any;
      };
    };
  };
  "/teams/{team_id}/repos/{owner}/{repo}": {
    /**
     * **Note**: Repositories inherited through a parent team will also be checked.
     *
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://developer.github.com/v3/teams/#check-team-permissions-for-a-repository) endpoint.
     *
     * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://developer.github.com/v3/media/) via the `Accept` header:
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Alternative response with extra repository information
         */
        "200": {
          "application/vnd.github.v3.repository+json": components["schemas"]["team-repository"];
        };
        /**
         * Response if repository is managed by this team
         */
        "204": any;
        /**
         * Response if repository is not managed by this team
         */
        "404": any;
      };
    };
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team repository permissions](https://developer.github.com/v3/teams/#add-or-update-team-repository-permissions) endpoint.
     *
     * To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization.
     *
     * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://developer.github.com/v3/#http-verbs)."
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "403": any;
        "422": any;
      };
    };
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://developer.github.com/v3/teams/#remove-a-repository-from-a-team) endpoint.
     *
     * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
      };
    };
  };
  "/teams/{team_id}/team-sync/group-mappings": {
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List IdP groups for a team`](https://developer.github.com/v3/teams/team_sync/#list-idp-groups-for-a-team) endpoint.
     *
     * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * List IdP groups connected to a team on GitHub.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["group-mapping"];
        };
        "403": any;
        "404": any;
      };
    };
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create or update IdP group connections`](https://developer.github.com/v3/teams/team_sync/#create-or-update-idp-group-connections) endpoint.
     *
     * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Creates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty `groups` array will remove all connections for a team.
     */
    patch: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["group-mapping"];
        };
        "403": any;
        "422": any;
      };
    };
  };
  "/teams/{team_id}/teams": {
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List child teams`](https://developer.github.com/v3/teams/#list-child-teams) endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Response if child teams exist
         */
        "200": {
          "application/json": components["schemas"]["team"][];
        };
        "403": any;
        "404": any;
        "422": any;
      };
    };
  };
  "/user": {
    /**
     * If the authenticated user is authenticated through basic authentication or OAuth with the `user` scope, then the response lists public and private profile information.
     *
     * If the authenticated user is authenticated through OAuth without the `user` scope, then the response lists only public profile information.
     */
    get: {
      parameters: {};
      responses: {
        /**
         * response
         */
        "200": {
          "application/json":
            | components["schemas"]["private-user"]
            | components["schemas"]["public-user"];
        };
        "304": any;
        "401": any;
        "403": any;
      };
    };
    /**
     * **Note:** If your email is set to private and you send an `email` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API.
     */
    patch: {
      parameters: {};
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["private-user"];
        };
        "304": any;
        "401": any;
        "403": any;
        "404": any;
        "422": any;
      };
    };
  };
  "/user/blocks": {
    /**
     * List the users you've blocked on your personal account.
     */
    get: {
      parameters: {};
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["simple-user"][];
        };
        "304": any;
        "401": any;
        "403": any;
        "404": any;
        "415": any;
      };
    };
  };
  "/user/blocks/{username}": {
    /**
     * If the user is blocked:
     *
     * If the user is not blocked:
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * If the user is blocked:
         */
        "204": any;
        "304": any;
        "401": any;
        "403": any;
        /**
         * If the user is not blocked:
         */
        "404": {
          "application/json": components["schemas"]["basic-error"];
        };
      };
    };
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "304": any;
        "401": any;
        "403": any;
        "404": any;
        "422": any;
      };
    };
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "304": any;
        "401": any;
        "403": any;
        "404": any;
      };
    };
  };
  "/user/email/visibility": {
    /**
     * Sets the visibility for your primary email addresses.
     */
    patch: {
      parameters: {};
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["email"][];
        };
        "304": any;
        "401": any;
        "403": any;
        "404": any;
        "422": any;
      };
    };
  };
  "/user/emails": {
    /**
     * Lists all of your email addresses, and specifies which one is visible to the public. This endpoint is accessible with the `user:email` scope.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["email"][];
        };
        "304": any;
        "401": any;
        "403": any;
        "404": any;
      };
    };
    /**
     * This endpoint is accessible with the `user` scope.
     */
    post: {
      parameters: {};
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["email"][];
        };
        "304": any;
        "401": any;
        "403": any;
        "404": any;
        "422": any;
      };
    };
    /**
     * This endpoint is accessible with the `user` scope.
     */
    delete: {
      parameters: {};
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "304": any;
        "401": any;
        "403": any;
        "404": any;
        "422": any;
      };
    };
  };
  "/user/followers": {
    /**
     * Lists the people following the authenticated user.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["simple-user"][];
        };
        "304": any;
        "401": any;
        "403": any;
      };
    };
  };
  "/user/following": {
    /**
     * Lists the people who the authenticated user follows.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["simple-user"][];
        };
        "304": any;
        "401": any;
        "403": any;
      };
    };
  };
  "/user/following/{username}": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Response if the person is followed by the authenticated user
         */
        "204": any;
        "304": any;
        "401": any;
        "403": any;
        /**
         * Response if the person is not followed by the authenticated user
         */
        "404": {
          "application/json": components["schemas"]["basic-error"];
        };
      };
    };
    /**
     * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://developer.github.com/v3/#http-verbs)."
     *
     * Following a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "304": any;
        "401": any;
        "403": any;
        "404": any;
      };
    };
    /**
     * Unfollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "304": any;
        "401": any;
        "403": any;
        "404": any;
      };
    };
  };
  "/user/gpg_keys": {
    /**
     * Lists the current user's GPG keys. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["gpg-key"][];
        };
        "304": any;
        "401": any;
        "403": any;
        "404": any;
      };
    };
    /**
     * Adds a GPG key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:gpg_key` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     */
    post: {
      parameters: {};
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["gpg-key"];
        };
        "304": any;
        "401": any;
        "403": any;
        "404": any;
        "422": any;
      };
    };
  };
  "/user/gpg_keys/{gpg_key_id}": {
    /**
     * View extended details for a single GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["gpg-key"];
        };
        "304": any;
        "401": any;
        "403": any;
        "404": any;
      };
    };
    /**
     * Removes a GPG key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:gpg_key` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "304": any;
        "401": any;
        "403": any;
        "404": any;
        "422": any;
      };
    };
  };
  "/user/installations": {
    /**
     * Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
     *
     * You must use a [user-to-server OAuth access token](https://developer.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
     *
     * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
     *
     * You can find the permissions for the installation under the `permissions` key.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * You can find the permissions for the installation under the `permissions` key.
         */
        "200": {
          "application/json": {
            total_count?: number;
            installations?: components["schemas"]["installation"][];
          };
        };
        "304": any;
        "401": any;
        "403": any;
        "415": any;
      };
    };
  };
  "/user/installations/{installation_id}/repositories": {
    /**
     * List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.
     *
     * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
     *
     * You must use a [user-to-server OAuth access token](https://developer.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
     *
     * The access the user has to each repository is included in the hash under the `permissions` key.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * The access the user has to each repository is included in the hash under the `permissions` key.
         */
        "200": {
          "application/json": {
            total_count?: number;
            repository_selection?: string;
            repositories?: components["schemas"]["repository"][];
          };
        };
        "304": any;
        "403": any;
        "404": any;
      };
    };
  };
  "/user/installations/{installation_id}/repositories/{repository_id}": {
    /**
     * Add a single repository to an installation. The authenticated user must have admin access to the repository.
     *
     * You must use a personal access token (which you can create via the [command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/#create-a-new-authorization)) or [Basic Authentication](https://developer.github.com/v3/auth/#basic-authentication) to access this endpoint.
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "304": any;
        "403": any;
        "404": any;
      };
    };
    /**
     * Remove a single repository from an installation. The authenticated user must have admin access to the repository.
     *
     * You must use a personal access token (which you can create via the [command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/#create-a-new-authorization)) or [Basic Authentication](https://developer.github.com/v3/auth/#basic-authentication) to access this endpoint.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "304": any;
        "403": any;
        "404": any;
      };
    };
  };
  "/user/issues": {
    /**
     * List issues across owned and member repositories assigned to the authenticated user.
     *
     * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
     * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
     * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
     * request id, use the "[List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests)" endpoint.
     */
    get: {
      parameters: {
        query: {
          /**
           * Indicates which sorts of issues to return. Can be one of:
           * \* `assigned`: Issues assigned to you
           * \* `created`: Issues created by you
           * \* `mentioned`: Issues mentioning you
           * \* `subscribed`: Issues you're subscribed to updates for
           * \* `all`: All issues the authenticated user can see, regardless of participation or creation
           */
          filter?: "assigned" | "created" | "mentioned" | "subscribed" | "all";
          /**
           * Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
           */
          state?: "open" | "closed" | "all";
          /**
           * What to sort results by. Can be either `created`, `updated`, `comments`.
           */
          sort?: "created" | "updated" | "comments";
        };
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["issue"][];
        };
        "304": any;
        "404": any;
      };
    };
  };
  "/user/keys": {
    /**
     * Lists the public SSH keys for the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["key"][];
        };
        "304": any;
        "401": any;
        "403": any;
        "404": any;
      };
    };
    /**
     * Adds a public SSH key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:public_key` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     */
    post: {
      parameters: {};
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["key"];
        };
        "304": any;
        "401": any;
        "403": any;
        "404": any;
        "422": any;
      };
    };
  };
  "/user/keys/{key_id}": {
    /**
     * View extended details for a single public SSH key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["key"];
        };
        "304": any;
        "401": any;
        "403": any;
        "404": any;
      };
    };
    /**
     * Removes a public SSH key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:public_key` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "304": any;
        "401": any;
        "403": any;
        "404": any;
      };
    };
  };
  "/user/marketplace_purchases": {
    /**
     * Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://developer.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/).
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["user-marketplace-purchase"][];
        };
        "304": any;
        "401": any;
        "404": any;
      };
    };
  };
  "/user/marketplace_purchases/stubbed": {
    /**
     * Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://developer.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/).
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["user-marketplace-purchase"][];
        };
        "304": any;
        "401": any;
      };
    };
  };
  "/user/memberships/orgs": {
    get: {
      parameters: {
        query: {
          /**
           * Indicates the state of the memberships to return. Can be either `active` or `pending`. If not specified, the API returns both active and pending memberships.
           */
          state?: "active" | "pending";
        };
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["org-membership"][];
        };
        "304": any;
        "401": any;
        "403": any;
        "422": any;
      };
    };
  };
  "/user/memberships/orgs/{org}": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["org-membership"];
        };
        "403": any;
        "404": any;
      };
    };
    patch: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["org-membership"];
        };
        "403": any;
        "404": any;
        "422": any;
      };
    };
  };
  "/user/migrations": {
    /**
     * Lists all migrations a user has started.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["migration"][];
        };
        "304": any;
        "401": any;
        "403": any;
      };
    };
    /**
     * Initiates the generation of a user migration archive.
     */
    post: {
      parameters: {};
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["migration"];
        };
        "304": any;
        "401": any;
        "403": any;
        "422": any;
      };
    };
  };
  "/user/migrations/{migration_id}": {
    /**
     * Fetches a single user migration. The response includes the `state` of the migration, which can be one of the following values:
     *
     * *   `pending` - the migration hasn't started yet.
     * *   `exporting` - the migration is in progress.
     * *   `exported` - the migration finished successfully.
     * *   `failed` - the migration failed.
     *
     * Once the migration has been `exported` you can [download the migration archive](https://developer.github.com/v3/migrations/users/#download-a-user-migration-archive).
     */
    get: {
      parameters: {
        undefined: {};
        query: {
          exclude?: string[];
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["migration"];
        };
        "304": any;
        "401": any;
        "403": any;
        "404": any;
      };
    };
  };
  "/user/migrations/{migration_id}/archive": {
    /**
     * Fetches the URL to download the migration archive as a `tar.gz` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:
     *
     * *   attachments
     * *   bases
     * *   commit\_comments
     * *   issue\_comments
     * *   issue\_events
     * *   issues
     * *   milestones
     * *   organizations
     * *   projects
     * *   protected\_branches
     * *   pull\_request\_reviews
     * *   pull\_requests
     * *   releases
     * *   repositories
     * *   review\_comments
     * *   schema
     * *   users
     *
     * The archive will also contain an `attachments` directory that includes all attachment files uploaded to GitHub.com and a `repositories` directory that contains the repository's Git data.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "302": any;
        "304": any;
        "401": any;
        "403": any;
      };
    };
    /**
     * Deletes a previous migration archive. Downloadable migration archives are automatically deleted after seven days. Migration metadata, which is returned in the [List user migrations](https://developer.github.com/v3/migrations/users/#list-user-migrations) and [Get a user migration status](https://developer.github.com/v3/migrations/users/#get-a-user-migration-status) endpoints, will continue to be available even after an archive is deleted.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "304": any;
        "401": any;
        "403": any;
        "404": any;
      };
    };
  };
  "/user/migrations/{migration_id}/repos/{repo_name}/lock": {
    /**
     * Unlocks a repository. You can lock repositories when you [start a user migration](https://developer.github.com/v3/migrations/users/#start-a-user-migration). Once the migration is complete you can unlock each repository to begin using it again or [delete the repository](https://developer.github.com/v3/repos/#delete-a-repository) if you no longer need the source data. Returns a status of `404 Not Found` if the repository is not locked.
     */
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "304": any;
        "401": any;
        "403": any;
        "404": any;
      };
    };
  };
  "/user/migrations/{migration_id}/repositories": {
    /**
     * Lists all the repositories for this user migration.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["minimal-repository"][];
        };
        "404": any;
      };
    };
  };
  "/user/orgs": {
    /**
     * List organizations for the authenticated user.
     *
     * **OAuth scope requirements**
     *
     * This only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope. OAuth requests with insufficient scope receive a `403 Forbidden` response.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["organization-simple"][];
        };
        "304": any;
        "401": any;
        "403": any;
      };
    };
  };
  "/user/projects": {
    post: {
      parameters: {};
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["project"];
        };
        "304": any;
        "401": any;
        "403": any;
        "415": any;
        "422": any;
      };
    };
  };
  "/user/public_emails": {
    /**
     * Lists your publicly visible email address, which you can set with the [Set primary email visibility for the authenticated user](https://developer.github.com/v3/users/emails/#set-primary-email-visibility-for-the-authenticated-user) endpoint. This endpoint is accessible with the `user:email` scope.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["email"][];
        };
        "304": any;
        "401": any;
        "403": any;
        "404": any;
      };
    };
  };
  "/user/repos": {
    /**
     * Lists repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
     *
     * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
     */
    get: {
      parameters: {
        query: {
          /**
           * Can be one of `all`, `public`, or `private`.
           */
          visibility?: "all" | "public" | "private";
          /**
           * Comma-separated list of values. Can include:
           * \* `owner`: Repositories that are owned by the authenticated user.
           * \* `collaborator`: Repositories that the user has been added to as a collaborator.
           * \* `organization_member`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.
           */
          affiliation?: string;
          /**
           * Can be one of `all`, `owner`, `public`, `private`, `member`. Default: `all`
           *
           * Will cause a `422` error if used in the same request as **visibility** or **affiliation**. Will cause a `422` error if used in the same request as **visibility** or **affiliation**.
           */
          type?: "all" | "owner" | "public" | "private" | "member";
          /**
           * Can be one of `created`, `updated`, `pushed`, `full_name`.
           */
          sort?: "created" | "updated" | "pushed" | "full_name";
          /**
           * Can be one of `asc` or `desc`. Default: `asc` when using `full_name`, otherwise `desc`
           */
          direction?: "asc" | "desc";
        };
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["repository"][];
        };
        "304": any;
        "401": any;
        "403": any;
        /**
         * Response definition missing
         */
        "418": any;
        "422": any;
      };
    };
    /**
     * Creates a new repository for the authenticated user.
     *
     * **OAuth scope requirements**
     *
     * When using [OAuth](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
     *
     * *   `public_repo` scope or `repo` scope to create a public repository
     * *   `repo` scope to create a private repository
     */
    post: {
      parameters: {};
      responses: {
        /**
         * response
         */
        "201": {
          "application/json": components["schemas"]["repository"];
        };
        "304": any;
        "400": any;
        "401": any;
        "403": any;
        "404": any;
        "422": any;
      };
    };
  };
  "/user/repository_invitations": {
    /**
     * When authenticating as a user, this endpoint will list all currently open repository invitations for that user.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["repository-invitation"][];
        };
        "304": any;
        "401": any;
        "403": any;
        "404": any;
      };
    };
  };
  "/user/repository_invitations/{invitation_id}": {
    patch: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "304": any;
        "403": any;
        "404": any;
        "409": any;
      };
    };
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "304": any;
        "403": any;
        "404": any;
        "409": any;
      };
    };
  };
  "/user/starred": {
    /**
     * Lists repositories the authenticated user has starred.
     *
     * You can also find out _when_ stars were created by passing the following custom [media type](https://developer.github.com/v3/media/) via the `Accept` header:
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["repository"][];
          "application/vnd.github.v3.star+json": components["schemas"]["starred-repository"][];
        };
        "304": any;
        "401": any;
        "403": any;
      };
    };
  };
  "/user/starred/{owner}/{repo}": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Response if this repository is starred by you
         */
        "204": any;
        "304": any;
        "401": any;
        "403": any;
        /**
         * Response if this repository is not starred by you
         */
        "404": {
          "application/json": components["schemas"]["basic-error"];
        };
      };
    };
    /**
     * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://developer.github.com/v3/#http-verbs)."
     */
    put: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "304": any;
        "401": any;
        "403": any;
        "404": any;
      };
    };
    delete: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * Empty response
         */
        "204": any;
        "304": any;
        "401": any;
        "403": any;
        "404": any;
      };
    };
  };
  "/user/subscriptions": {
    /**
     * Lists repositories the authenticated user is watching.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["minimal-repository"][];
        };
        "304": any;
        "401": any;
        "403": any;
      };
    };
  };
  "/user/teams": {
    /**
     * List all of the teams across all of the organizations to which the authenticated user belongs. This method requires `user`, `repo`, or `read:org` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://developer.github.com/apps/building-oauth-apps/).
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["team-full"][];
        };
        "304": any;
        "403": any;
        "404": any;
      };
    };
  };
  "/users": {
    /**
     * Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.
     *
     * Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://developer.github.com/v3/#link-header) to get the URL for the next page of users.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["simple-user"][];
        };
        "304": any;
      };
    };
  };
  "/users/{username}": {
    /**
     * Provides publicly available information about someone with a GitHub account.
     *
     * GitHub Apps with the `Plan` user permission can use this endpoint to retrieve information about a user's GitHub plan. The GitHub App must be authenticated as a user. See "[Identifying and authorizing users for GitHub Apps](https://developer.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/)" for details about authentication. For an example response, see "[Response with GitHub plan information](https://developer.github.com/v3/users/#response-with-github-plan-information)."
     *
     * The `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://developer.github.com/v3/#authentication).
     *
     * The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see "[Emails API](https://developer.github.com/v3/users/emails/)".
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json":
            | components["schemas"]["private-user"]
            | components["schemas"]["public-user"];
        };
        "404": any;
      };
    };
  };
  "/users/{username}/events": {
    /**
     * If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["event"][];
        };
      };
    };
  };
  "/users/{username}/events/orgs/{org}": {
    /**
     * This is the user's organization dashboard. You must be authenticated as the user to view this.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["event"][];
        };
      };
    };
  };
  "/users/{username}/events/public": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["event"][];
        };
      };
    };
  };
  "/users/{username}/followers": {
    /**
     * Lists the people following the specified user.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["simple-user"][];
        };
      };
    };
  };
  "/users/{username}/following": {
    /**
     * Lists the people who the specified user follows.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["simple-user"][];
        };
      };
    };
  };
  "/users/{username}/following/{target_user}": {
    get: {
      parameters: {
        undefined: {};
        path: {
          target_user: string;
        };
      };
      responses: {
        /**
         * Response if the user follows the target user
         */
        "204": any;
        /**
         * Response if the user does not follow the target user
         */
        "404": any;
      };
    };
  };
  "/users/{username}/gists": {
    /**
     * Lists public gists for the specified user:
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["base-gist"][];
        };
        "422": any;
      };
    };
  };
  "/users/{username}/gpg_keys": {
    /**
     * Lists the GPG keys for a user. This information is accessible by anyone.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["gpg-key"][];
        };
      };
    };
  };
  "/users/{username}/hovercard": {
    /**
     * Provides hovercard information when authenticated through basic auth or OAuth with the `repo` scope. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.
     *
     * The `subject_type` and `subject_id` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository via cURL, it would look like this:
     *
     * ```shell
     *  curl -u username:token
     *   https://api.github.com/users/octocat/hovercard?subject_type=repository&subject_id=1300192
     * ```
     */
    get: {
      parameters: {
        undefined: {};
        query: {
          /**
           * Identifies which additional information you'd like to receive about the person's hovercard. Can be `organization`, `repository`, `issue`, `pull_request`. **Required** when using `subject_id`.
           */
          subject_type?:
            | "organization"
            | "repository"
            | "issue"
            | "pull_request";
          /**
           * Uses the ID for the `subject_type` you specified. **Required** when using `subject_type`.
           */
          subject_id?: string;
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["hovercard"];
        };
        "404": any;
        "422": any;
      };
    };
  };
  "/users/{username}/installation": {
    /**
     * Enables an authenticated GitHub App to find the user’s installation information.
     *
     * You must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["installation"];
        };
      };
    };
  };
  "/users/{username}/keys": {
    /**
     * Lists the _verified_ public SSH keys for a user. This is accessible by anyone.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["key-simple"][];
        };
      };
    };
  };
  "/users/{username}/orgs": {
    /**
     * List [public organization memberships](https://help.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.
     *
     * This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://developer.github.com/v3/orgs/#list-organizations-for-the-authenticated-user) API instead.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["organization-simple"][];
        };
      };
    };
  };
  "/users/{username}/projects": {
    get: {
      parameters: {
        undefined: {};
        query: {
          /**
           * Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.
           */
          state?: "open" | "closed" | "all";
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["project"][];
        };
        "415": any;
        "422": any;
      };
    };
  };
  "/users/{username}/received_events": {
    /**
     * These are events that you've received by watching repos and following users. If you are authenticated as the given user, you will see private events. Otherwise, you'll only see public events.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["event"][];
        };
      };
    };
  };
  "/users/{username}/received_events/public": {
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["event"][];
        };
      };
    };
  };
  "/users/{username}/repos": {
    /**
     * Lists public repositories for the specified user.
     */
    get: {
      parameters: {
        undefined: {};
        query: {
          /**
           * Can be one of `all`, `owner`, `member`.
           */
          type?: "all" | "owner" | "member";
          /**
           * Can be one of `created`, `updated`, `pushed`, `full_name`.
           */
          sort?: "created" | "updated" | "pushed" | "full_name";
          /**
           * Can be one of `asc` or `desc`. Default: `asc` when using `full_name`, otherwise `desc`
           */
          direction?: "asc" | "desc";
        };
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["minimal-repository"][];
        };
      };
    };
  };
  "/users/{username}/settings/billing/actions": {
    /**
     * Gets the summary of the free and paid GitHub Actions minutes used.
     *
     * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
     *
     * Access tokens must have the `user` scope.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["actions-billing-usage"];
        };
      };
    };
  };
  "/users/{username}/settings/billing/packages": {
    /**
     * Gets the free and paid storage used for GitHub Packages in gigabytes.
     *
     * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
     *
     * Access tokens must have the `user` scope.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["packages-billing-usage"];
        };
      };
    };
  };
  "/users/{username}/settings/billing/shared-storage": {
    /**
     * Gets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.
     *
     * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
     *
     * Access tokens must have the `user` scope.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["combined-billing-usage"];
        };
      };
    };
  };
  "/users/{username}/starred": {
    /**
     * Lists repositories a user has starred.
     *
     * You can also find out _when_ stars were created by passing the following custom [media type](https://developer.github.com/v3/media/) via the `Accept` header:
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["repository"][];
          "application/vnd.github.v3.star+json": components["schemas"]["starred-repository"][];
        };
      };
    };
  };
  "/users/{username}/subscriptions": {
    /**
     * Lists repositories a user is watching.
     */
    get: {
      parameters: {
        undefined: {};
      };
      responses: {
        /**
         * response
         */
        "200": {
          "application/json": components["schemas"]["minimal-repository"][];
        };
      };
    };
  };
  "/zen": {
    /**
     * Get a random sentence from the Zen of GitHub
     */
    get: {
      responses: {
        /**
         * response
         */
        "200": {
          "text/plain": string;
        };
      };
    };
  };
}

export interface components {
  schemas: {
    /**
     * Simple User
     */
    "simple-user": {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string | null;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
      starred_at?: string;
    } | null;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    integration: {
      /**
       * Unique identifier of the GitHub app
       */
      id: number;
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      node_id: string;
      owner: components["schemas"]["simple-user"] | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      description: string | null;
      external_url: string;
      html_url: string;
      created_at: string;
      updated_at: string;
      /**
       * The set of permissions for the GitHub app
       */
      permissions: {
        issues?: string;
        checks?: string;
        metadata?: string;
        contents?: string;
        deployments?: string;
        [key: string]: string;
      };
      /**
       * The list of events for the GitHub app
       */
      events: string[];
      /**
       * The number of installations associated with the GitHub app
       */
      installations_count?: number;
      client_id?: string;
      client_secret?: string;
      webhook_secret?: string;
      pem?: string;
      [key: string]: any;
    };
    /**
     * Basic Error
     */
    "basic-error": { message?: string; documentation_url?: string };
    /**
     * Validation Error Simple
     */
    "validation-error-simple": {
      message: string;
      documentation_url: string;
      errors?: string[];
    };
    /**
     * An enterprise account
     */
    enterprise: {
      /**
       * A short description of the enterprise.
       */
      description?: string | null;
      html_url: string;
      /**
       * The enterprise's website URL.
       */
      website_url?: string | null;
      /**
       * Unique identifier of the enterprise
       */
      id: number;
      node_id: string;
      /**
       * The name of the enterprise.
       */
      name: string;
      /**
       * The slug url identifier for the enterprise.
       */
      slug: string;
      created_at: string | null;
      updated_at: string | null;
      avatar_url: string;
    };
    /**
     * Installation
     */
    installation: {
      /**
       * The ID of the installation.
       */
      id: number;
      account:
        | (Partial<components["schemas"]["simple-user"]> &
            Partial<components["schemas"]["enterprise"]>)
        | null;
      /**
       * Describe whether all repositories have been selected or there's a selection involved
       */
      repository_selection: "all" | "selected";
      access_tokens_url: string;
      repositories_url: string;
      html_url: string;
      app_id: number;
      /**
       * The ID of the user or organization this token is being scoped to.
       */
      target_id: number;
      target_type: string;
      permissions: {
        deployments?: string;
        checks?: string;
        metadata?: string;
        contents?: string;
        pull_requests?: string;
        statuses?: string;
        issues?: string;
        organization_administration?: string;
      };
      events: string[];
      created_at: string;
      updated_at: string;
      single_file_name: string | null;
      app_slug: string;
      suspended_by?: components["schemas"]["simple-user"] | null;
      suspended_at?: string | null;
      contact_email?: string | null;
    };
    /**
     * License Simple
     */
    "license-simple": {
      key: string;
      name: string;
      url: string | null;
      spdx_id: string | null;
      node_id: string;
      html_url?: string;
    };
    /**
     * A git repository
     */
    repository: {
      /**
       * Unique identifier of the repository
       */
      id: number;
      node_id: string;
      /**
       * The name of the repository.
       */
      name: string;
      full_name: string;
      license: components["schemas"]["license-simple"] | null;
      forks: number;
      permissions?: {
        admin: boolean;
        pull: boolean;
        triage?: boolean;
        push: boolean;
        maintain?: boolean;
      };
      owner: components["schemas"]["simple-user"] | null;
      /**
       * Whether the repository is private or public.
       */
      private: boolean;
      html_url: string;
      description: string | null;
      fork: boolean;
      url: string;
      archive_url: string;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      contributors_url: string;
      deployments_url: string;
      downloads_url: string;
      events_url: string;
      forks_url: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      git_url: string;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      languages_url: string;
      merges_url: string;
      milestones_url: string;
      notifications_url: string;
      pulls_url: string;
      releases_url: string;
      ssh_url: string;
      stargazers_url: string;
      statuses_url: string;
      subscribers_url: string;
      subscription_url: string;
      tags_url: string;
      teams_url: string;
      trees_url: string;
      clone_url: string;
      mirror_url: string | null;
      hooks_url: string;
      svn_url: string;
      homepage: string | null;
      language: string | null;
      forks_count: number;
      stargazers_count: number;
      watchers_count: number;
      size: number;
      /**
       * The default branch of the repository.
       */
      default_branch: string;
      open_issues_count: number;
      /**
       * Whether this repository acts as a template that can be used to generate new repositories.
       */
      is_template?: boolean;
      topics?: string[];
      /**
       * Whether issues are enabled.
       */
      has_issues: boolean;
      /**
       * Whether projects are enabled.
       */
      has_projects: boolean;
      /**
       * Whether the wiki is enabled.
       */
      has_wiki: boolean;
      has_pages: boolean;
      /**
       * Whether downloads are enabled.
       */
      has_downloads: boolean;
      /**
       * Whether the repository is archived.
       */
      archived: boolean;
      /**
       * Returns whether or not this repository disabled.
       */
      disabled: boolean;
      /**
       * The repository visibility: public, private, or internal.
       */
      visibility?: string;
      pushed_at: string | null;
      created_at: string | null;
      updated_at: string | null;
      /**
       * Whether to allow rebase merges for pull requests.
       */
      allow_rebase_merge?: boolean;
      template_repository?: {
        id?: number;
        node_id?: string;
        name?: string;
        full_name?: string;
        owner?: {
          login?: string;
          id?: number;
          node_id?: string;
          avatar_url?: string;
          gravatar_id?: string;
          url?: string;
          html_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          starred_url?: string;
          subscriptions_url?: string;
          organizations_url?: string;
          repos_url?: string;
          events_url?: string;
          received_events_url?: string;
          type?: string;
          site_admin?: boolean;
        };
        private?: boolean;
        html_url?: string;
        description?: string;
        fork?: boolean;
        url?: string;
        archive_url?: string;
        assignees_url?: string;
        blobs_url?: string;
        branches_url?: string;
        collaborators_url?: string;
        comments_url?: string;
        commits_url?: string;
        compare_url?: string;
        contents_url?: string;
        contributors_url?: string;
        deployments_url?: string;
        downloads_url?: string;
        events_url?: string;
        forks_url?: string;
        git_commits_url?: string;
        git_refs_url?: string;
        git_tags_url?: string;
        git_url?: string;
        issue_comment_url?: string;
        issue_events_url?: string;
        issues_url?: string;
        keys_url?: string;
        labels_url?: string;
        languages_url?: string;
        merges_url?: string;
        milestones_url?: string;
        notifications_url?: string;
        pulls_url?: string;
        releases_url?: string;
        ssh_url?: string;
        stargazers_url?: string;
        statuses_url?: string;
        subscribers_url?: string;
        subscription_url?: string;
        tags_url?: string;
        teams_url?: string;
        trees_url?: string;
        clone_url?: string;
        mirror_url?: string;
        hooks_url?: string;
        svn_url?: string;
        homepage?: string;
        language?: string;
        forks_count?: number;
        stargazers_count?: number;
        watchers_count?: number;
        size?: number;
        default_branch?: string;
        open_issues_count?: number;
        is_template?: boolean;
        topics?: string[];
        has_issues?: boolean;
        has_projects?: boolean;
        has_wiki?: boolean;
        has_pages?: boolean;
        has_downloads?: boolean;
        archived?: boolean;
        disabled?: boolean;
        visibility?: string;
        pushed_at?: string;
        created_at?: string;
        updated_at?: string;
        permissions?: { admin?: boolean; push?: boolean; pull?: boolean };
        allow_rebase_merge?: boolean;
        template_repository?: string;
        temp_clone_token?: string;
        allow_squash_merge?: boolean;
        delete_branch_on_merge?: boolean;
        allow_merge_commit?: boolean;
        subscribers_count?: number;
        network_count?: number;
      } | null;
      temp_clone_token?: string;
      /**
       * Whether to allow squash merges for pull requests.
       */
      allow_squash_merge?: boolean;
      /**
       * Whether to delete head branches when pull requests are merged
       */
      delete_branch_on_merge?: boolean;
      /**
       * Whether to allow merge commits for pull requests.
       */
      allow_merge_commit?: boolean;
      subscribers_count?: number;
      network_count?: number;
      open_issues: number;
      watchers: number;
      master_branch?: string;
      starred_at?: string;
    };
    /**
     * Authentication token for a GitHub App installed on a user or org.
     */
    "installation-token": {
      token?: string;
      expires_at?: string;
      permissions?: {
        issues?: string;
        contents?: string;
        metadata?: string;
        single_file?: string;
      };
      repository_selection?: "all" | "selected";
      repositories?: components["schemas"]["repository"][];
      single_file?: string;
    };
    /**
     * Validation Error
     */
    "validation-error": {
      message: string;
      documentation_url: string;
      errors?: {
        resource?: string;
        field?: string;
        message?: string;
        code: string;
        index?: number;
        value?: string | number | string[];
      }[];
    };
    /**
     * The authorization associated with an OAuth Access.
     */
    "application-grant": {
      id: number;
      url: string;
      app: { client_id: string; name: string; url: string };
      created_at: string;
      updated_at: string;
      scopes: string[];
      user?: components["schemas"]["simple-user"] | null;
    };
    "scoped-installation": {
      permissions: { [key: string]: any };
      /**
       * Describe whether all repositories have been selected or there's a selection involved
       */
      repository_selection: "all" | "selected";
      single_file_name: string | null;
      repositories_url: string;
      account: components["schemas"]["simple-user"];
    };
    /**
     * The authorization for an OAuth app, GitHub App, or a Personal Access Token.
     */
    authorization: {
      id: number;
      url: string;
      /**
       * A list of scopes that this authorization is in.
       */
      scopes: string[] | null;
      token: string;
      token_last_eight: string | null;
      hashed_token: string | null;
      app: { client_id: string; name: string; url: string };
      note: string | null;
      note_url: string | null;
      updated_at: string;
      created_at: string;
      fingerprint: string | null;
      user?: components["schemas"]["simple-user"] | null;
      installation?: components["schemas"]["scoped-installation"] | null;
    };
    /**
     * Code Of Conduct
     */
    "code-of-conduct": {
      key: string;
      name: string;
      url: string;
      body?: string;
      html_url: string | null;
    };
    /**
     * Content Reference attachments allow you to provide context around URLs posted in comments
     */
    "content-reference-attachment": {
      /**
       * The ID of the attachment
       */
      id: number;
      /**
       * The title of the attachment
       */
      title: string;
      /**
       * The body of the attachment
       */
      body: string;
      /**
       * The node_id of the content attachment
       */
      node_id?: string;
    };
    "runner-groups-enterprise": {
      id?: number;
      name?: string;
      visibility?: string;
      default?: boolean;
      selected_organizations_url?: string;
      runners_url?: string;
    };
    /**
     * Organization Simple
     */
    "organization-simple": {
      login: string;
      id: number;
      node_id: string;
      url: string;
      repos_url: string;
      events_url: string;
      hooks_url: string;
      issues_url: string;
      members_url: string;
      public_members_url: string;
      avatar_url: string;
      description: string | null;
    };
    /**
     * A self hosted runner
     */
    runner: {
      /**
       * The id of the runner.
       */
      id: number;
      /**
       * The name of the runner.
       */
      name: string;
      /**
       * The Operating System of the runner.
       */
      os: string;
      /**
       * The status of the runner.
       */
      status: string;
      busy: boolean;
      labels: {
        /**
         * Unique identifier of the label.
         */
        id?: number;
        /**
         * Name of the label.
         */
        name?: string;
        /**
         * The type of label. Read-only labels are applied automatically when the runner is configured.
         */
        type?: "read-only" | "custom";
      }[];
    };
    /**
     * Runner Application
     */
    "runner-application": {
      os?: string;
      architecture?: string;
      download_url?: string;
      filename?: string;
    };
    /**
     * Authentication Token
     */
    "authentication-token": {
      /**
       * The token used for authentication
       */
      token: string;
      /**
       * The time this token expires
       */
      expires_at: string;
      permissions?: { [key: string]: any };
      /**
       * The repositories this token has access to
       */
      repositories?: components["schemas"]["repository"][];
      single_file?: string | null;
      /**
       * Describe whether all repositories have been selected or there's a selection involved
       */
      repository_selection?: "all" | "selected";
    };
    "actions-billing-usage": {
      /**
       * The sum of the free and paid GitHub Actions minutes used.
       */
      total_minutes_used?: number;
      /**
       * The total paid GitHub Actions minutes used.
       */
      total_paid_minutes_used?: number;
      /**
       * The amount of free GitHub Actions minutes available.
       */
      included_minutes?: number;
      minutes_used_breakdown?: {
        /**
         * Total minutes used on Ubuntu runner machines.
         */
        UBUNTU?: number;
        /**
         * Total minutes used on macOS runner machines.
         */
        MACOS?: number;
        /**
         * Total minutes used on Windows runner machines.
         */
        WINDOWS?: number;
      };
    };
    "packages-billing-usage": {
      /**
       * Sum of the free and paid storage space (GB) for GitHuub Packages.
       */
      total_gigabytes_bandwidth_used?: number;
      /**
       * Total paid storage space (GB) for GitHuub Packages.
       */
      total_paid_gigabytes_bandwidth_used?: number;
      /**
       * Free storage space (GB) for GitHub Packages.
       */
      included_gigabytes_bandwidth?: number;
    };
    "combined-billing-usage": {
      /**
       * Numbers of days left in billing cycle.
       */
      days_left_in_billing_cycle?: number;
      /**
       * Estimated storage space (GB) used in billing cycle.
       */
      estimated_paid_storage_for_month?: number;
      /**
       * Estimated sum of free and paid storage space (GB) used in billing cycle.
       */
      estimated_storage_for_month?: number;
    };
    /**
     * Actor
     */
    actor: {
      id: number;
      login: string;
      display_login?: string;
      gravatar_id: string | null;
      url: string;
      avatar_url: string;
    };
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      url: string;
      html_url: string;
      labels_url: string;
      id: number;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      /**
       * The state of the milestone.
       */
      state: "open" | "closed";
      /**
       * The title of the milestone.
       */
      title: string;
      description: string | null;
      creator: components["schemas"]["simple-user"] | null;
      open_issues: number;
      closed_issues: number;
      created_at: string;
      updated_at: string;
      closed_at: string | null;
      due_on: string | null;
    };
    /**
     * Issue Simple
     */
    "issue-simple": {
      id: number;
      node_id: string;
      url: string;
      repository_url: string;
      labels_url: string;
      comments_url: string;
      events_url: string;
      html_url: string;
      number: number;
      state: string;
      title: string;
      body?: string;
      user: components["schemas"]["simple-user"] | null;
      labels: {
        id?: number;
        node_id?: string;
        url?: string;
        name?: string;
        description?: string | null;
        color?: string;
        default?: boolean;
      }[];
      assignee: components["schemas"]["simple-user"] | null;
      assignees?: components["schemas"]["simple-user"][] | null;
      milestone: components["schemas"]["milestone"] | null;
      locked: boolean;
      active_lock_reason?: string | null;
      comments: number;
      pull_request?: {
        merged_at?: string | null;
        diff_url: string | null;
        html_url: string | null;
        patch_url: string | null;
        url: string | null;
      };
      closed_at: string | null;
      created_at: string;
      updated_at: string;
      author_association: string;
      body_html?: string;
      body_text?: string;
      timeline_url?: string;
      repository?: components["schemas"]["repository"];
      performed_via_github_app?: components["schemas"]["integration"] | null;
    };
    "reaction-rollup": {
      url: string;
      total_count: number;
      "+1": number;
      "-1": number;
      laugh: number;
      confused: number;
      heart: number;
      hooray: number;
      eyes: number;
      rocket: number;
    };
    /**
     * Comments provide a way for people to collaborate on an issue.
     */
    "issue-comment": {
      /**
       * Unique identifier of the issue comment
       */
      id: number;
      node_id: string;
      /**
       * URL for the issue comment
       */
      url: string;
      /**
       * Contents of the issue comment
       */
      body?: string;
      body_text?: string;
      body_html?: string;
      html_url: string;
      user: components["schemas"]["simple-user"] | null;
      created_at: string;
      updated_at: string;
      issue_url: string;
      author_association: string;
      performed_via_github_app?: components["schemas"]["integration"] | null;
      reactions?: components["schemas"]["reaction-rollup"];
    };
    /**
     * Event
     */
    event: {
      id: string;
      type: string | null;
      actor: components["schemas"]["actor"];
      repo: { id: number; name: string; url: string };
      org?: components["schemas"]["actor"];
      payload: {
        action: string;
        issue?: components["schemas"]["issue-simple"];
        comment?: components["schemas"]["issue-comment"];
        pages?: {
          page_name?: string;
          title?: string;
          summary?: string | null;
          action?: string;
          sha?: string;
          html_url?: string;
        }[];
      };
      public: boolean;
      created_at: string | null;
    };
    /**
     * Hypermedia Link with Type
     */
    "link-with-type": { href: string; type: string };
    /**
     * Feed
     */
    feed: {
      timeline_url: string;
      user_url: string;
      current_user_public_url?: string;
      current_user_url?: string;
      current_user_actor_url?: string;
      current_user_organization_url?: string;
      current_user_organization_urls?: string[];
      security_advisories_url?: string;
      _links: {
        timeline: components["schemas"]["link-with-type"];
        user: components["schemas"]["link-with-type"];
        security_advisories?: components["schemas"]["link-with-type"];
        current_user?: components["schemas"]["link-with-type"];
        current_user_public?: components["schemas"]["link-with-type"];
        current_user_actor?: components["schemas"]["link-with-type"];
        current_user_organization?: components["schemas"]["link-with-type"];
        current_user_organizations?: components["schemas"]["link-with-type"][];
      };
    };
    /**
     * Base Gist
     */
    "base-gist": {
      url: string;
      forks_url: string;
      commits_url: string;
      id: string;
      node_id: string;
      git_pull_url: string;
      git_push_url: string;
      html_url: string;
      files: {
        [key: string]: {
          filename?: string;
          type?: string;
          language?: string;
          raw_url?: string;
          size?: number;
        };
      };
      public: boolean;
      created_at: string;
      updated_at: string;
      description: string | null;
      comments: number;
      user: components["schemas"]["simple-user"] | null;
      comments_url: string;
      owner?: components["schemas"]["simple-user"] | null;
      truncated?: boolean;
      forks?: { [key: string]: any }[];
      history?: { [key: string]: any }[];
    };
    /**
     * Gist Simple
     */
    "gist-simple": {
      url?: string;
      forks_url?: string;
      commits_url?: string;
      id?: string;
      node_id?: string;
      git_pull_url?: string;
      git_push_url?: string;
      html_url?: string;
      files?: {
        [key: string]: {
          filename?: string;
          type?: string;
          language?: string;
          raw_url?: string;
          size?: number;
          truncated?: boolean;
          content?: string;
        };
      };
      public?: boolean;
      created_at?: string;
      updated_at?: string;
      description?: string | null;
      comments?: number;
      user?: string | null;
      comments_url?: string;
      owner?: components["schemas"]["simple-user"];
      truncated?: boolean;
    };
    /**
     * Gist Full
     */
    "gist-full": components["schemas"]["gist-simple"] & {
      forks?: {
        user?: {
          login?: string;
          id?: number;
          node_id?: string;
          avatar_url?: string;
          gravatar_id?: string;
          url?: string;
          html_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          starred_url?: string;
          subscriptions_url?: string;
          organizations_url?: string;
          repos_url?: string;
          events_url?: string;
          received_events_url?: string;
          type?: string;
          site_admin?: boolean;
        };
        url?: string;
        id?: string;
        created_at?: string;
        updated_at?: string;
      }[];
      history?: {
        url?: string;
        version?: string;
        user?: {
          login?: string;
          id?: number;
          node_id?: string;
          avatar_url?: string;
          gravatar_id?: string;
          url?: string;
          html_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          starred_url?: string;
          subscriptions_url?: string;
          organizations_url?: string;
          repos_url?: string;
          events_url?: string;
          received_events_url?: string;
          type?: string;
          site_admin?: boolean;
        } | null;
        change_status?: {
          deletions?: number;
          additions?: number;
          total?: number;
        };
        committed_at?: string;
      }[];
      fork_of?: components["schemas"]["gist-simple"] | null;
      url?: string;
      forks_url?: string;
      commits_url?: string;
      id?: string;
      node_id?: string;
      git_pull_url?: string;
      git_push_url?: string;
      html_url?: string;
      created_at?: string;
      updated_at?: string;
      description?: string | null;
      comments?: number;
      comments_url?: string;
    };
    /**
     * A comment made to a gist.
     */
    "gist-comment": {
      id: number;
      node_id: string;
      url: string;
      /**
       * The comment text.
       */
      body: string;
      user: components["schemas"]["simple-user"] | null;
      created_at: string;
      updated_at: string;
      author_association: string;
    };
    /**
     * Gist Commit
     */
    "gist-commit": {
      url: string;
      version: string;
      user: components["schemas"]["simple-user"] | null;
      change_status: { total?: number; additions?: number; deletions?: number };
      committed_at: string;
    };
    /**
     * Gitignore Template
     */
    "gitignore-template": { name: string; source: string };
    /**
     * Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
     */
    issue: {
      id: number;
      node_id: string;
      /**
       * URL for the issue
       */
      url: string;
      repository_url: string;
      labels_url: string;
      comments_url: string;
      events_url: string;
      html_url: string;
      /**
       * Number uniquely identifying the issue within its repository
       */
      number: number;
      /**
       * State of the issue; either 'open' or 'closed'
       */
      state: string;
      /**
       * Title of the issue
       */
      title: string;
      /**
       * Contents of the issue
       */
      body?: string;
      user: components["schemas"]["simple-user"] | null;
      /**
       * Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
       */
      labels: (
        | string
        | {
            id?: number;
            node_id?: string;
            url?: string;
            name?: string;
            description?: string | null;
            color?: string | null;
            default?: boolean;
          }
      )[];
      assignee: components["schemas"]["simple-user"] | null;
      assignees?: components["schemas"]["simple-user"][] | null;
      milestone: components["schemas"]["milestone"] | null;
      locked: boolean;
      active_lock_reason?: string | null;
      comments: number;
      pull_request?: {
        merged_at?: string | null;
        diff_url: string | null;
        html_url: string | null;
        patch_url: string | null;
        url: string | null;
      };
      closed_at: string | null;
      created_at: string;
      updated_at: string;
      closed_by?: components["schemas"]["simple-user"] | null;
      body_html?: string;
      body_text?: string;
      timeline_url?: string;
      repository?: components["schemas"]["repository"];
      performed_via_github_app?: components["schemas"]["integration"] | null;
      author_association: string;
      reactions?: components["schemas"]["reaction-rollup"];
    };
    /**
     * License
     */
    license: {
      key: string;
      name: string;
      spdx_id: string | null;
      url: string | null;
      node_id: string;
      html_url: string;
      description: string;
      implementation: string;
      permissions: string[];
      conditions: string[];
      limitations: string[];
      body: string;
      featured: boolean;
    };
    /**
     * Marketplace Listing Plan
     */
    "marketplace-listing-plan": {
      url: string;
      accounts_url: string;
      id: number;
      number: number;
      name: string;
      description: string;
      monthly_price_in_cents: number;
      yearly_price_in_cents: number;
      price_model: string;
      has_free_trial: boolean;
      unit_name: string | null;
      state: string;
      bullets: string[];
    };
    /**
     * Marketplace Purchase
     */
    "marketplace-purchase": {
      url: string;
      type: string;
      id: number;
      login: string;
      organization_billing_email?: string;
      marketplace_pending_change?: {
        is_installed?: boolean;
        effective_date?: string;
        unit_count?: number | null;
        id?: number;
        plan?: components["schemas"]["marketplace-listing-plan"];
      } | null;
      marketplace_purchase: {
        billing_cycle?: string;
        next_billing_date?: string | null;
        is_installed?: boolean;
        unit_count?: number | null;
        on_free_trial?: boolean;
        free_trial_ends_on?: string | null;
        updated_at?: string;
        plan?: components["schemas"]["marketplace-listing-plan"];
      };
    };
    /**
     * Api Overview
     */
    "api-overview": {
      verifiable_password_authentication: boolean;
      ssh_key_fingerprints?: {
        MD5_RSA?: string;
        MD5_DSA?: string;
        SHA256_RSA?: string;
        SHA256_DSA?: string;
      };
      hooks?: string[];
      web?: string[];
      api?: string[];
      git?: string[];
      pages?: string[];
      importer?: string[];
      github_services_sha?: string;
      installed_version?: string;
    };
    /**
     * Minimal Repository
     */
    "minimal-repository": {
      id: number;
      node_id: string;
      name: string;
      full_name: string;
      owner: components["schemas"]["simple-user"] | null;
      private: boolean;
      html_url: string;
      description: string | null;
      fork: boolean;
      url: string;
      archive_url: string;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      contributors_url: string;
      deployments_url: string;
      downloads_url: string;
      events_url: string;
      forks_url: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      git_url?: string;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      languages_url: string;
      merges_url: string;
      milestones_url: string;
      notifications_url: string;
      pulls_url: string;
      releases_url: string;
      ssh_url?: string;
      stargazers_url: string;
      statuses_url: string;
      subscribers_url: string;
      subscription_url: string;
      tags_url: string;
      teams_url: string;
      trees_url: string;
      clone_url?: string;
      mirror_url?: string | null;
      hooks_url: string;
      svn_url?: string;
      homepage?: string | null;
      language?: string | null;
      forks_count?: number;
      stargazers_count?: number;
      watchers_count?: number;
      size?: number;
      default_branch?: string;
      open_issues_count?: number;
      is_template?: boolean;
      topics?: string[];
      has_issues?: boolean;
      has_projects?: boolean;
      has_wiki?: boolean;
      has_pages?: boolean;
      has_downloads?: boolean;
      archived?: boolean;
      disabled?: boolean;
      visibility?: string;
      pushed_at?: string | null;
      created_at?: string | null;
      updated_at?: string | null;
      permissions?: { admin?: boolean; push?: boolean; pull?: boolean };
      template_repository?: string;
      temp_clone_token?: string;
      delete_branch_on_merge?: boolean;
      subscribers_count?: number;
      network_count?: number;
      license?: {
        key?: string;
        name?: string;
        spdx_id?: string;
        url?: string;
        node_id?: string;
      } | null;
      forks?: number;
      open_issues?: number;
      watchers?: number;
    };
    /**
     * Thread
     */
    thread: {
      id?: string;
      repository?: components["schemas"]["minimal-repository"];
      subject?: {
        title?: string;
        url?: string;
        latest_comment_url?: string;
        type?: string;
      };
      reason?: string;
      unread?: boolean;
      updated_at?: string;
      last_read_at?: string | null;
      url?: string;
      subscription_url?: string;
    };
    /**
     * Thread Subscription
     */
    "thread-subscription": {
      subscribed: boolean;
      ignored: boolean;
      reason: string | null;
      created_at: string | null;
      url: string;
      thread_url?: string;
      repository_url?: string;
    };
    /**
     * Organization Full
     */
    "organization-full": {
      login: string;
      id: number;
      node_id: string;
      url: string;
      repos_url: string;
      events_url: string;
      hooks_url: string;
      issues_url: string;
      members_url: string;
      public_members_url: string;
      avatar_url: string;
      description: string | null;
      name?: string;
      company?: string;
      blog?: string;
      location?: string;
      email?: string;
      twitter_username?: string | null;
      is_verified?: boolean;
      has_organization_projects: boolean;
      has_repository_projects: boolean;
      public_repos: number;
      public_gists: number;
      followers: number;
      following: number;
      html_url: string;
      created_at: string;
      type: string;
      total_private_repos?: number;
      owned_private_repos?: number;
      private_gists?: number | null;
      disk_usage?: number | null;
      collaborators?: number | null;
      billing_email?: string | null;
      plan?: {
        name: string;
        space: number;
        private_repos: number;
        filled_seats?: number;
        seats?: number;
      };
      default_repository_permission?: string | null;
      members_can_create_repositories?: boolean | null;
      two_factor_requirement_enabled?: boolean | null;
      members_allowed_repository_creation_type?: string;
      members_can_create_public_repositories?: boolean;
      members_can_create_private_repositories?: boolean;
      members_can_create_internal_repositories?: boolean;
      members_can_create_pages?: boolean;
      updated_at: string;
    };
    "runner-groups-org": {
      id?: number;
      name?: string;
      visibility?: string;
      default?: boolean;
      selected_repositories_url?: string;
      runners_url?: string;
      inherited?: boolean;
    };
    /**
     * Secrets for GitHub Actions for an organization.
     */
    "organization-actions-secret": {
      /**
       * The name of the secret.
       */
      name: string;
      created_at: string;
      updated_at: string;
      /**
       * Visibility of a secret
       */
      visibility: "all" | "private" | "selected";
      selected_repositories_url?: string;
    };
    /**
     * The public key used for setting Actions Secrets.
     */
    "actions-public-key": {
      /**
       * The identifier for the key.
       */
      key_id: string;
      /**
       * The Base64 encoded public key.
       */
      key: string;
      id?: number;
      url?: string;
      title?: string;
      created_at?: string;
    };
    /**
     * Credential Authorization
     */
    "credential-authorization": {
      /**
       * User login that owns the underlying credential.
       */
      login: string;
      /**
       * Unique identifier for the credential.
       */
      credential_id: number;
      /**
       * Human-readable description of the credential type.
       */
      credential_type: string;
      /**
       * Last eight characters of the credential. Only included in responses with credential_type of personal access token.
       */
      token_last_eight?: string;
      /**
       * Date when the credential was authorized for use.
       */
      credential_authorized_at: string;
      /**
       * List of oauth scopes the token has been granted.
       */
      scopes?: string[];
      /**
       * Unique string to distinguish the credential. Only included in responses with credential_type of SSH Key.
       */
      fingerprint?: string;
      /**
       * Date when the credential was last accessed. May be null if it was never accessed
       */
      credential_accessed_at?: string | null;
    };
    /**
     * Org Hook
     */
    "org-hook": {
      id: number;
      url: string;
      ping_url: string;
      name: string;
      events: string[];
      active: boolean;
      config: {
        url?: string;
        insecure_ssl?: string;
        content_type?: string;
        secret?: string;
      };
      updated_at: string;
      created_at: string;
      type: string;
    };
    /**
     * Interaction limit settings.
     */
    "interaction-limit": {
      /**
       * The interaction limit to enable.
       */
      limit: "existing_users" | "contributors_only" | "collaborators_only";
      origin: string;
      expires_at: string;
    };
    /**
     * Organization Invitation
     */
    "organization-invitation": {
      id?: number;
      login?: string | null;
      email?: string | null;
      role?: string;
      created_at?: string;
      inviter?: components["schemas"]["simple-user"];
      team_count?: number;
      invitation_team_url?: string;
      node_id?: string;
      invitation_teams_url?: string;
    };
    /**
     * Groups of organization members that gives permissions on specified repositories.
     */
    "team-simple": {
      /**
       * Unique identifier of the team
       */
      id: number;
      node_id: string;
      /**
       * URL for the team
       */
      url: string;
      members_url: string;
      /**
       * Name of the team
       */
      name: string;
      /**
       * Description of the team
       */
      description: string | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission: string;
      /**
       * The level of privacy this team should have
       */
      privacy?: string;
      html_url: string;
      repositories_url: string;
      slug: string;
      /**
       * Distinguished Name (DN) that team maps to within LDAP environment
       */
      ldap_dn?: string;
    } | null;
    /**
     * Groups of organization members that gives permissions on specified repositories.
     */
    team: {
      id: number;
      node_id: string;
      name: string;
      slug: string;
      description: string | null;
      privacy?: string;
      permission: string;
      url: string;
      html_url: string;
      members_url: string;
      repositories_url: string;
      parent?: components["schemas"]["team-simple"] | null;
    };
    /**
     * Org Membership
     */
    "org-membership": {
      url: string;
      state: string;
      role: string;
      organization_url: string;
      organization: components["schemas"]["organization-simple"];
      user: components["schemas"]["simple-user"] | null;
      permissions?: { can_create_repository: boolean };
    };
    /**
     * A migration.
     */
    migration: {
      id: number;
      owner: components["schemas"]["simple-user"] | null;
      guid: string;
      state: string;
      lock_repositories: boolean;
      exclude_attachments: boolean;
      repositories: components["schemas"]["repository"][];
      url: string;
      created_at: string;
      updated_at: string;
      node_id: string;
      archive_url?: string;
      exclude?: { [key: string]: any }[];
    };
    /**
     * Projects are a way to organize columns and cards of work.
     */
    project: {
      owner_url: string;
      url: string;
      html_url: string;
      columns_url: string;
      id: number;
      node_id: string;
      /**
       * Name of the project
       */
      name: string;
      /**
       * Body of the project
       */
      body: string | null;
      number: number;
      /**
       * State of the project; either 'open' or 'closed'
       */
      state: string;
      creator: components["schemas"]["simple-user"] | null;
      created_at: string;
      updated_at: string;
      /**
       * The baseline permission that all organization members have on this project
       */
      organization_permission?: "read" | "write" | "admin" | "none";
      /**
       * Whether or not this project can be seen by everyone.
       */
      private?: boolean;
      cards_url?: string;
      permissions?: { read: boolean; write: boolean; admin: boolean };
    };
    /**
     * External Groups to be mapped to a team for membership
     */
    "group-mapping": {
      /**
       * Array of groups to be mapped to this team
       */
      groups?: {
        /**
         * The ID of the group
         */
        group_id: string;
        /**
         * The name of the group
         */
        group_name: string;
        /**
         * a description of the group
         */
        group_description: string;
      }[];
      /**
       * The ID of the group
       */
      group_id?: string;
      /**
       * The name of the group
       */
      group_name?: string;
      /**
       * a description of the group
       */
      group_description?: string;
      /**
       * synchronization status for this group mapping
       */
      status?: string;
      /**
       * the time of the last sync for this group-mapping
       */
      synced_at?: string;
    };
    /**
     * Groups of organization members that gives permissions on specified repositories.
     */
    "team-full": {
      /**
       * Unique identifier of the team
       */
      id: number;
      node_id: string;
      /**
       * URL for the team
       */
      url: string;
      html_url: string;
      /**
       * Name of the team
       */
      name: string;
      slug: string;
      description: string | null;
      /**
       * The level of privacy this team should have
       */
      privacy?: "closed" | "secret";
      /**
       * Permission that the team will have for its repositories
       */
      permission: string;
      members_url: string;
      repositories_url: string;
      parent?: components["schemas"]["team-simple"] | null;
      members_count: number;
      repos_count: number;
      created_at: string;
      updated_at: string;
      organization: components["schemas"]["organization-full"];
      /**
       * Distinguished Name (DN) that team maps to within LDAP environment
       */
      ldap_dn?: string;
    };
    /**
     * A team discussion is a persistent record of a free-form conversation within a team.
     */
    "team-discussion": {
      author: components["schemas"]["simple-user"] | null;
      /**
       * The main text of the discussion.
       */
      body: string;
      body_html: string;
      /**
       * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
       */
      body_version: string;
      comments_count: number;
      comments_url: string;
      created_at: string;
      last_edited_at: string | null;
      html_url: string;
      node_id: string;
      /**
       * The unique sequence number of a team discussion.
       */
      number: number;
      /**
       * Whether or not this discussion should be pinned for easy retrieval.
       */
      pinned: boolean;
      /**
       * Whether or not this discussion should be restricted to team members and organization administrators.
       */
      private: boolean;
      team_url: string;
      /**
       * The title of the discussion.
       */
      title: string;
      updated_at: string;
      url: string;
      reactions?: components["schemas"]["reaction-rollup"];
    };
    /**
     * A reply to a discussion within a team.
     */
    "team-discussion-comment": {
      author: components["schemas"]["simple-user"] | null;
      /**
       * The main text of the comment.
       */
      body: string;
      body_html: string;
      /**
       * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
       */
      body_version: string;
      created_at: string;
      last_edited_at: string | null;
      discussion_url: string;
      html_url: string;
      node_id: string;
      /**
       * The unique sequence number of a team discussion comment.
       */
      number: number;
      updated_at: string;
      url: string;
      reactions?: components["schemas"]["reaction-rollup"];
    };
    /**
     * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
     */
    reaction: {
      id: number;
      node_id: string;
      user: components["schemas"]["simple-user"] | null;
      /**
       * The reaction to use
       */
      content:
        | "+1"
        | "-1"
        | "laugh"
        | "confused"
        | "heart"
        | "hooray"
        | "rocket"
        | "eyes";
      created_at: string;
    };
    /**
     * Team Membership
     */
    "team-membership": {
      url: string;
      /**
       * The role of the user in the team.
       */
      role: "member" | "maintainer";
      state: string;
    };
    /**
     * A team's access to a project.
     */
    "team-project": {
      owner_url?: string;
      url?: string;
      html_url?: string;
      columns_url?: string;
      id?: number;
      node_id?: string;
      name?: string;
      body?: string | null;
      number?: number;
      state?: string;
      creator?: components["schemas"]["simple-user"];
      created_at?: string;
      updated_at?: string;
      organization_permission?: string;
      private?: boolean;
      permissions?: { read?: boolean; write?: boolean; admin?: boolean };
    };
    /**
     * A team's access to a repository.
     */
    "team-repository": {
      /**
       * Unique identifier of the repository
       */
      id: number;
      node_id: string;
      /**
       * The name of the repository.
       */
      name: string;
      full_name: string;
      license: components["schemas"]["license-simple"] | null;
      forks: number;
      permissions?: {
        admin: boolean;
        pull: boolean;
        triage?: boolean;
        push: boolean;
        maintain?: boolean;
      };
      owner: components["schemas"]["simple-user"] | null;
      /**
       * Whether the repository is private or public.
       */
      private: boolean;
      html_url: string;
      description: string | null;
      fork: boolean;
      url: string;
      archive_url: string;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      contributors_url: string;
      deployments_url: string;
      downloads_url: string;
      events_url: string;
      forks_url: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      git_url: string;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      languages_url: string;
      merges_url: string;
      milestones_url: string;
      notifications_url: string;
      pulls_url: string;
      releases_url: string;
      ssh_url: string;
      stargazers_url: string;
      statuses_url: string;
      subscribers_url: string;
      subscription_url: string;
      tags_url: string;
      teams_url: string;
      trees_url: string;
      clone_url: string;
      mirror_url: string | null;
      hooks_url: string;
      svn_url: string;
      homepage: string | null;
      language: string | null;
      forks_count: number;
      stargazers_count: number;
      watchers_count: number;
      size: number;
      /**
       * The default branch of the repository.
       */
      default_branch: string;
      open_issues_count: number;
      /**
       * Whether this repository acts as a template that can be used to generate new repositories.
       */
      is_template?: boolean;
      topics?: string[];
      /**
       * Whether issues are enabled.
       */
      has_issues: boolean;
      /**
       * Whether projects are enabled.
       */
      has_projects: boolean;
      /**
       * Whether the wiki is enabled.
       */
      has_wiki: boolean;
      has_pages: boolean;
      /**
       * Whether downloads are enabled.
       */
      has_downloads: boolean;
      /**
       * Whether the repository is archived.
       */
      archived: boolean;
      /**
       * Returns whether or not this repository disabled.
       */
      disabled: boolean;
      /**
       * The repository visibility: public, private, or internal.
       */
      visibility?: string;
      pushed_at: string | null;
      created_at: string | null;
      updated_at: string | null;
      /**
       * Whether to allow rebase merges for pull requests.
       */
      allow_rebase_merge?: boolean;
      template_repository?: {
        id?: number;
        node_id?: string;
        name?: string;
        full_name?: string;
        owner?: {
          login?: string;
          id?: number;
          node_id?: string;
          avatar_url?: string;
          gravatar_id?: string;
          url?: string;
          html_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          starred_url?: string;
          subscriptions_url?: string;
          organizations_url?: string;
          repos_url?: string;
          events_url?: string;
          received_events_url?: string;
          type?: string;
          site_admin?: boolean;
        };
        private?: boolean;
        html_url?: string;
        description?: string;
        fork?: boolean;
        url?: string;
        archive_url?: string;
        assignees_url?: string;
        blobs_url?: string;
        branches_url?: string;
        collaborators_url?: string;
        comments_url?: string;
        commits_url?: string;
        compare_url?: string;
        contents_url?: string;
        contributors_url?: string;
        deployments_url?: string;
        downloads_url?: string;
        events_url?: string;
        forks_url?: string;
        git_commits_url?: string;
        git_refs_url?: string;
        git_tags_url?: string;
        git_url?: string;
        issue_comment_url?: string;
        issue_events_url?: string;
        issues_url?: string;
        keys_url?: string;
        labels_url?: string;
        languages_url?: string;
        merges_url?: string;
        milestones_url?: string;
        notifications_url?: string;
        pulls_url?: string;
        releases_url?: string;
        ssh_url?: string;
        stargazers_url?: string;
        statuses_url?: string;
        subscribers_url?: string;
        subscription_url?: string;
        tags_url?: string;
        teams_url?: string;
        trees_url?: string;
        clone_url?: string;
        mirror_url?: string;
        hooks_url?: string;
        svn_url?: string;
        homepage?: string;
        language?: string;
        forks_count?: number;
        stargazers_count?: number;
        watchers_count?: number;
        size?: number;
        default_branch?: string;
        open_issues_count?: number;
        is_template?: boolean;
        topics?: string[];
        has_issues?: boolean;
        has_projects?: boolean;
        has_wiki?: boolean;
        has_pages?: boolean;
        has_downloads?: boolean;
        archived?: boolean;
        disabled?: boolean;
        visibility?: string;
        pushed_at?: string;
        created_at?: string;
        updated_at?: string;
        permissions?: { admin?: boolean; push?: boolean; pull?: boolean };
        allow_rebase_merge?: boolean;
        template_repository?: string;
        temp_clone_token?: string;
        allow_squash_merge?: boolean;
        delete_branch_on_merge?: boolean;
        allow_merge_commit?: boolean;
        subscribers_count?: number;
        network_count?: number;
      } | null;
      temp_clone_token?: string;
      /**
       * Whether to allow squash merges for pull requests.
       */
      allow_squash_merge?: boolean;
      /**
       * Whether to delete head branches when pull requests are merged
       */
      delete_branch_on_merge?: boolean;
      /**
       * Whether to allow merge commits for pull requests.
       */
      allow_merge_commit?: boolean;
      subscribers_count?: number;
      network_count?: number;
      open_issues: number;
      watchers: number;
      master_branch?: string;
    };
    /**
     * Project cards represent a scope of work.
     */
    "project-card": {
      url: string;
      /**
       * The project card's ID
       */
      id: number;
      node_id: string;
      note: string | null;
      creator: components["schemas"]["simple-user"] | null;
      created_at: string;
      updated_at: string;
      /**
       * Whether or not the card is archived
       */
      archived?: boolean;
      column_url: string;
      content_url?: string;
      project_url: string;
    };
    /**
     * Project columns contain cards of work.
     */
    "project-column": {
      url: string;
      project_url: string;
      cards_url: string;
      /**
       * The unique identifier of the project column
       */
      id: number;
      node_id: string;
      /**
       * Name of the project column
       */
      name: string;
      created_at: string;
      updated_at: string;
    };
    /**
     * Repository Collaborator Permission
     */
    "repository-collaborator-permission": {
      permission: string;
      user: components["schemas"]["simple-user"] | null;
    };
    "rate-limit": { limit: number; remaining: number; reset: number };
    /**
     * Rate Limit Overview
     */
    "rate-limit-overview": {
      resources: {
        core: components["schemas"]["rate-limit"];
        graphql?: components["schemas"]["rate-limit"];
        search: components["schemas"]["rate-limit"];
        source_import?: components["schemas"]["rate-limit"];
        integration_manifest?: components["schemas"]["rate-limit"];
        code_scanning_upload?: components["schemas"]["rate-limit"];
      };
      rate: components["schemas"]["rate-limit"];
    };
    /**
     * Full Repository
     */
    "full-repository": {
      id: number;
      node_id: string;
      name: string;
      full_name: string;
      owner: components["schemas"]["simple-user"] | null;
      private: boolean;
      html_url: string;
      description: string | null;
      fork: boolean;
      url: string;
      archive_url: string;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      contributors_url: string;
      deployments_url: string;
      downloads_url: string;
      events_url: string;
      forks_url: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      git_url: string;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      languages_url: string;
      merges_url: string;
      milestones_url: string;
      notifications_url: string;
      pulls_url: string;
      releases_url: string;
      ssh_url: string;
      stargazers_url: string;
      statuses_url: string;
      subscribers_url: string;
      subscription_url: string;
      tags_url: string;
      teams_url: string;
      trees_url: string;
      clone_url: string;
      mirror_url: string | null;
      hooks_url: string;
      svn_url: string;
      homepage: string | null;
      language: string | null;
      forks_count: number;
      stargazers_count: number;
      watchers_count: number;
      size: number;
      default_branch: string;
      open_issues_count: number;
      is_template?: boolean;
      topics?: string[];
      has_issues: boolean;
      has_projects: boolean;
      has_wiki: boolean;
      has_pages: boolean;
      has_downloads: boolean;
      archived: boolean;
      /**
       * Returns whether or not this repository disabled.
       */
      disabled: boolean;
      /**
       * The repository visibility: public, private, or internal.
       */
      visibility?: string;
      pushed_at: string;
      created_at: string;
      updated_at: string;
      permissions?: { admin: boolean; pull: boolean; push: boolean };
      allow_rebase_merge?: boolean;
      template_repository?: components["schemas"]["repository"] | null;
      temp_clone_token?: string | null;
      allow_squash_merge?: boolean;
      delete_branch_on_merge?: boolean;
      allow_merge_commit?: boolean;
      subscribers_count: number;
      network_count: number;
      license: components["schemas"]["license-simple"] | null;
      organization?: components["schemas"]["simple-user"] | null;
      parent?: components["schemas"]["repository"];
      source?: components["schemas"]["repository"];
      forks: number;
      master_branch?: string;
      open_issues: number;
      watchers: number;
      /**
       * Whether anonymous git access is allowed.
       */
      anonymous_access_enabled?: boolean;
    };
    /**
     * An artifact
     */
    artifact: {
      id: number;
      node_id: string;
      /**
       * The name of the artifact.
       */
      name: string;
      /**
       * The size in bytes of the artifact.
       */
      size_in_bytes: number;
      url: string;
      archive_download_url: string;
      /**
       * Whether or not the artifact has expired.
       */
      expired: boolean;
      created_at: string | null;
      expires_at: string;
      updated_at: string | null;
    };
    /**
     * Information of a job execution in a workflow run
     */
    job: {
      /**
       * The id of the job.
       */
      id: number;
      /**
       * The id of the associated workflow run.
       */
      run_id: number;
      run_url: string;
      node_id: string;
      /**
       * The SHA of the commit that is being run.
       */
      head_sha: string;
      url: string;
      html_url: string | null;
      /**
       * The phase of the lifecycle that the job is currently in.
       */
      status: "queued" | "in_progress" | "completed";
      /**
       * The outcome of the job.
       */
      conclusion: string | null;
      /**
       * The time that the job started, in ISO 8601 format.
       */
      started_at: string;
      /**
       * The time that the job finished, in ISO 8601 format.
       */
      completed_at: string | null;
      /**
       * The name of the job.
       */
      name: string;
      /**
       * Steps in this job.
       */
      steps?: {
        /**
         * The phase of the lifecycle that the job is currently in.
         */
        status: "queued" | "in_progress" | "completed";
        /**
         * The outcome of the job.
         */
        conclusion: string | null;
        /**
         * The name of the job.
         */
        name: string;
        number: number;
        /**
         * The time that the step started, in ISO 8601 format.
         */
        started_at?: string | null;
        /**
         * The time that the job finished, in ISO 8601 format.
         */
        completed_at?: string | null;
      }[];
      check_run_url: string;
    };
    "pull-request-minimal": {
      id: number;
      number: number;
      url: string;
      head: {
        ref: string;
        sha: string;
        repo: { id: number; url: string; name: string };
      };
      base: {
        ref: string;
        sha: string;
        repo: { id: number; url: string; name: string };
      };
    };
    /**
     * Simple Commit
     */
    "simple-commit": {
      id: string;
      tree_id: string;
      message: string;
      timestamp: string;
      author: { name: string; email: string } | null;
      committer: { name: string; email: string } | null;
    };
    /**
     * An invocation of a workflow
     */
    "workflow-run": {
      /**
       * The ID of the workflow run.
       */
      id: number;
      node_id: string;
      head_branch: string | null;
      /**
       * The SHA of the head commit that points to the version of the worflow being run.
       */
      head_sha: string;
      /**
       * The auto incrementing run number for the workflow run.
       */
      run_number: number;
      event: string;
      status: string | null;
      conclusion: string | null;
      /**
       * The ID of the parent workflow.
       */
      workflow_id: number;
      /**
       * The URL to the workflow run.
       */
      url: string;
      html_url: string;
      pull_requests: components["schemas"]["pull-request-minimal"][] | null;
      created_at: string | null;
      updated_at: string | null;
      /**
       * The URL to the jobs for the workflow run.
       */
      jobs_url: string;
      /**
       * The URL to download the logs for the workflow run.
       */
      logs_url: string;
      /**
       * The URL to the associated check suite.
       */
      check_suite_url: string;
      /**
       * The URL to the artifacts for the workflow run.
       */
      artifacts_url: string;
      /**
       * The URL to cancel the workflow run.
       */
      cancel_url: string;
      /**
       * The URL to rerun the workflow run.
       */
      rerun_url: string;
      /**
       * The URL to the workflow.
       */
      workflow_url: string;
      head_commit: components["schemas"]["simple-commit"];
      repository: components["schemas"]["minimal-repository"];
      head_repository: components["schemas"]["minimal-repository"];
      head_repository_id?: number;
    };
    /**
     * Workflow Run Usage
     */
    "workflow-run-usage": {
      billable?: {
        UBUNTU?: { total_ms?: number; jobs?: number };
        MACOS?: { total_ms?: number; jobs?: number };
        WINDOWS?: { total_ms?: number; jobs?: number };
      };
      run_duration_ms?: number;
    };
    /**
     * Set secrets for GitHub Actions.
     */
    "actions-secret": {
      /**
       * The name of the secret.
       */
      name: string;
      created_at: string;
      updated_at: string;
    };
    /**
     * A GitHub Actions workflow
     */
    workflow: {
      id: number;
      node_id: string;
      name: string;
      path: string;
      state: "active" | "deleted";
      created_at: string;
      updated_at: string;
      url: string;
      html_url: string;
      badge_url: string;
      deleted_at?: string;
    };
    /**
     * Workflow Usage
     */
    "workflow-usage": {
      billable?: {
        UBUNTU?: { total_ms?: number };
        MACOS?: { total_ms?: number };
        WINDOWS?: { total_ms?: number };
      };
    };
    /**
     * Protected Branch Admin Enforced
     */
    "protected-branch-admin-enforced": { url: string; enabled: boolean };
    /**
     * Protected Branch Pull Request Review
     */
    "protected-branch-pull-request-review": {
      url?: string;
      dismissal_restrictions?: {
        /**
         * The list of users with review dismissal access.
         */
        users?: components["schemas"]["simple-user"][];
        /**
         * The list of teams with review dismissal access.
         */
        teams?: components["schemas"]["team"][];
        url?: string;
        users_url?: string;
        teams_url?: string;
      };
      dismiss_stale_reviews: boolean;
      require_code_owner_reviews: boolean;
      required_approving_review_count?: number;
    };
    /**
     * Branch Restriction Policy
     */
    "branch-restriction-policy": {
      url: string;
      users_url: string;
      teams_url: string;
      apps_url: string;
      users: {
        login?: string;
        id?: number;
        node_id?: string;
        avatar_url?: string;
        gravatar_id?: string;
        url?: string;
        html_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        starred_url?: string;
        subscriptions_url?: string;
        organizations_url?: string;
        repos_url?: string;
        events_url?: string;
        received_events_url?: string;
        type?: string;
        site_admin?: boolean;
      }[];
      teams: {
        id?: number;
        node_id?: string;
        url?: string;
        html_url?: string;
        name?: string;
        slug?: string;
        description?: string | null;
        privacy?: string;
        permission?: string;
        members_url?: string;
        repositories_url?: string;
        parent?: string | null;
      }[];
      apps: {
        id?: number;
        slug?: string;
        node_id?: string;
        owner?: {
          login?: string;
          id?: number;
          node_id?: string;
          url?: string;
          repos_url?: string;
          events_url?: string;
          hooks_url?: string;
          issues_url?: string;
          members_url?: string;
          public_members_url?: string;
          avatar_url?: string;
          description?: string;
          gravatar_id?: string;
          html_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          starred_url?: string;
          subscriptions_url?: string;
          organizations_url?: string;
          received_events_url?: string;
          type?: string;
        };
        name?: string;
        description?: string;
        external_url?: string;
        html_url?: string;
        created_at?: string;
        updated_at?: string;
        permissions?: {
          metadata?: string;
          contents?: string;
          issues?: string;
          single_file?: string;
        };
        events?: string[];
      }[];
    };
    /**
     * Branch Protection
     */
    "branch-protection": {
      url?: string;
      required_status_checks: {
        url?: string;
        enforcement_level: string;
        contexts: string[];
        contexts_url?: string;
      };
      enforce_admins?: components["schemas"]["protected-branch-admin-enforced"];
      required_pull_request_reviews?: components["schemas"]["protected-branch-pull-request-review"];
      restrictions?: components["schemas"]["branch-restriction-policy"];
      required_linear_history?: { enabled?: boolean };
      allow_force_pushes?: { enabled?: boolean };
      allow_deletions?: { enabled?: boolean };
      enabled: boolean;
      name?: string;
      protection_url?: string;
    };
    /**
     * Short Branch
     */
    "short-branch": {
      name: string;
      commit: { sha: string; url: string };
      protected: boolean;
      protection?: components["schemas"]["branch-protection"];
      protection_url?: string;
    };
    /**
     * Metaproperties for Git author/committer information.
     */
    "git-user": { name?: string; email?: string; date?: string };
    verification: {
      verified: boolean;
      reason: string;
      payload: string | null;
      signature: string | null;
    };
    /**
     * Commit
     */
    commit: {
      url: string | null;
      sha: string | null;
      node_id: string;
      html_url: string;
      comments_url: string;
      commit: {
        url: string;
        author: components["schemas"]["git-user"] | null;
        committer: components["schemas"]["git-user"] | null;
        message: string;
        comment_count: number;
        tree: { sha: string; url: string };
        verification?: components["schemas"]["verification"];
      };
      author: components["schemas"]["simple-user"] | null;
      committer: components["schemas"]["simple-user"] | null;
      parents: { sha: string; url: string; html_url?: string }[];
      stats?: { additions?: number; deletions?: number; total?: number };
      files?: {
        filename?: string;
        additions?: number;
        deletions?: number;
        changes?: number;
        status?: string;
        raw_url?: string;
        blob_url?: string;
        patch?: string;
        sha?: string;
        contents_url?: string;
        previous_filename?: string;
      }[];
    };
    /**
     * Branch With Protection
     */
    "branch-with-protection": {
      name: string;
      commit: components["schemas"]["commit"];
      _links: { html: string; self: string };
      protected: boolean;
      protection: components["schemas"]["branch-protection"];
      protection_url: string;
      pattern?: string;
      required_approving_review_count?: number;
    };
    /**
     * Status Check Policy
     */
    "status-check-policy": {
      url: string;
      strict: boolean;
      contexts: string[];
      contexts_url: string;
    };
    /**
     * Branch protections protect branches
     */
    "protected-branch": {
      url: string;
      required_status_checks?: components["schemas"]["status-check-policy"];
      required_pull_request_reviews?: {
        url: string;
        dismiss_stale_reviews?: boolean;
        require_code_owner_reviews?: boolean;
        required_approving_review_count?: number;
        dismissal_restrictions?: {
          url: string;
          users_url: string;
          teams_url: string;
          users: components["schemas"]["simple-user"][];
          teams: components["schemas"]["team"][];
        };
      };
      required_signatures?: { url: string; enabled: boolean };
      enforce_admins?: { url: string; enabled: boolean };
      required_linear_history?: { enabled: boolean };
      allow_force_pushes?: { enabled: boolean };
      allow_deletions?: { enabled: boolean };
      restrictions?: components["schemas"]["branch-restriction-policy"];
    };
    /**
     * A check performed on the code of a given code change
     */
    "check-run": {
      /**
       * The id of the check.
       */
      id: number;
      /**
       * The SHA of the commit that is being checked.
       */
      head_sha: string;
      node_id: string;
      external_id: string | null;
      url: string;
      html_url: string | null;
      details_url: string | null;
      /**
       * The phase of the lifecycle that the check is currently in.
       */
      status: "queued" | "in_progress" | "completed";
      conclusion: string | null;
      started_at: string | null;
      completed_at: string | null;
      output: {
        title: string | null;
        summary: string | null;
        text: string | null;
        annotations_count: number;
        annotations_url: string;
      };
      /**
       * The name of the check.
       */
      name: string;
      check_suite: { id: number } | null;
      app: components["schemas"]["integration"] | null;
      pull_requests: components["schemas"]["pull-request-minimal"][];
    };
    /**
     * Check Annotation
     */
    "check-annotation": {
      path: string;
      start_line: number;
      end_line: number;
      start_column: number | null;
      end_column: number | null;
      annotation_level: string | null;
      title: string | null;
      message: string | null;
      raw_details: string | null;
      blob_href: string;
    };
    /**
     * A suite of checks performed on the code of a given code change
     */
    "check-suite": {
      id: number;
      node_id: string;
      head_branch: string | null;
      /**
       * The SHA of the head commit that is being checked.
       */
      head_sha: string;
      status: string | null;
      conclusion: string | null;
      url: string | null;
      before: string | null;
      after: string | null;
      pull_requests: components["schemas"]["pull-request-minimal"][] | null;
      app: components["schemas"]["integration"] | null;
      repository: components["schemas"]["minimal-repository"];
      created_at: string | null;
      updated_at: string | null;
      head_commit: components["schemas"]["simple-commit"];
      latest_check_runs_count: number;
      check_runs_url: string;
    };
    /**
     * Check suite configuration preferences for a repository.
     */
    "check-suite-preference": {
      preferences?: {
        auto_trigger_checks?: { app_id: number; setting: boolean }[];
      };
      repository?: components["schemas"]["repository"];
    };
    /**
     * State of a code scanning alert.
     */
    "code-scanning-alert-state": "open" | "dismissed" | "fixed";
    /**
     * The full Git reference, formatted as `refs/heads/<branch name>`.
     */
    "code-scanning-alert-ref": string;
    /**
     * The code scanning alert number.
     */
    "code-scanning-alert-number": number;
    /**
     * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    "code-scanning-alert-created-at": string;
    /**
     * The REST API URL of the alert resource.
     */
    "code-scanning-alert-url": string;
    /**
     * The GitHub URL of the alert resource.
     */
    "code-scanning-alert-html-url": string;
    "code-scanning-alert-dismissed-by":
      | (components["schemas"]["simple-user"] | "null")
      | null;
    /**
     * The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    "code-scanning-alert-dismissed-at": string | null;
    /**
     * **Required when the state is dismissed.** The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`.
     */
    "code-scanning-alert-dismissed-reason": string | null;
    "code-scanning-alert-rule": {
      /**
       * A unique identifier for the rule used to detect the alert.
       */
      id?: string | null;
      /**
       * The severity of the alert.
       */
      severity?: ("none" | "note" | "warning" | "error") | null;
      /**
       * A short description of the rule used to detect the alert.
       */
      description?: string;
    };
    /**
     * The name of the tool used to generate the code scanning analysis alert.
     */
    "code-scanning-analysis-tool-name": string;
    "code-scanning-analysis-tool": {
      name?: components["schemas"]["code-scanning-analysis-tool-name"];
      /**
       * The version of the tool used to detect the alert.
       */
      version?: string | null;
    };
    "code-scanning-alert-code-scanning-alert-items": {
      number?: components["schemas"]["code-scanning-alert-number"];
      created_at?: components["schemas"]["code-scanning-alert-created-at"];
      url?: components["schemas"]["code-scanning-alert-url"];
      html_url?: components["schemas"]["code-scanning-alert-html-url"];
      state?: components["schemas"]["code-scanning-alert-state"];
      dismissed_by?: components["schemas"]["code-scanning-alert-dismissed-by"];
      dismissed_at?: components["schemas"]["code-scanning-alert-dismissed-at"];
      dismissed_reason?: components["schemas"]["code-scanning-alert-dismissed-reason"];
      rule?: components["schemas"]["code-scanning-alert-rule"];
      tool?: components["schemas"]["code-scanning-analysis-tool"];
    };
    /**
     * Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
     */
    "code-scanning-analysis-analysis-key": string;
    /**
     * Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.
     */
    "code-scanning-alert-environment": string;
    "code-scanning-alert-instances": any[] | null;
    "code-scanning-alert-code-scanning-alert": {
      number?: components["schemas"]["code-scanning-alert-number"];
      created_at?: components["schemas"]["code-scanning-alert-created-at"];
      url?: components["schemas"]["code-scanning-alert-url"];
      html_url?: components["schemas"]["code-scanning-alert-html-url"];
      instances?: components["schemas"]["code-scanning-alert-instances"];
      state?: components["schemas"]["code-scanning-alert-state"];
      dismissed_by?: components["schemas"]["code-scanning-alert-dismissed-by"];
      dismissed_at?: components["schemas"]["code-scanning-alert-dismissed-at"];
      dismissed_reason?: components["schemas"]["code-scanning-alert-dismissed-reason"];
      rule?: components["schemas"]["code-scanning-alert-rule"];
      tool?: components["schemas"]["code-scanning-analysis-tool"];
    };
    /**
     * Sets the state of the code scanning alert. Can be one of `open` or `dismissed`. You must provide `dismissed_reason` when you set the state to `dismissed`.
     */
    "code-scanning-alert-set-state": "open" | "dismissed";
    /**
     * The full Git reference of the code scanning analysis file, formatted as `refs/heads/<branch name>`.
     */
    "code-scanning-analysis-ref": string;
    /**
     * The commit SHA of the code scanning analysis file.
     */
    "code-scanning-analysis-commit-sha": string;
    /**
     * The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    "code-scanning-analysis-created-at": string;
    /**
     * Identifies the variable values associated with the environment in which this analysis was performed.
     */
    "code-scanning-analysis-environment": string;
    "code-scanning-analysis-code-scanning-analysis": {
      commit_sha?: components["schemas"]["code-scanning-analysis-commit-sha"];
      ref?: components["schemas"]["code-scanning-analysis-ref"];
      analysis_key?: components["schemas"]["code-scanning-analysis-analysis-key"];
      created_at?: components["schemas"]["code-scanning-analysis-created-at"];
      tool_name?: components["schemas"]["code-scanning-analysis-tool-name"];
      error?: string;
      environment?: components["schemas"]["code-scanning-analysis-environment"];
    };
    /**
     * A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string.
     */
    "code-scanning-analysis-sarif-file": string;
    /**
     * Collaborator
     */
    collaborator: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string | null;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
      permissions?: { pull: boolean; push: boolean; admin: boolean };
    };
    /**
     * Repository invitations let you manage who you collaborate with.
     */
    "repository-invitation": {
      /**
       * Unique identifier of the repository invitation.
       */
      id: number;
      repository: components["schemas"]["minimal-repository"];
      invitee: components["schemas"]["simple-user"] | null;
      inviter: components["schemas"]["simple-user"] | null;
      /**
       * The permission associated with the invitation.
       */
      permissions: "read" | "write" | "admin";
      created_at: string;
      /**
       * URL for the repository invitation
       */
      url: string;
      html_url: string;
      node_id: string;
    };
    /**
     * Commit Comment
     */
    "commit-comment": {
      html_url: string;
      url: string;
      id: number;
      node_id: string;
      body: string;
      path: string | null;
      position: number | null;
      line: number | null;
      commit_id: string;
      user: components["schemas"]["simple-user"] | null;
      created_at: string;
      updated_at: string;
      author_association: string;
      reactions?: components["schemas"]["reaction-rollup"];
    };
    /**
     * Scim Error
     */
    "scim-error": {
      message?: string | null;
      documentation_url?: string | null;
      detail?: string | null;
      status?: number;
      scimType?: string | null;
      schemas?: string[];
    };
    /**
     * Branch Short
     */
    "branch-short": {
      name?: string;
      commit?: { sha?: string; url?: string };
      protected?: boolean;
    };
    /**
     * Hypermedia Link
     */
    link: { href: string };
    /**
     * Pull Request Simple
     */
    "pull-request-simple": {
      url: string;
      id: number;
      node_id: string;
      html_url: string;
      diff_url: string;
      patch_url: string;
      issue_url: string;
      commits_url: string;
      review_comments_url: string;
      review_comment_url: string;
      comments_url: string;
      statuses_url: string;
      number: number;
      state: string;
      locked: boolean;
      title: string;
      user: components["schemas"]["simple-user"] | null;
      body: string | null;
      labels: {
        id?: number;
        node_id?: string;
        url?: string;
        name?: string;
        description?: string;
        color?: string;
        default?: boolean;
      }[];
      milestone: components["schemas"]["milestone"] | null;
      active_lock_reason?: string | null;
      created_at: string;
      updated_at: string;
      closed_at: string | null;
      merged_at: string | null;
      merge_commit_sha: string | null;
      assignee: components["schemas"]["simple-user"] | null;
      assignees?: components["schemas"]["simple-user"][] | null;
      requested_reviewers?: components["schemas"]["simple-user"][] | null;
      requested_teams?: components["schemas"]["team-simple"][] | null;
      head: {
        label: string;
        ref: string;
        repo: components["schemas"]["repository"];
        sha: string;
        user: components["schemas"]["simple-user"] | null;
      };
      base: {
        label: string;
        ref: string;
        repo: components["schemas"]["repository"];
        sha: string;
        user: components["schemas"]["simple-user"] | null;
      };
      _links: {
        comments: components["schemas"]["link"];
        commits: components["schemas"]["link"];
        statuses: components["schemas"]["link"];
        html: components["schemas"]["link"];
        issue: components["schemas"]["link"];
        review_comments: components["schemas"]["link"];
        review_comment: components["schemas"]["link"];
        self: components["schemas"]["link"];
      };
      author_association: string;
      /**
       * Indicates whether or not the pull request is a draft.
       */
      draft?: boolean;
    };
    "simple-commit-status": {
      description: string | null;
      id: number;
      node_id: string;
      state: string;
      context: string;
      target_url: string;
      required?: boolean | null;
      avatar_url: string | null;
      url: string;
      created_at: string;
      updated_at: string;
    };
    /**
     * Combined Commit Status
     */
    "combined-commit-status": {
      state: string;
      statuses: components["schemas"]["simple-commit-status"][];
      sha: string;
      total_count: number;
      repository: components["schemas"]["minimal-repository"];
      commit_url: string;
      url: string;
    };
    /**
     * The status of a commit.
     */
    status: {
      url?: string;
      avatar_url?: string | null;
      id?: number;
      node_id?: string;
      state?: string;
      description?: string;
      target_url?: string;
      context?: string;
      created_at?: string;
      updated_at?: string;
      creator?: components["schemas"]["simple-user"];
    };
    /**
     * Code of Conduct Simple
     */
    "code-of-conduct-simple": {
      url: string;
      key: string;
      name: string;
      html_url: string | null;
    };
    "community-health-file": { url: string; html_url: string };
    /**
     * Community Profile
     */
    "community-profile": {
      health_percentage: number;
      description: string | null;
      documentation: string | null;
      files: {
        code_of_conduct: components["schemas"]["code-of-conduct-simple"] | null;
        license: components["schemas"]["license-simple"] | null;
        contributing: components["schemas"]["community-health-file"] | null;
        readme: components["schemas"]["community-health-file"] | null;
        issue_template: components["schemas"]["community-health-file"] | null;
        pull_request_template:
          | components["schemas"]["community-health-file"]
          | null;
      };
      updated_at: string | null;
    };
    /**
     * Diff Entry
     */
    "diff-entry": {
      sha: string;
      filename: string;
      status: string;
      additions: number;
      deletions: number;
      changes: number;
      blob_url: string;
      raw_url: string;
      contents_url: string;
      patch?: string;
      previous_filename?: string;
    };
    /**
     * Commit Comparison
     */
    "commit-comparison": {
      url: string;
      html_url: string;
      permalink_url: string;
      diff_url: string;
      patch_url: string;
      base_commit: components["schemas"]["commit"];
      merge_base_commit: components["schemas"]["commit"];
      status: "diverged" | "ahead" | "behind" | "identical";
      ahead_by: number;
      behind_by: number;
      total_commits: number;
      commits: components["schemas"]["commit"][];
      files: components["schemas"]["diff-entry"][];
    };
    /**
     * Content Tree
     */
    "content-tree": {
      type: string;
      size: number;
      name: string;
      path: string;
      sha: string;
      url: string;
      git_url: string | null;
      html_url: string | null;
      download_url: string | null;
      entries?: {
        type: string;
        size: number;
        name: string;
        path: string;
        content?: string;
        sha: string;
        url: string;
        git_url: string | null;
        html_url: string | null;
        download_url: string | null;
        _links: { git: string | null; html: string | null; self: string };
      }[];
      _links: { git: string | null; html: string | null; self: string };
    };
    /**
     * A list of directory items
     */
    "content-directory": {
      type: string;
      size: number;
      name: string;
      path: string;
      content?: string;
      sha: string;
      url: string;
      git_url: string | null;
      html_url: string | null;
      download_url: string | null;
      _links: { git: string | null; html: string | null; self: string };
    }[];
    /**
     * Content File
     */
    "content-file": {
      type: string;
      encoding: string;
      size: number;
      name: string;
      path: string;
      content: string;
      sha: string;
      url: string;
      git_url: string | null;
      html_url: string | null;
      download_url: string | null;
      _links: { git: string | null; html: string | null; self: string };
      target?: string;
      submodule_git_url?: string;
    };
    /**
     * An object describing a symlink
     */
    "content-symlink": {
      type: string;
      target: string;
      size: number;
      name: string;
      path: string;
      sha: string;
      url: string;
      git_url: string | null;
      html_url: string | null;
      download_url: string | null;
      _links: { git: string | null; html: string | null; self: string };
    };
    /**
     * An object describing a symlink
     */
    "content-submodule": {
      type: string;
      submodule_git_url: string;
      size: number;
      name: string;
      path: string;
      sha: string;
      url: string;
      git_url: string | null;
      html_url: string | null;
      download_url: string | null;
      _links: { git: string | null; html: string | null; self: string };
    };
    /**
     * File Commit
     */
    "file-commit": {
      content?: {
        name?: string;
        path?: string;
        sha?: string;
        size?: number;
        url?: string;
        html_url?: string;
        git_url?: string;
        download_url?: string;
        type?: string;
        _links?: { self?: string; git?: string; html?: string };
      } | null;
      commit?: {
        sha?: string;
        node_id?: string;
        url?: string;
        html_url?: string;
        author?: { date?: string; name?: string; email?: string };
        committer?: { date?: string; name?: string; email?: string };
        message?: string;
        tree?: { url?: string; sha?: string };
        parents?: { url?: string; html_url?: string; sha?: string }[];
        verification?: {
          verified?: boolean;
          reason?: string;
          signature?: string | null;
          payload?: string | null;
        };
      };
    };
    /**
     * Contributor
     */
    contributor: {
      login?: string;
      id?: number;
      node_id?: string;
      avatar_url?: string;
      gravatar_id?: string | null;
      url?: string;
      html_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      starred_url?: string;
      subscriptions_url?: string;
      organizations_url?: string;
      repos_url?: string;
      events_url?: string;
      received_events_url?: string;
      type: string;
      site_admin?: boolean;
      contributions: number;
      email?: string;
      name?: string;
    };
    /**
     * A request for a specific ref(branch,sha,tag) to be deployed
     */
    deployment: {
      url: string;
      /**
       * Unique identifier of the deployment
       */
      id: number;
      node_id: string;
      sha: string;
      /**
       * The ref to deploy. This can be a branch, tag, or sha.
       */
      ref: string;
      /**
       * Parameter to specify a task to execute
       */
      task: string;
      payload: { [key: string]: any };
      original_environment?: string;
      /**
       * Name for the target deployment environment.
       */
      environment: string;
      description: string | null;
      creator: components["schemas"]["simple-user"] | null;
      created_at: string;
      updated_at: string;
      statuses_url: string;
      repository_url: string;
      /**
       * Specifies if the given environment is will no longer exist at some point in hte future. Default: false.
       */
      transient_environment?: boolean;
      /**
       * Specifies if the given environment is one that end-users directly interact with. Default: false.
       */
      production_environment?: boolean;
      performed_via_github_app?: components["schemas"]["integration"] | null;
    };
    /**
     * The status of a deployment.
     */
    "deployment-status": {
      url: string;
      id: number;
      node_id: string;
      /**
       * The state of the status.
       */
      state:
        | "error"
        | "failure"
        | "inactive"
        | "pending"
        | "success"
        | "queued"
        | "in_progress";
      creator: components["schemas"]["simple-user"] | null;
      /**
       * A short description of the status.
       */
      description: string;
      /**
       * The environment of the deployment that the status is for.
       */
      environment?: string;
      /**
       * Deprecated: the URL to associate with this status.
       */
      target_url: string;
      created_at: string;
      updated_at: string;
      deployment_url: string;
      repository_url: string;
      /**
       * The URL for accessing your environment.
       */
      environment_url?: string;
      /**
       * The URL to associate with this status.
       */
      log_url?: string;
      performed_via_github_app?: components["schemas"]["integration"] | null;
    };
    /**
     * Short Blob
     */
    "short-blob": { url?: string; sha?: string };
    /**
     * Blob
     */
    blob: {
      content: string;
      encoding: string;
      url: string;
      sha: string;
      size: number | null;
      node_id: string;
      highlighted_content?: string;
    };
    /**
     * Low-level Git commit operations within a repository
     */
    "git-commit": {
      /**
       * SHA for the commit
       */
      sha?: string;
      node_id?: string;
      url?: string;
      /**
       * Identifying information for the git-user
       */
      author?: {
        /**
         * Timestamp of the commit
         */
        date?: string;
        /**
         * Git email address of the user
         */
        email: string;
        /**
         * Name of the git user
         */
        name: string;
      };
      /**
       * Identifying information for the git-user
       */
      committer?: {
        /**
         * Timestamp of the commit
         */
        date?: string;
        /**
         * Git email address of the user
         */
        email: string;
        /**
         * Name of the git user
         */
        name: string;
      };
      /**
       * Message describing the purpose of the commit
       */
      message?: string;
      tree?: {
        /**
         * SHA for the commit
         */
        sha?: string;
        url?: string;
      };
      parents?: {
        /**
         * SHA for the commit
         */
        sha?: string;
        url?: string;
        html_url?: string;
      }[];
      verification?: {
        verified?: boolean;
        reason?: string;
        signature?: string | null;
        payload?: string | null;
      };
      html_url?: string;
    };
    /**
     * Git references within a repository
     */
    "git-ref": {
      ref?: string;
      node_id?: string;
      url?: string;
      object?: {
        type?: string;
        /**
         * SHA for the reference
         */
        sha?: string;
        url?: string;
      };
    };
    /**
     * Metadata for a Git tag
     */
    "git-tag": {
      node_id: string;
      /**
       * Name of the tag
       */
      tag: string;
      sha: string;
      /**
       * URL for the tag
       */
      url: string;
      /**
       * Message describing the purpose of the tag
       */
      message: string;
      tagger: { date: string; email: string; name: string };
      object: { sha: string; type: string; url: string };
      verification?: components["schemas"]["verification"];
    };
    /**
     * The hierarchy between files in a Git repository.
     */
    "git-tree": {
      sha: string;
      url: string;
      truncated: boolean;
      /**
       * Objects specifying a tree structure
       */
      tree: {
        path?: string;
        mode?: string;
        type?: string;
        sha?: string;
        size?: number;
        url?: string;
      }[];
    };
    "hook-response": {
      code: number | null;
      status: string | null;
      message: string | null;
    };
    /**
     * Webhooks for repositories.
     */
    hook: {
      type: string;
      /**
       * Unique identifier of the webhook.
       */
      id: number;
      /**
       * The name of a valid service, use 'web' for a webhook.
       */
      name: string;
      /**
       * Determines whether the hook is actually triggered on pushes.
       */
      active: boolean;
      /**
       * Determines what events the hook is triggered for. Default: ['push'].
       */
      events: string[];
      config: {
        email?: string;
        password?: string;
        room?: string;
        subdomain?: string;
        url?: string;
        insecure_ssl?: string;
        content_type?: string;
        digest?: string;
        secret?: string;
        token?: string;
      };
      updated_at: string;
      created_at: string;
      url: string;
      test_url: string;
      ping_url: string;
      last_response: components["schemas"]["hook-response"];
    };
    /**
     * A repository import from an external source.
     */
    import: {
      vcs: string | null;
      use_lfs?: string;
      /**
       * The URL of the originating repository.
       */
      vcs_url: string;
      svc_root?: string;
      tfvc_project?: string;
      status:
        | "auth"
        | "error"
        | "none"
        | "detecting"
        | "choose"
        | "auth_failed"
        | "importing"
        | "mapping"
        | "waiting_to_push"
        | "pushing"
        | "complete"
        | "setup"
        | "unknown"
        | "detection_found_multiple"
        | "detection_found_nothing"
        | "detection_needs_auth";
      status_text?: string | null;
      failed_step?: string | null;
      error_message?: string | null;
      import_percent?: number | null;
      commit_count?: number | null;
      push_percent?: number | null;
      has_large_files?: boolean;
      large_files_size?: number;
      large_files_count?: number;
      project_choices?: {
        vcs?: string;
        tfvc_project?: string;
        human_name?: string;
      }[];
      message?: string;
      authors_count?: number | null;
      url: string;
      html_url: string;
      authors_url: string;
      repository_url: string;
      svn_root?: string;
    };
    /**
     * Porter Author
     */
    "porter-author": {
      id: number;
      remote_id: string;
      remote_name: string;
      email: string;
      name: string;
      url: string;
      import_url: string;
    };
    /**
     * Porter Large File
     */
    "porter-large-file": {
      ref_name: string;
      path: string;
      oid: string;
      size: number;
    };
    /**
     * Issue Event Label
     */
    "issue-event-label": { name: string | null; color: string | null };
    "issue-event-dismissed-review": {
      state: string;
      review_id: number;
      dismissal_message: string | null;
      dismissal_commit_id?: string | null;
    };
    /**
     * Issue Event Milestone
     */
    "issue-event-milestone": { title: string };
    /**
     * Issue Event Project Card
     */
    "issue-event-project-card": {
      url: string;
      id: number;
      project_url: string;
      project_id: number;
      column_name: string;
      previous_column_name?: string;
    };
    /**
     * Issue Event Rename
     */
    "issue-event-rename": { from: string; to: string };
    /**
     * Issue Event
     */
    "issue-event": {
      id: number;
      node_id: string;
      url: string;
      actor: components["schemas"]["simple-user"] | null;
      event: string;
      commit_id: string | null;
      commit_url: string | null;
      created_at: string;
      issue?: components["schemas"]["issue-simple"];
      label?: components["schemas"]["issue-event-label"];
      assignee?: components["schemas"]["simple-user"] | null;
      assigner?: components["schemas"]["simple-user"] | null;
      review_requester?: components["schemas"]["simple-user"] | null;
      requested_reviewer?: components["schemas"]["simple-user"] | null;
      requested_team?: components["schemas"]["team"];
      dismissed_review?: components["schemas"]["issue-event-dismissed-review"];
      milestone?: components["schemas"]["issue-event-milestone"];
      project_card?: components["schemas"]["issue-event-project-card"];
      rename?: components["schemas"]["issue-event-rename"];
      author_association?: string;
      lock_reason?: string | null;
    };
    /**
     * Issue Event for Issue
     */
    "issue-event-for-issue": {
      id?: number;
      node_id?: string;
      url?: string;
      actor?: components["schemas"]["simple-user"];
      event?: string;
      commit_id?: string | null;
      commit_url?: string | null;
      created_at?: string;
      sha?: string;
      html_url?: string;
      message?: string;
      issue_url?: string;
      updated_at?: string;
      author_association?: string;
      body?: string;
      lock_reason?: string;
      submitted_at?: string;
      state?: string;
      pull_request_url?: string;
      body_html?: string;
      body_text?: string;
    };
    /**
     * Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
     */
    label: {
      id: number;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
      /**
       * The name of the label.
       */
      name: string;
      description?: string | null;
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
    };
    /**
     * An SSH key granting access to a single repository.
     */
    "deploy-key": {
      id?: number;
      key?: string;
      url?: string;
      title?: string;
      verified?: boolean;
      created_at?: string;
      read_only?: boolean;
    };
    /**
     * Language
     */
    language: { [key: string]: number };
    /**
     * License Content
     */
    "license-content": {
      name: string;
      path: string;
      sha: string;
      size: number;
      url: string;
      html_url: string | null;
      git_url: string | null;
      download_url: string | null;
      type: string;
      content: string;
      encoding: string;
      _links: { git: string | null; html: string | null; self: string };
      license: components["schemas"]["license-simple"] | null;
    };
    "pages-source-hash": { branch: string; path: string };
    /**
     * The configuration for GitHub Pages for a repository.
     */
    page: {
      /**
       * The API address for accessing this Page resource.
       */
      url: string;
      /**
       * The status of the most recent build of the Page.
       */
      status: ("built" | "building" | "errored") | null;
      /**
       * The Pages site's custom domain
       */
      cname: string | null;
      /**
       * Whether the Page has a custom 404 page.
       */
      custom_404: boolean;
      /**
       * The web address the Page can be accessed from.
       */
      html_url?: string;
      source?: components["schemas"]["pages-source-hash"];
    };
    /**
     * Page Build
     */
    "page-build": {
      url: string;
      status: string;
      error: { message: string | null };
      pusher: components["schemas"]["simple-user"] | null;
      commit: string;
      duration: number;
      created_at: string;
      updated_at: string;
    };
    /**
     * Page Build Status
     */
    "page-build-status": { url: string; status: string };
    /**
     * Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
     */
    "pull-request": {
      url: string;
      id: number;
      node_id: string;
      html_url: string;
      diff_url: string;
      patch_url: string;
      issue_url: string;
      commits_url: string;
      review_comments_url: string;
      review_comment_url: string;
      comments_url: string;
      statuses_url: string;
      /**
       * Number uniquely identifying the pull request within its repository.
       */
      number: number;
      /**
       * State of this Pull Request. Either `open` or `closed`.
       */
      state: "open" | "closed";
      locked: boolean;
      /**
       * The title of the pull request.
       */
      title: string;
      user: components["schemas"]["simple-user"] | null;
      body: string | null;
      labels: {
        id?: number;
        node_id?: string;
        url?: string;
        name?: string;
        description?: string | null;
        color?: string;
        default?: boolean;
      }[];
      milestone: components["schemas"]["milestone"] | null;
      active_lock_reason?: string | null;
      created_at: string;
      updated_at: string;
      closed_at: string | null;
      merged_at: string | null;
      merge_commit_sha: string | null;
      assignee: components["schemas"]["simple-user"] | null;
      assignees?: components["schemas"]["simple-user"][] | null;
      requested_reviewers?: components["schemas"]["simple-user"][] | null;
      requested_teams?: components["schemas"]["team-simple"][] | null;
      head: {
        label: string;
        ref: string;
        repo: {
          archive_url: string;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          deployments_url: string;
          description: string | null;
          downloads_url: string;
          events_url: string;
          fork: boolean;
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          hooks_url: string;
          html_url: string;
          id: number;
          node_id: string;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          languages_url: string;
          merges_url: string;
          milestones_url: string;
          name: string;
          notifications_url: string;
          owner: {
            avatar_url: string;
            events_url: string;
            followers_url: string;
            following_url: string;
            gists_url: string;
            gravatar_id: string | null;
            html_url: string;
            id: number;
            node_id: string;
            login: string;
            organizations_url: string;
            received_events_url: string;
            repos_url: string;
            site_admin: boolean;
            starred_url: string;
            subscriptions_url: string;
            type: string;
            url: string;
          };
          private: boolean;
          pulls_url: string;
          releases_url: string;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          tags_url: string;
          teams_url: string;
          trees_url: string;
          url: string;
          clone_url: string;
          default_branch: string;
          forks: number;
          forks_count: number;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          has_pages: boolean;
          homepage: string | null;
          language: string | null;
          master_branch?: string;
          archived: boolean;
          disabled: boolean;
          mirror_url: string | null;
          open_issues: number;
          open_issues_count: number;
          permissions?: { admin: boolean; pull: boolean; push: boolean };
          temp_clone_token?: string;
          allow_merge_commit?: boolean;
          allow_squash_merge?: boolean;
          allow_rebase_merge?: boolean;
          license: {
            key: string;
            name: string;
            url: string | null;
            spdx_id: string | null;
            node_id: string;
          } | null;
          pushed_at: string;
          size: number;
          ssh_url: string;
          stargazers_count: number;
          svn_url: string;
          topics?: string[];
          watchers: number;
          watchers_count: number;
          created_at: string;
          updated_at: string;
        };
        sha: string;
        user: {
          avatar_url: string;
          events_url: string;
          followers_url: string;
          following_url: string;
          gists_url: string;
          gravatar_id: string | null;
          html_url: string;
          id: number;
          node_id: string;
          login: string;
          organizations_url: string;
          received_events_url: string;
          repos_url: string;
          site_admin: boolean;
          starred_url: string;
          subscriptions_url: string;
          type: string;
          url: string;
        };
      };
      base: {
        label: string;
        ref: string;
        repo: {
          archive_url: string;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          deployments_url: string;
          description: string | null;
          downloads_url: string;
          events_url: string;
          fork: boolean;
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          hooks_url: string;
          html_url: string;
          id: number;
          node_id: string;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          languages_url: string;
          merges_url: string;
          milestones_url: string;
          name: string;
          notifications_url: string;
          owner: {
            avatar_url: string;
            events_url: string;
            followers_url: string;
            following_url: string;
            gists_url: string;
            gravatar_id: string | null;
            html_url: string;
            id: number;
            node_id: string;
            login: string;
            organizations_url: string;
            received_events_url: string;
            repos_url: string;
            site_admin: boolean;
            starred_url: string;
            subscriptions_url: string;
            type: string;
            url: string;
          };
          private: boolean;
          pulls_url: string;
          releases_url: string;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          tags_url: string;
          teams_url: string;
          trees_url: string;
          url: string;
          clone_url: string;
          default_branch: string;
          forks: number;
          forks_count: number;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          has_pages: boolean;
          homepage: string | null;
          language: string | null;
          master_branch?: string;
          archived: boolean;
          disabled: boolean;
          mirror_url: string | null;
          open_issues: number;
          open_issues_count: number;
          permissions?: { admin: boolean; pull: boolean; push: boolean };
          temp_clone_token?: string;
          allow_merge_commit?: boolean;
          allow_squash_merge?: boolean;
          allow_rebase_merge?: boolean;
          license: components["schemas"]["license-simple"] | null;
          pushed_at: string;
          size: number;
          ssh_url: string;
          stargazers_count: number;
          svn_url: string;
          topics?: string[];
          watchers: number;
          watchers_count: number;
          created_at: string;
          updated_at: string;
        };
        sha: string;
        user: {
          avatar_url: string;
          events_url: string;
          followers_url: string;
          following_url: string;
          gists_url: string;
          gravatar_id: string | null;
          html_url: string;
          id: number;
          node_id: string;
          login: string;
          organizations_url: string;
          received_events_url: string;
          repos_url: string;
          site_admin: boolean;
          starred_url: string;
          subscriptions_url: string;
          type: string;
          url: string;
        };
      };
      _links: {
        comments: components["schemas"]["link"];
        commits: components["schemas"]["link"];
        statuses: components["schemas"]["link"];
        html: components["schemas"]["link"];
        issue: components["schemas"]["link"];
        review_comments: components["schemas"]["link"];
        review_comment: components["schemas"]["link"];
        self: components["schemas"]["link"];
      };
      author_association: string;
      /**
       * Indicates whether or not the pull request is a draft.
       */
      draft?: boolean;
      merged: boolean;
      mergeable: boolean | null;
      rebaseable?: boolean | null;
      mergeable_state: string;
      merged_by: components["schemas"]["simple-user"] | null;
      comments: number;
      review_comments: number;
      /**
       * Indicates whether maintainers can modify the pull request.
       */
      maintainer_can_modify: boolean;
      commits: number;
      additions: number;
      deletions: number;
      changed_files: number;
    };
    /**
     * Pull Request Review Comments are comments on a portion of the Pull Request's diff.
     */
    "pull-request-review-comment": {
      /**
       * URL for the pull request review comment
       */
      url: string;
      /**
       * The ID of the pull request review to which the comment belongs.
       */
      pull_request_review_id: number | null;
      /**
       * The ID of the pull request review comment.
       */
      id: number;
      /**
       * The node ID of the pull request review comment.
       */
      node_id: string;
      /**
       * The diff of the line that the comment refers to.
       */
      diff_hunk: string;
      /**
       * The relative path of the file to which the comment applies.
       */
      path: string;
      /**
       * The line index in the diff to which the comment applies.
       */
      position: number;
      /**
       * The index of the original line in the diff to which the comment applies.
       */
      original_position: number;
      /**
       * The SHA of the commit to which the comment applies.
       */
      commit_id: string;
      /**
       * The SHA of the original commit to which the comment applies.
       */
      original_commit_id: string;
      /**
       * The comment ID to reply to.
       */
      in_reply_to_id?: number;
      user: components["schemas"]["simple-user"];
      /**
       * The text of the comment.
       */
      body: string;
      created_at: string;
      updated_at: string;
      /**
       * HTML URL for the pull request review comment.
       */
      html_url: string;
      /**
       * URL for the pull request that the review comment belongs to.
       */
      pull_request_url: string;
      /**
       * How the author of the comment is associated with the pull request.
       */
      author_association: string;
      _links: {
        self: { href: string };
        html: { href: string };
        pull_request: { href: string };
      };
      /**
       * The first line of the range for a multi-line comment.
       */
      start_line?: number | null;
      /**
       * The first line of the range for a multi-line comment.
       */
      original_start_line?: number | null;
      /**
       * The side of the first line of the range for a multi-line comment.
       */
      start_side?: ("LEFT" | "RIGHT") | null;
      /**
       * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
       */
      line?: number;
      /**
       * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
       */
      original_line?: number;
      /**
       * The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
       */
      side?: "LEFT" | "RIGHT";
      reactions?: components["schemas"]["reaction-rollup"];
      body_html?: string;
      body_text?: string;
    };
    /**
     * Pull Request Merge Result
     */
    "pull-request-merge-result": {
      sha: string;
      merged: boolean;
      message: string;
    };
    /**
     * Pull Request Review Request
     */
    "pull-request-review-request": {
      users?: {
        login?: string;
        id?: number;
        node_id?: string;
        avatar_url?: string;
        gravatar_id?: string;
        url?: string;
        html_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        starred_url?: string;
        subscriptions_url?: string;
        organizations_url?: string;
        repos_url?: string;
        events_url?: string;
        received_events_url?: string;
        type?: string;
        site_admin?: boolean;
      }[];
      teams?: {
        id?: number;
        node_id?: string;
        url?: string;
        html_url?: string;
        name?: string;
        slug?: string;
        description?: string | null;
        privacy?: string;
        permission?: string;
        members_url?: string;
        repositories_url?: string;
        parent?: string | null;
      }[];
    };
    /**
     * Pull Request Reviews are reviews on pull requests.
     */
    "pull-request-review": {
      /**
       * Unique identifier of the review
       */
      id: number;
      node_id: string;
      user: components["schemas"]["simple-user"] | null;
      /**
       * The text of the review.
       */
      body: string;
      state: string;
      html_url: string;
      pull_request_url: string;
      _links: { html: { href: string }; pull_request: { href: string } };
      submitted_at?: string;
      /**
       * A commit SHA for the review.
       */
      commit_id: string;
      body_html?: string;
      body_text?: string;
      author_association: string;
    };
    /**
     * Legacy Review Comment
     */
    "review-comment": {
      url: string;
      pull_request_review_id: number | null;
      id: number;
      node_id: string;
      diff_hunk: string;
      path: string;
      position: number | null;
      original_position: number;
      commit_id: string;
      original_commit_id: string;
      in_reply_to_id?: number;
      user: components["schemas"]["simple-user"] | null;
      body: string;
      created_at: string;
      updated_at: string;
      html_url: string;
      pull_request_url: string;
      author_association: string;
      _links: {
        self: components["schemas"]["link"];
        html: components["schemas"]["link"];
        pull_request: components["schemas"]["link"];
      };
      body_text?: string;
      body_html?: string;
      /**
       * The side of the first line of the range for a multi-line comment.
       */
      side?: "LEFT" | "RIGHT";
      /**
       * The side of the first line of the range for a multi-line comment.
       */
      start_side?: ("LEFT" | "RIGHT") | null;
      /**
       * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
       */
      line?: number;
      /**
       * The original line of the blob to which the comment applies. The last line of the range for a multi-line comment
       */
      original_line?: number;
      /**
       * The first line of the range for a multi-line comment.
       */
      start_line?: number | null;
      /**
       * The original first line of the range for a multi-line comment.
       */
      original_start_line?: number | null;
    };
    /**
     * Data related to a release.
     */
    "release-asset": {
      url: string;
      browser_download_url: string;
      id: number;
      node_id: string;
      /**
       * The file name of the asset.
       */
      name: string;
      label: string | null;
      /**
       * State of the release asset.
       */
      state: "uploaded";
      content_type: string;
      size: number;
      download_count: number;
      created_at: string;
      updated_at: string;
      uploader: components["schemas"]["simple-user"] | null;
    };
    /**
     * A release.
     */
    release: {
      url: string;
      html_url: string;
      assets_url: string;
      upload_url: string;
      tarball_url: string | null;
      zipball_url: string | null;
      id: number;
      node_id: string;
      /**
       * The name of the tag.
       */
      tag_name: string;
      /**
       * Specifies the commitish value that determines where the Git tag is created from.
       */
      target_commitish: string;
      name: string | null;
      body?: string | null;
      /**
       * true to create a draft (unpublished) release, false to create a published one.
       */
      draft: boolean;
      /**
       * Whether to identify the release as a prerelease or a full release.
       */
      prerelease: boolean;
      created_at: string;
      published_at: string | null;
      author: components["schemas"]["simple-user"];
      assets: components["schemas"]["release-asset"][];
      body_html?: string;
      body_text?: string;
    };
    /**
     * Stargazer
     */
    stargazer: {
      starred_at: string;
      user: components["schemas"]["simple-user"] | null;
    };
    /**
     * Code Frequency Stat
     */
    "code-frequency-stat": number[];
    /**
     * Commit Activity
     */
    "commit-activity": { days: number[]; total: number; week: number };
    /**
     * Contributor Activity
     */
    "contributor-activity": {
      author: components["schemas"]["simple-user"] | null;
      total: number;
      weeks: { w?: string; a?: number; d?: number; c?: number }[];
    };
    "participation-stats": { all?: number[]; owner?: number[] };
    /**
     * Repository invitations let you manage who you collaborate with.
     */
    "repository-subscription": {
      /**
       * Determines if notifications should be received from this repository.
       */
      subscribed: boolean;
      /**
       * Determines if all notifications should be blocked from this repository.
       */
      ignored: boolean;
      reason: string | null;
      created_at: string;
      url: string;
      repository_url: string;
    };
    /**
     * Tag
     */
    tag: {
      name: string;
      commit: { sha: string; url: string };
      zipball_url: string;
      tarball_url: string;
      node_id: string;
    };
    /**
     * A topic aggregates entities that are related to a subject.
     */
    topic: { names?: string[] };
    traffic: { timestamp: string; uniques: number; count: number };
    /**
     * Clone Traffic
     */
    "clone-traffic": {
      count: number;
      uniques: number;
      clones: components["schemas"]["traffic"][];
    };
    /**
     * Content Traffic
     */
    "content-traffic": {
      path: string;
      title: string;
      count: number;
      uniques: number;
    };
    /**
     * Referrer Traffic
     */
    "referrer-traffic": { referrer: string; count: number; uniques: number };
    /**
     * View Traffic
     */
    "view-traffic": {
      count: number;
      uniques: number;
      views: components["schemas"]["traffic"][];
    };
    "scim-group-list-enterprise": {
      schemas?: string[];
      totalResults?: number;
      itemsPerPage?: number;
      startIndex?: number;
      Resources?: {
        schemas?: string[];
        id?: string;
        externalId?: string | null;
        displayName?: string;
        members?: { value?: string; $ref?: string; display?: string }[];
        meta?: {
          resourceType?: string;
          created?: string;
          lastModified?: string;
          location?: string;
        };
      }[];
    };
    "scim-enterprise-group": {
      schemas?: string[];
      id?: string;
      externalId?: string | null;
      displayName?: string;
      members?: { value?: string; $ref?: string; display?: string }[];
      meta?: {
        resourceType?: string;
        created?: string;
        lastModified?: string;
        location?: string;
      };
    };
    "scim-user-list-enterprise": {
      schemas?: string[];
      totalResults?: number;
      itemsPerPage?: number;
      startIndex?: number;
      Resources?: {
        schemas?: string[];
        id?: string;
        externalId?: string;
        userName?: string;
        name?: { givenName?: string; familyName?: string };
        emails?: { value?: string; primary?: boolean; type?: string }[];
        groups?: { value?: string }[];
        active?: boolean;
        meta?: {
          resourceType?: string;
          created?: string;
          lastModified?: string;
          location?: string;
        };
      }[];
    };
    "scim-enterprise-user": {
      schemas?: string[];
      id?: string;
      externalId?: string;
      userName?: string;
      name?: { givenName?: string; familyName?: string };
      emails?: { value?: string; type?: string; primary?: boolean }[];
      groups?: { value?: string }[];
      active?: boolean;
      meta?: {
        resourceType?: string;
        created?: string;
        lastModified?: string;
        location?: string;
      };
    };
    /**
     * SCIM /Users provisioning endpoints
     */
    "scim-user": {
      /**
       * SCIM schema used.
       */
      schemas: string[];
      /**
       * Unique identifier of an external identity
       */
      id: string;
      /**
       * The ID of the User.
       */
      externalId: string | null;
      /**
       * Configured by the admin. Could be an email, login, or username
       */
      userName: string | null;
      /**
       * The name of the user, suitable for display to end-users
       */
      displayName?: string | null;
      name: {
        givenName: string | null;
        familyName: string | null;
        formatted?: string | null;
      };
      /**
       * user emails
       */
      emails: { value: string; primary?: boolean }[];
      /**
       * The active status of the User.
       */
      active: boolean;
      meta: {
        resourceType?: string;
        created?: string;
        lastModified?: string;
        location?: string;
      };
      /**
       * The ID of the organization.
       */
      organization_id?: number;
      /**
       * Set of operations to be performed
       */
      operations?: {
        op: "add" | "remove" | "replace";
        path?: string;
        value?: string | { [key: string]: any } | { [key: string]: any }[];
      }[];
      /**
       * associated groups
       */
      groups?: { value?: string; display?: string }[];
    };
    /**
     * SCIM User List
     */
    "scim-user-list": {
      /**
       * SCIM schema used.
       */
      schemas: string[];
      totalResults: number;
      itemsPerPage: number;
      startIndex: number;
      Resources: components["schemas"]["scim-user"][];
    };
    "search-result-text-matches": {
      object_url?: string;
      object_type?: string | null;
      property?: string;
      fragment?: string;
      matches?: { text?: string; indices?: number[] }[];
    }[];
    /**
     * Code Search Result Item
     */
    "code-search-result-item": {
      name: string;
      path: string;
      sha: string;
      url: string;
      git_url: string;
      html_url: string;
      repository: components["schemas"]["minimal-repository"];
      score: number;
      file_size?: number;
      language?: string | null;
      last_modified_at?: string;
      line_numbers?: string[];
      text_matches?: components["schemas"]["search-result-text-matches"];
    };
    /**
     * Commit Search Result Item
     */
    "commit-search-result-item": {
      url: string;
      sha: string;
      html_url: string;
      comments_url: string;
      commit: {
        author: { name: string; email: string; date: string };
        committer: components["schemas"]["git-user"] | null;
        comment_count: number;
        message: string;
        tree: { sha: string; url: string };
        url: string;
        verification?: components["schemas"]["verification"];
      };
      author: components["schemas"]["simple-user"] | null;
      committer: components["schemas"]["git-user"] | null;
      parents: { url?: string; html_url?: string; sha?: string }[];
      repository: components["schemas"]["minimal-repository"];
      score: number;
      node_id: string;
      text_matches?: components["schemas"]["search-result-text-matches"];
    };
    /**
     * Issue Search Result Item
     */
    "issue-search-result-item": {
      url: string;
      repository_url: string;
      labels_url: string;
      comments_url: string;
      events_url: string;
      html_url: string;
      id: number;
      node_id: string;
      number: number;
      title: string;
      locked: boolean;
      active_lock_reason?: string | null;
      assignees?: components["schemas"]["simple-user"][] | null;
      user: components["schemas"]["simple-user"] | null;
      labels: {
        id?: number;
        node_id?: string;
        url?: string;
        name?: string;
        color?: string;
        default?: boolean;
        description?: string | null;
      }[];
      state: string;
      assignee: components["schemas"]["simple-user"] | null;
      milestone: components["schemas"]["milestone"] | null;
      comments: number;
      created_at: string;
      updated_at: string;
      closed_at: string | null;
      text_matches?: components["schemas"]["search-result-text-matches"];
      pull_request?: {
        merged_at?: string | null;
        diff_url: string | null;
        html_url: string | null;
        patch_url: string | null;
        url: string | null;
      };
      body?: string;
      score: number;
      author_association: string;
      draft?: boolean;
      repository?: components["schemas"]["repository"];
      body_html?: string;
      body_text?: string;
      timeline_url?: string;
      performed_via_github_app?: components["schemas"]["integration"] | null;
    };
    /**
     * Label Search Result Item
     */
    "label-search-result-item": {
      id: number;
      node_id: string;
      url: string;
      name: string;
      color: string;
      default: boolean;
      description: string | null;
      score: number;
      text_matches?: components["schemas"]["search-result-text-matches"];
    };
    /**
     * Repo Search Result Item
     */
    "repo-search-result-item": {
      id: number;
      node_id: string;
      name: string;
      full_name: string;
      owner: components["schemas"]["simple-user"] | null;
      private: boolean;
      html_url: string;
      description: string | null;
      fork: boolean;
      url: string;
      created_at: string;
      updated_at: string;
      pushed_at: string;
      homepage: string | null;
      size: number;
      stargazers_count: number;
      watchers_count: number;
      language: string | null;
      forks_count: number;
      open_issues_count: number;
      master_branch?: string;
      default_branch: string;
      score: number;
      forks_url: string;
      keys_url: string;
      collaborators_url: string;
      teams_url: string;
      hooks_url: string;
      issue_events_url: string;
      events_url: string;
      assignees_url: string;
      branches_url: string;
      tags_url: string;
      blobs_url: string;
      git_tags_url: string;
      git_refs_url: string;
      trees_url: string;
      statuses_url: string;
      languages_url: string;
      stargazers_url: string;
      contributors_url: string;
      subscribers_url: string;
      subscription_url: string;
      commits_url: string;
      git_commits_url: string;
      comments_url: string;
      issue_comment_url: string;
      contents_url: string;
      compare_url: string;
      merges_url: string;
      archive_url: string;
      downloads_url: string;
      issues_url: string;
      pulls_url: string;
      milestones_url: string;
      notifications_url: string;
      labels_url: string;
      releases_url: string;
      deployments_url: string;
      git_url: string;
      ssh_url: string;
      clone_url: string;
      svn_url: string;
      forks: number;
      open_issues: number;
      watchers: number;
      topics?: string[];
      mirror_url: string | null;
      has_issues: boolean;
      has_projects: boolean;
      has_pages: boolean;
      has_wiki: boolean;
      has_downloads: boolean;
      archived: boolean;
      /**
       * Returns whether or not this repository disabled.
       */
      disabled: boolean;
      license: components["schemas"]["license-simple"] | null;
      permissions?: { admin: boolean; pull: boolean; push: boolean };
      text_matches?: components["schemas"]["search-result-text-matches"];
      temp_clone_token?: string;
      allow_merge_commit?: boolean;
      allow_squash_merge?: boolean;
      allow_rebase_merge?: boolean;
      delete_branch_on_merge?: boolean;
    };
    /**
     * Topic Search Result Item
     */
    "topic-search-result-item": {
      name: string;
      display_name: string | null;
      short_description: string | null;
      description: string | null;
      created_by: string | null;
      released: string | null;
      created_at: string;
      updated_at: string;
      featured: boolean;
      curated: boolean;
      score: number;
      repository_count?: number | null;
      logo_url?: string | null;
      text_matches?: components["schemas"]["search-result-text-matches"];
      related?:
        | {
            topic_relation?: {
              id?: number;
              name?: string;
              topic_id?: number;
              relation_type?: string;
            };
          }[]
        | null;
      aliases?:
        | {
            topic_relation?: {
              id?: number;
              name?: string;
              topic_id?: number;
              relation_type?: string;
            };
          }[]
        | null;
    };
    /**
     * User Search Result Item
     */
    "user-search-result-item": {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string | null;
      url: string;
      html_url: string;
      followers_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      received_events_url: string;
      type: string;
      score: number;
      following_url: string;
      gists_url: string;
      starred_url: string;
      events_url: string;
      public_repos?: number;
      public_gists?: number;
      followers?: number;
      following?: number;
      created_at?: string;
      updated_at?: string;
      name?: string | null;
      bio?: string | null;
      email?: string | null;
      location?: string | null;
      site_admin: boolean;
      hireable?: boolean | null;
      text_matches?: components["schemas"]["search-result-text-matches"];
      blog?: string | null;
      company?: string | null;
      suspended_at?: string | null;
    };
    /**
     * Private User
     */
    "private-user": {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string | null;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
      name: string | null;
      company: string | null;
      blog: string | null;
      location: string | null;
      email: string | null;
      hireable: boolean | null;
      bio: string | null;
      twitter_username?: string | null;
      public_repos: number;
      public_gists: number;
      followers: number;
      following: number;
      created_at: string;
      updated_at: string;
      private_gists: number;
      total_private_repos: number;
      owned_private_repos: number;
      disk_usage: number;
      collaborators: number;
      two_factor_authentication: boolean;
      plan?: {
        collaborators: number;
        name: string;
        space: number;
        private_repos: number;
      };
      suspended_at?: string | null;
      business_plus?: boolean;
      ldap_dn?: string;
    };
    /**
     * Public User
     */
    "public-user": {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string | null;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
      name: string | null;
      company: string | null;
      blog: string | null;
      location: string | null;
      email: string | null;
      hireable: boolean | null;
      bio: string | null;
      twitter_username?: string | null;
      public_repos: number;
      public_gists: number;
      followers: number;
      following: number;
      created_at: string;
      updated_at: string;
      plan?: {
        collaborators: number;
        name: string;
        space: number;
        private_repos: number;
      };
      suspended_at?: string | null;
      private_gists?: number;
      total_private_repos?: number;
      owned_private_repos?: number;
      disk_usage?: number;
      collaborators?: number;
    };
    /**
     * Email
     */
    email:
      | {
          email: string;
          primary: boolean;
          verified: boolean;
          visibility: string | null;
        }
      | string;
    /**
     * A unique encryption key
     */
    "gpg-key": {
      id: number;
      primary_key_id: number | null;
      key_id: string;
      public_key: string;
      emails: { email?: string; verified?: boolean }[];
      subkeys: {
        id?: number;
        primary_key_id?: number;
        key_id?: string;
        public_key?: string;
        emails?: { [key: string]: any }[];
        subkeys?: { [key: string]: any }[];
        can_sign?: boolean;
        can_encrypt_comms?: boolean;
        can_encrypt_storage?: boolean;
        can_certify?: boolean;
        created_at?: string;
        expires_at?: string | null;
        raw_key?: string | null;
      }[];
      can_sign: boolean;
      can_encrypt_comms: boolean;
      can_encrypt_storage: boolean;
      can_certify: boolean;
      created_at: string;
      expires_at: string | null;
      raw_key: string | null;
    };
    /**
     * Key
     */
    key: {
      key_id?: string;
      key?: string;
      id?: number;
      url?: string;
      title?: string;
      created_at?: string;
      verified?: boolean;
      read_only?: boolean;
    };
    "marketplace-account": {
      url: string;
      id: number;
      type: string;
      node_id?: string;
      login: string;
      email?: string | null;
      organization_billing_email?: string | null;
    };
    /**
     * User Marketplace Purchase
     */
    "user-marketplace-purchase": {
      billing_cycle: string;
      next_billing_date: string | null;
      unit_count: number | null;
      on_free_trial: boolean;
      free_trial_ends_on: string | null;
      updated_at: string | null;
      account: components["schemas"]["marketplace-account"];
      plan: components["schemas"]["marketplace-listing-plan"];
    };
    /**
     * Starred Repository
     */
    "starred-repository": {
      starred_at: string;
      repo: components["schemas"]["repository"];
    };
    /**
     * Hovercard
     */
    hovercard: { contexts: { message: string; octicon: string }[] };
    /**
     * Key Simple
     */
    "key-simple": { id: number; key: string };
  };
  responses: {
    /**
     * Resource Not Found
     */
    not_found: { [key: string]: any };
    /**
     * Validation Failed
     */
    validation_failed_simple: { [key: string]: any };
    /**
     * Preview Header Missing
     */
    preview_header_missing: { [key: string]: any };
    /**
     * Forbidden
     */
    forbidden: { [key: string]: any };
    /**
     * Requires Authentication
     */
    requires_authentication: { [key: string]: any };
    /**
     * Validation Failed
     */
    validation_failed: { [key: string]: any };
    /**
     * Not Modified
     */
    not_modified: { [key: string]: any };
    /**
     * Gone
     */
    gone: { [key: string]: any };
    /**
     * Service Unavailable
     */
    service_unavailable: { [key: string]: any };
    /**
     * Forbidden Gist
     */
    forbidden_gist: { [key: string]: any };
    /**
     * Moved Permanently
     */
    moved_permanently: { [key: string]: any };
    /**
     * Conflict
     */
    conflict: { [key: string]: any };
    /**
     * Internal Error
     */
    internal_error: { [key: string]: any };
    /**
     * Bad Request
     */
    bad_request: { [key: string]: any };
    /**
     * Found
     */
    found: { [key: string]: any };
    /**
     * Resource Not Found
     */
    scim_not_found: { [key: string]: any };
    /**
     * Forbidden
     */
    scim_forbidden: { [key: string]: any };
    /**
     * Bad Request
     */
    scim_bad_request: { [key: string]: any };
    /**
     * Internal Error
     */
    scim_internal_error: { [key: string]: any };
    /**
     * Conflict
     */
    scim_conflict: { [key: string]: any };
  };
}
